
G:\Repository\Git\TrueStudio\STM32F429\STM32F429(LAN+RTOS+MPU6050)\Debug\STM32F429Demo(LAN+RTOS+MPU6050).elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce24  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a60  0800cfd4  0800cfd4  0001cfd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800da34  0800da34  0001da34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800da3c  0800da3c  0001da3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800da40  0800da40  0001da40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a8  20000000  0800da44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000200a8  2**0
                  CONTENTS
  8 .bss          0000ad0c  200000a8  200000a8  000200a8  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000adb4  2000adb4  000200a8  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 11 .debug_info   00055dd1  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00009318  00000000  00000000  00075ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001dc39  00000000  00000000  0007f1c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002180  00000000  00000000  0009ce00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002648  00000000  00000000  0009ef80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00014d95  00000000  00000000  000a15c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000a568  00000000  00000000  000b635d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000c08c5  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000069d8  00000000  00000000  000c0944  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         0000009c  00000000  00000000  000c731c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000014d  00000000  00000000  000c73b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cfbc 	.word	0x0800cfbc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	0800cfbc 	.word	0x0800cfbc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b97a 	b.w	80005ac <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	468c      	mov	ip, r1
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	9e08      	ldr	r6, [sp, #32]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d151      	bne.n	8000384 <__udivmoddi4+0xb4>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d96d      	bls.n	80003c2 <__udivmoddi4+0xf2>
 80002e6:	fab2 fe82 	clz	lr, r2
 80002ea:	f1be 0f00 	cmp.w	lr, #0
 80002ee:	d00b      	beq.n	8000308 <__udivmoddi4+0x38>
 80002f0:	f1ce 0c20 	rsb	ip, lr, #32
 80002f4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000300:	ea4c 0c05 	orr.w	ip, ip, r5
 8000304:	fa00 f40e 	lsl.w	r4, r0, lr
 8000308:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800030c:	0c25      	lsrs	r5, r4, #16
 800030e:	fbbc f8fa 	udiv	r8, ip, sl
 8000312:	fa1f f987 	uxth.w	r9, r7
 8000316:	fb0a cc18 	mls	ip, sl, r8, ip
 800031a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800031e:	fb08 f309 	mul.w	r3, r8, r9
 8000322:	42ab      	cmp	r3, r5
 8000324:	d90a      	bls.n	800033c <__udivmoddi4+0x6c>
 8000326:	19ed      	adds	r5, r5, r7
 8000328:	f108 32ff 	add.w	r2, r8, #4294967295
 800032c:	f080 8123 	bcs.w	8000576 <__udivmoddi4+0x2a6>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f240 8120 	bls.w	8000576 <__udivmoddi4+0x2a6>
 8000336:	f1a8 0802 	sub.w	r8, r8, #2
 800033a:	443d      	add	r5, r7
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb5 f0fa 	udiv	r0, r5, sl
 8000344:	fb0a 5510 	mls	r5, sl, r0, r5
 8000348:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034c:	fb00 f909 	mul.w	r9, r0, r9
 8000350:	45a1      	cmp	r9, r4
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x98>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	f080 810a 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800035e:	45a1      	cmp	r9, r4
 8000360:	f240 8107 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000364:	3802      	subs	r0, #2
 8000366:	443c      	add	r4, r7
 8000368:	eba4 0409 	sub.w	r4, r4, r9
 800036c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000370:	2100      	movs	r1, #0
 8000372:	2e00      	cmp	r6, #0
 8000374:	d061      	beq.n	800043a <__udivmoddi4+0x16a>
 8000376:	fa24 f40e 	lsr.w	r4, r4, lr
 800037a:	2300      	movs	r3, #0
 800037c:	6034      	str	r4, [r6, #0]
 800037e:	6073      	str	r3, [r6, #4]
 8000380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000384:	428b      	cmp	r3, r1
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0xc8>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d054      	beq.n	8000436 <__udivmoddi4+0x166>
 800038c:	2100      	movs	r1, #0
 800038e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	f040 808e 	bne.w	80004be <__udivmoddi4+0x1ee>
 80003a2:	42ab      	cmp	r3, r5
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xdc>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f200 80fa 	bhi.w	80005a0 <__udivmoddi4+0x2d0>
 80003ac:	1a84      	subs	r4, r0, r2
 80003ae:	eb65 0503 	sbc.w	r5, r5, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	46ac      	mov	ip, r5
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d03f      	beq.n	800043a <__udivmoddi4+0x16a>
 80003ba:	e886 1010 	stmia.w	r6, {r4, ip}
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b912      	cbnz	r2, 80003ca <__udivmoddi4+0xfa>
 80003c4:	2701      	movs	r7, #1
 80003c6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ca:	fab7 fe87 	clz	lr, r7
 80003ce:	f1be 0f00 	cmp.w	lr, #0
 80003d2:	d134      	bne.n	800043e <__udivmoddi4+0x16e>
 80003d4:	1beb      	subs	r3, r5, r7
 80003d6:	0c3a      	lsrs	r2, r7, #16
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	2101      	movs	r1, #1
 80003de:	fbb3 f8f2 	udiv	r8, r3, r2
 80003e2:	0c25      	lsrs	r5, r4, #16
 80003e4:	fb02 3318 	mls	r3, r2, r8, r3
 80003e8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ec:	fb0c f308 	mul.w	r3, ip, r8
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x134>
 80003f4:	19ed      	adds	r5, r5, r7
 80003f6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x132>
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	f200 80d1 	bhi.w	80005a4 <__udivmoddi4+0x2d4>
 8000402:	4680      	mov	r8, r0
 8000404:	1aed      	subs	r5, r5, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb5 f0f2 	udiv	r0, r5, r2
 800040c:	fb02 5510 	mls	r5, r2, r0, r5
 8000410:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000414:	fb0c fc00 	mul.w	ip, ip, r0
 8000418:	45a4      	cmp	ip, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x15c>
 800041c:	19e4      	adds	r4, r4, r7
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x15a>
 8000424:	45a4      	cmp	ip, r4
 8000426:	f200 80b8 	bhi.w	800059a <__udivmoddi4+0x2ca>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 040c 	sub.w	r4, r4, ip
 8000430:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000434:	e79d      	b.n	8000372 <__udivmoddi4+0xa2>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1ce 0420 	rsb	r4, lr, #32
 8000442:	fa05 f30e 	lsl.w	r3, r5, lr
 8000446:	fa07 f70e 	lsl.w	r7, r7, lr
 800044a:	fa20 f804 	lsr.w	r8, r0, r4
 800044e:	0c3a      	lsrs	r2, r7, #16
 8000450:	fa25 f404 	lsr.w	r4, r5, r4
 8000454:	ea48 0803 	orr.w	r8, r8, r3
 8000458:	fbb4 f1f2 	udiv	r1, r4, r2
 800045c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000460:	fb02 4411 	mls	r4, r2, r1, r4
 8000464:	fa1f fc87 	uxth.w	ip, r7
 8000468:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800046c:	fb01 f30c 	mul.w	r3, r1, ip
 8000470:	42ab      	cmp	r3, r5
 8000472:	fa00 f40e 	lsl.w	r4, r0, lr
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x1bc>
 8000478:	19ed      	adds	r5, r5, r7
 800047a:	f101 30ff 	add.w	r0, r1, #4294967295
 800047e:	f080 808a 	bcs.w	8000596 <__udivmoddi4+0x2c6>
 8000482:	42ab      	cmp	r3, r5
 8000484:	f240 8087 	bls.w	8000596 <__udivmoddi4+0x2c6>
 8000488:	3902      	subs	r1, #2
 800048a:	443d      	add	r5, r7
 800048c:	1aeb      	subs	r3, r5, r3
 800048e:	fa1f f588 	uxth.w	r5, r8
 8000492:	fbb3 f0f2 	udiv	r0, r3, r2
 8000496:	fb02 3310 	mls	r3, r2, r0, r3
 800049a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800049e:	fb00 f30c 	mul.w	r3, r0, ip
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x1e6>
 80004a6:	19ed      	adds	r5, r5, r7
 80004a8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ac:	d26f      	bcs.n	800058e <__udivmoddi4+0x2be>
 80004ae:	42ab      	cmp	r3, r5
 80004b0:	d96d      	bls.n	800058e <__udivmoddi4+0x2be>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443d      	add	r5, r7
 80004b6:	1aeb      	subs	r3, r5, r3
 80004b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004bc:	e78f      	b.n	80003de <__udivmoddi4+0x10e>
 80004be:	f1c1 0720 	rsb	r7, r1, #32
 80004c2:	fa22 f807 	lsr.w	r8, r2, r7
 80004c6:	408b      	lsls	r3, r1
 80004c8:	fa05 f401 	lsl.w	r4, r5, r1
 80004cc:	ea48 0303 	orr.w	r3, r8, r3
 80004d0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004d4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004d8:	40fd      	lsrs	r5, r7
 80004da:	ea4e 0e04 	orr.w	lr, lr, r4
 80004de:	fbb5 f9fc 	udiv	r9, r5, ip
 80004e2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004e6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ea:	fa1f f883 	uxth.w	r8, r3
 80004ee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004f2:	fb09 f408 	mul.w	r4, r9, r8
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	fa02 f201 	lsl.w	r2, r2, r1
 80004fc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x244>
 8000502:	18ed      	adds	r5, r5, r3
 8000504:	f109 30ff 	add.w	r0, r9, #4294967295
 8000508:	d243      	bcs.n	8000592 <__udivmoddi4+0x2c2>
 800050a:	42ac      	cmp	r4, r5
 800050c:	d941      	bls.n	8000592 <__udivmoddi4+0x2c2>
 800050e:	f1a9 0902 	sub.w	r9, r9, #2
 8000512:	441d      	add	r5, r3
 8000514:	1b2d      	subs	r5, r5, r4
 8000516:	fa1f fe8e 	uxth.w	lr, lr
 800051a:	fbb5 f0fc 	udiv	r0, r5, ip
 800051e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000522:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000526:	fb00 f808 	mul.w	r8, r0, r8
 800052a:	45a0      	cmp	r8, r4
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x26e>
 800052e:	18e4      	adds	r4, r4, r3
 8000530:	f100 35ff 	add.w	r5, r0, #4294967295
 8000534:	d229      	bcs.n	800058a <__udivmoddi4+0x2ba>
 8000536:	45a0      	cmp	r8, r4
 8000538:	d927      	bls.n	800058a <__udivmoddi4+0x2ba>
 800053a:	3802      	subs	r0, #2
 800053c:	441c      	add	r4, r3
 800053e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000542:	eba4 0408 	sub.w	r4, r4, r8
 8000546:	fba0 8902 	umull	r8, r9, r0, r2
 800054a:	454c      	cmp	r4, r9
 800054c:	46c6      	mov	lr, r8
 800054e:	464d      	mov	r5, r9
 8000550:	d315      	bcc.n	800057e <__udivmoddi4+0x2ae>
 8000552:	d012      	beq.n	800057a <__udivmoddi4+0x2aa>
 8000554:	b156      	cbz	r6, 800056c <__udivmoddi4+0x29c>
 8000556:	ebba 030e 	subs.w	r3, sl, lr
 800055a:	eb64 0405 	sbc.w	r4, r4, r5
 800055e:	fa04 f707 	lsl.w	r7, r4, r7
 8000562:	40cb      	lsrs	r3, r1
 8000564:	431f      	orrs	r7, r3
 8000566:	40cc      	lsrs	r4, r1
 8000568:	6037      	str	r7, [r6, #0]
 800056a:	6074      	str	r4, [r6, #4]
 800056c:	2100      	movs	r1, #0
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	4618      	mov	r0, r3
 8000574:	e6f8      	b.n	8000368 <__udivmoddi4+0x98>
 8000576:	4690      	mov	r8, r2
 8000578:	e6e0      	b.n	800033c <__udivmoddi4+0x6c>
 800057a:	45c2      	cmp	sl, r8
 800057c:	d2ea      	bcs.n	8000554 <__udivmoddi4+0x284>
 800057e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000582:	eb69 0503 	sbc.w	r5, r9, r3
 8000586:	3801      	subs	r0, #1
 8000588:	e7e4      	b.n	8000554 <__udivmoddi4+0x284>
 800058a:	4628      	mov	r0, r5
 800058c:	e7d7      	b.n	800053e <__udivmoddi4+0x26e>
 800058e:	4640      	mov	r0, r8
 8000590:	e791      	b.n	80004b6 <__udivmoddi4+0x1e6>
 8000592:	4681      	mov	r9, r0
 8000594:	e7be      	b.n	8000514 <__udivmoddi4+0x244>
 8000596:	4601      	mov	r1, r0
 8000598:	e778      	b.n	800048c <__udivmoddi4+0x1bc>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e745      	b.n	800042c <__udivmoddi4+0x15c>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e708      	b.n	80003b6 <__udivmoddi4+0xe6>
 80005a4:	f1a8 0802 	sub.w	r8, r8, #2
 80005a8:	443d      	add	r5, r7
 80005aa:	e72b      	b.n	8000404 <__udivmoddi4+0x134>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <HAL_Init+0x30>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005ba:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005c2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005ca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005cc:	2003      	movs	r0, #3
 80005ce:	f000 f825 	bl	800061c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005d2:	2005      	movs	r0, #5
 80005d4:	f00b f9a6 	bl	800b924 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80005d8:	f00b f974 	bl	800b8c4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80005dc:	2000      	movs	r0, #0
 80005de:	bd08      	pop	{r3, pc}
 80005e0:	40023c00 	.word	0x40023c00

080005e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80005e4:	4a02      	ldr	r2, [pc, #8]	; (80005f0 <HAL_IncTick+0xc>)
 80005e6:	6813      	ldr	r3, [r2, #0]
 80005e8:	3301      	adds	r3, #1
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20004014 	.word	0x20004014

080005f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005f4:	4b01      	ldr	r3, [pc, #4]	; (80005fc <HAL_GetTick+0x8>)
 80005f6:	6818      	ldr	r0, [r3, #0]
}
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20004014 	.word	0x20004014

08000600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000600:	b510      	push	{r4, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 8000606:	f7ff fff5 	bl	80005f4 <HAL_GetTick>
 800060a:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800060c:	f7ff fff2 	bl	80005f4 <HAL_GetTick>
 8000610:	1b00      	subs	r0, r0, r4
 8000612:	9b01      	ldr	r3, [sp, #4]
 8000614:	4298      	cmp	r0, r3
 8000616:	d3f9      	bcc.n	800060c <HAL_Delay+0xc>
  {
  }
}
 8000618:	b002      	add	sp, #8
 800061a:	bd10      	pop	{r4, pc}

0800061c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800061c:	4a07      	ldr	r2, [pc, #28]	; (800063c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800061e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000620:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000624:	041b      	lsls	r3, r3, #16
 8000626:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000628:	0200      	lsls	r0, r0, #8
 800062a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800062e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000630:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000634:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000638:	60d0      	str	r0, [r2, #12]
 800063a:	4770      	bx	lr
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000640:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000642:	4b16      	ldr	r3, [pc, #88]	; (800069c <HAL_NVIC_SetPriority+0x5c>)
 8000644:	68db      	ldr	r3, [r3, #12]
 8000646:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800064a:	f1c3 0407 	rsb	r4, r3, #7
 800064e:	2c04      	cmp	r4, #4
 8000650:	bf28      	it	cs
 8000652:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000654:	1d1d      	adds	r5, r3, #4
 8000656:	2d06      	cmp	r5, #6
 8000658:	d917      	bls.n	800068a <HAL_NVIC_SetPriority+0x4a>
 800065a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800065c:	2501      	movs	r5, #1
 800065e:	fa05 f404 	lsl.w	r4, r5, r4
 8000662:	3c01      	subs	r4, #1
 8000664:	4021      	ands	r1, r4
 8000666:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000668:	fa05 f303 	lsl.w	r3, r5, r3
 800066c:	3b01      	subs	r3, #1
 800066e:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000670:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000672:	2800      	cmp	r0, #0
 8000674:	db0b      	blt.n	800068e <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000676:	0109      	lsls	r1, r1, #4
 8000678:	b2c9      	uxtb	r1, r1
 800067a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800067e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000682:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000686:	bc30      	pop	{r4, r5}
 8000688:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800068a:	2300      	movs	r3, #0
 800068c:	e7e6      	b.n	800065c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068e:	f000 000f 	and.w	r0, r0, #15
 8000692:	0109      	lsls	r1, r1, #4
 8000694:	b2c9      	uxtb	r1, r1
 8000696:	4b02      	ldr	r3, [pc, #8]	; (80006a0 <HAL_NVIC_SetPriority+0x60>)
 8000698:	5419      	strb	r1, [r3, r0]
 800069a:	e7f4      	b.n	8000686 <HAL_NVIC_SetPriority+0x46>
 800069c:	e000ed00 	.word	0xe000ed00
 80006a0:	e000ed14 	.word	0xe000ed14

080006a4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006a4:	0942      	lsrs	r2, r0, #5
 80006a6:	f000 001f 	and.w	r0, r0, #31
 80006aa:	2301      	movs	r3, #1
 80006ac:	fa03 f000 	lsl.w	r0, r3, r0
 80006b0:	4b01      	ldr	r3, [pc, #4]	; (80006b8 <HAL_NVIC_EnableIRQ+0x14>)
 80006b2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006b6:	4770      	bx	lr
 80006b8:	e000e100 	.word	0xe000e100

080006bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006bc:	3801      	subs	r0, #1
 80006be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006c2:	d20a      	bcs.n	80006da <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <HAL_SYSTICK_Config+0x24>)
 80006c6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c8:	21f0      	movs	r1, #240	; 0xf0
 80006ca:	4a06      	ldr	r2, [pc, #24]	; (80006e4 <HAL_SYSTICK_Config+0x28>)
 80006cc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006d0:	2000      	movs	r0, #0
 80006d2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006d4:	2207      	movs	r2, #7
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006da:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	e000e010 	.word	0xe000e010
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80006e8:	2804      	cmp	r0, #4
 80006ea:	d005      	beq.n	80006f8 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80006ec:	4a05      	ldr	r2, [pc, #20]	; (8000704 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80006ee:	6813      	ldr	r3, [r2, #0]
 80006f0:	f023 0304 	bic.w	r3, r3, #4
 80006f4:	6013      	str	r3, [r2, #0]
 80006f6:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006f8:	4a02      	ldr	r2, [pc, #8]	; (8000704 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80006fa:	6813      	ldr	r3, [r2, #0]
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	6013      	str	r3, [r2, #0]
 8000702:	4770      	bx	lr
 8000704:	e000e010 	.word	0xe000e010

08000708 <ETH_MACAddressConfig>:
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8000708:	7950      	ldrb	r0, [r2, #5]
 800070a:	7913      	ldrb	r3, [r2, #4]
 800070c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8000710:	4807      	ldr	r0, [pc, #28]	; (8000730 <ETH_MACAddressConfig+0x28>)
 8000712:	500b      	str	r3, [r1, r0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8000714:	78d0      	ldrb	r0, [r2, #3]
 8000716:	7893      	ldrb	r3, [r2, #2]
 8000718:	041b      	lsls	r3, r3, #16
 800071a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800071e:	7850      	ldrb	r0, [r2, #1]
 8000720:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8000724:	7812      	ldrb	r2, [r2, #0]
 8000726:	4313      	orrs	r3, r2
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8000728:	4a02      	ldr	r2, [pc, #8]	; (8000734 <ETH_MACAddressConfig+0x2c>)
 800072a:	508b      	str	r3, [r1, r2]
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40028040 	.word	0x40028040
 8000734:	40028044 	.word	0x40028044

08000738 <ETH_DMATransmissionEnable>:
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000738:	6801      	ldr	r1, [r0, #0]
 800073a:	f241 0218 	movw	r2, #4120	; 0x1018
 800073e:	588b      	ldr	r3, [r1, r2]
 8000740:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000744:	508b      	str	r3, [r1, r2]
 8000746:	4770      	bx	lr

08000748 <ETH_DMATransmissionDisable>:
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8000748:	6801      	ldr	r1, [r0, #0]
 800074a:	f241 0218 	movw	r2, #4120	; 0x1018
 800074e:	588b      	ldr	r3, [r1, r2]
 8000750:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000754:	508b      	str	r3, [r1, r2]
 8000756:	4770      	bx	lr

08000758 <ETH_DMAReceptionEnable>:
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000758:	6801      	ldr	r1, [r0, #0]
 800075a:	f241 0218 	movw	r2, #4120	; 0x1018
 800075e:	588b      	ldr	r3, [r1, r2]
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	508b      	str	r3, [r1, r2]
 8000766:	4770      	bx	lr

08000768 <ETH_DMAReceptionDisable>:
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8000768:	6801      	ldr	r1, [r0, #0]
 800076a:	f241 0218 	movw	r2, #4120	; 0x1018
 800076e:	588b      	ldr	r3, [r1, r2]
 8000770:	f023 0302 	bic.w	r3, r3, #2
 8000774:	508b      	str	r3, [r1, r2]
 8000776:	4770      	bx	lr

08000778 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8000778:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8 / 1000);
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <ETH_Delay+0x24>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <ETH_Delay+0x28>)
 8000780:	fba2 2303 	umull	r2, r3, r2, r3
 8000784:	0a5b      	lsrs	r3, r3, #9
 8000786:	fb00 f003 	mul.w	r0, r0, r3
 800078a:	9001      	str	r0, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800078c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800078e:	9b01      	ldr	r3, [sp, #4]
 8000790:	1e5a      	subs	r2, r3, #1
 8000792:	9201      	str	r2, [sp, #4]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1f9      	bne.n	800078c <ETH_Delay+0x14>
}
 8000798:	b002      	add	sp, #8
 800079a:	4770      	bx	lr
 800079c:	20000040 	.word	0x20000040
 80007a0:	10624dd3 	.word	0x10624dd3

080007a4 <ETH_MACTransmissionEnable>:
{ 
 80007a4:	b510      	push	{r4, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 80007aa:	2300      	movs	r3, #0
 80007ac:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80007ae:	6802      	ldr	r2, [r0, #0]
 80007b0:	6813      	ldr	r3, [r2, #0]
 80007b2:	f043 0308 	orr.w	r3, r3, #8
 80007b6:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 80007b8:	6803      	ldr	r3, [r0, #0]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80007be:	2001      	movs	r0, #1
 80007c0:	f7ff ffda 	bl	8000778 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80007c4:	6823      	ldr	r3, [r4, #0]
 80007c6:	9a01      	ldr	r2, [sp, #4]
 80007c8:	601a      	str	r2, [r3, #0]
}
 80007ca:	b002      	add	sp, #8
 80007cc:	bd10      	pop	{r4, pc}

080007ce <ETH_MACReceptionEnable>:
{ 
 80007ce:	b510      	push	{r4, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 80007d4:	2300      	movs	r3, #0
 80007d6:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80007d8:	6802      	ldr	r2, [r0, #0]
 80007da:	6813      	ldr	r3, [r2, #0]
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 80007e2:	6803      	ldr	r3, [r0, #0]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80007e8:	2001      	movs	r0, #1
 80007ea:	f7ff ffc5 	bl	8000778 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80007ee:	6823      	ldr	r3, [r4, #0]
 80007f0:	9a01      	ldr	r2, [sp, #4]
 80007f2:	601a      	str	r2, [r3, #0]
}
 80007f4:	b002      	add	sp, #8
 80007f6:	bd10      	pop	{r4, pc}

080007f8 <ETH_FlushTransmitFIFO>:
{
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	b083      	sub	sp, #12
 80007fc:	4605      	mov	r5, r0
  __IO uint32_t tmpreg1 = 0U;
 80007fe:	2300      	movs	r3, #0
 8000800:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000802:	6802      	ldr	r2, [r0, #0]
 8000804:	f241 0418 	movw	r4, #4120	; 0x1018
 8000808:	5913      	ldr	r3, [r2, r4]
 800080a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800080e:	5113      	str	r3, [r2, r4]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8000810:	6803      	ldr	r3, [r0, #0]
 8000812:	591b      	ldr	r3, [r3, r4]
 8000814:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000816:	2001      	movs	r0, #1
 8000818:	f7ff ffae 	bl	8000778 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800081c:	682b      	ldr	r3, [r5, #0]
 800081e:	9a01      	ldr	r2, [sp, #4]
 8000820:	511a      	str	r2, [r3, r4]
}
 8000822:	b003      	add	sp, #12
 8000824:	bd30      	pop	{r4, r5, pc}

08000826 <ETH_MACReceptionDisable>:
{ 
 8000826:	b510      	push	{r4, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 800082c:	2300      	movs	r3, #0
 800082e:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8000830:	6802      	ldr	r2, [r0, #0]
 8000832:	6813      	ldr	r3, [r2, #0]
 8000834:	f023 0304 	bic.w	r3, r3, #4
 8000838:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 800083a:	6803      	ldr	r3, [r0, #0]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000840:	2001      	movs	r0, #1
 8000842:	f7ff ff99 	bl	8000778 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8000846:	6823      	ldr	r3, [r4, #0]
 8000848:	9a01      	ldr	r2, [sp, #4]
 800084a:	601a      	str	r2, [r3, #0]
}
 800084c:	b002      	add	sp, #8
 800084e:	bd10      	pop	{r4, pc}

08000850 <ETH_MACTransmissionDisable>:
{ 
 8000850:	b510      	push	{r4, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8000856:	2300      	movs	r3, #0
 8000858:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800085a:	6802      	ldr	r2, [r0, #0]
 800085c:	6813      	ldr	r3, [r2, #0]
 800085e:	f023 0308 	bic.w	r3, r3, #8
 8000862:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000864:	6803      	ldr	r3, [r0, #0]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800086a:	2001      	movs	r0, #1
 800086c:	f7ff ff84 	bl	8000778 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8000870:	6823      	ldr	r3, [r4, #0]
 8000872:	9a01      	ldr	r2, [sp, #4]
 8000874:	601a      	str	r2, [r3, #0]
}
 8000876:	b002      	add	sp, #8
 8000878:	bd10      	pop	{r4, pc}
	...

0800087c <ETH_MACDMAConfig>:
{
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	b09e      	sub	sp, #120	; 0x78
 8000880:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000882:	b129      	cbz	r1, 8000890 <ETH_MACDMAConfig+0x14>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000884:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000888:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 800088a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800088e:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000890:	69e3      	ldr	r3, [r4, #28]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d16a      	bne.n	800096c <ETH_MACDMAConfig+0xf0>
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8000896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089a:	9307      	str	r3, [sp, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 800089c:	6821      	ldr	r1, [r4, #0]
 800089e:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80008a0:	4a39      	ldr	r2, [pc, #228]	; (8000988 <ETH_MACDMAConfig+0x10c>)
 80008a2:	401a      	ands	r2, r3
                       (heth->Init).Speed | 
 80008a4:	68a3      	ldr	r3, [r4, #8]
                       (heth->Init).DuplexMode | 
 80008a6:	68e0      	ldr	r0, [r4, #12]
                       macinit.LoopbackMode |
 80008a8:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 80008aa:	9807      	ldr	r0, [sp, #28]
                       (heth->Init).DuplexMode | 
 80008ac:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 80008ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80008b2:	4313      	orrs	r3, r2
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80008b4:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 80008b6:	6823      	ldr	r3, [r4, #0]
 80008b8:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80008ba:	2001      	movs	r0, #1
 80008bc:	f7ff fea0 	bl	8000600 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80008c0:	6823      	ldr	r3, [r4, #0]
 80008c2:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80008c4:	6823      	ldr	r3, [r4, #0]
 80008c6:	2240      	movs	r2, #64	; 0x40
 80008c8:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 80008ca:	6823      	ldr	r3, [r4, #0]
 80008cc:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80008ce:	2001      	movs	r0, #1
 80008d0:	f7ff fe96 	bl	8000600 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80008d4:	6823      	ldr	r3, [r4, #0]
 80008d6:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80008d8:	6823      	ldr	r3, [r4, #0]
 80008da:	2500      	movs	r5, #0
 80008dc:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80008de:	6823      	ldr	r3, [r4, #0]
 80008e0:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 80008e2:	6822      	ldr	r2, [r4, #0]
 80008e4:	6993      	ldr	r3, [r2, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80008e6:	f023 03be 	bic.w	r3, r3, #190	; 0xbe
 80008ea:	041b      	lsls	r3, r3, #16
 80008ec:	0c1b      	lsrs	r3, r3, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80008ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80008f2:	6193      	str	r3, [r2, #24]
   tmpreg1 = (heth->Instance)->MACFCR;
 80008f4:	6823      	ldr	r3, [r4, #0]
 80008f6:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80008f8:	2001      	movs	r0, #1
 80008fa:	f7ff fe81 	bl	8000600 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80008fe:	6823      	ldr	r3, [r4, #0]
 8000900:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000902:	6823      	ldr	r3, [r4, #0]
 8000904:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8000906:	6823      	ldr	r3, [r4, #0]
 8000908:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800090a:	2001      	movs	r0, #1
 800090c:	f7ff fe78 	bl	8000600 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8000910:	6823      	ldr	r3, [r4, #0]
 8000912:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000914:	6822      	ldr	r2, [r4, #0]
 8000916:	f241 0518 	movw	r5, #4120	; 0x1018
 800091a:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800091c:	4b1b      	ldr	r3, [pc, #108]	; (800098c <ETH_MACDMAConfig+0x110>)
 800091e:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000920:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8000924:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8000928:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 800092a:	6823      	ldr	r3, [r4, #0]
 800092c:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800092e:	2001      	movs	r0, #1
 8000930:	f7ff fe66 	bl	8000600 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8000934:	6823      	ldr	r3, [r4, #0]
 8000936:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000938:	6823      	ldr	r3, [r4, #0]
 800093a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800093e:	4a14      	ldr	r2, [pc, #80]	; (8000990 <ETH_MACDMAConfig+0x114>)
 8000940:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 8000942:	6823      	ldr	r3, [r4, #0]
 8000944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000948:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800094a:	2001      	movs	r0, #1
 800094c:	f7ff fe58 	bl	8000600 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8000950:	6823      	ldr	r3, [r4, #0]
 8000952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000956:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000958:	69a3      	ldr	r3, [r4, #24]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d009      	beq.n	8000972 <ETH_MACDMAConfig+0xf6>
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800095e:	6962      	ldr	r2, [r4, #20]
 8000960:	2100      	movs	r1, #0
 8000962:	4620      	mov	r0, r4
 8000964:	f7ff fed0 	bl	8000708 <ETH_MACAddressConfig>
}
 8000968:	b01e      	add	sp, #120	; 0x78
 800096a:	bd70      	pop	{r4, r5, r6, pc}
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	9307      	str	r3, [sp, #28]
 8000970:	e794      	b.n	800089c <ETH_MACDMAConfig+0x20>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8000972:	6821      	ldr	r1, [r4, #0]
 8000974:	f241 021c 	movw	r2, #4124	; 0x101c
 8000978:	588b      	ldr	r3, [r1, r2]
 800097a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800097e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000982:	508b      	str	r3, [r1, r2]
 8000984:	e7eb      	b.n	800095e <ETH_MACDMAConfig+0xe2>
 8000986:	bf00      	nop
 8000988:	ff20810f 	.word	0xff20810f
 800098c:	f8de3f23 	.word	0xf8de3f23
 8000990:	02c12080 	.word	0x02c12080

08000994 <HAL_ETH_DMATxDescListInit>:
{
 8000994:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 8000996:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 800099a:	2c01      	cmp	r4, #1
 800099c:	d031      	beq.n	8000a02 <HAL_ETH_DMATxDescListInit+0x6e>
 800099e:	2401      	movs	r4, #1
 80009a0:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80009a4:	2402      	movs	r4, #2
 80009a6:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 80009aa:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0U; i < TxBuffCount; i++)
 80009ac:	2400      	movs	r4, #0
 80009ae:	e001      	b.n	80009b4 <HAL_ETH_DMATxDescListInit+0x20>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80009b0:	60f9      	str	r1, [r7, #12]
  for(i=0U; i < TxBuffCount; i++)
 80009b2:	3401      	adds	r4, #1
 80009b4:	429c      	cmp	r4, r3
 80009b6:	d217      	bcs.n	80009e8 <HAL_ETH_DMATxDescListInit+0x54>
    dmatxdesc = DMATxDescTab + i;
 80009b8:	0165      	lsls	r5, r4, #5
 80009ba:	194f      	adds	r7, r1, r5
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80009bc:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 80009c0:	514e      	str	r6, [r1, r5]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80009c2:	f240 56f4 	movw	r6, #1524	; 0x5f4
 80009c6:	fb06 2604 	mla	r6, r6, r4, r2
 80009ca:	60be      	str	r6, [r7, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80009cc:	69c6      	ldr	r6, [r0, #28]
 80009ce:	b91e      	cbnz	r6, 80009d8 <HAL_ETH_DMATxDescListInit+0x44>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80009d0:	594e      	ldr	r6, [r1, r5]
 80009d2:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 80009d6:	514e      	str	r6, [r1, r5]
    if(i < (TxBuffCount-1U))
 80009d8:	1e5d      	subs	r5, r3, #1
 80009da:	42ac      	cmp	r4, r5
 80009dc:	d2e8      	bcs.n	80009b0 <HAL_ETH_DMATxDescListInit+0x1c>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80009de:	1c65      	adds	r5, r4, #1
 80009e0:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 80009e4:	60fd      	str	r5, [r7, #12]
 80009e6:	e7e4      	b.n	80009b2 <HAL_ETH_DMATxDescListInit+0x1e>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80009e8:	6802      	ldr	r2, [r0, #0]
 80009ea:	f241 0310 	movw	r3, #4112	; 0x1010
 80009ee:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80009f0:	2301      	movs	r3, #1
 80009f2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80009f6:	2300      	movs	r3, #0
 80009f8:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80009fc:	4618      	mov	r0, r3
}
 80009fe:	bcf0      	pop	{r4, r5, r6, r7}
 8000a00:	4770      	bx	lr
  __HAL_LOCK(heth);
 8000a02:	2002      	movs	r0, #2
 8000a04:	e7fb      	b.n	80009fe <HAL_ETH_DMATxDescListInit+0x6a>

08000a06 <HAL_ETH_DMARxDescListInit>:
{
 8000a06:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 8000a08:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8000a0c:	2c01      	cmp	r4, #1
 8000a0e:	d02e      	beq.n	8000a6e <HAL_ETH_DMARxDescListInit+0x68>
 8000a10:	2401      	movs	r4, #1
 8000a12:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000a16:	2402      	movs	r4, #2
 8000a18:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 8000a1c:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0U; i < RxBuffCount; i++)
 8000a1e:	2400      	movs	r4, #0
 8000a20:	e001      	b.n	8000a26 <HAL_ETH_DMARxDescListInit+0x20>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8000a22:	60e9      	str	r1, [r5, #12]
  for(i=0U; i < RxBuffCount; i++)
 8000a24:	3401      	adds	r4, #1
 8000a26:	429c      	cmp	r4, r3
 8000a28:	d214      	bcs.n	8000a54 <HAL_ETH_DMARxDescListInit+0x4e>
    DMARxDesc = DMARxDescTab+i;
 8000a2a:	0166      	lsls	r6, r4, #5
 8000a2c:	198d      	adds	r5, r1, r6
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000a2e:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8000a32:	518f      	str	r7, [r1, r6]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000a34:	f244 56f4 	movw	r6, #17908	; 0x45f4
 8000a38:	606e      	str	r6, [r5, #4]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000a3a:	f240 56f4 	movw	r6, #1524	; 0x5f4
 8000a3e:	fb06 2604 	mla	r6, r6, r4, r2
 8000a42:	60ae      	str	r6, [r5, #8]
    if(i < (RxBuffCount-1U))
 8000a44:	1e5e      	subs	r6, r3, #1
 8000a46:	42b4      	cmp	r4, r6
 8000a48:	d2eb      	bcs.n	8000a22 <HAL_ETH_DMARxDescListInit+0x1c>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8000a4a:	1c66      	adds	r6, r4, #1
 8000a4c:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 8000a50:	60ee      	str	r6, [r5, #12]
 8000a52:	e7e7      	b.n	8000a24 <HAL_ETH_DMARxDescListInit+0x1e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8000a54:	6802      	ldr	r2, [r0, #0]
 8000a56:	f241 030c 	movw	r3, #4108	; 0x100c
 8000a5a:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000a62:	2300      	movs	r3, #0
 8000a64:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000a68:	4618      	mov	r0, r3
}
 8000a6a:	bcf0      	pop	{r4, r5, r6, r7}
 8000a6c:	4770      	bx	lr
  __HAL_LOCK(heth);
 8000a6e:	2002      	movs	r0, #2
 8000a70:	e7fb      	b.n	8000a6a <HAL_ETH_DMARxDescListInit+0x64>
	...

08000a74 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8000a74:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	f000 8087 	beq.w	8000b8c <HAL_ETH_TransmitFrame+0x118>
 8000a7e:	2301      	movs	r3, #1
 8000a80:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000a84:	2302      	movs	r3, #2
 8000a86:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 8000a8a:	b199      	cbz	r1, 8000ab4 <HAL_ETH_TransmitFrame+0x40>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000a8c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	2a00      	cmp	r2, #0
 8000a92:	db17      	blt.n	8000ac4 <HAL_ETH_TransmitFrame+0x50>
{
 8000a94:	b430      	push	{r4, r5}
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000a96:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a9a:	4291      	cmp	r1, r2
 8000a9c:	d91a      	bls.n	8000ad4 <HAL_ETH_TransmitFrame+0x60>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8000a9e:	4c3c      	ldr	r4, [pc, #240]	; (8000b90 <HAL_ETH_TransmitFrame+0x11c>)
 8000aa0:	fba4 2401 	umull	r2, r4, r4, r1
 8000aa4:	0aa4      	lsrs	r4, r4, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000aa6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000aaa:	fb02 1214 	mls	r2, r2, r4, r1
 8000aae:	b192      	cbz	r2, 8000ad6 <HAL_ETH_TransmitFrame+0x62>
      bufcount++;
 8000ab0:	3401      	adds	r4, #1
 8000ab2:	e010      	b.n	8000ad6 <HAL_ETH_TransmitFrame+0x62>
    heth->State = HAL_ETH_STATE_READY;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    return  HAL_ERROR;                                    
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000ac4:	2312      	movs	r3, #18
 8000ac6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000aca:	2300      	movs	r3, #0
 8000acc:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    return HAL_ERROR;
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	4770      	bx	lr
    bufcount = 1U;
 8000ad4:	2401      	movs	r4, #1
  if (bufcount == 1U)
 8000ad6:	2c01      	cmp	r4, #1
 8000ad8:	d001      	beq.n	8000ade <HAL_ETH_TransmitFrame+0x6a>
 8000ada:	2300      	movs	r3, #0
 8000adc:	e037      	b.n	8000b4e <HAL_ETH_TransmitFrame+0xda>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8000ae4:	601a      	str	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000ae6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000ae8:	f3c1 010c 	ubfx	r1, r1, #0, #13
 8000aec:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000aee:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000af0:	6813      	ldr	r3, [r2, #0]
 8000af2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af6:	6013      	str	r3, [r2, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000af8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000afe:	6803      	ldr	r3, [r0, #0]
 8000b00:	f241 0214 	movw	r2, #4116	; 0x1014
 8000b04:	589a      	ldr	r2, [r3, r2]
 8000b06:	f012 0f04 	tst.w	r2, #4
 8000b0a:	d008      	beq.n	8000b1e <HAL_ETH_TransmitFrame+0xaa>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000b0c:	2104      	movs	r1, #4
 8000b0e:	f241 0214 	movw	r2, #4116	; 0x1014
 8000b12:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 8000b14:	6802      	ldr	r2, [r0, #0]
 8000b16:	2100      	movs	r1, #0
 8000b18:	f241 0304 	movw	r3, #4100	; 0x1004
 8000b1c:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000b24:	2300      	movs	r3, #0
 8000b26:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000b2a:	4618      	mov	r0, r3
}
 8000b2c:	bc30      	pop	{r4, r5}
 8000b2e:	4770      	bx	lr
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000b30:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000b32:	682a      	ldr	r2, [r5, #0]
 8000b34:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b38:	602a      	str	r2, [r5, #0]
 8000b3a:	e011      	b.n	8000b60 <HAL_ETH_TransmitFrame+0xec>
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000b3c:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000b3e:	682a      	ldr	r2, [r5, #0]
 8000b40:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000b44:	602a      	str	r2, [r5, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000b46:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000b48:	68d2      	ldr	r2, [r2, #12]
 8000b4a:	62c2      	str	r2, [r0, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	429c      	cmp	r4, r3
 8000b50:	d9d5      	bls.n	8000afe <HAL_ETH_TransmitFrame+0x8a>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000b52:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000b54:	682a      	ldr	r2, [r5, #0]
 8000b56:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000b5a:	602a      	str	r2, [r5, #0]
      if (i == 0U) 
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d0e7      	beq.n	8000b30 <HAL_ETH_TransmitFrame+0xbc>
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000b60:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000b62:	f240 55f4 	movw	r5, #1524	; 0x5f4
 8000b66:	6055      	str	r5, [r2, #4]
      if (i == (bufcount-1U))
 8000b68:	1e62      	subs	r2, r4, #1
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d1e6      	bne.n	8000b3c <HAL_ETH_TransmitFrame+0xc8>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000b6e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000b70:	682a      	ldr	r2, [r5, #0]
 8000b72:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000b76:	602a      	str	r2, [r5, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8000b78:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <HAL_ETH_TransmitFrame+0x120>)
 8000b7a:	fb02 1204 	mla	r2, r2, r4, r1
 8000b7e:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000b82:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000b84:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000b88:	606a      	str	r2, [r5, #4]
 8000b8a:	e7d7      	b.n	8000b3c <HAL_ETH_TransmitFrame+0xc8>
  __HAL_LOCK(heth);
 8000b8c:	2002      	movs	r0, #2
 8000b8e:	4770      	bx	lr
 8000b90:	ac02b00b 	.word	0xac02b00b
 8000b94:	fffffa0c 	.word	0xfffffa0c

08000b98 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8000b98:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d045      	beq.n	8000c2c <HAL_ETH_GetReceivedFrame_IT+0x94>
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  uint32_t descriptorscancounter = 0U;
 8000bac:	2100      	movs	r1, #0
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000bae:	e00a      	b.n	8000bc6 <HAL_ETH_GetReceivedFrame_IT+0x2e>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000bb0:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	6283      	str	r3, [r0, #40]	; 0x28
 8000bba:	e004      	b.n	8000bc6 <HAL_ETH_GetReceivedFrame_IT+0x2e>
      (heth->RxFrameInfos.SegCount)++;
 8000bbc:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000bbe:	3201      	adds	r2, #1
 8000bc0:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	6283      	str	r3, [r0, #40]	; 0x28
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000bc6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	db26      	blt.n	8000c1c <HAL_ETH_GetReceivedFrame_IT+0x84>
 8000bce:	2903      	cmp	r1, #3
 8000bd0:	d824      	bhi.n	8000c1c <HAL_ETH_GetReceivedFrame_IT+0x84>
    descriptorscancounter++;
 8000bd2:	3101      	adds	r1, #1
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000bda:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000bde:	d0e7      	beq.n	8000bb0 <HAL_ETH_GetReceivedFrame_IT+0x18>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	f412 7f40 	tst.w	r2, #768	; 0x300
 8000be6:	d0e9      	beq.n	8000bbc <HAL_ETH_GetReceivedFrame_IT+0x24>
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000be8:	6343      	str	r3, [r0, #52]	; 0x34
      (heth->RxFrameInfos.SegCount)++;
 8000bea:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000bec:	3201      	adds	r2, #1
 8000bee:	6382      	str	r2, [r0, #56]	; 0x38
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8000bf0:	2a01      	cmp	r2, #1
 8000bf2:	d011      	beq.n	8000c18 <HAL_ETH_GetReceivedFrame_IT+0x80>
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	f3c2 420d 	ubfx	r2, r2, #16, #14
 8000bfa:	3a04      	subs	r2, #4
 8000bfc:	63c2      	str	r2, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000bfe:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8000c00:	6892      	ldr	r2, [r2, #8]
 8000c02:	6402      	str	r2, [r0, #64]	; 0x40
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	6283      	str	r3, [r0, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000c0e:	2300      	movs	r3, #0
 8000c10:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      return HAL_OK;
 8000c14:	4618      	mov	r0, r3
 8000c16:	4770      	bx	lr
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000c18:	6303      	str	r3, [r0, #48]	; 0x30
 8000c1a:	e7eb      	b.n	8000bf4 <HAL_ETH_GetReceivedFrame_IT+0x5c>
  heth->State = HAL_ETH_STATE_READY;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000c22:	2200      	movs	r2, #0
 8000c24:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8000c28:	4618      	mov	r0, r3
 8000c2a:	4770      	bx	lr
  __HAL_LOCK(heth);
 8000c2c:	2002      	movs	r0, #2
}
 8000c2e:	4770      	bx	lr

08000c30 <HAL_ETH_TxCpltCallback>:
{
 8000c30:	4770      	bx	lr

08000c32 <HAL_ETH_ErrorCallback>:
{
 8000c32:	4770      	bx	lr

08000c34 <HAL_ETH_IRQHandler>:
{
 8000c34:	b510      	push	{r4, lr}
 8000c36:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000c38:	6803      	ldr	r3, [r0, #0]
 8000c3a:	f241 0214 	movw	r2, #4116	; 0x1014
 8000c3e:	589a      	ldr	r2, [r3, r2]
 8000c40:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000c44:	d111      	bne.n	8000c6a <HAL_ETH_IRQHandler+0x36>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8000c46:	f241 0214 	movw	r2, #4116	; 0x1014
 8000c4a:	589b      	ldr	r3, [r3, r2]
 8000c4c:	f013 0f01 	tst.w	r3, #1
 8000c50:	d119      	bne.n	8000c86 <HAL_ETH_IRQHandler+0x52>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8000c52:	6822      	ldr	r2, [r4, #0]
 8000c54:	f241 0314 	movw	r3, #4116	; 0x1014
 8000c58:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000c5c:	50d1      	str	r1, [r2, r3]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8000c5e:	6822      	ldr	r2, [r4, #0]
 8000c60:	58d3      	ldr	r3, [r2, r3]
 8000c62:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000c66:	d11b      	bne.n	8000ca0 <HAL_ETH_IRQHandler+0x6c>
 8000c68:	bd10      	pop	{r4, pc}
    HAL_ETH_RxCpltCallback(heth);
 8000c6a:	f00a f993 	bl	800af94 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8000c6e:	6822      	ldr	r2, [r4, #0]
 8000c70:	2140      	movs	r1, #64	; 0x40
 8000c72:	f241 0314 	movw	r3, #4116	; 0x1014
 8000c76:	50d1      	str	r1, [r2, r3]
    heth->State = HAL_ETH_STATE_READY;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000c84:	e7e5      	b.n	8000c52 <HAL_ETH_IRQHandler+0x1e>
    HAL_ETH_TxCpltCallback(heth);
 8000c86:	f7ff ffd3 	bl	8000c30 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8000c8a:	6821      	ldr	r1, [r4, #0]
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	f241 0214 	movw	r2, #4116	; 0x1014
 8000c92:	508b      	str	r3, [r1, r2]
    heth->State = HAL_ETH_STATE_READY;
 8000c94:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000c9e:	e7d8      	b.n	8000c52 <HAL_ETH_IRQHandler+0x1e>
    HAL_ETH_ErrorCallback(heth);
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	f7ff ffc6 	bl	8000c32 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8000ca6:	6822      	ldr	r2, [r4, #0]
 8000ca8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cac:	f241 0314 	movw	r3, #4116	; 0x1014
 8000cb0:	50d1      	str	r1, [r2, r3]
    heth->State = HAL_ETH_STATE_READY;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000cbe:	e7d3      	b.n	8000c68 <HAL_ETH_IRQHandler+0x34>

08000cc0 <HAL_ETH_ReadPHYRegister>:
{
 8000cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000cc2:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	2b82      	cmp	r3, #130	; 0x82
 8000cca:	d101      	bne.n	8000cd0 <HAL_ETH_ReadPHYRegister+0x10>
    return HAL_BUSY;
 8000ccc:	2002      	movs	r0, #2
}
 8000cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cd0:	4616      	mov	r6, r2
 8000cd2:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000cd4:	2382      	movs	r3, #130	; 0x82
 8000cd6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000cda:	6802      	ldr	r2, [r0, #0]
 8000cdc:	6914      	ldr	r4, [r2, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000cde:	f004 041c 	and.w	r4, r4, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000ce2:	8a03      	ldrh	r3, [r0, #16]
 8000ce4:	02db      	lsls	r3, r3, #11
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	431c      	orrs	r4, r3
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000cea:	0189      	lsls	r1, r1, #6
 8000cec:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8000cf0:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8000cf2:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8000cf6:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8000cf8:	f7ff fc7c 	bl	80005f4 <HAL_GetTick>
 8000cfc:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000cfe:	f014 0f01 	tst.w	r4, #1
 8000d02:	d010      	beq.n	8000d26 <HAL_ETH_ReadPHYRegister+0x66>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000d04:	f7ff fc76 	bl	80005f4 <HAL_GetTick>
 8000d08:	1bc0      	subs	r0, r0, r7
 8000d0a:	f5b0 2fa0 	cmp.w	r0, #327680	; 0x50000
 8000d0e:	d202      	bcs.n	8000d16 <HAL_ETH_ReadPHYRegister+0x56>
    tmpreg1 = heth->Instance->MACMIIAR;
 8000d10:	682b      	ldr	r3, [r5, #0]
 8000d12:	691c      	ldr	r4, [r3, #16]
 8000d14:	e7f3      	b.n	8000cfe <HAL_ETH_ReadPHYRegister+0x3e>
      heth->State= HAL_ETH_STATE_READY;
 8000d16:	2301      	movs	r3, #1
 8000d18:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000d22:	2003      	movs	r0, #3
 8000d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000d26:	682b      	ldr	r3, [r5, #0]
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK;
 8000d34:	2000      	movs	r0, #0
 8000d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000d38 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000d38:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b42      	cmp	r3, #66	; 0x42
 8000d40:	d101      	bne.n	8000d46 <HAL_ETH_WritePHYRegister+0xe>
    return HAL_BUSY;
 8000d42:	2002      	movs	r0, #2
 8000d44:	4770      	bx	lr
{
 8000d46:	b570      	push	{r4, r5, r6, lr}
 8000d48:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000d4a:	2342      	movs	r3, #66	; 0x42
 8000d4c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000d50:	6800      	ldr	r0, [r0, #0]
 8000d52:	6904      	ldr	r4, [r0, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000d54:	f004 041c 	and.w	r4, r4, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000d58:	8a2b      	ldrh	r3, [r5, #16]
 8000d5a:	02db      	lsls	r3, r3, #11
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	431c      	orrs	r4, r3
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000d60:	0189      	lsls	r1, r1, #6
 8000d62:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
 8000d66:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8000d68:	f044 0403 	orr.w	r4, r4, #3
 8000d6c:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000d6e:	6142      	str	r2, [r0, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8000d70:	682b      	ldr	r3, [r5, #0]
 8000d72:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000d74:	f7ff fc3e 	bl	80005f4 <HAL_GetTick>
 8000d78:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000d7a:	f014 0f01 	tst.w	r4, #1
 8000d7e:	d010      	beq.n	8000da2 <HAL_ETH_WritePHYRegister+0x6a>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000d80:	f7ff fc38 	bl	80005f4 <HAL_GetTick>
 8000d84:	1b80      	subs	r0, r0, r6
 8000d86:	f5b0 2fa0 	cmp.w	r0, #327680	; 0x50000
 8000d8a:	d202      	bcs.n	8000d92 <HAL_ETH_WritePHYRegister+0x5a>
    tmpreg1 = heth->Instance->MACMIIAR;
 8000d8c:	682b      	ldr	r3, [r5, #0]
 8000d8e:	691c      	ldr	r4, [r3, #16]
 8000d90:	e7f3      	b.n	8000d7a <HAL_ETH_WritePHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 8000d92:	2301      	movs	r3, #1
 8000d94:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000d9e:	2003      	movs	r0, #3
 8000da0:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 8000da2:	2301      	movs	r3, #1
 8000da4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 8000da8:	2000      	movs	r0, #0
 8000daa:	bd70      	pop	{r4, r5, r6, pc}

08000dac <HAL_ETH_Init>:
{
 8000dac:	b570      	push	{r4, r5, r6, lr}
 8000dae:	b082      	sub	sp, #8
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000db0:	2300      	movs	r3, #0
 8000db2:	9301      	str	r3, [sp, #4]
  if(heth == NULL)
 8000db4:	2800      	cmp	r0, #0
 8000db6:	f000 810e 	beq.w	8000fd6 <HAL_ETH_Init+0x22a>
 8000dba:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 8000dbc:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d034      	beq.n	8000e2e <HAL_ETH_Init+0x82>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	4b84      	ldr	r3, [pc, #528]	; (8000fdc <HAL_ETH_Init+0x230>)
 8000dca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000dcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000dd0:	645a      	str	r2, [r3, #68]	; 0x44
 8000dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000ddc:	4b80      	ldr	r3, [pc, #512]	; (8000fe0 <HAL_ETH_Init+0x234>)
 8000dde:	685a      	ldr	r2, [r3, #4]
 8000de0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000de4:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000de6:	685a      	ldr	r2, [r3, #4]
 8000de8:	6a21      	ldr	r1, [r4, #32]
 8000dea:	430a      	orrs	r2, r1
 8000dec:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000dee:	6823      	ldr	r3, [r4, #0]
 8000df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	f042 0201 	orr.w	r2, r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000dfc:	f7ff fbfa 	bl	80005f4 <HAL_GetTick>
 8000e00:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000e02:	6823      	ldr	r3, [r4, #0]
 8000e04:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000e08:	6812      	ldr	r2, [r2, #0]
 8000e0a:	f012 0f01 	tst.w	r2, #1
 8000e0e:	d013      	beq.n	8000e38 <HAL_ETH_Init+0x8c>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000e10:	f7ff fbf0 	bl	80005f4 <HAL_GetTick>
 8000e14:	1b40      	subs	r0, r0, r5
 8000e16:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000e1a:	d9f2      	bls.n	8000e02 <HAL_ETH_Init+0x56>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000e1c:	2503      	movs	r5, #3
 8000e1e:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000e22:	2300      	movs	r3, #0
 8000e24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000e28:	4628      	mov	r0, r5
 8000e2a:	b002      	add	sp, #8
 8000e2c:	bd70      	pop	{r4, r5, r6, pc}
    heth->Lock = HAL_UNLOCKED;
 8000e2e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000e32:	f00a f83f 	bl	800aeb4 <HAL_ETH_MspInit>
 8000e36:	e7c5      	b.n	8000dc4 <HAL_ETH_Init+0x18>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000e38:	691d      	ldr	r5, [r3, #16]
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000e3a:	f025 051c 	bic.w	r5, r5, #28
  hclk = HAL_RCC_GetHCLKFreq();
 8000e3e:	f000 fe9d 	bl	8001b7c <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000e42:	4b68      	ldr	r3, [pc, #416]	; (8000fe4 <HAL_ETH_Init+0x238>)
 8000e44:	4403      	add	r3, r0
 8000e46:	4a68      	ldr	r2, [pc, #416]	; (8000fe8 <HAL_ETH_Init+0x23c>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d855      	bhi.n	8000ef8 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000e4c:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000e50:	6823      	ldr	r3, [r4, #0]
 8000e52:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000e54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	f7ff ff6c 	bl	8000d38 <HAL_ETH_WritePHYRegister>
 8000e60:	4605      	mov	r5, r0
 8000e62:	2800      	cmp	r0, #0
 8000e64:	d160      	bne.n	8000f28 <HAL_ETH_Init+0x17c>
  HAL_Delay(PHY_RESET_DELAY);
 8000e66:	20ff      	movs	r0, #255	; 0xff
 8000e68:	f7ff fbca 	bl	8000600 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000e6c:	6863      	ldr	r3, [r4, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 8091 	beq.w	8000f96 <HAL_ETH_Init+0x1ea>
    tickstart = HAL_GetTick();
 8000e74:	f7ff fbbe 	bl	80005f4 <HAL_GetTick>
 8000e78:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000e7a:	aa01      	add	r2, sp, #4
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	4620      	mov	r0, r4
 8000e80:	f7ff ff1e 	bl	8000cc0 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000e84:	f7ff fbb6 	bl	80005f4 <HAL_GetTick>
 8000e88:	1b80      	subs	r0, r0, r6
 8000e8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e8e:	4298      	cmp	r0, r3
 8000e90:	d852      	bhi.n	8000f38 <HAL_ETH_Init+0x18c>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000e92:	9b01      	ldr	r3, [sp, #4]
 8000e94:	f013 0f04 	tst.w	r3, #4
 8000e98:	d0ef      	beq.n	8000e7a <HAL_ETH_Init+0xce>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000e9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	f7ff ff49 	bl	8000d38 <HAL_ETH_WritePHYRegister>
 8000ea6:	2800      	cmp	r0, #0
 8000ea8:	d152      	bne.n	8000f50 <HAL_ETH_Init+0x1a4>
    tickstart = HAL_GetTick();
 8000eaa:	f7ff fba3 	bl	80005f4 <HAL_GetTick>
 8000eae:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000eb0:	aa01      	add	r2, sp, #4
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	f7ff ff03 	bl	8000cc0 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000eba:	f7ff fb9b 	bl	80005f4 <HAL_GetTick>
 8000ebe:	1b80      	subs	r0, r0, r6
 8000ec0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ec4:	4298      	cmp	r0, r3
 8000ec6:	d84b      	bhi.n	8000f60 <HAL_ETH_Init+0x1b4>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000ec8:	9b01      	ldr	r3, [sp, #4]
 8000eca:	f013 0f20 	tst.w	r3, #32
 8000ece:	d0ef      	beq.n	8000eb0 <HAL_ETH_Init+0x104>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000ed0:	aa01      	add	r2, sp, #4
 8000ed2:	211f      	movs	r1, #31
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	f7ff fef3 	bl	8000cc0 <HAL_ETH_ReadPHYRegister>
 8000eda:	2800      	cmp	r0, #0
 8000edc:	d14c      	bne.n	8000f78 <HAL_ETH_Init+0x1cc>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000ede:	9b01      	ldr	r3, [sp, #4]
 8000ee0:	f013 0f10 	tst.w	r3, #16
 8000ee4:	d050      	beq.n	8000f88 <HAL_ETH_Init+0x1dc>
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000ee6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000eea:	60e2      	str	r2, [r4, #12]
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000eec:	f013 0f04 	tst.w	r3, #4
 8000ef0:	d04d      	beq.n	8000f8e <HAL_ETH_Init+0x1e2>
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60a3      	str	r3, [r4, #8]
 8000ef6:	e05e      	b.n	8000fb6 <HAL_ETH_Init+0x20a>
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000ef8:	4b3c      	ldr	r3, [pc, #240]	; (8000fec <HAL_ETH_Init+0x240>)
 8000efa:	4403      	add	r3, r0
 8000efc:	4a3c      	ldr	r2, [pc, #240]	; (8000ff0 <HAL_ETH_Init+0x244>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d802      	bhi.n	8000f08 <HAL_ETH_Init+0x15c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000f02:	f045 050c 	orr.w	r5, r5, #12
 8000f06:	e7a3      	b.n	8000e50 <HAL_ETH_Init+0xa4>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000f08:	4b3a      	ldr	r3, [pc, #232]	; (8000ff4 <HAL_ETH_Init+0x248>)
 8000f0a:	4403      	add	r3, r0
 8000f0c:	4a3a      	ldr	r2, [pc, #232]	; (8000ff8 <HAL_ETH_Init+0x24c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d99e      	bls.n	8000e50 <HAL_ETH_Init+0xa4>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000f12:	4b3a      	ldr	r3, [pc, #232]	; (8000ffc <HAL_ETH_Init+0x250>)
 8000f14:	4403      	add	r3, r0
 8000f16:	4a3a      	ldr	r2, [pc, #232]	; (8001000 <HAL_ETH_Init+0x254>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d802      	bhi.n	8000f22 <HAL_ETH_Init+0x176>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000f1c:	f045 0504 	orr.w	r5, r5, #4
 8000f20:	e796      	b.n	8000e50 <HAL_ETH_Init+0xa4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000f22:	f045 0510 	orr.w	r5, r5, #16
 8000f26:	e793      	b.n	8000e50 <HAL_ETH_Init+0xa4>
    ETH_MACDMAConfig(heth, err);
 8000f28:	2101      	movs	r1, #1
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	f7ff fca6 	bl	800087c <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 8000f30:	2501      	movs	r5, #1
 8000f32:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    return HAL_ERROR;
 8000f36:	e777      	b.n	8000e28 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 8000f38:	2101      	movs	r1, #1
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	f7ff fc9e 	bl	800087c <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000f40:	2301      	movs	r3, #1
 8000f42:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000f46:	2300      	movs	r3, #0
 8000f48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000f4c:	2503      	movs	r5, #3
 8000f4e:	e76b      	b.n	8000e28 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8000f50:	2101      	movs	r1, #1
 8000f52:	4620      	mov	r0, r4
 8000f54:	f7ff fc92 	bl	800087c <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000f58:	2501      	movs	r5, #1
 8000f5a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8000f5e:	e763      	b.n	8000e28 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 8000f60:	2101      	movs	r1, #1
 8000f62:	4620      	mov	r0, r4
 8000f64:	f7ff fc8a 	bl	800087c <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000f74:	2503      	movs	r5, #3
 8000f76:	e757      	b.n	8000e28 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8000f78:	2101      	movs	r1, #1
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	f7ff fc7e 	bl	800087c <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000f80:	2501      	movs	r5, #1
 8000f82:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8000f86:	e74f      	b.n	8000e28 <HAL_ETH_Init+0x7c>
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000f88:	2200      	movs	r2, #0
 8000f8a:	60e2      	str	r2, [r4, #12]
 8000f8c:	e7ae      	b.n	8000eec <HAL_ETH_Init+0x140>
      (heth->Init).Speed = ETH_SPEED_100M;
 8000f8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f92:	60a3      	str	r3, [r4, #8]
 8000f94:	e00f      	b.n	8000fb6 <HAL_ETH_Init+0x20a>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000f96:	68e3      	ldr	r3, [r4, #12]
 8000f98:	f3c3 02cf 	ubfx	r2, r3, #3, #16
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000f9c:	68a3      	ldr	r3, [r4, #8]
 8000f9e:	f3c3 034f 	ubfx	r3, r3, #1, #16
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	f7ff fec6 	bl	8000d38 <HAL_ETH_WritePHYRegister>
 8000fac:	b958      	cbnz	r0, 8000fc6 <HAL_ETH_Init+0x21a>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000fae:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000fb2:	f7ff fb25 	bl	8000600 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4620      	mov	r0, r4
 8000fba:	f7ff fc5f 	bl	800087c <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000fc4:	e730      	b.n	8000e28 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	4620      	mov	r0, r4
 8000fca:	f7ff fc57 	bl	800087c <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000fce:	2501      	movs	r5, #1
 8000fd0:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000fd4:	e728      	b.n	8000e28 <HAL_ETH_Init+0x7c>
    return HAL_ERROR;
 8000fd6:	2501      	movs	r5, #1
 8000fd8:	e726      	b.n	8000e28 <HAL_ETH_Init+0x7c>
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40013800 	.word	0x40013800
 8000fe4:	feced300 	.word	0xfeced300
 8000fe8:	00e4e1bf 	.word	0x00e4e1bf
 8000fec:	fde9f140 	.word	0xfde9f140
 8000ff0:	017d783f 	.word	0x017d783f
 8000ff4:	fc6c7900 	.word	0xfc6c7900
 8000ff8:	026259ff 	.word	0x026259ff
 8000ffc:	fa0a1f00 	.word	0xfa0a1f00
 8001000:	02faf07f 	.word	0x02faf07f

08001004 <HAL_ETH_Start>:
{  
 8001004:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(heth);
 8001006:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800100a:	2b01      	cmp	r3, #1
 800100c:	d101      	bne.n	8001012 <HAL_ETH_Start+0xe>
 800100e:	2002      	movs	r0, #2
}
 8001010:	bd38      	pop	{r3, r4, r5, pc}
 8001012:	4604      	mov	r4, r0
  __HAL_LOCK(heth);
 8001014:	2501      	movs	r5, #1
 8001016:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800101a:	2302      	movs	r3, #2
 800101c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  ETH_MACTransmissionEnable(heth);
 8001020:	f7ff fbc0 	bl	80007a4 <ETH_MACTransmissionEnable>
  ETH_MACReceptionEnable(heth);
 8001024:	4620      	mov	r0, r4
 8001026:	f7ff fbd2 	bl	80007ce <ETH_MACReceptionEnable>
  ETH_FlushTransmitFIFO(heth);
 800102a:	4620      	mov	r0, r4
 800102c:	f7ff fbe4 	bl	80007f8 <ETH_FlushTransmitFIFO>
  ETH_DMATransmissionEnable(heth);
 8001030:	4620      	mov	r0, r4
 8001032:	f7ff fb81 	bl	8000738 <ETH_DMATransmissionEnable>
  ETH_DMAReceptionEnable(heth);
 8001036:	4620      	mov	r0, r4
 8001038:	f7ff fb8e 	bl	8000758 <ETH_DMAReceptionEnable>
  heth->State= HAL_ETH_STATE_READY;
 800103c:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001040:	2000      	movs	r0, #0
 8001042:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
  return HAL_OK;
 8001046:	bd38      	pop	{r3, r4, r5, pc}

08001048 <HAL_ETH_Stop>:
{  
 8001048:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(heth);
 800104a:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800104e:	2b01      	cmp	r3, #1
 8001050:	d101      	bne.n	8001056 <HAL_ETH_Stop+0xe>
 8001052:	2002      	movs	r0, #2
}
 8001054:	bd38      	pop	{r3, r4, r5, pc}
 8001056:	4604      	mov	r4, r0
  __HAL_LOCK(heth);
 8001058:	2501      	movs	r5, #1
 800105a:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800105e:	2302      	movs	r3, #2
 8001060:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  ETH_DMATransmissionDisable(heth);
 8001064:	f7ff fb70 	bl	8000748 <ETH_DMATransmissionDisable>
  ETH_DMAReceptionDisable(heth);
 8001068:	4620      	mov	r0, r4
 800106a:	f7ff fb7d 	bl	8000768 <ETH_DMAReceptionDisable>
  ETH_MACReceptionDisable(heth);
 800106e:	4620      	mov	r0, r4
 8001070:	f7ff fbd9 	bl	8000826 <ETH_MACReceptionDisable>
  ETH_FlushTransmitFIFO(heth);
 8001074:	4620      	mov	r0, r4
 8001076:	f7ff fbbf 	bl	80007f8 <ETH_FlushTransmitFIFO>
  ETH_MACTransmissionDisable(heth);
 800107a:	4620      	mov	r0, r4
 800107c:	f7ff fbe8 	bl	8000850 <ETH_MACTransmissionDisable>
  heth->State = HAL_ETH_STATE_READY;
 8001080:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001084:	2000      	movs	r0, #0
 8001086:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
  return HAL_OK;
 800108a:	bd38      	pop	{r3, r4, r5, pc}

0800108c <HAL_ETH_ConfigMAC>:
  __HAL_LOCK(heth);
 800108c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8001090:	2b01      	cmp	r3, #1
 8001092:	f000 808e 	beq.w	80011b2 <HAL_ETH_ConfigMAC+0x126>
{
 8001096:	b570      	push	{r4, r5, r6, lr}
 8001098:	460c      	mov	r4, r1
 800109a:	4605      	mov	r5, r0
  __HAL_LOCK(heth);
 800109c:	2301      	movs	r3, #1
 800109e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State= HAL_ETH_STATE_BUSY;
 80010a2:	2302      	movs	r3, #2
 80010a4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (macconf != NULL)
 80010a8:	2900      	cmp	r1, #0
 80010aa:	d071      	beq.n	8001190 <HAL_ETH_ConfigMAC+0x104>
    tmpreg1 = (heth->Instance)->MACCR;
 80010ac:	6801      	ldr	r1, [r0, #0]
 80010ae:	680b      	ldr	r3, [r1, #0]
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80010b0:	4a41      	ldr	r2, [pc, #260]	; (80011b8 <HAL_ETH_ConfigMAC+0x12c>)
 80010b2:	401a      	ands	r2, r3
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80010b4:	6823      	ldr	r3, [r4, #0]
                         macconf->Jabber | 
 80010b6:	6860      	ldr	r0, [r4, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80010b8:	4303      	orrs	r3, r0
                         macconf->InterFrameGap |
 80010ba:	68a0      	ldr	r0, [r4, #8]
                         macconf->Jabber | 
 80010bc:	4303      	orrs	r3, r0
                         macconf->CarrierSense |
 80010be:	68e0      	ldr	r0, [r4, #12]
                         macconf->InterFrameGap |
 80010c0:	4303      	orrs	r3, r0
                         (heth->Init).Speed | 
 80010c2:	68a8      	ldr	r0, [r5, #8]
                         macconf->CarrierSense |
 80010c4:	4303      	orrs	r3, r0
                         macconf->ReceiveOwn |
 80010c6:	6920      	ldr	r0, [r4, #16]
                         (heth->Init).Speed | 
 80010c8:	4303      	orrs	r3, r0
                         macconf->LoopbackMode |
 80010ca:	6960      	ldr	r0, [r4, #20]
                         macconf->ReceiveOwn |
 80010cc:	4303      	orrs	r3, r0
                         (heth->Init).DuplexMode | 
 80010ce:	68e8      	ldr	r0, [r5, #12]
                         macconf->LoopbackMode |
 80010d0:	4303      	orrs	r3, r0
                         macconf->ChecksumOffload |    
 80010d2:	69a0      	ldr	r0, [r4, #24]
                         (heth->Init).DuplexMode | 
 80010d4:	4303      	orrs	r3, r0
                         macconf->RetryTransmission | 
 80010d6:	69e0      	ldr	r0, [r4, #28]
                         macconf->ChecksumOffload |    
 80010d8:	4303      	orrs	r3, r0
                         macconf->AutomaticPadCRCStrip | 
 80010da:	6a20      	ldr	r0, [r4, #32]
                         macconf->RetryTransmission | 
 80010dc:	4303      	orrs	r3, r0
                         macconf->BackOffLimit | 
 80010de:	6a60      	ldr	r0, [r4, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80010e0:	4303      	orrs	r3, r0
                         macconf->DeferralCheck);
 80010e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                         macconf->BackOffLimit | 
 80010e4:	4303      	orrs	r3, r0
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80010e6:	4313      	orrs	r3, r2
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80010e8:	600b      	str	r3, [r1, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 80010ea:	682b      	ldr	r3, [r5, #0]
 80010ec:	681e      	ldr	r6, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80010ee:	2001      	movs	r0, #1
 80010f0:	f7ff fa86 	bl	8000600 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80010f4:	682b      	ldr	r3, [r5, #0]
 80010f6:	601e      	str	r6, [r3, #0]
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80010f8:	682a      	ldr	r2, [r5, #0]
 80010fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80010fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80010fe:	430b      	orrs	r3, r1
                                          macconf->PassControlFrames |
 8001100:	6b61      	ldr	r1, [r4, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001102:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception | 
 8001104:	6ba1      	ldr	r1, [r4, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001106:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
 8001108:	6be1      	ldr	r1, [r4, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800110a:	430b      	orrs	r3, r1
                                          macconf->PromiscuousMode |
 800110c:	6c21      	ldr	r1, [r4, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800110e:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
 8001110:	6c61      	ldr	r1, [r4, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001112:	430b      	orrs	r3, r1
                                          macconf->UnicastFramesFilter);
 8001114:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                                          macconf->MulticastFramesFilter |
 8001116:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001118:	6053      	str	r3, [r2, #4]
     tmpreg1 = (heth->Instance)->MACFFR;
 800111a:	682b      	ldr	r3, [r5, #0]
 800111c:	685e      	ldr	r6, [r3, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800111e:	2001      	movs	r0, #1
 8001120:	f7ff fa6e 	bl	8000600 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001124:	682b      	ldr	r3, [r5, #0]
 8001126:	605e      	str	r6, [r3, #4]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001128:	682b      	ldr	r3, [r5, #0]
 800112a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800112c:	609a      	str	r2, [r3, #8]
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800112e:	682b      	ldr	r3, [r5, #0]
 8001130:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001132:	60da      	str	r2, [r3, #12]
     tmpreg1 = (heth->Instance)->MACFCR;
 8001134:	6829      	ldr	r1, [r5, #0]
 8001136:	698a      	ldr	r2, [r1, #24]
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001138:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 800113c:	0412      	lsls	r2, r2, #16
 800113e:	0c12      	lsrs	r2, r2, #16
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001140:	6d60      	ldr	r0, [r4, #84]	; 0x54
                          macconf->ZeroQuantaPause |
 8001142:	6da3      	ldr	r3, [r4, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001144:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                          macconf->PauseLowThreshold |
 8001148:	6de0      	ldr	r0, [r4, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800114a:	4303      	orrs	r3, r0
                          macconf->UnicastPauseFrameDetect | 
 800114c:	6e20      	ldr	r0, [r4, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800114e:	4303      	orrs	r3, r0
                          macconf->ReceiveFlowControl |
 8001150:	6e60      	ldr	r0, [r4, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001152:	4303      	orrs	r3, r0
                          macconf->TransmitFlowControl); 
 8001154:	6ea0      	ldr	r0, [r4, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001156:	4303      	orrs	r3, r0
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001158:	4313      	orrs	r3, r2
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800115a:	618b      	str	r3, [r1, #24]
     tmpreg1 = (heth->Instance)->MACFCR;
 800115c:	682b      	ldr	r3, [r5, #0]
 800115e:	699e      	ldr	r6, [r3, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001160:	2001      	movs	r0, #1
 8001162:	f7ff fa4d 	bl	8000600 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001166:	682b      	ldr	r3, [r5, #0]
 8001168:	619e      	str	r6, [r3, #24]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800116a:	682a      	ldr	r2, [r5, #0]
 800116c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800116e:	6f21      	ldr	r1, [r4, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001170:	430b      	orrs	r3, r1
 8001172:	61d3      	str	r3, [r2, #28]
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001174:	682b      	ldr	r3, [r5, #0]
 8001176:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001178:	2001      	movs	r0, #1
 800117a:	f7ff fa41 	bl	8000600 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 800117e:	682b      	ldr	r3, [r5, #0]
 8001180:	61dc      	str	r4, [r3, #28]
  heth->State= HAL_ETH_STATE_READY;
 8001182:	2301      	movs	r3, #1
 8001184:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001188:	2000      	movs	r0, #0
 800118a:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
  return HAL_OK;  
 800118e:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = (heth->Instance)->MACCR;
 8001190:	6801      	ldr	r1, [r0, #0]
 8001192:	680b      	ldr	r3, [r1, #0]
    tmpreg1 &= ~((uint32_t)0x00004800U);
 8001194:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001198:	6882      	ldr	r2, [r0, #8]
 800119a:	68c0      	ldr	r0, [r0, #12]
 800119c:	4302      	orrs	r2, r0
 800119e:	4313      	orrs	r3, r2
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80011a0:	600b      	str	r3, [r1, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 80011a2:	682b      	ldr	r3, [r5, #0]
 80011a4:	681c      	ldr	r4, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f7ff fa2a 	bl	8000600 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80011ac:	682b      	ldr	r3, [r5, #0]
 80011ae:	601c      	str	r4, [r3, #0]
 80011b0:	e7e7      	b.n	8001182 <HAL_ETH_ConfigMAC+0xf6>
  __HAL_LOCK(heth);
 80011b2:	2002      	movs	r0, #2
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	ff20810f 	.word	0xff20810f

080011bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011be:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c0:	2400      	movs	r4, #0
 80011c2:	e04b      	b.n	800125c <HAL_GPIO_Init+0xa0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011c4:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 80011c8:	f10e 0e08 	add.w	lr, lr, #8
 80011cc:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80011d0:	f004 0607 	and.w	r6, r4, #7
 80011d4:	00b6      	lsls	r6, r6, #2
 80011d6:	270f      	movs	r7, #15
 80011d8:	40b7      	lsls	r7, r6
 80011da:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80011de:	690f      	ldr	r7, [r1, #16]
 80011e0:	fa07 f606 	lsl.w	r6, r7, r6
 80011e4:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 80011e6:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 80011ea:	e046      	b.n	800127a <HAL_GPIO_Init+0xbe>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ec:	2609      	movs	r6, #9
 80011ee:	e000      	b.n	80011f2 <HAL_GPIO_Init+0x36>
 80011f0:	2600      	movs	r6, #0
 80011f2:	fa06 f60e 	lsl.w	r6, r6, lr
 80011f6:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011f8:	3302      	adds	r3, #2
 80011fa:	4e64      	ldr	r6, [pc, #400]	; (800138c <HAL_GPIO_Init+0x1d0>)
 80011fc:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001200:	4b63      	ldr	r3, [pc, #396]	; (8001390 <HAL_GPIO_Init+0x1d4>)
 8001202:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8001204:	43eb      	mvns	r3, r5
 8001206:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800120a:	684f      	ldr	r7, [r1, #4]
 800120c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001210:	d001      	beq.n	8001216 <HAL_GPIO_Init+0x5a>
        {
          temp |= iocurrent;
 8001212:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 8001216:	4a5e      	ldr	r2, [pc, #376]	; (8001390 <HAL_GPIO_Init+0x1d4>)
 8001218:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 800121a:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800121c:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001220:	684f      	ldr	r7, [r1, #4]
 8001222:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001226:	d001      	beq.n	800122c <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8001228:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 800122c:	4a58      	ldr	r2, [pc, #352]	; (8001390 <HAL_GPIO_Init+0x1d4>)
 800122e:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001230:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001232:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001236:	684f      	ldr	r7, [r1, #4]
 8001238:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800123c:	d001      	beq.n	8001242 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 800123e:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 8001242:	4a53      	ldr	r2, [pc, #332]	; (8001390 <HAL_GPIO_Init+0x1d4>)
 8001244:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8001246:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001248:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800124a:	684e      	ldr	r6, [r1, #4]
 800124c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001250:	d001      	beq.n	8001256 <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 8001252:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 8001256:	4a4e      	ldr	r2, [pc, #312]	; (8001390 <HAL_GPIO_Init+0x1d4>)
 8001258:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125a:	3401      	adds	r4, #1
 800125c:	2c0f      	cmp	r4, #15
 800125e:	f200 8092 	bhi.w	8001386 <HAL_GPIO_Init+0x1ca>
    ioposition = ((uint32_t)0x01U) << position;
 8001262:	2301      	movs	r3, #1
 8001264:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001266:	680a      	ldr	r2, [r1, #0]
 8001268:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 800126c:	42ab      	cmp	r3, r5
 800126e:	d1f4      	bne.n	800125a <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001270:	684a      	ldr	r2, [r1, #4]
 8001272:	2a02      	cmp	r2, #2
 8001274:	d0a6      	beq.n	80011c4 <HAL_GPIO_Init+0x8>
 8001276:	2a12      	cmp	r2, #18
 8001278:	d0a4      	beq.n	80011c4 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 800127a:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800127c:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8001280:	2203      	movs	r2, #3
 8001282:	fa02 f20e 	lsl.w	r2, r2, lr
 8001286:	43d2      	mvns	r2, r2
 8001288:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800128a:	684f      	ldr	r7, [r1, #4]
 800128c:	f007 0703 	and.w	r7, r7, #3
 8001290:	fa07 f70e 	lsl.w	r7, r7, lr
 8001294:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8001296:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001298:	684e      	ldr	r6, [r1, #4]
 800129a:	1e77      	subs	r7, r6, #1
 800129c:	2f01      	cmp	r7, #1
 800129e:	d903      	bls.n	80012a8 <HAL_GPIO_Init+0xec>
 80012a0:	2e11      	cmp	r6, #17
 80012a2:	d001      	beq.n	80012a8 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012a4:	2e12      	cmp	r6, #18
 80012a6:	d10f      	bne.n	80012c8 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->OSPEEDR; 
 80012a8:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012aa:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ac:	68cf      	ldr	r7, [r1, #12]
 80012ae:	fa07 f70e 	lsl.w	r7, r7, lr
 80012b2:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80012b4:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80012b6:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012b8:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012bc:	684e      	ldr	r6, [r1, #4]
 80012be:	f3c6 1600 	ubfx	r6, r6, #4, #1
 80012c2:	40a6      	lsls	r6, r4
 80012c4:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 80012c6:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 80012c8:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ca:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012cc:	688b      	ldr	r3, [r1, #8]
 80012ce:	fa03 f30e 	lsl.w	r3, r3, lr
 80012d2:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 80012d4:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012d6:	684b      	ldr	r3, [r1, #4]
 80012d8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80012dc:	d0bd      	beq.n	800125a <HAL_GPIO_Init+0x9e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	4b2c      	ldr	r3, [pc, #176]	; (8001394 <HAL_GPIO_Init+0x1d8>)
 80012e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012ea:	645a      	str	r2, [r3, #68]	; 0x44
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80012f6:	08a3      	lsrs	r3, r4, #2
 80012f8:	1c9e      	adds	r6, r3, #2
 80012fa:	4a24      	ldr	r2, [pc, #144]	; (800138c <HAL_GPIO_Init+0x1d0>)
 80012fc:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001300:	f004 0603 	and.w	r6, r4, #3
 8001304:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8001308:	260f      	movs	r6, #15
 800130a:	fa06 f60e 	lsl.w	r6, r6, lr
 800130e:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001312:	4f21      	ldr	r7, [pc, #132]	; (8001398 <HAL_GPIO_Init+0x1dc>)
 8001314:	42b8      	cmp	r0, r7
 8001316:	f43f af6b 	beq.w	80011f0 <HAL_GPIO_Init+0x34>
 800131a:	4e20      	ldr	r6, [pc, #128]	; (800139c <HAL_GPIO_Init+0x1e0>)
 800131c:	42b0      	cmp	r0, r6
 800131e:	d022      	beq.n	8001366 <HAL_GPIO_Init+0x1aa>
 8001320:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001324:	42b0      	cmp	r0, r6
 8001326:	d020      	beq.n	800136a <HAL_GPIO_Init+0x1ae>
 8001328:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800132c:	42b0      	cmp	r0, r6
 800132e:	d01e      	beq.n	800136e <HAL_GPIO_Init+0x1b2>
 8001330:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001334:	42b0      	cmp	r0, r6
 8001336:	d01c      	beq.n	8001372 <HAL_GPIO_Init+0x1b6>
 8001338:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800133c:	42b0      	cmp	r0, r6
 800133e:	d01a      	beq.n	8001376 <HAL_GPIO_Init+0x1ba>
 8001340:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001344:	42b0      	cmp	r0, r6
 8001346:	d018      	beq.n	800137a <HAL_GPIO_Init+0x1be>
 8001348:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800134c:	42b0      	cmp	r0, r6
 800134e:	d016      	beq.n	800137e <HAL_GPIO_Init+0x1c2>
 8001350:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001354:	42b0      	cmp	r0, r6
 8001356:	d014      	beq.n	8001382 <HAL_GPIO_Init+0x1c6>
 8001358:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800135c:	42b0      	cmp	r0, r6
 800135e:	f43f af45 	beq.w	80011ec <HAL_GPIO_Init+0x30>
 8001362:	260a      	movs	r6, #10
 8001364:	e745      	b.n	80011f2 <HAL_GPIO_Init+0x36>
 8001366:	2601      	movs	r6, #1
 8001368:	e743      	b.n	80011f2 <HAL_GPIO_Init+0x36>
 800136a:	2602      	movs	r6, #2
 800136c:	e741      	b.n	80011f2 <HAL_GPIO_Init+0x36>
 800136e:	2603      	movs	r6, #3
 8001370:	e73f      	b.n	80011f2 <HAL_GPIO_Init+0x36>
 8001372:	2604      	movs	r6, #4
 8001374:	e73d      	b.n	80011f2 <HAL_GPIO_Init+0x36>
 8001376:	2605      	movs	r6, #5
 8001378:	e73b      	b.n	80011f2 <HAL_GPIO_Init+0x36>
 800137a:	2606      	movs	r6, #6
 800137c:	e739      	b.n	80011f2 <HAL_GPIO_Init+0x36>
 800137e:	2607      	movs	r6, #7
 8001380:	e737      	b.n	80011f2 <HAL_GPIO_Init+0x36>
 8001382:	2608      	movs	r6, #8
 8001384:	e735      	b.n	80011f2 <HAL_GPIO_Init+0x36>
      }
    }
  }
}
 8001386:	b003      	add	sp, #12
 8001388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800138a:	bf00      	nop
 800138c:	40013800 	.word	0x40013800
 8001390:	40013c00 	.word	0x40013c00
 8001394:	40023800 	.word	0x40023800
 8001398:	40020000 	.word	0x40020000
 800139c:	40020400 	.word	0x40020400

080013a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a0:	b912      	cbnz	r2, 80013a8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013a2:	0409      	lsls	r1, r1, #16
 80013a4:	6181      	str	r1, [r0, #24]
 80013a6:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80013a8:	6181      	str	r1, [r0, #24]
 80013aa:	4770      	bx	lr

080013ac <HAL_I2C_Init>:
{
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80013ac:	2800      	cmp	r0, #0
 80013ae:	f000 8082 	beq.w	80014b6 <HAL_I2C_Init+0x10a>
{
 80013b2:	b538      	push	{r3, r4, r5, lr}
 80013b4:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80013b6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d041      	beq.n	8001442 <HAL_I2C_Init+0x96>
    hi2c->Lock = HAL_UNLOCKED;
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013be:	2324      	movs	r3, #36	; 0x24
 80013c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013c4:	6822      	ldr	r2, [r4, #0]
 80013c6:	6813      	ldr	r3, [r2, #0]
 80013c8:	f023 0301 	bic.w	r3, r3, #1
 80013cc:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013ce:	f000 fbdb 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013d2:	4b3a      	ldr	r3, [pc, #232]	; (80014bc <HAL_I2C_Init+0x110>)
 80013d4:	fba3 2300 	umull	r2, r3, r3, r0
 80013d8:	0c9b      	lsrs	r3, r3, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80013da:	6822      	ldr	r2, [r4, #0]
 80013dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80013de:	6821      	ldr	r1, [r4, #0]
 80013e0:	6865      	ldr	r5, [r4, #4]
 80013e2:	4a37      	ldr	r2, [pc, #220]	; (80014c0 <HAL_I2C_Init+0x114>)
 80013e4:	4295      	cmp	r5, r2
 80013e6:	d831      	bhi.n	800144c <HAL_I2C_Init+0xa0>
 80013e8:	3301      	adds	r3, #1
 80013ea:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80013ec:	6821      	ldr	r1, [r4, #0]
 80013ee:	6863      	ldr	r3, [r4, #4]
 80013f0:	4a33      	ldr	r2, [pc, #204]	; (80014c0 <HAL_I2C_Init+0x114>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d834      	bhi.n	8001460 <HAL_I2C_Init+0xb4>
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80013fc:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001400:	2b03      	cmp	r3, #3
 8001402:	d800      	bhi.n	8001406 <HAL_I2C_Init+0x5a>
 8001404:	2004      	movs	r0, #4
 8001406:	61c8      	str	r0, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001408:	6822      	ldr	r2, [r4, #0]
 800140a:	69e3      	ldr	r3, [r4, #28]
 800140c:	6a21      	ldr	r1, [r4, #32]
 800140e:	430b      	orrs	r3, r1
 8001410:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001412:	6822      	ldr	r2, [r4, #0]
 8001414:	6923      	ldr	r3, [r4, #16]
 8001416:	68e1      	ldr	r1, [r4, #12]
 8001418:	430b      	orrs	r3, r1
 800141a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800141c:	6822      	ldr	r2, [r4, #0]
 800141e:	6963      	ldr	r3, [r4, #20]
 8001420:	69a1      	ldr	r1, [r4, #24]
 8001422:	430b      	orrs	r3, r1
 8001424:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001426:	6822      	ldr	r2, [r4, #0]
 8001428:	6813      	ldr	r3, [r2, #0]
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001430:	2000      	movs	r0, #0
 8001432:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001434:	2320      	movs	r3, #32
 8001436:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800143a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800143c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8001440:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001442:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001446:	f009 ff83 	bl	800b350 <HAL_I2C_MspInit>
 800144a:	e7b8      	b.n	80013be <HAL_I2C_Init+0x12>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800144c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001450:	fb02 f303 	mul.w	r3, r2, r3
 8001454:	4a1b      	ldr	r2, [pc, #108]	; (80014c4 <HAL_I2C_Init+0x118>)
 8001456:	fba2 2303 	umull	r2, r3, r2, r3
 800145a:	099b      	lsrs	r3, r3, #6
 800145c:	3301      	adds	r3, #1
 800145e:	e7c4      	b.n	80013ea <HAL_I2C_Init+0x3e>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001460:	68a5      	ldr	r5, [r4, #8]
 8001462:	b98d      	cbnz	r5, 8001488 <HAL_I2C_Init+0xdc>
 8001464:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001468:	fbb0 f2f2 	udiv	r2, r0, r2
 800146c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001470:	fab2 f282 	clz	r2, r2
 8001474:	0952      	lsrs	r2, r2, #5
 8001476:	b9e2      	cbnz	r2, 80014b2 <HAL_I2C_Init+0x106>
 8001478:	b995      	cbnz	r5, 80014a0 <HAL_I2C_Init+0xf4>
 800147a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800147e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001482:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001486:	e7be      	b.n	8001406 <HAL_I2C_Init+0x5a>
 8001488:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800148c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001490:	fbb0 f2f2 	udiv	r2, r0, r2
 8001494:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001498:	fab2 f282 	clz	r2, r2
 800149c:	0952      	lsrs	r2, r2, #5
 800149e:	e7ea      	b.n	8001476 <HAL_I2C_Init+0xca>
 80014a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80014a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80014a8:	fbb0 f0f3 	udiv	r0, r0, r3
 80014ac:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 80014b0:	e7a9      	b.n	8001406 <HAL_I2C_Init+0x5a>
 80014b2:	2001      	movs	r0, #1
 80014b4:	e7a7      	b.n	8001406 <HAL_I2C_Init+0x5a>
    return HAL_ERROR;
 80014b6:	2001      	movs	r0, #1
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	431bde83 	.word	0x431bde83
 80014c0:	000186a0 	.word	0x000186a0
 80014c4:	10624dd3 	.word	0x10624dd3

080014c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80014c8:	b510      	push	{r4, lr}
 80014ca:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 80014cc:	2300      	movs	r3, #0
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	4b23      	ldr	r3, [pc, #140]	; (8001560 <HAL_PWREx_EnableOverDrive+0x98>)
 80014d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014d8:	641a      	str	r2, [r3, #64]	; 0x40
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e0:	9301      	str	r3, [sp, #4]
 80014e2:	9b01      	ldr	r3, [sp, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014e8:	fa93 f3a3 	rbit	r3, r3
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014ec:	fab3 f383 	clz	r3, r3
 80014f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014f4:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	2201      	movs	r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014fe:	f7ff f879 	bl	80005f4 <HAL_GetTick>
 8001502:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001504:	4b17      	ldr	r3, [pc, #92]	; (8001564 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800150c:	d108      	bne.n	8001520 <HAL_PWREx_EnableOverDrive+0x58>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800150e:	f7ff f871 	bl	80005f4 <HAL_GetTick>
 8001512:	1b00      	subs	r0, r0, r4
 8001514:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001518:	d9f4      	bls.n	8001504 <HAL_PWREx_EnableOverDrive+0x3c>
    {
      return HAL_TIMEOUT;
 800151a:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 800151c:	b002      	add	sp, #8
 800151e:	bd10      	pop	{r4, pc}
 8001520:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001524:	fa93 f3a3 	rbit	r3, r3
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001528:	fab3 f383 	clz	r3, r3
 800152c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001530:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	2201      	movs	r2, #1
 8001538:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800153a:	f7ff f85b 	bl	80005f4 <HAL_GetTick>
 800153e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001548:	d107      	bne.n	800155a <HAL_PWREx_EnableOverDrive+0x92>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800154a:	f7ff f853 	bl	80005f4 <HAL_GetTick>
 800154e:	1b00      	subs	r0, r0, r4
 8001550:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001554:	d9f4      	bls.n	8001540 <HAL_PWREx_EnableOverDrive+0x78>
      return HAL_TIMEOUT;
 8001556:	2003      	movs	r0, #3
 8001558:	e7e0      	b.n	800151c <HAL_PWREx_EnableOverDrive+0x54>
  return HAL_OK;
 800155a:	2000      	movs	r0, #0
 800155c:	e7de      	b.n	800151c <HAL_PWREx_EnableOverDrive+0x54>
 800155e:	bf00      	nop
 8001560:	40023800 	.word	0x40023800
 8001564:	40007000 	.word	0x40007000

08001568 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001568:	b530      	push	{r4, r5, lr}
 800156a:	b083      	sub	sp, #12
 800156c:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800156e:	6803      	ldr	r3, [r0, #0]
 8001570:	f013 0f01 	tst.w	r3, #1
 8001574:	d03b      	beq.n	80015ee <HAL_RCC_OscConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001576:	4ba9      	ldr	r3, [pc, #676]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	2b04      	cmp	r3, #4
 8001580:	d02c      	beq.n	80015dc <HAL_RCC_OscConfig+0x74>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001582:	4ba6      	ldr	r3, [pc, #664]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800158a:	2b08      	cmp	r3, #8
 800158c:	d021      	beq.n	80015d2 <HAL_RCC_OscConfig+0x6a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800158e:	6863      	ldr	r3, [r4, #4]
 8001590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001594:	d04f      	beq.n	8001636 <HAL_RCC_OscConfig+0xce>
 8001596:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800159a:	d052      	beq.n	8001642 <HAL_RCC_OscConfig+0xda>
 800159c:	4b9f      	ldr	r3, [pc, #636]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015ac:	601a      	str	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015ae:	6863      	ldr	r3, [r4, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d050      	beq.n	8001656 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b4:	f7ff f81e 	bl	80005f4 <HAL_GetTick>
 80015b8:	4605      	mov	r5, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ba:	4b98      	ldr	r3, [pc, #608]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80015c2:	d114      	bne.n	80015ee <HAL_RCC_OscConfig+0x86>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c4:	f7ff f816 	bl	80005f4 <HAL_GetTick>
 80015c8:	1b40      	subs	r0, r0, r5
 80015ca:	2864      	cmp	r0, #100	; 0x64
 80015cc:	d9f5      	bls.n	80015ba <HAL_RCC_OscConfig+0x52>
          {
            return HAL_TIMEOUT;
 80015ce:	2003      	movs	r0, #3
 80015d0:	e199      	b.n	8001906 <HAL_RCC_OscConfig+0x39e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015d2:	4b92      	ldr	r3, [pc, #584]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80015da:	d0d8      	beq.n	800158e <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015dc:	4b8f      	ldr	r3, [pc, #572]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80015e4:	d003      	beq.n	80015ee <HAL_RCC_OscConfig+0x86>
 80015e6:	6863      	ldr	r3, [r4, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 8189 	beq.w	8001900 <HAL_RCC_OscConfig+0x398>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ee:	6823      	ldr	r3, [r4, #0]
 80015f0:	f013 0f02 	tst.w	r3, #2
 80015f4:	d05b      	beq.n	80016ae <HAL_RCC_OscConfig+0x146>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015f6:	4b89      	ldr	r3, [pc, #548]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f013 0f0c 	tst.w	r3, #12
 80015fe:	d03e      	beq.n	800167e <HAL_RCC_OscConfig+0x116>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001600:	4b86      	ldr	r3, [pc, #536]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001608:	2b08      	cmp	r3, #8
 800160a:	d033      	beq.n	8001674 <HAL_RCC_OscConfig+0x10c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800160c:	68e3      	ldr	r3, [r4, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d074      	beq.n	80016fc <HAL_RCC_OscConfig+0x194>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001612:	2201      	movs	r2, #1
 8001614:	4b82      	ldr	r3, [pc, #520]	; (8001820 <HAL_RCC_OscConfig+0x2b8>)
 8001616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001618:	f7fe ffec 	bl	80005f4 <HAL_GetTick>
 800161c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161e:	4b7f      	ldr	r3, [pc, #508]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f013 0f02 	tst.w	r3, #2
 8001626:	d15a      	bne.n	80016de <HAL_RCC_OscConfig+0x176>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001628:	f7fe ffe4 	bl	80005f4 <HAL_GetTick>
 800162c:	1b40      	subs	r0, r0, r5
 800162e:	2802      	cmp	r0, #2
 8001630:	d9f5      	bls.n	800161e <HAL_RCC_OscConfig+0xb6>
          {
            return HAL_TIMEOUT;
 8001632:	2003      	movs	r0, #3
 8001634:	e167      	b.n	8001906 <HAL_RCC_OscConfig+0x39e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001636:	4a79      	ldr	r2, [pc, #484]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 8001638:	6813      	ldr	r3, [r2, #0]
 800163a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	e7b5      	b.n	80015ae <HAL_RCC_OscConfig+0x46>
 8001642:	4b76      	ldr	r3, [pc, #472]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	e7ab      	b.n	80015ae <HAL_RCC_OscConfig+0x46>
        tickstart = HAL_GetTick();
 8001656:	f7fe ffcd 	bl	80005f4 <HAL_GetTick>
 800165a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165c:	4b6f      	ldr	r3, [pc, #444]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001664:	d0c3      	beq.n	80015ee <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001666:	f7fe ffc5 	bl	80005f4 <HAL_GetTick>
 800166a:	1b40      	subs	r0, r0, r5
 800166c:	2864      	cmp	r0, #100	; 0x64
 800166e:	d9f5      	bls.n	800165c <HAL_RCC_OscConfig+0xf4>
            return HAL_TIMEOUT;
 8001670:	2003      	movs	r0, #3
 8001672:	e148      	b.n	8001906 <HAL_RCC_OscConfig+0x39e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001674:	4b69      	ldr	r3, [pc, #420]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800167c:	d1c6      	bne.n	800160c <HAL_RCC_OscConfig+0xa4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167e:	4b67      	ldr	r3, [pc, #412]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f013 0f02 	tst.w	r3, #2
 8001686:	d004      	beq.n	8001692 <HAL_RCC_OscConfig+0x12a>
 8001688:	68e3      	ldr	r3, [r4, #12]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d001      	beq.n	8001692 <HAL_RCC_OscConfig+0x12a>
        return HAL_ERROR;
 800168e:	2001      	movs	r0, #1
 8001690:	e139      	b.n	8001906 <HAL_RCC_OscConfig+0x39e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001692:	4862      	ldr	r0, [pc, #392]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 8001694:	6803      	ldr	r3, [r0, #0]
 8001696:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800169a:	6921      	ldr	r1, [r4, #16]
 800169c:	22f8      	movs	r2, #248	; 0xf8
 800169e:	fa92 f2a2 	rbit	r2, r2
 80016a2:	fab2 f282 	clz	r2, r2
 80016a6:	fa01 f202 	lsl.w	r2, r1, r2
 80016aa:	4313      	orrs	r3, r2
 80016ac:	6003      	str	r3, [r0, #0]
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ae:	6823      	ldr	r3, [r4, #0]
 80016b0:	f013 0f08 	tst.w	r3, #8
 80016b4:	d046      	beq.n	8001744 <HAL_RCC_OscConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016b6:	6963      	ldr	r3, [r4, #20]
 80016b8:	b393      	cbz	r3, 8001720 <HAL_RCC_OscConfig+0x1b8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ba:	2201      	movs	r2, #1
 80016bc:	4b59      	ldr	r3, [pc, #356]	; (8001824 <HAL_RCC_OscConfig+0x2bc>)
 80016be:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c0:	f7fe ff98 	bl	80005f4 <HAL_GetTick>
 80016c4:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c6:	4b55      	ldr	r3, [pc, #340]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 80016c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ca:	f013 0f02 	tst.w	r3, #2
 80016ce:	d139      	bne.n	8001744 <HAL_RCC_OscConfig+0x1dc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016d0:	f7fe ff90 	bl	80005f4 <HAL_GetTick>
 80016d4:	1b40      	subs	r0, r0, r5
 80016d6:	2802      	cmp	r0, #2
 80016d8:	d9f5      	bls.n	80016c6 <HAL_RCC_OscConfig+0x15e>
        {
          return HAL_TIMEOUT;
 80016da:	2003      	movs	r0, #3
 80016dc:	e113      	b.n	8001906 <HAL_RCC_OscConfig+0x39e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016de:	484f      	ldr	r0, [pc, #316]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 80016e0:	6803      	ldr	r3, [r0, #0]
 80016e2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80016e6:	6921      	ldr	r1, [r4, #16]
 80016e8:	22f8      	movs	r2, #248	; 0xf8
 80016ea:	fa92 f2a2 	rbit	r2, r2
 80016ee:	fab2 f282 	clz	r2, r2
 80016f2:	fa01 f202 	lsl.w	r2, r1, r2
 80016f6:	4313      	orrs	r3, r2
 80016f8:	6003      	str	r3, [r0, #0]
 80016fa:	e7d8      	b.n	80016ae <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_DISABLE();
 80016fc:	2200      	movs	r2, #0
 80016fe:	4b48      	ldr	r3, [pc, #288]	; (8001820 <HAL_RCC_OscConfig+0x2b8>)
 8001700:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001702:	f7fe ff77 	bl	80005f4 <HAL_GetTick>
 8001706:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001708:	4b44      	ldr	r3, [pc, #272]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f013 0f02 	tst.w	r3, #2
 8001710:	d0cd      	beq.n	80016ae <HAL_RCC_OscConfig+0x146>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001712:	f7fe ff6f 	bl	80005f4 <HAL_GetTick>
 8001716:	1b40      	subs	r0, r0, r5
 8001718:	2802      	cmp	r0, #2
 800171a:	d9f5      	bls.n	8001708 <HAL_RCC_OscConfig+0x1a0>
            return HAL_TIMEOUT;
 800171c:	2003      	movs	r0, #3
 800171e:	e0f2      	b.n	8001906 <HAL_RCC_OscConfig+0x39e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001720:	2200      	movs	r2, #0
 8001722:	4b40      	ldr	r3, [pc, #256]	; (8001824 <HAL_RCC_OscConfig+0x2bc>)
 8001724:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001726:	f7fe ff65 	bl	80005f4 <HAL_GetTick>
 800172a:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800172c:	4b3b      	ldr	r3, [pc, #236]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 800172e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001730:	f013 0f02 	tst.w	r3, #2
 8001734:	d006      	beq.n	8001744 <HAL_RCC_OscConfig+0x1dc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001736:	f7fe ff5d 	bl	80005f4 <HAL_GetTick>
 800173a:	1b40      	subs	r0, r0, r5
 800173c:	2802      	cmp	r0, #2
 800173e:	d9f5      	bls.n	800172c <HAL_RCC_OscConfig+0x1c4>
        {
          return HAL_TIMEOUT;
 8001740:	2003      	movs	r0, #3
 8001742:	e0e0      	b.n	8001906 <HAL_RCC_OscConfig+0x39e>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001744:	6823      	ldr	r3, [r4, #0]
 8001746:	f013 0f04 	tst.w	r3, #4
 800174a:	d120      	bne.n	800178e <HAL_RCC_OscConfig+0x226>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800174c:	69a3      	ldr	r3, [r4, #24]
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 80d8 	beq.w	8001904 <HAL_RCC_OscConfig+0x39c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001754:	4a31      	ldr	r2, [pc, #196]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 8001756:	6892      	ldr	r2, [r2, #8]
 8001758:	f002 020c 	and.w	r2, r2, #12
 800175c:	2a08      	cmp	r2, #8
 800175e:	f000 80d4 	beq.w	800190a <HAL_RCC_OscConfig+0x3a2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001762:	2b02      	cmp	r3, #2
 8001764:	f000 8080 	beq.w	8001868 <HAL_RCC_OscConfig+0x300>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001768:	2200      	movs	r2, #0
 800176a:	4b2f      	ldr	r3, [pc, #188]	; (8001828 <HAL_RCC_OscConfig+0x2c0>)
 800176c:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176e:	f7fe ff41 	bl	80005f4 <HAL_GetTick>
 8001772:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001774:	4b29      	ldr	r3, [pc, #164]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800177c:	f000 80be 	beq.w	80018fc <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001780:	f7fe ff38 	bl	80005f4 <HAL_GetTick>
 8001784:	1b00      	subs	r0, r0, r4
 8001786:	2802      	cmp	r0, #2
 8001788:	d9f4      	bls.n	8001774 <HAL_RCC_OscConfig+0x20c>
          {
            return HAL_TIMEOUT;
 800178a:	2003      	movs	r0, #3
 800178c:	e0bb      	b.n	8001906 <HAL_RCC_OscConfig+0x39e>
    __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	4b22      	ldr	r3, [pc, #136]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 8001794:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001796:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800179a:	641a      	str	r2, [r3, #64]	; 0x40
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	9301      	str	r3, [sp, #4]
 80017a4:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80017a6:	4a21      	ldr	r2, [pc, #132]	; (800182c <HAL_RCC_OscConfig+0x2c4>)
 80017a8:	6813      	ldr	r3, [r2, #0]
 80017aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ae:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80017b0:	f7fe ff20 	bl	80005f4 <HAL_GetTick>
 80017b4:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80017b6:	4b1d      	ldr	r3, [pc, #116]	; (800182c <HAL_RCC_OscConfig+0x2c4>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f413 7f80 	tst.w	r3, #256	; 0x100
 80017be:	d106      	bne.n	80017ce <HAL_RCC_OscConfig+0x266>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80017c0:	f7fe ff18 	bl	80005f4 <HAL_GetTick>
 80017c4:	1b40      	subs	r0, r0, r5
 80017c6:	2802      	cmp	r0, #2
 80017c8:	d9f5      	bls.n	80017b6 <HAL_RCC_OscConfig+0x24e>
        return HAL_TIMEOUT;
 80017ca:	2003      	movs	r0, #3
 80017cc:	e09b      	b.n	8001906 <HAL_RCC_OscConfig+0x39e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ce:	68a3      	ldr	r3, [r4, #8]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d01d      	beq.n	8001810 <HAL_RCC_OscConfig+0x2a8>
 80017d4:	2b05      	cmp	r3, #5
 80017d6:	d02b      	beq.n	8001830 <HAL_RCC_OscConfig+0x2c8>
 80017d8:	4b10      	ldr	r3, [pc, #64]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 80017da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80017dc:	f022 0201 	bic.w	r2, r2, #1
 80017e0:	671a      	str	r2, [r3, #112]	; 0x70
 80017e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80017e4:	f022 0204 	bic.w	r2, r2, #4
 80017e8:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017ea:	68a3      	ldr	r3, [r4, #8]
 80017ec:	b353      	cbz	r3, 8001844 <HAL_RCC_OscConfig+0x2dc>
      tickstart = HAL_GetTick();
 80017ee:	f7fe ff01 	bl	80005f4 <HAL_GetTick>
 80017f2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 80017f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f8:	f013 0f02 	tst.w	r3, #2
 80017fc:	d1a6      	bne.n	800174c <HAL_RCC_OscConfig+0x1e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017fe:	f7fe fef9 	bl	80005f4 <HAL_GetTick>
 8001802:	1b40      	subs	r0, r0, r5
 8001804:	f241 3388 	movw	r3, #5000	; 0x1388
 8001808:	4298      	cmp	r0, r3
 800180a:	d9f3      	bls.n	80017f4 <HAL_RCC_OscConfig+0x28c>
          return HAL_TIMEOUT;
 800180c:	2003      	movs	r0, #3
 800180e:	e07a      	b.n	8001906 <HAL_RCC_OscConfig+0x39e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001810:	4a02      	ldr	r2, [pc, #8]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 8001812:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6713      	str	r3, [r2, #112]	; 0x70
 800181a:	e7e6      	b.n	80017ea <HAL_RCC_OscConfig+0x282>
 800181c:	40023800 	.word	0x40023800
 8001820:	42470000 	.word	0x42470000
 8001824:	42470e80 	.word	0x42470e80
 8001828:	42470060 	.word	0x42470060
 800182c:	40007000 	.word	0x40007000
 8001830:	4b37      	ldr	r3, [pc, #220]	; (8001910 <HAL_RCC_OscConfig+0x3a8>)
 8001832:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001834:	f042 0204 	orr.w	r2, r2, #4
 8001838:	671a      	str	r2, [r3, #112]	; 0x70
 800183a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800183c:	f042 0201 	orr.w	r2, r2, #1
 8001840:	671a      	str	r2, [r3, #112]	; 0x70
 8001842:	e7d2      	b.n	80017ea <HAL_RCC_OscConfig+0x282>
      tickstart = HAL_GetTick();
 8001844:	f7fe fed6 	bl	80005f4 <HAL_GetTick>
 8001848:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800184a:	4b31      	ldr	r3, [pc, #196]	; (8001910 <HAL_RCC_OscConfig+0x3a8>)
 800184c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184e:	f013 0f02 	tst.w	r3, #2
 8001852:	f43f af7b 	beq.w	800174c <HAL_RCC_OscConfig+0x1e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001856:	f7fe fecd 	bl	80005f4 <HAL_GetTick>
 800185a:	1b40      	subs	r0, r0, r5
 800185c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001860:	4298      	cmp	r0, r3
 8001862:	d9f2      	bls.n	800184a <HAL_RCC_OscConfig+0x2e2>
          return HAL_TIMEOUT;
 8001864:	2003      	movs	r0, #3
 8001866:	e04e      	b.n	8001906 <HAL_RCC_OscConfig+0x39e>
        __HAL_RCC_PLL_DISABLE();
 8001868:	2200      	movs	r2, #0
 800186a:	4b2a      	ldr	r3, [pc, #168]	; (8001914 <HAL_RCC_OscConfig+0x3ac>)
 800186c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800186e:	f7fe fec1 	bl	80005f4 <HAL_GetTick>
 8001872:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001874:	4b26      	ldr	r3, [pc, #152]	; (8001910 <HAL_RCC_OscConfig+0x3a8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800187c:	d006      	beq.n	800188c <HAL_RCC_OscConfig+0x324>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800187e:	f7fe feb9 	bl	80005f4 <HAL_GetTick>
 8001882:	1b40      	subs	r0, r0, r5
 8001884:	2802      	cmp	r0, #2
 8001886:	d9f5      	bls.n	8001874 <HAL_RCC_OscConfig+0x30c>
            return HAL_TIMEOUT;
 8001888:	2003      	movs	r0, #3
 800188a:	e03c      	b.n	8001906 <HAL_RCC_OscConfig+0x39e>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800188c:	69e3      	ldr	r3, [r4, #28]
 800188e:	6a22      	ldr	r2, [r4, #32]
 8001890:	4313      	orrs	r3, r2
 8001892:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001894:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001898:	fa92 f2a2 	rbit	r2, r2
 800189c:	fab2 f282 	clz	r2, r2
 80018a0:	fa01 f202 	lsl.w	r2, r1, r2
 80018a4:	4313      	orrs	r3, r2
 80018a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80018a8:	0852      	lsrs	r2, r2, #1
 80018aa:	3a01      	subs	r2, #1
 80018ac:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80018b0:	fa91 f1a1 	rbit	r1, r1
 80018b4:	fab1 f181 	clz	r1, r1
 80018b8:	408a      	lsls	r2, r1
 80018ba:	4313      	orrs	r3, r2
 80018bc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80018be:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 80018c2:	fa92 f2a2 	rbit	r2, r2
 80018c6:	fab2 f282 	clz	r2, r2
 80018ca:	fa01 f202 	lsl.w	r2, r1, r2
 80018ce:	4313      	orrs	r3, r2
 80018d0:	4a0f      	ldr	r2, [pc, #60]	; (8001910 <HAL_RCC_OscConfig+0x3a8>)
 80018d2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80018d4:	2201      	movs	r2, #1
 80018d6:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <HAL_RCC_OscConfig+0x3ac>)
 80018d8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018da:	f7fe fe8b 	bl	80005f4 <HAL_GetTick>
 80018de:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_RCC_OscConfig+0x3a8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80018e8:	d106      	bne.n	80018f8 <HAL_RCC_OscConfig+0x390>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ea:	f7fe fe83 	bl	80005f4 <HAL_GetTick>
 80018ee:	1b00      	subs	r0, r0, r4
 80018f0:	2802      	cmp	r0, #2
 80018f2:	d9f5      	bls.n	80018e0 <HAL_RCC_OscConfig+0x378>
            return HAL_TIMEOUT;
 80018f4:	2003      	movs	r0, #3
 80018f6:	e006      	b.n	8001906 <HAL_RCC_OscConfig+0x39e>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80018f8:	2000      	movs	r0, #0
 80018fa:	e004      	b.n	8001906 <HAL_RCC_OscConfig+0x39e>
 80018fc:	2000      	movs	r0, #0
 80018fe:	e002      	b.n	8001906 <HAL_RCC_OscConfig+0x39e>
        return HAL_ERROR;
 8001900:	2001      	movs	r0, #1
 8001902:	e000      	b.n	8001906 <HAL_RCC_OscConfig+0x39e>
  return HAL_OK;
 8001904:	2000      	movs	r0, #0
}
 8001906:	b003      	add	sp, #12
 8001908:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 800190a:	2001      	movs	r0, #1
 800190c:	e7fb      	b.n	8001906 <HAL_RCC_OscConfig+0x39e>
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800
 8001914:	42470060 	.word	0x42470060

08001918 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800191a:	4b2e      	ldr	r3, [pc, #184]	; (80019d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	2b04      	cmp	r3, #4
 8001924:	d054      	beq.n	80019d0 <HAL_RCC_GetSysClockFreq+0xb8>
 8001926:	2b08      	cmp	r3, #8
 8001928:	d001      	beq.n	800192e <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800192a:	482b      	ldr	r0, [pc, #172]	; (80019d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800192c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800192e:	4b29      	ldr	r3, [pc, #164]	; (80019d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800193c:	d01f      	beq.n	800197e <HAL_RCC_GetSysClockFreq+0x66>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE * (uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)) / pllm)  );
 800193e:	4b25      	ldr	r3, [pc, #148]	; (80019d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001940:	6858      	ldr	r0, [r3, #4]
 8001942:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001946:	4018      	ands	r0, r3
 8001948:	fa93 f3a3 	rbit	r3, r3
 800194c:	fab3 f383 	clz	r3, r3
 8001950:	40d8      	lsrs	r0, r3
 8001952:	2300      	movs	r3, #0
 8001954:	4921      	ldr	r1, [pc, #132]	; (80019dc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001956:	fba0 0101 	umull	r0, r1, r0, r1
 800195a:	f7fe fca1 	bl	80002a0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE * (uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)) / pllm) );    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 800195e:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001966:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800196a:	fa92 f2a2 	rbit	r2, r2
 800196e:	fab2 f282 	clz	r2, r2
 8001972:	40d3      	lsrs	r3, r2
 8001974:	3301      	adds	r3, #1
 8001976:	005b      	lsls	r3, r3, #1
      
      sysclockfreq = pllvco/pllp;
 8001978:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800197c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = ((HSI_VALUE * (uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)) / pllm) );    
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001986:	400b      	ands	r3, r1
 8001988:	fa91 f1a1 	rbit	r1, r1
 800198c:	fab1 f181 	clz	r1, r1
 8001990:	40cb      	lsrs	r3, r1
 8001992:	461e      	mov	r6, r3
 8001994:	2700      	movs	r7, #0
 8001996:	015c      	lsls	r4, r3, #5
 8001998:	0edd      	lsrs	r5, r3, #27
 800199a:	1ae4      	subs	r4, r4, r3
 800199c:	eb65 0507 	sbc.w	r5, r5, r7
 80019a0:	01a9      	lsls	r1, r5, #6
 80019a2:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80019a6:	01a0      	lsls	r0, r4, #6
 80019a8:	1b00      	subs	r0, r0, r4
 80019aa:	eb61 0105 	sbc.w	r1, r1, r5
 80019ae:	00cb      	lsls	r3, r1, #3
 80019b0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80019b4:	00c4      	lsls	r4, r0, #3
 80019b6:	19a0      	adds	r0, r4, r6
 80019b8:	eb43 0107 	adc.w	r1, r3, r7
 80019bc:	028b      	lsls	r3, r1, #10
 80019be:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80019c2:	0284      	lsls	r4, r0, #10
 80019c4:	4620      	mov	r0, r4
 80019c6:	4619      	mov	r1, r3
 80019c8:	2300      	movs	r3, #0
 80019ca:	f7fe fc69 	bl	80002a0 <__aeabi_uldivmod>
 80019ce:	e7c6      	b.n	800195e <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSE_VALUE;
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <HAL_RCC_GetSysClockFreq+0xc4>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80019d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019d4:	40023800 	.word	0x40023800
 80019d8:	00f42400 	.word	0x00f42400
 80019dc:	017d7840 	.word	0x017d7840

080019e0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019e0:	4b62      	ldr	r3, [pc, #392]	; (8001b6c <HAL_RCC_ClockConfig+0x18c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 030f 	and.w	r3, r3, #15
 80019e8:	428b      	cmp	r3, r1
 80019ea:	d209      	bcs.n	8001a00 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ec:	b2cb      	uxtb	r3, r1
 80019ee:	4a5f      	ldr	r2, [pc, #380]	; (8001b6c <HAL_RCC_ClockConfig+0x18c>)
 80019f0:	7013      	strb	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019f2:	6813      	ldr	r3, [r2, #0]
 80019f4:	f003 030f 	and.w	r3, r3, #15
 80019f8:	4299      	cmp	r1, r3
 80019fa:	d001      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x20>
      return HAL_ERROR;
 80019fc:	2001      	movs	r0, #1
 80019fe:	4770      	bx	lr
{
 8001a00:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a02:	6803      	ldr	r3, [r0, #0]
 8001a04:	f013 0f02 	tst.w	r3, #2
 8001a08:	d006      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a0a:	4a59      	ldr	r2, [pc, #356]	; (8001b70 <HAL_RCC_ClockConfig+0x190>)
 8001a0c:	6893      	ldr	r3, [r2, #8]
 8001a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a12:	6884      	ldr	r4, [r0, #8]
 8001a14:	4323      	orrs	r3, r4
 8001a16:	6093      	str	r3, [r2, #8]
 8001a18:	460d      	mov	r5, r1
 8001a1a:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a1c:	6803      	ldr	r3, [r0, #0]
 8001a1e:	f013 0f01 	tst.w	r3, #1
 8001a22:	d064      	beq.n	8001aee <HAL_RCC_ClockConfig+0x10e>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a24:	6843      	ldr	r3, [r0, #4]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d026      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x98>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001a2a:	1e9a      	subs	r2, r3, #2
 8001a2c:	2a01      	cmp	r2, #1
 8001a2e:	d92a      	bls.n	8001a86 <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a30:	4a4f      	ldr	r2, [pc, #316]	; (8001b70 <HAL_RCC_ClockConfig+0x190>)
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	f012 0f02 	tst.w	r2, #2
 8001a38:	f000 8096 	beq.w	8001b68 <HAL_RCC_ClockConfig+0x188>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a3c:	494c      	ldr	r1, [pc, #304]	; (8001b70 <HAL_RCC_ClockConfig+0x190>)
 8001a3e:	688a      	ldr	r2, [r1, #8]
 8001a40:	f022 0203 	bic.w	r2, r2, #3
 8001a44:	4313      	orrs	r3, r2
 8001a46:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001a48:	f7fe fdd4 	bl	80005f4 <HAL_GetTick>
 8001a4c:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4e:	6863      	ldr	r3, [r4, #4]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d01f      	beq.n	8001a94 <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d02c      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0xd2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	d039      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0xf0>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a5c:	4b44      	ldr	r3, [pc, #272]	; (8001b70 <HAL_RCC_ClockConfig+0x190>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f013 0f0c 	tst.w	r3, #12
 8001a64:	d043      	beq.n	8001aee <HAL_RCC_ClockConfig+0x10e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a66:	f7fe fdc5 	bl	80005f4 <HAL_GetTick>
 8001a6a:	1b80      	subs	r0, r0, r6
 8001a6c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a70:	4298      	cmp	r0, r3
 8001a72:	d9f3      	bls.n	8001a5c <HAL_RCC_ClockConfig+0x7c>
          return HAL_TIMEOUT;
 8001a74:	2003      	movs	r0, #3
 8001a76:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a78:	4a3d      	ldr	r2, [pc, #244]	; (8001b70 <HAL_RCC_ClockConfig+0x190>)
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001a80:	d1dc      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x5c>
        return HAL_ERROR;
 8001a82:	2001      	movs	r0, #1
 8001a84:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a86:	4a3a      	ldr	r2, [pc, #232]	; (8001b70 <HAL_RCC_ClockConfig+0x190>)
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001a8e:	d1d5      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x5c>
        return HAL_ERROR;
 8001a90:	2001      	movs	r0, #1
 8001a92:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a94:	4b36      	ldr	r3, [pc, #216]	; (8001b70 <HAL_RCC_ClockConfig+0x190>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 030c 	and.w	r3, r3, #12
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	d026      	beq.n	8001aee <HAL_RCC_ClockConfig+0x10e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa0:	f7fe fda8 	bl	80005f4 <HAL_GetTick>
 8001aa4:	1b80      	subs	r0, r0, r6
 8001aa6:	f241 3388 	movw	r3, #5000	; 0x1388
 8001aaa:	4298      	cmp	r0, r3
 8001aac:	d9f2      	bls.n	8001a94 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8001aae:	2003      	movs	r0, #3
 8001ab0:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab2:	4b2f      	ldr	r3, [pc, #188]	; (8001b70 <HAL_RCC_ClockConfig+0x190>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 030c 	and.w	r3, r3, #12
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d017      	beq.n	8001aee <HAL_RCC_ClockConfig+0x10e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001abe:	f7fe fd99 	bl	80005f4 <HAL_GetTick>
 8001ac2:	1b80      	subs	r0, r0, r6
 8001ac4:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ac8:	4298      	cmp	r0, r3
 8001aca:	d9f2      	bls.n	8001ab2 <HAL_RCC_ClockConfig+0xd2>
          return HAL_TIMEOUT;
 8001acc:	2003      	movs	r0, #3
 8001ace:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001ad0:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <HAL_RCC_ClockConfig+0x190>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 030c 	and.w	r3, r3, #12
 8001ad8:	2b0c      	cmp	r3, #12
 8001ada:	d008      	beq.n	8001aee <HAL_RCC_ClockConfig+0x10e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001adc:	f7fe fd8a 	bl	80005f4 <HAL_GetTick>
 8001ae0:	1b80      	subs	r0, r0, r6
 8001ae2:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ae6:	4298      	cmp	r0, r3
 8001ae8:	d9f2      	bls.n	8001ad0 <HAL_RCC_ClockConfig+0xf0>
          return HAL_TIMEOUT;
 8001aea:	2003      	movs	r0, #3
 8001aec:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001aee:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <HAL_RCC_ClockConfig+0x18c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	429d      	cmp	r5, r3
 8001af8:	d209      	bcs.n	8001b0e <HAL_RCC_ClockConfig+0x12e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afa:	b2ea      	uxtb	r2, r5
 8001afc:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <HAL_RCC_ClockConfig+0x18c>)
 8001afe:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	429d      	cmp	r5, r3
 8001b08:	d001      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x12e>
      return HAL_ERROR;
 8001b0a:	2001      	movs	r0, #1
}
 8001b0c:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	f013 0f04 	tst.w	r3, #4
 8001b14:	d006      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x144>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b16:	4a16      	ldr	r2, [pc, #88]	; (8001b70 <HAL_RCC_ClockConfig+0x190>)
 8001b18:	6893      	ldr	r3, [r2, #8]
 8001b1a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001b1e:	68e1      	ldr	r1, [r4, #12]
 8001b20:	430b      	orrs	r3, r1
 8001b22:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b24:	6823      	ldr	r3, [r4, #0]
 8001b26:	f013 0f08 	tst.w	r3, #8
 8001b2a:	d007      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x15c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b2c:	4a10      	ldr	r2, [pc, #64]	; (8001b70 <HAL_RCC_ClockConfig+0x190>)
 8001b2e:	6893      	ldr	r3, [r2, #8]
 8001b30:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001b34:	6921      	ldr	r1, [r4, #16]
 8001b36:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b3a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001b3c:	f7ff feec 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <HAL_RCC_ClockConfig+0x190>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b48:	22f0      	movs	r2, #240	; 0xf0
 8001b4a:	fa92 f2a2 	rbit	r2, r2
 8001b4e:	fab2 f282 	clz	r2, r2
 8001b52:	40d3      	lsrs	r3, r2
 8001b54:	4a07      	ldr	r2, [pc, #28]	; (8001b74 <HAL_RCC_ClockConfig+0x194>)
 8001b56:	5cd3      	ldrb	r3, [r2, r3]
 8001b58:	40d8      	lsrs	r0, r3
 8001b5a:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <HAL_RCC_ClockConfig+0x198>)
 8001b5c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (1);
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f009 fee0 	bl	800b924 <HAL_InitTick>
  return HAL_OK;
 8001b64:	2000      	movs	r0, #0
 8001b66:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001b68:	2001      	movs	r0, #1
 8001b6a:	bd70      	pop	{r4, r5, r6, pc}
 8001b6c:	40023c00 	.word	0x40023c00
 8001b70:	40023800 	.word	0x40023800
 8001b74:	0800d090 	.word	0x0800d090
 8001b78:	20000040 	.word	0x20000040

08001b7c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001b7c:	4b01      	ldr	r3, [pc, #4]	; (8001b84 <HAL_RCC_GetHCLKFreq+0x8>)
 8001b7e:	6818      	ldr	r0, [r3, #0]
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000040 	.word	0x20000040

08001b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8001b88:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001b8a:	f7ff fff7 	bl	8001b7c <HAL_RCC_GetHCLKFreq>
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001b96:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001b9a:	fa92 f2a2 	rbit	r2, r2
 8001b9e:	fab2 f282 	clz	r2, r2
 8001ba2:	40d3      	lsrs	r3, r2
 8001ba4:	4a02      	ldr	r2, [pc, #8]	; (8001bb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ba6:	5cd3      	ldrb	r3, [r2, r3]
}
 8001ba8:	40d8      	lsrs	r0, r3
 8001baa:	bd08      	pop	{r3, pc}
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	0800d090 	.word	0x0800d090

08001bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bb4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001bb6:	f7ff ffe1 	bl	8001b7c <HAL_RCC_GetHCLKFreq>
 8001bba:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001bc2:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001bc6:	fa92 f2a2 	rbit	r2, r2
 8001bca:	fab2 f282 	clz	r2, r2
 8001bce:	40d3      	lsrs	r3, r2
 8001bd0:	4a02      	ldr	r2, [pc, #8]	; (8001bdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001bd2:	5cd3      	ldrb	r3, [r2, r3]
} 
 8001bd4:	40d8      	lsrs	r0, r3
 8001bd6:	bd08      	pop	{r3, pc}
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	0800d090 	.word	0x0800d090

08001be0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001be0:	230f      	movs	r3, #15
 8001be2:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_RCC_GetClockConfig+0x34>)
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	f002 0203 	and.w	r2, r2, #3
 8001bec:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001bf4:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001bfc:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	08db      	lsrs	r3, r3, #3
 8001c02:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001c06:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001c08:	4b03      	ldr	r3, [pc, #12]	; (8001c18 <HAL_RCC_GetClockConfig+0x38>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 030f 	and.w	r3, r3, #15
 8001c10:	600b      	str	r3, [r1, #0]
 8001c12:	4770      	bx	lr
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40023c00 	.word	0x40023c00

08001c1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c1c:	b570      	push	{r4, r5, r6, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	4604      	mov	r4, r0
  
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division   
     factor is common parameters for both peripherals */ 
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) || 
 8001c22:	6803      	ldr	r3, [r0, #0]
 8001c24:	f013 0f03 	tst.w	r3, #3
 8001c28:	d114      	bne.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x38>
    
  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */ 
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) || 
 8001c2a:	6823      	ldr	r3, [r4, #0]
 8001c2c:	f013 0f0c 	tst.w	r3, #12
 8001c30:	d170      	bne.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    }  
  }
  /*--------------------------------------------------------------------------*/
    
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c32:	6823      	ldr	r3, [r4, #0]
 8001c34:	f013 0f20 	tst.w	r3, #32
 8001c38:	f040 80f7 	bne.w	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c3c:	6823      	ldr	r3, [r4, #0]
 8001c3e:	f013 0f10 	tst.w	r3, #16
 8001c42:	f000 8159 	beq.w	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c46:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8001c4a:	4bac      	ldr	r3, [pc, #688]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001c4c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8001c4e:	2000      	movs	r0, #0
}
 8001c50:	b002      	add	sp, #8
 8001c52:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLLI2S_DISABLE();    
 8001c54:	2200      	movs	r2, #0
 8001c56:	4baa      	ldr	r3, [pc, #680]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001c58:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001c5a:	f7fe fccb 	bl	80005f4 <HAL_GetTick>
 8001c5e:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c60:	4ba8      	ldr	r3, [pc, #672]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001c68:	d006      	beq.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x5c>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c6a:	f7fe fcc3 	bl	80005f4 <HAL_GetTick>
 8001c6e:	1b40      	subs	r0, r0, r5
 8001c70:	2802      	cmp	r0, #2
 8001c72:	d9f5      	bls.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x44>
        return HAL_TIMEOUT;
 8001c74:	2003      	movs	r0, #3
 8001c76:	e7eb      	b.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x34>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001c78:	6823      	ldr	r3, [r4, #0]
 8001c7a:	f013 0f01 	tst.w	r3, #1
 8001c7e:	d014      	beq.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001c80:	6863      	ldr	r3, [r4, #4]
 8001c82:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001c86:	fa92 f2a2 	rbit	r2, r2
 8001c8a:	fab2 f282 	clz	r2, r2
 8001c8e:	4093      	lsls	r3, r2
 8001c90:	68a1      	ldr	r1, [r4, #8]
 8001c92:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001c96:	fa92 f2a2 	rbit	r2, r2
 8001c9a:	fab2 f282 	clz	r2, r2
 8001c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	4a97      	ldr	r2, [pc, #604]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001ca6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8001caa:	6823      	ldr	r3, [r4, #0]
 8001cac:	f013 0f02 	tst.w	r3, #2
 8001cb0:	d01e      	beq.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8001cb2:	4994      	ldr	r1, [pc, #592]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001cb4:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 8001cb8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8001cbc:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001cc0:	fa92 f2a2 	rbit	r2, r2
 8001cc4:	fab2 f282 	clz	r2, r2
 8001cc8:	fa23 f202 	lsr.w	r2, r3, r2
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001ccc:	6860      	ldr	r0, [r4, #4]
 8001cce:	68e3      	ldr	r3, [r4, #12]
 8001cd0:	061b      	lsls	r3, r3, #24
 8001cd2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001cd6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001cda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001cde:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8001ce2:	f023 031f 	bic.w	r3, r3, #31
 8001ce6:	69e2      	ldr	r2, [r4, #28]
 8001ce8:	3a01      	subs	r2, #1
 8001cea:	4313      	orrs	r3, r2
 8001cec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_PLLI2S_ENABLE();
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	4b83      	ldr	r3, [pc, #524]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001cf4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001cf6:	f7fe fc7d 	bl	80005f4 <HAL_GetTick>
 8001cfa:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001cfc:	4b81      	ldr	r3, [pc, #516]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001d04:	d191      	bne.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001d06:	f7fe fc75 	bl	80005f4 <HAL_GetTick>
 8001d0a:	1b40      	subs	r0, r0, r5
 8001d0c:	2802      	cmp	r0, #2
 8001d0e:	d9f5      	bls.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0xe0>
        return HAL_TIMEOUT;
 8001d10:	2003      	movs	r0, #3
 8001d12:	e79d      	b.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x34>
    __HAL_RCC_PLLSAI_DISABLE(); 
 8001d14:	2200      	movs	r2, #0
 8001d16:	4b7c      	ldr	r3, [pc, #496]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001d18:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001d1a:	f7fe fc6b 	bl	80005f4 <HAL_GetTick>
 8001d1e:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001d20:	4b78      	ldr	r3, [pc, #480]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001d28:	d006      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001d2a:	f7fe fc63 	bl	80005f4 <HAL_GetTick>
 8001d2e:	1b40      	subs	r0, r0, r5
 8001d30:	2802      	cmp	r0, #2
 8001d32:	d9f5      	bls.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x104>
        return HAL_TIMEOUT;
 8001d34:	2003      	movs	r0, #3
 8001d36:	e78b      	b.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x34>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8001d38:	6823      	ldr	r3, [r4, #0]
 8001d3a:	f013 0f04 	tst.w	r3, #4
 8001d3e:	d02f      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x184>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8001d40:	4d70      	ldr	r5, [pc, #448]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001d42:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8001d46:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001d4a:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8001d4e:	fa91 f3a1 	rbit	r3, r1
 8001d52:	fab3 f383 	clz	r3, r3
 8001d56:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001d58:	6923      	ldr	r3, [r4, #16]
 8001d5a:	f647 70c0 	movw	r0, #32704	; 0x7fc0
 8001d5e:	fa90 f0a0 	rbit	r0, r0
 8001d62:	fab0 f080 	clz	r0, r0
 8001d66:	4083      	lsls	r3, r0
 8001d68:	6966      	ldr	r6, [r4, #20]
 8001d6a:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 8001d6e:	fa90 f0a0 	rbit	r0, r0
 8001d72:	fab0 f080 	clz	r0, r0
 8001d76:	fa06 f000 	lsl.w	r0, r6, r0
 8001d7a:	4303      	orrs	r3, r0
 8001d7c:	fa91 f1a1 	rbit	r1, r1
 8001d80:	fab1 f181 	clz	r1, r1
 8001d84:	408a      	lsls	r2, r1
 8001d86:	4313      	orrs	r3, r2
 8001d88:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001d8c:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8001d90:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001d94:	6a22      	ldr	r2, [r4, #32]
 8001d96:	3a01      	subs	r2, #1
 8001d98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001d9c:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001da0:	6823      	ldr	r3, [r4, #0]
 8001da2:	f013 0f08 	tst.w	r3, #8
 8001da6:	d02d      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8001da8:	4856      	ldr	r0, [pc, #344]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001daa:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001dae:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001db2:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8001db6:	fa91 f3a1 	rbit	r3, r1
 8001dba:	fab3 f383 	clz	r3, r3
 8001dbe:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8001dc0:	6923      	ldr	r3, [r4, #16]
 8001dc2:	f647 75c0 	movw	r5, #32704	; 0x7fc0
 8001dc6:	fa95 f5a5 	rbit	r5, r5
 8001dca:	fab5 f585 	clz	r5, r5
 8001dce:	40ab      	lsls	r3, r5
 8001dd0:	fa91 f1a1 	rbit	r1, r1
 8001dd4:	fab1 f181 	clz	r1, r1
 8001dd8:	408a      	lsls	r2, r1
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	69a1      	ldr	r1, [r4, #24]
 8001dde:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001de2:	fa92 f2a2 	rbit	r2, r2
 8001de6:	fab2 f282 	clz	r2, r2
 8001dea:	fa01 f202 	lsl.w	r2, r1, r2
 8001dee:	4313      	orrs	r3, r2
 8001df0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001df4:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8001df8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001dfc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8001e04:	2201      	movs	r2, #1
 8001e06:	4b40      	ldr	r3, [pc, #256]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001e08:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001e0a:	f7fe fbf3 	bl	80005f4 <HAL_GetTick>
 8001e0e:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001e10:	4b3c      	ldr	r3, [pc, #240]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001e18:	f47f af0b 	bne.w	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x16>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001e1c:	f7fe fbea 	bl	80005f4 <HAL_GetTick>
 8001e20:	1b40      	subs	r0, r0, r5
 8001e22:	2802      	cmp	r0, #2
 8001e24:	d9f4      	bls.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
        return HAL_TIMEOUT;
 8001e26:	2003      	movs	r0, #3
 8001e28:	e712      	b.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x34>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	9301      	str	r3, [sp, #4]
 8001e2e:	4b35      	ldr	r3, [pc, #212]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e32:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e36:	641a      	str	r2, [r3, #64]	; 0x40
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	9301      	str	r3, [sp, #4]
 8001e40:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001e42:	4a32      	ldr	r2, [pc, #200]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e44:	6813      	ldr	r3, [r2, #0]
 8001e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e4a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001e4c:	f7fe fbd2 	bl	80005f4 <HAL_GetTick>
 8001e50:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001e52:	4b2e      	ldr	r3, [pc, #184]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001e5a:	d106      	bne.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x24e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001e5c:	f7fe fbca 	bl	80005f4 <HAL_GetTick>
 8001e60:	1b40      	subs	r0, r0, r5
 8001e62:	2802      	cmp	r0, #2
 8001e64:	d9f5      	bls.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x236>
        return HAL_TIMEOUT;
 8001e66:	2003      	movs	r0, #3
 8001e68:	e6f2      	b.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x34>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e6a:	4b26      	ldr	r3, [pc, #152]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e6e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001e72:	d012      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8001e74:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e76:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d00d      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x27e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e7e:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001e80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e82:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e86:	4922      	ldr	r1, [pc, #136]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001e88:	2001      	movs	r0, #1
 8001e8a:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 8001e90:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e94:	f013 0f01 	tst.w	r3, #1
 8001e98:	d112      	bne.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e9c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001ea0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001ea4:	d01d      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 8001ea6:	4a17      	ldr	r2, [pc, #92]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001ea8:	6893      	ldr	r3, [r2, #8]
 8001eaa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001eae:	6093      	str	r3, [r2, #8]
 8001eb0:	4914      	ldr	r1, [pc, #80]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001eb2:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8001eb4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001eb6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	670b      	str	r3, [r1, #112]	; 0x70
 8001ebe:	e6bd      	b.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8001ec0:	f7fe fb98 	bl	80005f4 <HAL_GetTick>
 8001ec4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eca:	f013 0f02 	tst.w	r3, #2
 8001ece:	d1e4      	bne.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x27e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed0:	f7fe fb90 	bl	80005f4 <HAL_GetTick>
 8001ed4:	1b40      	subs	r0, r0, r5
 8001ed6:	f241 3388 	movw	r3, #5000	; 0x1388
 8001eda:	4298      	cmp	r0, r3
 8001edc:	d9f3      	bls.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
            return HAL_TIMEOUT;
 8001ede:	2003      	movs	r0, #3
 8001ee0:	e6b6      	b.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x34>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ee2:	4908      	ldr	r1, [pc, #32]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001ee4:	688a      	ldr	r2, [r1, #8]
 8001ee6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001eea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	608b      	str	r3, [r1, #8]
 8001ef6:	e7db      	b.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x294>
  return HAL_OK;
 8001ef8:	2000      	movs	r0, #0
 8001efa:	e6a9      	b.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8001efc:	424711e0 	.word	0x424711e0
 8001f00:	42470068 	.word	0x42470068
 8001f04:	40023800 	.word	0x40023800
 8001f08:	42470070 	.word	0x42470070
 8001f0c:	40007000 	.word	0x40007000
 8001f10:	42470e40 	.word	0x42470e40

08001f14 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8001f14:	b538      	push	{r3, r4, r5, lr}
 8001f16:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001f18:	6802      	ldr	r2, [r0, #0]
 8001f1a:	68d3      	ldr	r3, [r2, #12]
 8001f1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001f20:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f22:	f7fe fb67 	bl	80005f4 <HAL_GetTick>
 8001f26:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001f28:	6823      	ldr	r3, [r4, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f013 0f20 	tst.w	r3, #32
 8001f30:	d107      	bne.n	8001f42 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001f32:	f7fe fb5f 	bl	80005f4 <HAL_GetTick>
 8001f36:	1b40      	subs	r0, r0, r5
 8001f38:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001f3c:	d9f4      	bls.n	8001f28 <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 8001f3e:	2003      	movs	r0, #3
    } 
  }

  return HAL_OK;
}
 8001f40:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8001f42:	2000      	movs	r0, #0
 8001f44:	bd38      	pop	{r3, r4, r5, pc}

08001f46 <RTC_EnterInitMode>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001f46:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001f48:	6803      	ldr	r3, [r0, #0]
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001f50:	d001      	beq.n	8001f56 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8001f52:	2000      	movs	r0, #0
 8001f54:	bd38      	pop	{r3, r4, r5, pc}
 8001f56:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001f58:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001f5e:	f7fe fb49 	bl	80005f4 <HAL_GetTick>
 8001f62:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001f64:	6823      	ldr	r3, [r4, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001f6c:	d107      	bne.n	8001f7e <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001f6e:	f7fe fb41 	bl	80005f4 <HAL_GetTick>
 8001f72:	1b40      	subs	r0, r0, r5
 8001f74:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001f78:	d9f4      	bls.n	8001f64 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8001f7a:	2003      	movs	r0, #3
}
 8001f7c:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;  
 8001f7e:	2000      	movs	r0, #0
 8001f80:	bd38      	pop	{r3, r4, r5, pc}

08001f82 <HAL_RTC_Init>:
  if(hrtc == NULL)
 8001f82:	2800      	cmp	r0, #0
 8001f84:	d04c      	beq.n	8002020 <HAL_RTC_Init+0x9e>
{
 8001f86:	b538      	push	{r3, r4, r5, lr}
 8001f88:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001f8a:	7f43      	ldrb	r3, [r0, #29]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d03c      	beq.n	800200a <HAL_RTC_Init+0x88>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001f90:	2302      	movs	r3, #2
 8001f92:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f94:	6823      	ldr	r3, [r4, #0]
 8001f96:	22ca      	movs	r2, #202	; 0xca
 8001f98:	625a      	str	r2, [r3, #36]	; 0x24
 8001f9a:	6823      	ldr	r3, [r4, #0]
 8001f9c:	2253      	movs	r2, #83	; 0x53
 8001f9e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	f7ff ffd0 	bl	8001f46 <RTC_EnterInitMode>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	2800      	cmp	r0, #0
 8001faa:	d132      	bne.n	8002012 <HAL_RTC_Init+0x90>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001fac:	6821      	ldr	r1, [r4, #0]
 8001fae:	688b      	ldr	r3, [r1, #8]
 8001fb0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001fb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fb8:	608b      	str	r3, [r1, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001fba:	6820      	ldr	r0, [r4, #0]
 8001fbc:	6881      	ldr	r1, [r0, #8]
 8001fbe:	6863      	ldr	r3, [r4, #4]
 8001fc0:	6925      	ldr	r5, [r4, #16]
 8001fc2:	432b      	orrs	r3, r5
 8001fc4:	6965      	ldr	r5, [r4, #20]
 8001fc6:	432b      	orrs	r3, r5
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	6083      	str	r3, [r0, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001fcc:	6823      	ldr	r3, [r4, #0]
 8001fce:	68e1      	ldr	r1, [r4, #12]
 8001fd0:	6119      	str	r1, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001fd2:	6821      	ldr	r1, [r4, #0]
 8001fd4:	690b      	ldr	r3, [r1, #16]
 8001fd6:	68a0      	ldr	r0, [r4, #8]
 8001fd8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001fdc:	610b      	str	r3, [r1, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8001fde:	6821      	ldr	r1, [r4, #0]
 8001fe0:	68cb      	ldr	r3, [r1, #12]
 8001fe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fe6:	60cb      	str	r3, [r1, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001fe8:	6821      	ldr	r1, [r4, #0]
 8001fea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001fec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ff0:	640b      	str	r3, [r1, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001ff2:	6821      	ldr	r1, [r4, #0]
 8001ff4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001ff6:	69a0      	ldr	r0, [r4, #24]
 8001ff8:	4303      	orrs	r3, r0
 8001ffa:	640b      	str	r3, [r1, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001ffc:	6823      	ldr	r3, [r4, #0]
 8001ffe:	21ff      	movs	r1, #255	; 0xff
 8002000:	6259      	str	r1, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002002:	2301      	movs	r3, #1
 8002004:	7763      	strb	r3, [r4, #29]
}
 8002006:	4610      	mov	r0, r2
 8002008:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 800200a:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 800200c:	f009 fc4c 	bl	800b8a8 <HAL_RTC_MspInit>
 8002010:	e7be      	b.n	8001f90 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002012:	6823      	ldr	r3, [r4, #0]
 8002014:	22ff      	movs	r2, #255	; 0xff
 8002016:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002018:	2304      	movs	r3, #4
 800201a:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 800201c:	2201      	movs	r2, #1
 800201e:	e7f2      	b.n	8002006 <HAL_RTC_Init+0x84>
     return HAL_ERROR;
 8002020:	2201      	movs	r2, #1
}
 8002022:	4610      	mov	r0, r2
 8002024:	4770      	bx	lr

08002026 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8002026:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 8002028:	e002      	b.n	8002030 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 800202a:	3301      	adds	r3, #1
    Value -= 10U;
 800202c:	380a      	subs	r0, #10
 800202e:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8002030:	2809      	cmp	r0, #9
 8002032:	d8fa      	bhi.n	800202a <RTC_ByteToBcd2+0x4>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002034:	011b      	lsls	r3, r3, #4
 8002036:	b2db      	uxtb	r3, r3
}
 8002038:	4318      	orrs	r0, r3
 800203a:	4770      	bx	lr

0800203c <HAL_RTC_SetTime>:
{
 800203c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800203e:	7f03      	ldrb	r3, [r0, #28]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d077      	beq.n	8002134 <HAL_RTC_SetTime+0xf8>
 8002044:	460e      	mov	r6, r1
 8002046:	4604      	mov	r4, r0
 8002048:	2301      	movs	r3, #1
 800204a:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800204c:	2302      	movs	r3, #2
 800204e:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8002050:	2a00      	cmp	r2, #0
 8002052:	d146      	bne.n	80020e2 <HAL_RTC_SetTime+0xa6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002054:	6803      	ldr	r3, [r0, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f013 0f40 	tst.w	r3, #64	; 0x40
 800205c:	d101      	bne.n	8002062 <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 800205e:	2300      	movs	r3, #0
 8002060:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002062:	7830      	ldrb	r0, [r6, #0]
 8002064:	f7ff ffdf 	bl	8002026 <RTC_ByteToBcd2>
 8002068:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800206a:	7870      	ldrb	r0, [r6, #1]
 800206c:	f7ff ffdb 	bl	8002026 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002070:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002074:	78b0      	ldrb	r0, [r6, #2]
 8002076:	f7ff ffd6 	bl	8002026 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800207a:	4328      	orrs	r0, r5
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 800207c:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800207e:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002082:	6823      	ldr	r3, [r4, #0]
 8002084:	22ca      	movs	r2, #202	; 0xca
 8002086:	625a      	str	r2, [r3, #36]	; 0x24
 8002088:	6823      	ldr	r3, [r4, #0]
 800208a:	2253      	movs	r2, #83	; 0x53
 800208c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800208e:	4620      	mov	r0, r4
 8002090:	f7ff ff59 	bl	8001f46 <RTC_EnterInitMode>
 8002094:	4607      	mov	r7, r0
 8002096:	2800      	cmp	r0, #0
 8002098:	d135      	bne.n	8002106 <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800209a:	6823      	ldr	r3, [r4, #0]
 800209c:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 80020a0:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 80020a4:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80020a6:	6822      	ldr	r2, [r4, #0]
 80020a8:	6893      	ldr	r3, [r2, #8]
 80020aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ae:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80020b0:	6821      	ldr	r1, [r4, #0]
 80020b2:	688b      	ldr	r3, [r1, #8]
 80020b4:	68f2      	ldr	r2, [r6, #12]
 80020b6:	6930      	ldr	r0, [r6, #16]
 80020b8:	4302      	orrs	r2, r0
 80020ba:	4313      	orrs	r3, r2
 80020bc:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 80020be:	6822      	ldr	r2, [r4, #0]
 80020c0:	68d3      	ldr	r3, [r2, #12]
 80020c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020c6:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80020c8:	6823      	ldr	r3, [r4, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f013 0f20 	tst.w	r3, #32
 80020d0:	d022      	beq.n	8002118 <HAL_RTC_SetTime+0xdc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020d2:	6823      	ldr	r3, [r4, #0]
 80020d4:	22ff      	movs	r2, #255	; 0xff
 80020d6:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80020d8:	2301      	movs	r3, #1
 80020da:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 80020dc:	2300      	movs	r3, #0
 80020de:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 80020e0:	e029      	b.n	8002136 <HAL_RTC_SetTime+0xfa>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80020e2:	6803      	ldr	r3, [r0, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80020ea:	d101      	bne.n	80020f0 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80020f0:	7835      	ldrb	r5, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80020f2:	7870      	ldrb	r0, [r6, #1]
 80020f4:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80020f6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 80020fa:	78b5      	ldrb	r5, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80020fc:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 80020fe:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002100:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8002104:	e7bd      	b.n	8002082 <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002106:	6823      	ldr	r3, [r4, #0]
 8002108:	22ff      	movs	r2, #255	; 0xff
 800210a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800210c:	2304      	movs	r3, #4
 800210e:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002110:	2300      	movs	r3, #0
 8002112:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8002114:	2701      	movs	r7, #1
 8002116:	e00e      	b.n	8002136 <HAL_RTC_SetTime+0xfa>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002118:	4620      	mov	r0, r4
 800211a:	f7ff fefb 	bl	8001f14 <HAL_RTC_WaitForSynchro>
 800211e:	2800      	cmp	r0, #0
 8002120:	d0d7      	beq.n	80020d2 <HAL_RTC_SetTime+0x96>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002122:	6823      	ldr	r3, [r4, #0]
 8002124:	22ff      	movs	r2, #255	; 0xff
 8002126:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002128:	2304      	movs	r3, #4
 800212a:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 800212c:	2300      	movs	r3, #0
 800212e:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8002130:	2701      	movs	r7, #1
 8002132:	e000      	b.n	8002136 <HAL_RTC_SetTime+0xfa>
  __HAL_LOCK(hrtc);
 8002134:	2702      	movs	r7, #2
}
 8002136:	4638      	mov	r0, r7
 8002138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800213a <HAL_RTC_SetDate>:
{
 800213a:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 800213c:	7f03      	ldrb	r3, [r0, #28]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d065      	beq.n	800220e <HAL_RTC_SetDate+0xd4>
 8002142:	2301      	movs	r3, #1
 8002144:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8002146:	2302      	movs	r3, #2
 8002148:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800214a:	b93a      	cbnz	r2, 800215c <HAL_RTC_SetDate+0x22>
 800214c:	784b      	ldrb	r3, [r1, #1]
 800214e:	f013 0f10 	tst.w	r3, #16
 8002152:	d003      	beq.n	800215c <HAL_RTC_SetDate+0x22>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002154:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8002158:	330a      	adds	r3, #10
 800215a:	704b      	strb	r3, [r1, #1]
 800215c:	460e      	mov	r6, r1
 800215e:	4604      	mov	r4, r0
  if(Format == RTC_FORMAT_BIN)
 8002160:	2a00      	cmp	r2, #0
 8002162:	d132      	bne.n	80021ca <HAL_RTC_SetDate+0x90>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002164:	78c8      	ldrb	r0, [r1, #3]
 8002166:	f7ff ff5e 	bl	8002026 <RTC_ByteToBcd2>
 800216a:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800216c:	7870      	ldrb	r0, [r6, #1]
 800216e:	f7ff ff5a 	bl	8002026 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002172:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002176:	78b0      	ldrb	r0, [r6, #2]
 8002178:	f7ff ff55 	bl	8002026 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800217c:	4328      	orrs	r0, r5
                 ((uint32_t)sDate->WeekDay << 13U));   
 800217e:	7835      	ldrb	r5, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002180:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002184:	6823      	ldr	r3, [r4, #0]
 8002186:	22ca      	movs	r2, #202	; 0xca
 8002188:	625a      	str	r2, [r3, #36]	; 0x24
 800218a:	6823      	ldr	r3, [r4, #0]
 800218c:	2253      	movs	r2, #83	; 0x53
 800218e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002190:	4620      	mov	r0, r4
 8002192:	f7ff fed8 	bl	8001f46 <RTC_EnterInitMode>
 8002196:	4606      	mov	r6, r0
 8002198:	bb10      	cbnz	r0, 80021e0 <HAL_RTC_SetDate+0xa6>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800219a:	6823      	ldr	r3, [r4, #0]
 800219c:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80021a0:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 80021a4:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 80021a6:	6822      	ldr	r2, [r4, #0]
 80021a8:	68d3      	ldr	r3, [r2, #12]
 80021aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021ae:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80021b0:	6823      	ldr	r3, [r4, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f013 0f20 	tst.w	r3, #32
 80021b8:	d01b      	beq.n	80021f2 <HAL_RTC_SetDate+0xb8>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80021ba:	6823      	ldr	r3, [r4, #0]
 80021bc:	22ff      	movs	r2, #255	; 0xff
 80021be:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80021c0:	2301      	movs	r3, #1
 80021c2:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80021c4:	2300      	movs	r3, #0
 80021c6:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 80021c8:	e022      	b.n	8002210 <HAL_RTC_SetDate+0xd6>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 80021ca:	7848      	ldrb	r0, [r1, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 80021cc:	788d      	ldrb	r5, [r1, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80021ce:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 80021d0:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80021d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80021d6:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13U));  
 80021d8:	780d      	ldrb	r5, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80021da:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 80021de:	e7d1      	b.n	8002184 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80021e0:	6823      	ldr	r3, [r4, #0]
 80021e2:	22ff      	movs	r2, #255	; 0xff
 80021e4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80021e6:	2304      	movs	r3, #4
 80021e8:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80021ea:	2300      	movs	r3, #0
 80021ec:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80021ee:	2601      	movs	r6, #1
 80021f0:	e00e      	b.n	8002210 <HAL_RTC_SetDate+0xd6>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80021f2:	4620      	mov	r0, r4
 80021f4:	f7ff fe8e 	bl	8001f14 <HAL_RTC_WaitForSynchro>
 80021f8:	2800      	cmp	r0, #0
 80021fa:	d0de      	beq.n	80021ba <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80021fc:	6823      	ldr	r3, [r4, #0]
 80021fe:	22ff      	movs	r2, #255	; 0xff
 8002200:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002202:	2304      	movs	r3, #4
 8002204:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8002206:	2300      	movs	r3, #0
 8002208:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 800220a:	2601      	movs	r6, #1
 800220c:	e000      	b.n	8002210 <HAL_RTC_SetDate+0xd6>
 __HAL_LOCK(hrtc);
 800220e:	2602      	movs	r6, #2
}
 8002210:	4630      	mov	r0, r6
 8002212:	bd70      	pop	{r4, r5, r6, pc}

08002214 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002214:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002216:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002218:	6a04      	ldr	r4, [r0, #32]
 800221a:	f024 0401 	bic.w	r4, r4, #1
 800221e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002220:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002222:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002226:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800222a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800222e:	430b      	orrs	r3, r1
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002230:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002232:	6203      	str	r3, [r0, #32]
}
 8002234:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002238:	4770      	bx	lr

0800223a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800223a:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800223c:	6a03      	ldr	r3, [r0, #32]
 800223e:	f023 0310 	bic.w	r3, r3, #16
 8002242:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002244:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002246:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002248:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800224c:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002250:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002254:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002258:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800225a:	6203      	str	r3, [r0, #32]
}
 800225c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002260:	4770      	bx	lr

08002262 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002262:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002268:	f041 0107 	orr.w	r1, r1, #7
 800226c:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800226e:	6083      	str	r3, [r0, #8]
 8002270:	4770      	bx	lr

08002272 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002272:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8002274:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002276:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800227a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800227e:	4319      	orrs	r1, r3
 8002280:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002282:	6084      	str	r4, [r0, #8]
} 
 8002284:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002288:	4770      	bx	lr

0800228a <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800228a:	6802      	ldr	r2, [r0, #0]
 800228c:	68d3      	ldr	r3, [r2, #12]
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8002294:	6802      	ldr	r2, [r0, #0]
 8002296:	6813      	ldr	r3, [r2, #0]
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6013      	str	r3, [r2, #0]
}
 800229e:	2000      	movs	r0, #0
 80022a0:	4770      	bx	lr

080022a2 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80022a2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d07d      	beq.n	80023a6 <HAL_TIM_ConfigClockSource+0x104>
{
 80022aa:	b510      	push	{r4, lr}
 80022ac:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80022ae:	2301      	movs	r3, #1
 80022b0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 80022b4:	2302      	movs	r3, #2
 80022b6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 80022ba:	6802      	ldr	r2, [r0, #0]
 80022bc:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80022c6:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80022c8:	680b      	ldr	r3, [r1, #0]
 80022ca:	2b40      	cmp	r3, #64	; 0x40
 80022cc:	d057      	beq.n	800237e <HAL_TIM_ConfigClockSource+0xdc>
 80022ce:	d910      	bls.n	80022f2 <HAL_TIM_ConfigClockSource+0x50>
 80022d0:	2b70      	cmp	r3, #112	; 0x70
 80022d2:	d03e      	beq.n	8002352 <HAL_TIM_ConfigClockSource+0xb0>
 80022d4:	d81f      	bhi.n	8002316 <HAL_TIM_ConfigClockSource+0x74>
 80022d6:	2b50      	cmp	r3, #80	; 0x50
 80022d8:	d047      	beq.n	800236a <HAL_TIM_ConfigClockSource+0xc8>
 80022da:	2b60      	cmp	r3, #96	; 0x60
 80022dc:	d132      	bne.n	8002344 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80022de:	68ca      	ldr	r2, [r1, #12]
 80022e0:	6849      	ldr	r1, [r1, #4]
 80022e2:	6800      	ldr	r0, [r0, #0]
 80022e4:	f7ff ffa9 	bl	800223a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022e8:	2160      	movs	r1, #96	; 0x60
 80022ea:	6820      	ldr	r0, [r4, #0]
 80022ec:	f7ff ffb9 	bl	8002262 <TIM_ITRx_SetConfig>
    break;
 80022f0:	e028      	b.n	8002344 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 80022f2:	2b10      	cmp	r3, #16
 80022f4:	d04d      	beq.n	8002392 <HAL_TIM_ConfigClockSource+0xf0>
 80022f6:	d908      	bls.n	800230a <HAL_TIM_ConfigClockSource+0x68>
 80022f8:	2b20      	cmp	r3, #32
 80022fa:	d04f      	beq.n	800239c <HAL_TIM_ConfigClockSource+0xfa>
 80022fc:	2b30      	cmp	r3, #48	; 0x30
 80022fe:	d121      	bne.n	8002344 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8002300:	2130      	movs	r1, #48	; 0x30
 8002302:	6800      	ldr	r0, [r0, #0]
 8002304:	f7ff ffad 	bl	8002262 <TIM_ITRx_SetConfig>
    break;
 8002308:	e01c      	b.n	8002344 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 800230a:	b9db      	cbnz	r3, 8002344 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800230c:	2100      	movs	r1, #0
 800230e:	6800      	ldr	r0, [r0, #0]
 8002310:	f7ff ffa7 	bl	8002262 <TIM_ITRx_SetConfig>
    break;
 8002314:	e016      	b.n	8002344 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8002316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800231a:	d00e      	beq.n	800233a <HAL_TIM_ConfigClockSource+0x98>
 800231c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002320:	d110      	bne.n	8002344 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ETR_SetConfig(htim->Instance, 
 8002322:	68cb      	ldr	r3, [r1, #12]
 8002324:	684a      	ldr	r2, [r1, #4]
 8002326:	6889      	ldr	r1, [r1, #8]
 8002328:	6800      	ldr	r0, [r0, #0]
 800232a:	f7ff ffa2 	bl	8002272 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800232e:	6822      	ldr	r2, [r4, #0]
 8002330:	6893      	ldr	r3, [r2, #8]
 8002332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002336:	6093      	str	r3, [r2, #8]
    break;
 8002338:	e004      	b.n	8002344 <HAL_TIM_ConfigClockSource+0xa2>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800233a:	6802      	ldr	r2, [r0, #0]
 800233c:	6893      	ldr	r3, [r2, #8]
 800233e:	f023 0307 	bic.w	r3, r3, #7
 8002342:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002344:	2301      	movs	r3, #1
 8002346:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 800234a:	2000      	movs	r0, #0
 800234c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 8002350:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance, 
 8002352:	68cb      	ldr	r3, [r1, #12]
 8002354:	684a      	ldr	r2, [r1, #4]
 8002356:	6889      	ldr	r1, [r1, #8]
 8002358:	6800      	ldr	r0, [r0, #0]
 800235a:	f7ff ff8a 	bl	8002272 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800235e:	6822      	ldr	r2, [r4, #0]
 8002360:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002362:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002366:	6093      	str	r3, [r2, #8]
    break;
 8002368:	e7ec      	b.n	8002344 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800236a:	68ca      	ldr	r2, [r1, #12]
 800236c:	6849      	ldr	r1, [r1, #4]
 800236e:	6800      	ldr	r0, [r0, #0]
 8002370:	f7ff ff50 	bl	8002214 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002374:	2150      	movs	r1, #80	; 0x50
 8002376:	6820      	ldr	r0, [r4, #0]
 8002378:	f7ff ff73 	bl	8002262 <TIM_ITRx_SetConfig>
    break;
 800237c:	e7e2      	b.n	8002344 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800237e:	68ca      	ldr	r2, [r1, #12]
 8002380:	6849      	ldr	r1, [r1, #4]
 8002382:	6800      	ldr	r0, [r0, #0]
 8002384:	f7ff ff46 	bl	8002214 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002388:	2140      	movs	r1, #64	; 0x40
 800238a:	6820      	ldr	r0, [r4, #0]
 800238c:	f7ff ff69 	bl	8002262 <TIM_ITRx_SetConfig>
    break;
 8002390:	e7d8      	b.n	8002344 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8002392:	2110      	movs	r1, #16
 8002394:	6800      	ldr	r0, [r0, #0]
 8002396:	f7ff ff64 	bl	8002262 <TIM_ITRx_SetConfig>
    break;
 800239a:	e7d3      	b.n	8002344 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800239c:	2120      	movs	r1, #32
 800239e:	6800      	ldr	r0, [r0, #0]
 80023a0:	f7ff ff5f 	bl	8002262 <TIM_ITRx_SetConfig>
    break;
 80023a4:	e7ce      	b.n	8002344 <HAL_TIM_ConfigClockSource+0xa2>
  __HAL_LOCK(htim);
 80023a6:	2002      	movs	r0, #2
 80023a8:	4770      	bx	lr

080023aa <HAL_TIM_OC_DelayElapsedCallback>:
{
 80023aa:	4770      	bx	lr

080023ac <HAL_TIM_IC_CaptureCallback>:
{
 80023ac:	4770      	bx	lr

080023ae <HAL_TIM_PWM_PulseFinishedCallback>:
{
 80023ae:	4770      	bx	lr

080023b0 <HAL_TIM_TriggerCallback>:
{
 80023b0:	4770      	bx	lr

080023b2 <HAL_TIM_IRQHandler>:
{
 80023b2:	b510      	push	{r4, lr}
 80023b4:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023b6:	6803      	ldr	r3, [r0, #0]
 80023b8:	691a      	ldr	r2, [r3, #16]
 80023ba:	f012 0f02 	tst.w	r2, #2
 80023be:	d011      	beq.n	80023e4 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	f012 0f02 	tst.w	r2, #2
 80023c6:	d00d      	beq.n	80023e4 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023c8:	f06f 0202 	mvn.w	r2, #2
 80023cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023ce:	2301      	movs	r3, #1
 80023d0:	7603      	strb	r3, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023d2:	6803      	ldr	r3, [r0, #0]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	f013 0f03 	tst.w	r3, #3
 80023da:	d070      	beq.n	80024be <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80023dc:	f7ff ffe6 	bl	80023ac <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e0:	2300      	movs	r3, #0
 80023e2:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023e4:	6823      	ldr	r3, [r4, #0]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	f012 0f04 	tst.w	r2, #4
 80023ec:	d012      	beq.n	8002414 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	f012 0f04 	tst.w	r2, #4
 80023f4:	d00e      	beq.n	8002414 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023f6:	f06f 0204 	mvn.w	r2, #4
 80023fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023fc:	2302      	movs	r3, #2
 80023fe:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002400:	6823      	ldr	r3, [r4, #0]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002408:	d05f      	beq.n	80024ca <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800240a:	4620      	mov	r0, r4
 800240c:	f7ff ffce 	bl	80023ac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002410:	2300      	movs	r3, #0
 8002412:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002414:	6823      	ldr	r3, [r4, #0]
 8002416:	691a      	ldr	r2, [r3, #16]
 8002418:	f012 0f08 	tst.w	r2, #8
 800241c:	d012      	beq.n	8002444 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	f012 0f08 	tst.w	r2, #8
 8002424:	d00e      	beq.n	8002444 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002426:	f06f 0208 	mvn.w	r2, #8
 800242a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800242c:	2304      	movs	r3, #4
 800242e:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002430:	6823      	ldr	r3, [r4, #0]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	f013 0f03 	tst.w	r3, #3
 8002438:	d04e      	beq.n	80024d8 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800243a:	4620      	mov	r0, r4
 800243c:	f7ff ffb6 	bl	80023ac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002440:	2300      	movs	r3, #0
 8002442:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002444:	6823      	ldr	r3, [r4, #0]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	f012 0f10 	tst.w	r2, #16
 800244c:	d012      	beq.n	8002474 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	f012 0f10 	tst.w	r2, #16
 8002454:	d00e      	beq.n	8002474 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002456:	f06f 0210 	mvn.w	r2, #16
 800245a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800245c:	2308      	movs	r3, #8
 800245e:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002460:	6823      	ldr	r3, [r4, #0]
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002468:	d03d      	beq.n	80024e6 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800246a:	4620      	mov	r0, r4
 800246c:	f7ff ff9e 	bl	80023ac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002470:	2300      	movs	r3, #0
 8002472:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002474:	6823      	ldr	r3, [r4, #0]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	f012 0f01 	tst.w	r2, #1
 800247c:	d003      	beq.n	8002486 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	f012 0f01 	tst.w	r2, #1
 8002484:	d136      	bne.n	80024f4 <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002486:	6823      	ldr	r3, [r4, #0]
 8002488:	691a      	ldr	r2, [r3, #16]
 800248a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800248e:	d003      	beq.n	8002498 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002496:	d134      	bne.n	8002502 <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002498:	6823      	ldr	r3, [r4, #0]
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	f012 0f40 	tst.w	r2, #64	; 0x40
 80024a0:	d003      	beq.n	80024aa <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80024a8:	d132      	bne.n	8002510 <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024aa:	6823      	ldr	r3, [r4, #0]
 80024ac:	691a      	ldr	r2, [r3, #16]
 80024ae:	f012 0f20 	tst.w	r2, #32
 80024b2:	d003      	beq.n	80024bc <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	f012 0f20 	tst.w	r2, #32
 80024ba:	d130      	bne.n	800251e <HAL_TIM_IRQHandler+0x16c>
 80024bc:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024be:	f7ff ff74 	bl	80023aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c2:	4620      	mov	r0, r4
 80024c4:	f7ff ff73 	bl	80023ae <HAL_TIM_PWM_PulseFinishedCallback>
 80024c8:	e78a      	b.n	80023e0 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ca:	4620      	mov	r0, r4
 80024cc:	f7ff ff6d 	bl	80023aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d0:	4620      	mov	r0, r4
 80024d2:	f7ff ff6c 	bl	80023ae <HAL_TIM_PWM_PulseFinishedCallback>
 80024d6:	e79b      	b.n	8002410 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024d8:	4620      	mov	r0, r4
 80024da:	f7ff ff66 	bl	80023aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80024de:	4620      	mov	r0, r4
 80024e0:	f7ff ff65 	bl	80023ae <HAL_TIM_PWM_PulseFinishedCallback>
 80024e4:	e7ac      	b.n	8002440 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e6:	4620      	mov	r0, r4
 80024e8:	f7ff ff5f 	bl	80023aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ec:	4620      	mov	r0, r4
 80024ee:	f7ff ff5e 	bl	80023ae <HAL_TIM_PWM_PulseFinishedCallback>
 80024f2:	e7bd      	b.n	8002470 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024f4:	f06f 0201 	mvn.w	r2, #1
 80024f8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80024fa:	4620      	mov	r0, r4
 80024fc:	f009 f8ce 	bl	800b69c <HAL_TIM_PeriodElapsedCallback>
 8002500:	e7c1      	b.n	8002486 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002502:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002506:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002508:	4620      	mov	r0, r4
 800250a:	f000 f8e0 	bl	80026ce <HAL_TIMEx_BreakCallback>
 800250e:	e7c3      	b.n	8002498 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002510:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002514:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002516:	4620      	mov	r0, r4
 8002518:	f7ff ff4a 	bl	80023b0 <HAL_TIM_TriggerCallback>
 800251c:	e7c5      	b.n	80024aa <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800251e:	f06f 0220 	mvn.w	r2, #32
 8002522:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002524:	4620      	mov	r0, r4
 8002526:	f000 f8d1 	bl	80026cc <HAL_TIMEx_CommutationCallback>
}
 800252a:	e7c7      	b.n	80024bc <HAL_TIM_IRQHandler+0x10a>

0800252c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800252c:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800252e:	4a45      	ldr	r2, [pc, #276]	; (8002644 <TIM_Base_SetConfig+0x118>)
 8002530:	4290      	cmp	r0, r2
 8002532:	d04a      	beq.n	80025ca <TIM_Base_SetConfig+0x9e>
 8002534:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002538:	d049      	beq.n	80025ce <TIM_Base_SetConfig+0xa2>
 800253a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800253e:	4290      	cmp	r0, r2
 8002540:	d047      	beq.n	80025d2 <TIM_Base_SetConfig+0xa6>
 8002542:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002546:	4290      	cmp	r0, r2
 8002548:	d045      	beq.n	80025d6 <TIM_Base_SetConfig+0xaa>
 800254a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800254e:	4290      	cmp	r0, r2
 8002550:	d043      	beq.n	80025da <TIM_Base_SetConfig+0xae>
 8002552:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002556:	4290      	cmp	r0, r2
 8002558:	d035      	beq.n	80025c6 <TIM_Base_SetConfig+0x9a>
 800255a:	2200      	movs	r2, #0
 800255c:	b11a      	cbz	r2, 8002566 <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800255e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002562:	684a      	ldr	r2, [r1, #4]
 8002564:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002566:	4a37      	ldr	r2, [pc, #220]	; (8002644 <TIM_Base_SetConfig+0x118>)
 8002568:	4290      	cmp	r0, r2
 800256a:	d03a      	beq.n	80025e2 <TIM_Base_SetConfig+0xb6>
 800256c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002570:	d050      	beq.n	8002614 <TIM_Base_SetConfig+0xe8>
 8002572:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002576:	4290      	cmp	r0, r2
 8002578:	d04e      	beq.n	8002618 <TIM_Base_SetConfig+0xec>
 800257a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800257e:	4290      	cmp	r0, r2
 8002580:	d04c      	beq.n	800261c <TIM_Base_SetConfig+0xf0>
 8002582:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002586:	4290      	cmp	r0, r2
 8002588:	d04a      	beq.n	8002620 <TIM_Base_SetConfig+0xf4>
 800258a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800258e:	4290      	cmp	r0, r2
 8002590:	d048      	beq.n	8002624 <TIM_Base_SetConfig+0xf8>
 8002592:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002596:	4290      	cmp	r0, r2
 8002598:	d046      	beq.n	8002628 <TIM_Base_SetConfig+0xfc>
 800259a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800259e:	4290      	cmp	r0, r2
 80025a0:	d044      	beq.n	800262c <TIM_Base_SetConfig+0x100>
 80025a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025a6:	4290      	cmp	r0, r2
 80025a8:	d042      	beq.n	8002630 <TIM_Base_SetConfig+0x104>
 80025aa:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80025ae:	4290      	cmp	r0, r2
 80025b0:	d040      	beq.n	8002634 <TIM_Base_SetConfig+0x108>
 80025b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025b6:	4290      	cmp	r0, r2
 80025b8:	d03e      	beq.n	8002638 <TIM_Base_SetConfig+0x10c>
 80025ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025be:	4290      	cmp	r0, r2
 80025c0:	d00d      	beq.n	80025de <TIM_Base_SetConfig+0xb2>
 80025c2:	2200      	movs	r2, #0
 80025c4:	e00e      	b.n	80025e4 <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80025c6:	2201      	movs	r2, #1
 80025c8:	e7c8      	b.n	800255c <TIM_Base_SetConfig+0x30>
 80025ca:	2201      	movs	r2, #1
 80025cc:	e7c6      	b.n	800255c <TIM_Base_SetConfig+0x30>
 80025ce:	2201      	movs	r2, #1
 80025d0:	e7c4      	b.n	800255c <TIM_Base_SetConfig+0x30>
 80025d2:	2201      	movs	r2, #1
 80025d4:	e7c2      	b.n	800255c <TIM_Base_SetConfig+0x30>
 80025d6:	2201      	movs	r2, #1
 80025d8:	e7c0      	b.n	800255c <TIM_Base_SetConfig+0x30>
 80025da:	2201      	movs	r2, #1
 80025dc:	e7be      	b.n	800255c <TIM_Base_SetConfig+0x30>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80025de:	2201      	movs	r2, #1
 80025e0:	e000      	b.n	80025e4 <TIM_Base_SetConfig+0xb8>
 80025e2:	2201      	movs	r2, #1
 80025e4:	b11a      	cbz	r2, 80025ee <TIM_Base_SetConfig+0xc2>
    tmpcr1 &= ~TIM_CR1_CKD;
 80025e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025ea:	68ca      	ldr	r2, [r1, #12]
 80025ec:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80025ee:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025f0:	688b      	ldr	r3, [r1, #8]
 80025f2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80025f4:	680b      	ldr	r3, [r1, #0]
 80025f6:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80025f8:	4b12      	ldr	r3, [pc, #72]	; (8002644 <TIM_Base_SetConfig+0x118>)
 80025fa:	4298      	cmp	r0, r3
 80025fc:	d020      	beq.n	8002640 <TIM_Base_SetConfig+0x114>
 80025fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002602:	4298      	cmp	r0, r3
 8002604:	d01a      	beq.n	800263c <TIM_Base_SetConfig+0x110>
 8002606:	2300      	movs	r3, #0
 8002608:	b10b      	cbz	r3, 800260e <TIM_Base_SetConfig+0xe2>
    TIMx->RCR = Structure->RepetitionCounter;
 800260a:	690b      	ldr	r3, [r1, #16]
 800260c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800260e:	2301      	movs	r3, #1
 8002610:	6143      	str	r3, [r0, #20]
 8002612:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002614:	2201      	movs	r2, #1
 8002616:	e7e5      	b.n	80025e4 <TIM_Base_SetConfig+0xb8>
 8002618:	2201      	movs	r2, #1
 800261a:	e7e3      	b.n	80025e4 <TIM_Base_SetConfig+0xb8>
 800261c:	2201      	movs	r2, #1
 800261e:	e7e1      	b.n	80025e4 <TIM_Base_SetConfig+0xb8>
 8002620:	2201      	movs	r2, #1
 8002622:	e7df      	b.n	80025e4 <TIM_Base_SetConfig+0xb8>
 8002624:	2201      	movs	r2, #1
 8002626:	e7dd      	b.n	80025e4 <TIM_Base_SetConfig+0xb8>
 8002628:	2201      	movs	r2, #1
 800262a:	e7db      	b.n	80025e4 <TIM_Base_SetConfig+0xb8>
 800262c:	2201      	movs	r2, #1
 800262e:	e7d9      	b.n	80025e4 <TIM_Base_SetConfig+0xb8>
 8002630:	2201      	movs	r2, #1
 8002632:	e7d7      	b.n	80025e4 <TIM_Base_SetConfig+0xb8>
 8002634:	2201      	movs	r2, #1
 8002636:	e7d5      	b.n	80025e4 <TIM_Base_SetConfig+0xb8>
 8002638:	2201      	movs	r2, #1
 800263a:	e7d3      	b.n	80025e4 <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800263c:	2301      	movs	r3, #1
 800263e:	e7e3      	b.n	8002608 <TIM_Base_SetConfig+0xdc>
 8002640:	2301      	movs	r3, #1
 8002642:	e7e1      	b.n	8002608 <TIM_Base_SetConfig+0xdc>
 8002644:	40010000 	.word	0x40010000

08002648 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8002648:	b1a8      	cbz	r0, 8002676 <HAL_TIM_Base_Init+0x2e>
{ 
 800264a:	b510      	push	{r4, lr}
 800264c:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 800264e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002652:	b15b      	cbz	r3, 800266c <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8002654:	2302      	movs	r3, #2
 8002656:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800265a:	1d21      	adds	r1, r4, #4
 800265c:	6820      	ldr	r0, [r4, #0]
 800265e:	f7ff ff65 	bl	800252c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002662:	2301      	movs	r3, #1
 8002664:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002668:	2000      	movs	r0, #0
 800266a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800266c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8002670:	f009 fa3c 	bl	800baec <HAL_TIM_Base_MspInit>
 8002674:	e7ee      	b.n	8002654 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002676:	2001      	movs	r0, #1
 8002678:	4770      	bx	lr

0800267a <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 800267a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800267e:	2b01      	cmp	r3, #1
 8002680:	d022      	beq.n	80026c8 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 8002682:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8002684:	2201      	movs	r2, #1
 8002686:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800268a:	2302      	movs	r3, #2
 800268c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002690:	6804      	ldr	r4, [r0, #0]
 8002692:	6863      	ldr	r3, [r4, #4]
 8002694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002698:	6063      	str	r3, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800269a:	6804      	ldr	r4, [r0, #0]
 800269c:	6863      	ldr	r3, [r4, #4]
 800269e:	680d      	ldr	r5, [r1, #0]
 80026a0:	432b      	orrs	r3, r5
 80026a2:	6063      	str	r3, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80026a4:	6804      	ldr	r4, [r0, #0]
 80026a6:	68a3      	ldr	r3, [r4, #8]
 80026a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026ac:	60a3      	str	r3, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80026ae:	6804      	ldr	r4, [r0, #0]
 80026b0:	68a3      	ldr	r3, [r4, #8]
 80026b2:	6849      	ldr	r1, [r1, #4]
 80026b4:	430b      	orrs	r3, r1
 80026b6:	60a3      	str	r3, [r4, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80026b8:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80026bc:	2300      	movs	r3, #0
 80026be:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 80026c2:	4618      	mov	r0, r3
} 
 80026c4:	bc30      	pop	{r4, r5}
 80026c6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80026c8:	2002      	movs	r0, #2
 80026ca:	4770      	bx	lr

080026cc <HAL_TIMEx_CommutationCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80026cc:	4770      	bx	lr

080026ce <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026ce:	4770      	bx	lr

080026d0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026d4:	4604      	mov	r4, r0
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80026d6:	6802      	ldr	r2, [r0, #0]
 80026d8:	6913      	ldr	r3, [r2, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80026da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80026de:	68c1      	ldr	r1, [r0, #12]
 80026e0:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80026e2:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80026e4:	6801      	ldr	r1, [r0, #0]
 80026e6:	68cb      	ldr	r3, [r1, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80026e8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80026ec:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026f0:	6882      	ldr	r2, [r0, #8]
 80026f2:	6900      	ldr	r0, [r0, #16]
 80026f4:	4302      	orrs	r2, r0
 80026f6:	6960      	ldr	r0, [r4, #20]
 80026f8:	4302      	orrs	r2, r0
 80026fa:	69e0      	ldr	r0, [r4, #28]
 80026fc:	4302      	orrs	r2, r0
 80026fe:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002700:	60cb      	str	r3, [r1, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002702:	6822      	ldr	r2, [r4, #0]
 8002704:	6953      	ldr	r3, [r2, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800270a:	69a1      	ldr	r1, [r4, #24]
 800270c:	430b      	orrs	r3, r1
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800270e:	6153      	str	r3, [r2, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002710:	69e3      	ldr	r3, [r4, #28]
 8002712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002716:	d062      	beq.n	80027de <UART_SetConfig+0x10e>
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002718:	f8d4 8000 	ldr.w	r8, [r4]
 800271c:	4bbb      	ldr	r3, [pc, #748]	; (8002a0c <UART_SetConfig+0x33c>)
 800271e:	4598      	cmp	r8, r3
 8002720:	f000 811b 	beq.w	800295a <UART_SetConfig+0x28a>
 8002724:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002728:	4598      	cmp	r8, r3
 800272a:	f000 8116 	beq.w	800295a <UART_SetConfig+0x28a>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800272e:	f7ff fa2b 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 8002732:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002736:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800273a:	6865      	ldr	r5, [r4, #4]
 800273c:	00ad      	lsls	r5, r5, #2
 800273e:	fbb0 f5f5 	udiv	r5, r0, r5
 8002742:	4fb3      	ldr	r7, [pc, #716]	; (8002a10 <UART_SetConfig+0x340>)
 8002744:	fba7 3505 	umull	r3, r5, r7, r5
 8002748:	096d      	lsrs	r5, r5, #5
 800274a:	012e      	lsls	r6, r5, #4
 800274c:	f7ff fa1c 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 8002750:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002754:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002758:	6865      	ldr	r5, [r4, #4]
 800275a:	00ad      	lsls	r5, r5, #2
 800275c:	fbb0 faf5 	udiv	sl, r0, r5
 8002760:	f7ff fa12 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 8002764:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002768:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800276c:	6865      	ldr	r5, [r4, #4]
 800276e:	00ad      	lsls	r5, r5, #2
 8002770:	fbb0 f5f5 	udiv	r5, r0, r5
 8002774:	fba7 3505 	umull	r3, r5, r7, r5
 8002778:	096d      	lsrs	r5, r5, #5
 800277a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800277e:	fb09 a515 	mls	r5, r9, r5, sl
 8002782:	012d      	lsls	r5, r5, #4
 8002784:	3532      	adds	r5, #50	; 0x32
 8002786:	fba7 3505 	umull	r3, r5, r7, r5
 800278a:	096d      	lsrs	r5, r5, #5
 800278c:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8002790:	4435      	add	r5, r6
 8002792:	f7ff f9f9 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 8002796:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800279a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800279e:	6866      	ldr	r6, [r4, #4]
 80027a0:	00b6      	lsls	r6, r6, #2
 80027a2:	fbb0 f6f6 	udiv	r6, r0, r6
 80027a6:	f7ff f9ef 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 80027aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027b2:	6863      	ldr	r3, [r4, #4]
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	fbb0 f0f3 	udiv	r0, r0, r3
 80027ba:	fba7 3000 	umull	r3, r0, r7, r0
 80027be:	0940      	lsrs	r0, r0, #5
 80027c0:	fb09 6910 	mls	r9, r9, r0, r6
 80027c4:	ea4f 1909 	mov.w	r9, r9, lsl #4
 80027c8:	f109 0932 	add.w	r9, r9, #50	; 0x32
 80027cc:	fba7 3709 	umull	r3, r7, r7, r9
 80027d0:	f3c7 1743 	ubfx	r7, r7, #5, #4
 80027d4:	442f      	add	r7, r5
 80027d6:	f8c8 7008 	str.w	r7, [r8, #8]
 80027da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80027de:	f8d4 8000 	ldr.w	r8, [r4]
 80027e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80027e6:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 80027ea:	4598      	cmp	r8, r3
 80027ec:	d05c      	beq.n	80028a8 <UART_SetConfig+0x1d8>
 80027ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027f2:	4598      	cmp	r8, r3
 80027f4:	d058      	beq.n	80028a8 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80027f6:	f7ff f9c7 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 80027fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002802:	6865      	ldr	r5, [r4, #4]
 8002804:	006d      	lsls	r5, r5, #1
 8002806:	fbb0 f5f5 	udiv	r5, r0, r5
 800280a:	4f81      	ldr	r7, [pc, #516]	; (8002a10 <UART_SetConfig+0x340>)
 800280c:	fba7 3505 	umull	r3, r5, r7, r5
 8002810:	096d      	lsrs	r5, r5, #5
 8002812:	012e      	lsls	r6, r5, #4
 8002814:	f7ff f9b8 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 8002818:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800281c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002820:	6865      	ldr	r5, [r4, #4]
 8002822:	006d      	lsls	r5, r5, #1
 8002824:	fbb0 faf5 	udiv	sl, r0, r5
 8002828:	f7ff f9ae 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 800282c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002830:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002834:	6865      	ldr	r5, [r4, #4]
 8002836:	006d      	lsls	r5, r5, #1
 8002838:	fbb0 f5f5 	udiv	r5, r0, r5
 800283c:	fba7 3505 	umull	r3, r5, r7, r5
 8002840:	096d      	lsrs	r5, r5, #5
 8002842:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002846:	fb09 a515 	mls	r5, r9, r5, sl
 800284a:	00ed      	lsls	r5, r5, #3
 800284c:	3532      	adds	r5, #50	; 0x32
 800284e:	fba7 3505 	umull	r3, r5, r7, r5
 8002852:	096d      	lsrs	r5, r5, #5
 8002854:	006d      	lsls	r5, r5, #1
 8002856:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 800285a:	4435      	add	r5, r6
 800285c:	f7ff f994 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 8002860:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002864:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002868:	6866      	ldr	r6, [r4, #4]
 800286a:	0076      	lsls	r6, r6, #1
 800286c:	fbb0 f6f6 	udiv	r6, r0, r6
 8002870:	f7ff f98a 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 8002874:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002878:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800287c:	6863      	ldr	r3, [r4, #4]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	fbb0 f3f3 	udiv	r3, r0, r3
 8002884:	fba7 2303 	umull	r2, r3, r7, r3
 8002888:	095b      	lsrs	r3, r3, #5
 800288a:	fb09 6913 	mls	r9, r9, r3, r6
 800288e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8002892:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8002896:	fba7 3709 	umull	r3, r7, r7, r9
 800289a:	f3c7 1742 	ubfx	r7, r7, #5, #3
 800289e:	442f      	add	r7, r5
 80028a0:	f8c8 7008 	str.w	r7, [r8, #8]
 80028a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80028a8:	f7ff f984 	bl	8001bb4 <HAL_RCC_GetPCLK2Freq>
 80028ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028b4:	6865      	ldr	r5, [r4, #4]
 80028b6:	006d      	lsls	r5, r5, #1
 80028b8:	fbb0 f5f5 	udiv	r5, r0, r5
 80028bc:	4f54      	ldr	r7, [pc, #336]	; (8002a10 <UART_SetConfig+0x340>)
 80028be:	fba7 3505 	umull	r3, r5, r7, r5
 80028c2:	096d      	lsrs	r5, r5, #5
 80028c4:	012e      	lsls	r6, r5, #4
 80028c6:	f7ff f975 	bl	8001bb4 <HAL_RCC_GetPCLK2Freq>
 80028ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028d2:	6865      	ldr	r5, [r4, #4]
 80028d4:	006d      	lsls	r5, r5, #1
 80028d6:	fbb0 faf5 	udiv	sl, r0, r5
 80028da:	f7ff f96b 	bl	8001bb4 <HAL_RCC_GetPCLK2Freq>
 80028de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028e6:	6865      	ldr	r5, [r4, #4]
 80028e8:	006d      	lsls	r5, r5, #1
 80028ea:	fbb0 f5f5 	udiv	r5, r0, r5
 80028ee:	fba7 3505 	umull	r3, r5, r7, r5
 80028f2:	096d      	lsrs	r5, r5, #5
 80028f4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80028f8:	fb09 a515 	mls	r5, r9, r5, sl
 80028fc:	00ed      	lsls	r5, r5, #3
 80028fe:	3532      	adds	r5, #50	; 0x32
 8002900:	fba7 3505 	umull	r3, r5, r7, r5
 8002904:	096d      	lsrs	r5, r5, #5
 8002906:	006d      	lsls	r5, r5, #1
 8002908:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 800290c:	4435      	add	r5, r6
 800290e:	f7ff f951 	bl	8001bb4 <HAL_RCC_GetPCLK2Freq>
 8002912:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002916:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800291a:	6866      	ldr	r6, [r4, #4]
 800291c:	0076      	lsls	r6, r6, #1
 800291e:	fbb0 f6f6 	udiv	r6, r0, r6
 8002922:	f7ff f947 	bl	8001bb4 <HAL_RCC_GetPCLK2Freq>
 8002926:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800292a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800292e:	6863      	ldr	r3, [r4, #4]
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	fbb0 f3f3 	udiv	r3, r0, r3
 8002936:	fba7 2303 	umull	r2, r3, r7, r3
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	fb09 6913 	mls	r9, r9, r3, r6
 8002940:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8002944:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8002948:	fba7 3709 	umull	r3, r7, r7, r9
 800294c:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8002950:	442f      	add	r7, r5
 8002952:	f8c8 7008 	str.w	r7, [r8, #8]
 8002956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800295a:	f7ff f92b 	bl	8001bb4 <HAL_RCC_GetPCLK2Freq>
 800295e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002962:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002966:	6865      	ldr	r5, [r4, #4]
 8002968:	00ad      	lsls	r5, r5, #2
 800296a:	fbb0 f5f5 	udiv	r5, r0, r5
 800296e:	4f28      	ldr	r7, [pc, #160]	; (8002a10 <UART_SetConfig+0x340>)
 8002970:	fba7 3505 	umull	r3, r5, r7, r5
 8002974:	096d      	lsrs	r5, r5, #5
 8002976:	012e      	lsls	r6, r5, #4
 8002978:	f7ff f91c 	bl	8001bb4 <HAL_RCC_GetPCLK2Freq>
 800297c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002980:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002984:	6865      	ldr	r5, [r4, #4]
 8002986:	00ad      	lsls	r5, r5, #2
 8002988:	fbb0 faf5 	udiv	sl, r0, r5
 800298c:	f7ff f912 	bl	8001bb4 <HAL_RCC_GetPCLK2Freq>
 8002990:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002994:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002998:	6865      	ldr	r5, [r4, #4]
 800299a:	00ad      	lsls	r5, r5, #2
 800299c:	fbb0 f5f5 	udiv	r5, r0, r5
 80029a0:	fba7 3505 	umull	r3, r5, r7, r5
 80029a4:	096d      	lsrs	r5, r5, #5
 80029a6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80029aa:	fb09 a515 	mls	r5, r9, r5, sl
 80029ae:	012d      	lsls	r5, r5, #4
 80029b0:	3532      	adds	r5, #50	; 0x32
 80029b2:	fba7 3505 	umull	r3, r5, r7, r5
 80029b6:	096d      	lsrs	r5, r5, #5
 80029b8:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 80029bc:	4435      	add	r5, r6
 80029be:	f7ff f8f9 	bl	8001bb4 <HAL_RCC_GetPCLK2Freq>
 80029c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029ca:	6866      	ldr	r6, [r4, #4]
 80029cc:	00b6      	lsls	r6, r6, #2
 80029ce:	fbb0 f6f6 	udiv	r6, r0, r6
 80029d2:	f7ff f8ef 	bl	8001bb4 <HAL_RCC_GetPCLK2Freq>
 80029d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029de:	6863      	ldr	r3, [r4, #4]
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e6:	fba7 2303 	umull	r2, r3, r7, r3
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	fb09 6913 	mls	r9, r9, r3, r6
 80029f0:	ea4f 1909 	mov.w	r9, r9, lsl #4
 80029f4:	f109 0932 	add.w	r9, r9, #50	; 0x32
 80029f8:	fba7 3709 	umull	r3, r7, r7, r9
 80029fc:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8002a00:	442f      	add	r7, r5
 8002a02:	f8c8 7008 	str.w	r7, [r8, #8]
 8002a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40011000 	.word	0x40011000
 8002a10:	51eb851f 	.word	0x51eb851f

08002a14 <HAL_UART_Init>:
  if(huart == NULL)
 8002a14:	b358      	cbz	r0, 8002a6e <HAL_UART_Init+0x5a>
{
 8002a16:	b510      	push	{r4, lr}
 8002a18:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8002a1a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002a1e:	b30b      	cbz	r3, 8002a64 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002a20:	2324      	movs	r3, #36	; 0x24
 8002a22:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002a26:	6822      	ldr	r2, [r4, #0]
 8002a28:	68d3      	ldr	r3, [r2, #12]
 8002a2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a2e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002a30:	4620      	mov	r0, r4
 8002a32:	f7ff fe4d 	bl	80026d0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a36:	6822      	ldr	r2, [r4, #0]
 8002a38:	6913      	ldr	r3, [r2, #16]
 8002a3a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002a3e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a40:	6822      	ldr	r2, [r4, #0]
 8002a42:	6953      	ldr	r3, [r2, #20]
 8002a44:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002a48:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002a4a:	6822      	ldr	r2, [r4, #0]
 8002a4c:	68d3      	ldr	r3, [r2, #12]
 8002a4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a52:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a54:	2000      	movs	r0, #0
 8002a56:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002a58:	2320      	movs	r3, #32
 8002a5a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002a5e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002a62:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002a64:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002a68:	f009 f87a 	bl	800bb60 <HAL_UART_MspInit>
 8002a6c:	e7d8      	b.n	8002a20 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002a6e:	2001      	movs	r0, #1
 8002a70:	4770      	bx	lr

08002a72 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8002a72:	2884      	cmp	r0, #132	; 0x84
 8002a74:	d001      	beq.n	8002a7a <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8002a76:	3003      	adds	r0, #3
 8002a78:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002a7a:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8002a7c:	4770      	bx	lr

08002a7e <inHandlerMode>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a7e:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 8002a82:	3000      	adds	r0, #0
 8002a84:	bf18      	it	ne
 8002a86:	2001      	movne	r0, #1
 8002a88:	4770      	bx	lr

08002a8a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002a8a:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8002a8c:	f001 f90c 	bl	8003ca8 <vTaskStartScheduler>
  
  return osOK;
}
 8002a90:	2000      	movs	r0, #0
 8002a92:	bd08      	pop	{r3, pc}

08002a94 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a96:	b087      	sub	sp, #28
 8002a98:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a9a:	6844      	ldr	r4, [r0, #4]
 8002a9c:	6805      	ldr	r5, [r0, #0]
 8002a9e:	6906      	ldr	r6, [r0, #16]
 8002aa0:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8002aa4:	f7ff ffe5 	bl	8002a72 <makeFreeRtosPriority>
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	9303      	str	r3, [sp, #12]
 8002aac:	9302      	str	r3, [sp, #8]
 8002aae:	ab05      	add	r3, sp, #20
 8002ab0:	9301      	str	r3, [sp, #4]
 8002ab2:	9000      	str	r0, [sp, #0]
 8002ab4:	463b      	mov	r3, r7
 8002ab6:	b2b2      	uxth	r2, r6
 8002ab8:	4629      	mov	r1, r5
 8002aba:	4620      	mov	r0, r4
 8002abc:	f000 fff4 	bl	8003aa8 <xTaskGenericCreate>
 8002ac0:	2801      	cmp	r0, #1
 8002ac2:	d102      	bne.n	8002aca <osThreadCreate+0x36>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
  }
  
  return handle;
 8002ac4:	9805      	ldr	r0, [sp, #20]
}
 8002ac6:	b007      	add	sp, #28
 8002ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 8002aca:	2000      	movs	r0, #0
 8002acc:	e7fb      	b.n	8002ac6 <osThreadCreate+0x32>

08002ace <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 8002ace:	b510      	push	{r4, lr}
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 8002ad0:	2901      	cmp	r1, #1
 8002ad2:	d10d      	bne.n	8002af0 <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 8002ad4:	2203      	movs	r2, #3
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	2001      	movs	r0, #1
 8002ada:	f000 fc53 	bl	8003384 <xQueueGenericCreate>
 8002ade:	4604      	mov	r4, r0
 8002ae0:	b120      	cbz	r0, 8002aec <osSemaphoreCreate+0x1e>
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	f000 fc82 	bl	80033f0 <xQueueGenericSend>
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
#else
  return NULL;
#endif
}
 8002aec:	4620      	mov	r0, r4
 8002aee:	bd10      	pop	{r4, pc}
  return NULL;
 8002af0:	2400      	movs	r4, #0
 8002af2:	e7fb      	b.n	8002aec <osSemaphoreCreate+0x1e>

08002af4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002af4:	b530      	push	{r4, r5, lr}
 8002af6:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002af8:	2300      	movs	r3, #0
 8002afa:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8002afc:	b360      	cbz	r0, 8002b58 <osSemaphoreWait+0x64>
 8002afe:	460c      	mov	r4, r1
 8002b00:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8002b02:	f1b1 3fff 	cmp.w	r1, #4294967295
 8002b06:	d00d      	beq.n	8002b24 <osSemaphoreWait+0x30>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8002b08:	b901      	cbnz	r1, 8002b0c <osSemaphoreWait+0x18>
  ticks = 0;
 8002b0a:	461c      	mov	r4, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8002b0c:	f7ff ffb7 	bl	8002a7e <inHandlerMode>
 8002b10:	b1b8      	cbz	r0, 8002b42 <osSemaphoreWait+0x4e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002b12:	aa01      	add	r2, sp, #4
 8002b14:	2100      	movs	r1, #0
 8002b16:	4628      	mov	r0, r5
 8002b18:	f000 fe74 	bl	8003804 <xQueueReceiveFromISR>
 8002b1c:	2801      	cmp	r0, #1
 8002b1e:	d004      	beq.n	8002b2a <osSemaphoreWait+0x36>
      return osErrorOS;
 8002b20:	20ff      	movs	r0, #255	; 0xff
 8002b22:	e017      	b.n	8002b54 <osSemaphoreWait+0x60>
    ticks = portMAX_DELAY;
 8002b24:	f04f 34ff 	mov.w	r4, #4294967295
 8002b28:	e7f0      	b.n	8002b0c <osSemaphoreWait+0x18>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002b2a:	9b01      	ldr	r3, [sp, #4]
 8002b2c:	b1b3      	cbz	r3, 8002b5c <osSemaphoreWait+0x68>
 8002b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b32:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <osSemaphoreWait+0x70>)
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	f3bf 8f4f 	dsb	sy
 8002b3a:	f3bf 8f6f 	isb	sy
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8002b3e:	2000      	movs	r0, #0
 8002b40:	e008      	b.n	8002b54 <osSemaphoreWait+0x60>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002b42:	2300      	movs	r3, #0
 8002b44:	4622      	mov	r2, r4
 8002b46:	4619      	mov	r1, r3
 8002b48:	4628      	mov	r0, r5
 8002b4a:	f000 fd93 	bl	8003674 <xQueueGenericReceive>
 8002b4e:	2801      	cmp	r0, #1
 8002b50:	d006      	beq.n	8002b60 <osSemaphoreWait+0x6c>
    return osErrorOS;
 8002b52:	20ff      	movs	r0, #255	; 0xff
}
 8002b54:	b003      	add	sp, #12
 8002b56:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 8002b58:	2080      	movs	r0, #128	; 0x80
 8002b5a:	e7fb      	b.n	8002b54 <osSemaphoreWait+0x60>
  return osOK;
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	e7f9      	b.n	8002b54 <osSemaphoreWait+0x60>
 8002b60:	2000      	movs	r0, #0
 8002b62:	e7f7      	b.n	8002b54 <osSemaphoreWait+0x60>
 8002b64:	e000ed04 	.word	0xe000ed04

08002b68 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002b68:	b510      	push	{r4, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	9301      	str	r3, [sp, #4]
  
  
  if (inHandlerMode()) {
 8002b72:	f7ff ff84 	bl	8002a7e <inHandlerMode>
 8002b76:	b1a0      	cbz	r0, 8002ba2 <osSemaphoreRelease+0x3a>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002b78:	a901      	add	r1, sp, #4
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	f000 fd1d 	bl	80035ba <xQueueGiveFromISR>
 8002b80:	2801      	cmp	r0, #1
 8002b82:	d002      	beq.n	8002b8a <osSemaphoreRelease+0x22>
      return osErrorOS;
 8002b84:	20ff      	movs	r0, #255	; 0xff
      result = osErrorOS;
    }
  }
  
  return result;
}
 8002b86:	b002      	add	sp, #8
 8002b88:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8002b8a:	9b01      	ldr	r3, [sp, #4]
 8002b8c:	b1ab      	cbz	r3, 8002bba <osSemaphoreRelease+0x52>
 8002b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b92:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <osSemaphoreRelease+0x58>)
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	f3bf 8f4f 	dsb	sy
 8002b9a:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	e7f1      	b.n	8002b86 <osSemaphoreRelease+0x1e>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4620      	mov	r0, r4
 8002baa:	f000 fc21 	bl	80033f0 <xQueueGenericSend>
 8002bae:	2801      	cmp	r0, #1
 8002bb0:	d001      	beq.n	8002bb6 <osSemaphoreRelease+0x4e>
      result = osErrorOS;
 8002bb2:	20ff      	movs	r0, #255	; 0xff
 8002bb4:	e7e7      	b.n	8002b86 <osSemaphoreRelease+0x1e>
  osStatus result = osOK;
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	e7e5      	b.n	8002b86 <osSemaphoreRelease+0x1e>
 8002bba:	2000      	movs	r0, #0
 8002bbc:	e7e3      	b.n	8002b86 <osSemaphoreRelease+0x1e>
 8002bbe:	bf00      	nop
 8002bc0:	e000ed04 	.word	0xe000ed04

08002bc4 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8002bc4:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002bc6:	f001 fb6f 	bl	80042a8 <xTaskGetSchedulerState>
 8002bca:	2801      	cmp	r0, #1
 8002bcc:	d001      	beq.n	8002bd2 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8002bce:	f000 f909 	bl	8002de4 <xPortSysTickHandler>
 8002bd2:	bd08      	pop	{r3, pc}

08002bd4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bd4:	f100 0308 	add.w	r3, r0, #8
 8002bd8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002bda:	f04f 32ff 	mov.w	r2, #4294967295
 8002bde:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002be0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002be2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	6003      	str	r3, [r0, #0]
 8002be8:	4770      	bx	lr

08002bea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	6103      	str	r3, [r0, #16]
 8002bee:	4770      	bx	lr

08002bf0 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002bf0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002bf2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002bfc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002bfe:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002c00:	6803      	ldr	r3, [r0, #0]
 8002c02:	3301      	adds	r3, #1
 8002c04:	6003      	str	r3, [r0, #0]
 8002c06:	4770      	bx	lr

08002c08 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c08:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c0a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c0c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002c10:	d002      	beq.n	8002c18 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c12:	f100 0208 	add.w	r2, r0, #8
 8002c16:	e002      	b.n	8002c1e <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c18:	6902      	ldr	r2, [r0, #16]
 8002c1a:	e004      	b.n	8002c26 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	6853      	ldr	r3, [r2, #4]
 8002c20:	681c      	ldr	r4, [r3, #0]
 8002c22:	42a5      	cmp	r5, r4
 8002c24:	d2fa      	bcs.n	8002c1c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c26:	6853      	ldr	r3, [r2, #4]
 8002c28:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c2a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c2c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c2e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002c30:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002c32:	6803      	ldr	r3, [r0, #0]
 8002c34:	3301      	adds	r3, #1
 8002c36:	6003      	str	r3, [r0, #0]
}
 8002c38:	bc30      	pop	{r4, r5}
 8002c3a:	4770      	bx	lr

08002c3c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002c3c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c3e:	6842      	ldr	r2, [r0, #4]
 8002c40:	6881      	ldr	r1, [r0, #8]
 8002c42:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c44:	6882      	ldr	r2, [r0, #8]
 8002c46:	6841      	ldr	r1, [r0, #4]
 8002c48:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	4290      	cmp	r0, r2
 8002c4e:	d005      	beq.n	8002c5c <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002c50:	2200      	movs	r2, #0
 8002c52:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	3801      	subs	r0, #1
 8002c58:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8002c5a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c5c:	6882      	ldr	r2, [r0, #8]
 8002c5e:	605a      	str	r2, [r3, #4]
 8002c60:	e7f6      	b.n	8002c50 <uxListRemove+0x14>
	...

08002c64 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <prvTaskExitError+0x30>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6c:	d008      	beq.n	8002c80 <prvTaskExitError+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c72:	f383 8811 	msr	BASEPRI, r3
 8002c76:	f3bf 8f6f 	isb	sy
 8002c7a:	f3bf 8f4f 	dsb	sy
 8002c7e:	e7fe      	b.n	8002c7e <prvTaskExitError+0x1a>
 8002c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c84:	f383 8811 	msr	BASEPRI, r3
 8002c88:	f3bf 8f6f 	isb	sy
 8002c8c:	f3bf 8f4f 	dsb	sy
 8002c90:	e7fe      	b.n	8002c90 <prvTaskExitError+0x2c>
 8002c92:	bf00      	nop
 8002c94:	20000000 	.word	0x20000000

08002c98 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002c98:	4806      	ldr	r0, [pc, #24]	; (8002cb4 <prvPortStartFirstTask+0x1c>)
 8002c9a:	6800      	ldr	r0, [r0, #0]
 8002c9c:	6800      	ldr	r0, [r0, #0]
 8002c9e:	f380 8808 	msr	MSP, r0
 8002ca2:	b662      	cpsie	i
 8002ca4:	b661      	cpsie	f
 8002ca6:	f3bf 8f4f 	dsb	sy
 8002caa:	f3bf 8f6f 	isb	sy
 8002cae:	df00      	svc	0
 8002cb0:	bf00      	nop
 8002cb2:	0000      	.short	0x0000
 8002cb4:	e000ed08 	.word	0xe000ed08

08002cb8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002cb8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002cc8 <vPortEnableVFP+0x10>
 8002cbc:	6801      	ldr	r1, [r0, #0]
 8002cbe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002cc2:	6001      	str	r1, [r0, #0]
 8002cc4:	4770      	bx	lr
 8002cc6:	0000      	.short	0x0000
 8002cc8:	e000ed88 	.word	0xe000ed88

08002ccc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002ccc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cd0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8002cd4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002cd8:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <pxPortInitialiseStack+0x24>)
 8002cda:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002cde:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002ce2:	f06f 0302 	mvn.w	r3, #2
 8002ce6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8002cea:	3844      	subs	r0, #68	; 0x44
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	08002c65 	.word	0x08002c65

08002cf4 <SVC_Handler>:
	__asm volatile (
 8002cf4:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <pxCurrentTCBConst2>)
 8002cf6:	6819      	ldr	r1, [r3, #0]
 8002cf8:	6808      	ldr	r0, [r1, #0]
 8002cfa:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cfe:	f380 8809 	msr	PSP, r0
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	f04f 0000 	mov.w	r0, #0
 8002d0a:	f380 8811 	msr	BASEPRI, r0
 8002d0e:	4770      	bx	lr

08002d10 <pxCurrentTCBConst2>:
 8002d10:	20003ce4 	.word	0x20003ce4

08002d14 <vPortEnterCritical>:
 8002d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d18:	f383 8811 	msr	BASEPRI, r3
 8002d1c:	f3bf 8f6f 	isb	sy
 8002d20:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002d24:	4a0a      	ldr	r2, [pc, #40]	; (8002d50 <vPortEnterCritical+0x3c>)
 8002d26:	6813      	ldr	r3, [r2, #0]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d10d      	bne.n	8002d4c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d30:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <vPortEnterCritical+0x40>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002d38:	d008      	beq.n	8002d4c <vPortEnterCritical+0x38>
 8002d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3e:	f383 8811 	msr	BASEPRI, r3
 8002d42:	f3bf 8f6f 	isb	sy
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	e7fe      	b.n	8002d4a <vPortEnterCritical+0x36>
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	20000000 	.word	0x20000000
 8002d54:	e000ed04 	.word	0xe000ed04

08002d58 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002d58:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <vPortExitCritical+0x28>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	b943      	cbnz	r3, 8002d70 <vPortExitCritical+0x18>
 8002d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d62:	f383 8811 	msr	BASEPRI, r3
 8002d66:	f3bf 8f6f 	isb	sy
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	e7fe      	b.n	8002d6e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002d70:	3b01      	subs	r3, #1
 8002d72:	4a03      	ldr	r2, [pc, #12]	; (8002d80 <vPortExitCritical+0x28>)
 8002d74:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002d76:	b90b      	cbnz	r3, 8002d7c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d78:	f383 8811 	msr	BASEPRI, r3
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	20000000 	.word	0x20000000

08002d84 <PendSV_Handler>:
	__asm volatile
 8002d84:	f3ef 8009 	mrs	r0, PSP
 8002d88:	f3bf 8f6f 	isb	sy
 8002d8c:	4b14      	ldr	r3, [pc, #80]	; (8002de0 <pxCurrentTCBConst>)
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	f01e 0f10 	tst.w	lr, #16
 8002d94:	bf08      	it	eq
 8002d96:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002d9a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d9e:	6010      	str	r0, [r2, #0]
 8002da0:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002da4:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002da8:	f380 8811 	msr	BASEPRI, r0
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	f3bf 8f6f 	isb	sy
 8002db4:	f001 f950 	bl	8004058 <vTaskSwitchContext>
 8002db8:	f04f 0000 	mov.w	r0, #0
 8002dbc:	f380 8811 	msr	BASEPRI, r0
 8002dc0:	bc08      	pop	{r3}
 8002dc2:	6819      	ldr	r1, [r3, #0]
 8002dc4:	6808      	ldr	r0, [r1, #0]
 8002dc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dca:	f01e 0f10 	tst.w	lr, #16
 8002dce:	bf08      	it	eq
 8002dd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002dd4:	f380 8809 	msr	PSP, r0
 8002dd8:	f3bf 8f6f 	isb	sy
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop

08002de0 <pxCurrentTCBConst>:
 8002de0:	20003ce4 	.word	0x20003ce4

08002de4 <xPortSysTickHandler>:
{
 8002de4:	b508      	push	{r3, lr}
	__asm volatile
 8002de6:	f3ef 8311 	mrs	r3, BASEPRI
 8002dea:	f04f 0250 	mov.w	r2, #80	; 0x50
 8002dee:	f382 8811 	msr	BASEPRI, r2
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002dfa:	f000 ff9d 	bl	8003d38 <xTaskIncrementTick>
 8002dfe:	b118      	cbz	r0, 8002e08 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e04:	4b02      	ldr	r3, [pc, #8]	; (8002e10 <xPortSysTickHandler+0x2c>)
 8002e06:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f383 8811 	msr	BASEPRI, r3
 8002e0e:	bd08      	pop	{r3, pc}
 8002e10:	e000ed04 	.word	0xe000ed04

08002e14 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002e14:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <vPortSetupTimerInterrupt+0x1c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a06      	ldr	r2, [pc, #24]	; (8002e34 <vPortSetupTimerInterrupt+0x20>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	099b      	lsrs	r3, r3, #6
 8002e20:	3b01      	subs	r3, #1
 8002e22:	4a05      	ldr	r2, [pc, #20]	; (8002e38 <vPortSetupTimerInterrupt+0x24>)
 8002e24:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002e26:	2207      	movs	r2, #7
 8002e28:	4b04      	ldr	r3, [pc, #16]	; (8002e3c <vPortSetupTimerInterrupt+0x28>)
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	20000040 	.word	0x20000040
 8002e34:	10624dd3 	.word	0x10624dd3
 8002e38:	e000e014 	.word	0xe000e014
 8002e3c:	e000e010 	.word	0xe000e010

08002e40 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e40:	4b31      	ldr	r3, [pc, #196]	; (8002f08 <xPortStartScheduler+0xc8>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4b31      	ldr	r3, [pc, #196]	; (8002f0c <xPortStartScheduler+0xcc>)
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d01a      	beq.n	8002e80 <xPortStartScheduler+0x40>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002e4a:	4b2f      	ldr	r3, [pc, #188]	; (8002f08 <xPortStartScheduler+0xc8>)
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	4b30      	ldr	r3, [pc, #192]	; (8002f10 <xPortStartScheduler+0xd0>)
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d01e      	beq.n	8002e92 <xPortStartScheduler+0x52>
{
 8002e54:	b500      	push	{lr}
 8002e56:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002e58:	4b2e      	ldr	r3, [pc, #184]	; (8002f14 <xPortStartScheduler+0xd4>)
 8002e5a:	781a      	ldrb	r2, [r3, #0]
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e60:	22ff      	movs	r2, #255	; 0xff
 8002e62:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e6c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002e70:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e74:	4a28      	ldr	r2, [pc, #160]	; (8002f18 <xPortStartScheduler+0xd8>)
 8002e76:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e78:	2207      	movs	r2, #7
 8002e7a:	4b28      	ldr	r3, [pc, #160]	; (8002f1c <xPortStartScheduler+0xdc>)
 8002e7c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e7e:	e01b      	b.n	8002eb8 <xPortStartScheduler+0x78>
	__asm volatile
 8002e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e84:	f383 8811 	msr	BASEPRI, r3
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	e7fe      	b.n	8002e90 <xPortStartScheduler+0x50>
 8002e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e96:	f383 8811 	msr	BASEPRI, r3
 8002e9a:	f3bf 8f6f 	isb	sy
 8002e9e:	f3bf 8f4f 	dsb	sy
 8002ea2:	e7fe      	b.n	8002ea2 <xPortStartScheduler+0x62>
			ulMaxPRIGROUPValue--;
 8002ea4:	4a1d      	ldr	r2, [pc, #116]	; (8002f1c <xPortStartScheduler+0xdc>)
 8002ea6:	6813      	ldr	r3, [r2, #0]
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002eac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002eb8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002ebc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002ec0:	d1f0      	bne.n	8002ea4 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002ec2:	4a16      	ldr	r2, [pc, #88]	; (8002f1c <xPortStartScheduler+0xdc>)
 8002ec4:	6813      	ldr	r3, [r2, #0]
 8002ec6:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002ec8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ecc:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ece:	9b01      	ldr	r3, [sp, #4]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	4a10      	ldr	r2, [pc, #64]	; (8002f14 <xPortStartScheduler+0xd4>)
 8002ed4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002ed6:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <xPortStartScheduler+0xe0>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002ede:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002ee6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002ee8:	f7ff ff94 	bl	8002e14 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002eec:	2200      	movs	r2, #0
 8002eee:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <xPortStartScheduler+0xe4>)
 8002ef0:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8002ef2:	f7ff fee1 	bl	8002cb8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002ef6:	4a0c      	ldr	r2, [pc, #48]	; (8002f28 <xPortStartScheduler+0xe8>)
 8002ef8:	6813      	ldr	r3, [r2, #0]
 8002efa:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002efe:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002f00:	f7ff feca 	bl	8002c98 <prvPortStartFirstTask>
	prvTaskExitError();
 8002f04:	f7ff feae 	bl	8002c64 <prvTaskExitError>
 8002f08:	e000ed00 	.word	0xe000ed00
 8002f0c:	410fc271 	.word	0x410fc271
 8002f10:	410fc270 	.word	0x410fc270
 8002f14:	e000e400 	.word	0xe000e400
 8002f18:	200000c4 	.word	0x200000c4
 8002f1c:	200000c8 	.word	0x200000c8
 8002f20:	e000ed20 	.word	0xe000ed20
 8002f24:	20000000 	.word	0x20000000
 8002f28:	e000ef34 	.word	0xe000ef34

08002f2c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8002f2c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002f30:	2b0f      	cmp	r3, #15
 8002f32:	d90f      	bls.n	8002f54 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002f34:	4a10      	ldr	r2, [pc, #64]	; (8002f78 <vPortValidateInterruptPriority+0x4c>)
 8002f36:	5c9b      	ldrb	r3, [r3, r2]
 8002f38:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002f3a:	4a10      	ldr	r2, [pc, #64]	; (8002f7c <vPortValidateInterruptPriority+0x50>)
 8002f3c:	7812      	ldrb	r2, [r2, #0]
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d208      	bcs.n	8002f54 <vPortValidateInterruptPriority+0x28>
 8002f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f46:	f383 8811 	msr	BASEPRI, r3
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	f3bf 8f4f 	dsb	sy
 8002f52:	e7fe      	b.n	8002f52 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002f54:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <vPortValidateInterruptPriority+0x54>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f5c:	4a09      	ldr	r2, [pc, #36]	; (8002f84 <vPortValidateInterruptPriority+0x58>)
 8002f5e:	6812      	ldr	r2, [r2, #0]
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d908      	bls.n	8002f76 <vPortValidateInterruptPriority+0x4a>
 8002f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f68:	f383 8811 	msr	BASEPRI, r3
 8002f6c:	f3bf 8f6f 	isb	sy
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	e7fe      	b.n	8002f74 <vPortValidateInterruptPriority+0x48>
 8002f76:	4770      	bx	lr
 8002f78:	e000e3f0 	.word	0xe000e3f0
 8002f7c:	200000c4 	.word	0x200000c4
 8002f80:	e000ed0c 	.word	0xe000ed0c
 8002f84:	200000c8 	.word	0x200000c8

08002f88 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002f88:	4a12      	ldr	r2, [pc, #72]	; (8002fd4 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002f8a:	f012 0f07 	tst.w	r2, #7
 8002f8e:	d01e      	beq.n	8002fce <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002f90:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002f92:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002f96:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 8002f9a:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002f9c:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002f9e:	480e      	ldr	r0, [pc, #56]	; (8002fd8 <prvHeapInit+0x50>)
 8002fa0:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002fa6:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002fa8:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002faa:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8002fae:	480b      	ldr	r0, [pc, #44]	; (8002fdc <prvHeapInit+0x54>)
 8002fb0:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8002fb2:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002fb4:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002fb6:	1a99      	subs	r1, r3, r2
 8002fb8:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002fba:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002fbc:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <prvHeapInit+0x58>)
 8002fbe:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002fc0:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <prvHeapInit+0x5c>)
 8002fc2:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002fc4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002fc8:	4b07      	ldr	r3, [pc, #28]	; (8002fe8 <prvHeapInit+0x60>)
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002fce:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002fd2:	e7e4      	b.n	8002f9e <prvHeapInit+0x16>
 8002fd4:	200000d0 	.word	0x200000d0
 8002fd8:	20003cdc 	.word	0x20003cdc
 8002fdc:	200000cc 	.word	0x200000cc
 8002fe0:	20003cd8 	.word	0x20003cd8
 8002fe4:	20003cd4 	.word	0x20003cd4
 8002fe8:	20003cd0 	.word	0x20003cd0

08002fec <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002fec:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002fee:	4b13      	ldr	r3, [pc, #76]	; (800303c <prvInsertBlockIntoFreeList+0x50>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	4282      	cmp	r2, r0
 8002ff4:	d31b      	bcc.n	800302e <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002ff6:	6859      	ldr	r1, [r3, #4]
 8002ff8:	185c      	adds	r4, r3, r1
 8002ffa:	42a0      	cmp	r0, r4
 8002ffc:	d103      	bne.n	8003006 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002ffe:	6840      	ldr	r0, [r0, #4]
 8003000:	4401      	add	r1, r0
 8003002:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003004:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003006:	6841      	ldr	r1, [r0, #4]
 8003008:	1844      	adds	r4, r0, r1
 800300a:	42a2      	cmp	r2, r4
 800300c:	d113      	bne.n	8003036 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800300e:	4c0c      	ldr	r4, [pc, #48]	; (8003040 <prvInsertBlockIntoFreeList+0x54>)
 8003010:	6824      	ldr	r4, [r4, #0]
 8003012:	42a2      	cmp	r2, r4
 8003014:	d00d      	beq.n	8003032 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003016:	6852      	ldr	r2, [r2, #4]
 8003018:	4411      	add	r1, r2
 800301a:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	6812      	ldr	r2, [r2, #0]
 8003020:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003022:	4298      	cmp	r0, r3
 8003024:	d000      	beq.n	8003028 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003026:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003028:	f85d 4b04 	ldr.w	r4, [sp], #4
 800302c:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800302e:	4613      	mov	r3, r2
 8003030:	e7de      	b.n	8002ff0 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003032:	6004      	str	r4, [r0, #0]
 8003034:	e7f5      	b.n	8003022 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003036:	6002      	str	r2, [r0, #0]
 8003038:	e7f3      	b.n	8003022 <prvInsertBlockIntoFreeList+0x36>
 800303a:	bf00      	nop
 800303c:	20003cdc 	.word	0x20003cdc
 8003040:	200000cc 	.word	0x200000cc

08003044 <pvPortMalloc>:
{
 8003044:	b570      	push	{r4, r5, r6, lr}
 8003046:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003048:	f000 fe68 	bl	8003d1c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800304c:	4b3a      	ldr	r3, [pc, #232]	; (8003138 <pvPortMalloc+0xf4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	b1bb      	cbz	r3, 8003082 <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003052:	4b3a      	ldr	r3, [pc, #232]	; (800313c <pvPortMalloc+0xf8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	421c      	tst	r4, r3
 8003058:	d163      	bne.n	8003122 <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 800305a:	b1ac      	cbz	r4, 8003088 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 800305c:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800305e:	f014 0f07 	tst.w	r4, #7
 8003062:	d011      	beq.n	8003088 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003064:	f024 0407 	bic.w	r4, r4, #7
 8003068:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800306a:	f004 0307 	and.w	r3, r4, #7
 800306e:	b15b      	cbz	r3, 8003088 <pvPortMalloc+0x44>
 8003070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	e7fe      	b.n	8003080 <pvPortMalloc+0x3c>
			prvHeapInit();
 8003082:	f7ff ff81 	bl	8002f88 <prvHeapInit>
 8003086:	e7e4      	b.n	8003052 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003088:	2c00      	cmp	r4, #0
 800308a:	d04c      	beq.n	8003126 <pvPortMalloc+0xe2>
 800308c:	4b2c      	ldr	r3, [pc, #176]	; (8003140 <pvPortMalloc+0xfc>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	429c      	cmp	r4, r3
 8003092:	d84a      	bhi.n	800312a <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 8003094:	4b2b      	ldr	r3, [pc, #172]	; (8003144 <pvPortMalloc+0x100>)
 8003096:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003098:	e001      	b.n	800309e <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 800309a:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800309c:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800309e:	686a      	ldr	r2, [r5, #4]
 80030a0:	4294      	cmp	r4, r2
 80030a2:	d902      	bls.n	80030aa <pvPortMalloc+0x66>
 80030a4:	682a      	ldr	r2, [r5, #0]
 80030a6:	2a00      	cmp	r2, #0
 80030a8:	d1f7      	bne.n	800309a <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 80030aa:	4a23      	ldr	r2, [pc, #140]	; (8003138 <pvPortMalloc+0xf4>)
 80030ac:	6812      	ldr	r2, [r2, #0]
 80030ae:	4295      	cmp	r5, r2
 80030b0:	d03d      	beq.n	800312e <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80030b2:	681e      	ldr	r6, [r3, #0]
 80030b4:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80030b6:	682a      	ldr	r2, [r5, #0]
 80030b8:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80030ba:	686b      	ldr	r3, [r5, #4]
 80030bc:	1b1b      	subs	r3, r3, r4
 80030be:	2b10      	cmp	r3, #16
 80030c0:	d910      	bls.n	80030e4 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80030c2:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80030c4:	f010 0f07 	tst.w	r0, #7
 80030c8:	d008      	beq.n	80030dc <pvPortMalloc+0x98>
 80030ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ce:	f383 8811 	msr	BASEPRI, r3
 80030d2:	f3bf 8f6f 	isb	sy
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	e7fe      	b.n	80030da <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80030dc:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80030de:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80030e0:	f7ff ff84 	bl	8002fec <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80030e4:	686a      	ldr	r2, [r5, #4]
 80030e6:	4916      	ldr	r1, [pc, #88]	; (8003140 <pvPortMalloc+0xfc>)
 80030e8:	680b      	ldr	r3, [r1, #0]
 80030ea:	1a9b      	subs	r3, r3, r2
 80030ec:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80030ee:	4916      	ldr	r1, [pc, #88]	; (8003148 <pvPortMalloc+0x104>)
 80030f0:	6809      	ldr	r1, [r1, #0]
 80030f2:	428b      	cmp	r3, r1
 80030f4:	d201      	bcs.n	80030fa <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80030f6:	4914      	ldr	r1, [pc, #80]	; (8003148 <pvPortMalloc+0x104>)
 80030f8:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80030fa:	4b10      	ldr	r3, [pc, #64]	; (800313c <pvPortMalloc+0xf8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4313      	orrs	r3, r2
 8003100:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003102:	2300      	movs	r3, #0
 8003104:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8003106:	f000 fea7 	bl	8003e58 <xTaskResumeAll>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800310a:	f016 0f07 	tst.w	r6, #7
 800310e:	d010      	beq.n	8003132 <pvPortMalloc+0xee>
 8003110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003114:	f383 8811 	msr	BASEPRI, r3
 8003118:	f3bf 8f6f 	isb	sy
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	e7fe      	b.n	8003120 <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 8003122:	2600      	movs	r6, #0
 8003124:	e7ef      	b.n	8003106 <pvPortMalloc+0xc2>
 8003126:	2600      	movs	r6, #0
 8003128:	e7ed      	b.n	8003106 <pvPortMalloc+0xc2>
 800312a:	2600      	movs	r6, #0
 800312c:	e7eb      	b.n	8003106 <pvPortMalloc+0xc2>
 800312e:	2600      	movs	r6, #0
 8003130:	e7e9      	b.n	8003106 <pvPortMalloc+0xc2>
}
 8003132:	4630      	mov	r0, r6
 8003134:	bd70      	pop	{r4, r5, r6, pc}
 8003136:	bf00      	nop
 8003138:	200000cc 	.word	0x200000cc
 800313c:	20003cd0 	.word	0x20003cd0
 8003140:	20003cd4 	.word	0x20003cd4
 8003144:	20003cdc 	.word	0x20003cdc
 8003148:	20003cd8 	.word	0x20003cd8

0800314c <vPortFree>:
	if( pv != NULL )
 800314c:	b380      	cbz	r0, 80031b0 <vPortFree+0x64>
{
 800314e:	b538      	push	{r3, r4, r5, lr}
 8003150:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8003152:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003156:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800315a:	4916      	ldr	r1, [pc, #88]	; (80031b4 <vPortFree+0x68>)
 800315c:	6809      	ldr	r1, [r1, #0]
 800315e:	420a      	tst	r2, r1
 8003160:	d108      	bne.n	8003174 <vPortFree+0x28>
 8003162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003166:	f383 8811 	msr	BASEPRI, r3
 800316a:	f3bf 8f6f 	isb	sy
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	e7fe      	b.n	8003172 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003174:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8003178:	b140      	cbz	r0, 800318c <vPortFree+0x40>
 800317a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317e:	f383 8811 	msr	BASEPRI, r3
 8003182:	f3bf 8f6f 	isb	sy
 8003186:	f3bf 8f4f 	dsb	sy
 800318a:	e7fe      	b.n	800318a <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800318c:	ea22 0201 	bic.w	r2, r2, r1
 8003190:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8003194:	f000 fdc2 	bl	8003d1c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003198:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800319c:	4a06      	ldr	r2, [pc, #24]	; (80031b8 <vPortFree+0x6c>)
 800319e:	6813      	ldr	r3, [r2, #0]
 80031a0:	440b      	add	r3, r1
 80031a2:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80031a4:	4628      	mov	r0, r5
 80031a6:	f7ff ff21 	bl	8002fec <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80031aa:	f000 fe55 	bl	8003e58 <xTaskResumeAll>
 80031ae:	bd38      	pop	{r3, r4, r5, pc}
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	20003cd0 	.word	0x20003cd0
 80031b8:	20003cd4 	.word	0x20003cd4

080031bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80031bc:	b510      	push	{r4, lr}
 80031be:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031c0:	f7ff fda8 	bl	8002d14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80031c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80031c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d004      	beq.n	80031d6 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80031cc:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80031ce:	f7ff fdc3 	bl	8002d58 <vPortExitCritical>

	return xReturn;
}
 80031d2:	4620      	mov	r0, r4
 80031d4:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80031d6:	2401      	movs	r4, #1
 80031d8:	e7f9      	b.n	80031ce <prvIsQueueFull+0x12>

080031da <prvIsQueueEmpty>:
{
 80031da:	b510      	push	{r4, lr}
 80031dc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80031de:	f7ff fd99 	bl	8002d14 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80031e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031e4:	b123      	cbz	r3, 80031f0 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 80031e6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80031e8:	f7ff fdb6 	bl	8002d58 <vPortExitCritical>
}
 80031ec:	4620      	mov	r0, r4
 80031ee:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80031f0:	2401      	movs	r4, #1
 80031f2:	e7f9      	b.n	80031e8 <prvIsQueueEmpty+0xe>

080031f4 <prvCopyDataToQueue>:
{
 80031f4:	b538      	push	{r3, r4, r5, lr}
 80031f6:	4604      	mov	r4, r0
 80031f8:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80031fa:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80031fc:	b95a      	cbnz	r2, 8003216 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031fe:	6803      	ldr	r3, [r0, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d12e      	bne.n	8003262 <prvCopyDataToQueue+0x6e>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003204:	6840      	ldr	r0, [r0, #4]
 8003206:	f001 f8b1 	bl	800436c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800320a:	2300      	movs	r3, #0
 800320c:	6063      	str	r3, [r4, #4]
	++( pxQueue->uxMessagesWaiting );
 800320e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003210:	3301      	adds	r3, #1
 8003212:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8003214:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8003216:	b96d      	cbnz	r5, 8003234 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003218:	6880      	ldr	r0, [r0, #8]
 800321a:	f008 fd30 	bl	800bc7e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800321e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003220:	68a3      	ldr	r3, [r4, #8]
 8003222:	4413      	add	r3, r2
 8003224:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003226:	6862      	ldr	r2, [r4, #4]
 8003228:	4293      	cmp	r3, r2
 800322a:	d31c      	bcc.n	8003266 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800322c:	6823      	ldr	r3, [r4, #0]
 800322e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8003230:	2000      	movs	r0, #0
 8003232:	e7ec      	b.n	800320e <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003234:	68c0      	ldr	r0, [r0, #12]
 8003236:	f008 fd22 	bl	800bc7e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800323a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800323c:	425b      	negs	r3, r3
 800323e:	68e2      	ldr	r2, [r4, #12]
 8003240:	441a      	add	r2, r3
 8003242:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003244:	6821      	ldr	r1, [r4, #0]
 8003246:	428a      	cmp	r2, r1
 8003248:	d202      	bcs.n	8003250 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800324a:	6862      	ldr	r2, [r4, #4]
 800324c:	4413      	add	r3, r2
 800324e:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8003250:	2d02      	cmp	r5, #2
 8003252:	d10a      	bne.n	800326a <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003254:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003256:	b153      	cbz	r3, 800326e <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
 8003258:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800325a:	3b01      	subs	r3, #1
 800325c:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
 800325e:	2000      	movs	r0, #0
 8003260:	e7d5      	b.n	800320e <prvCopyDataToQueue+0x1a>
 8003262:	2000      	movs	r0, #0
 8003264:	e7d3      	b.n	800320e <prvCopyDataToQueue+0x1a>
 8003266:	2000      	movs	r0, #0
 8003268:	e7d1      	b.n	800320e <prvCopyDataToQueue+0x1a>
 800326a:	2000      	movs	r0, #0
 800326c:	e7cf      	b.n	800320e <prvCopyDataToQueue+0x1a>
 800326e:	2000      	movs	r0, #0
 8003270:	e7cd      	b.n	800320e <prvCopyDataToQueue+0x1a>

08003272 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003272:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003274:	b172      	cbz	r2, 8003294 <prvCopyDataFromQueue+0x22>
{
 8003276:	b510      	push	{r4, lr}
 8003278:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800327a:	68c4      	ldr	r4, [r0, #12]
 800327c:	4414      	add	r4, r2
 800327e:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003280:	6840      	ldr	r0, [r0, #4]
 8003282:	4284      	cmp	r4, r0
 8003284:	d301      	bcc.n	800328a <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	60d8      	str	r0, [r3, #12]
 800328a:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800328c:	68d9      	ldr	r1, [r3, #12]
 800328e:	f008 fcf6 	bl	800bc7e <memcpy>
 8003292:	bd10      	pop	{r4, pc}
 8003294:	4770      	bx	lr

08003296 <prvUnlockQueue>:
{
 8003296:	b510      	push	{r4, lr}
 8003298:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800329a:	f7ff fd3b 	bl	8002d14 <vPortEnterCritical>
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800329e:	e002      	b.n	80032a6 <prvUnlockQueue+0x10>
			--( pxQueue->xTxLock );
 80032a0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80032a2:	3b01      	subs	r3, #1
 80032a4:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80032a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	dd0a      	ble.n	80032c2 <prvUnlockQueue+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032ae:	b143      	cbz	r3, 80032c2 <prvUnlockQueue+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80032b4:	f000 ff56 	bl	8004164 <xTaskRemoveFromEventList>
 80032b8:	2800      	cmp	r0, #0
 80032ba:	d0f1      	beq.n	80032a0 <prvUnlockQueue+0xa>
						vTaskMissedYield();
 80032bc:	f000 ffee 	bl	800429c <vTaskMissedYield>
 80032c0:	e7ee      	b.n	80032a0 <prvUnlockQueue+0xa>
		pxQueue->xTxLock = queueUNLOCKED;
 80032c2:	f04f 33ff 	mov.w	r3, #4294967295
 80032c6:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
 80032c8:	f7ff fd46 	bl	8002d58 <vPortExitCritical>
	taskENTER_CRITICAL();
 80032cc:	f7ff fd22 	bl	8002d14 <vPortEnterCritical>
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80032d0:	e002      	b.n	80032d8 <prvUnlockQueue+0x42>
				--( pxQueue->xRxLock );
 80032d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80032d4:	3b01      	subs	r3, #1
 80032d6:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80032d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80032da:	2b00      	cmp	r3, #0
 80032dc:	dd0a      	ble.n	80032f4 <prvUnlockQueue+0x5e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032de:	6923      	ldr	r3, [r4, #16]
 80032e0:	b143      	cbz	r3, 80032f4 <prvUnlockQueue+0x5e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032e2:	f104 0010 	add.w	r0, r4, #16
 80032e6:	f000 ff3d 	bl	8004164 <xTaskRemoveFromEventList>
 80032ea:	2800      	cmp	r0, #0
 80032ec:	d0f1      	beq.n	80032d2 <prvUnlockQueue+0x3c>
					vTaskMissedYield();
 80032ee:	f000 ffd5 	bl	800429c <vTaskMissedYield>
 80032f2:	e7ee      	b.n	80032d2 <prvUnlockQueue+0x3c>
		pxQueue->xRxLock = queueUNLOCKED;
 80032f4:	f04f 33ff 	mov.w	r3, #4294967295
 80032f8:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80032fa:	f7ff fd2d 	bl	8002d58 <vPortExitCritical>
 80032fe:	bd10      	pop	{r4, pc}

08003300 <xQueueGenericReset>:
{
 8003300:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8003302:	b308      	cbz	r0, 8003348 <xQueueGenericReset+0x48>
 8003304:	4604      	mov	r4, r0
 8003306:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8003308:	f7ff fd04 	bl	8002d14 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800330c:	6821      	ldr	r1, [r4, #0]
 800330e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003310:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003312:	fb03 1002 	mla	r0, r3, r2, r1
 8003316:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003318:	2000      	movs	r0, #0
 800331a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800331c:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800331e:	3a01      	subs	r2, #1
 8003320:	fb02 1303 	mla	r3, r2, r3, r1
 8003324:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 8003326:	f04f 33ff 	mov.w	r3, #4294967295
 800332a:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800332c:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800332e:	b9ed      	cbnz	r5, 800336c <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003330:	6923      	ldr	r3, [r4, #16]
 8003332:	b12b      	cbz	r3, 8003340 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8003334:	f104 0010 	add.w	r0, r4, #16
 8003338:	f000 ff14 	bl	8004164 <xTaskRemoveFromEventList>
 800333c:	2801      	cmp	r0, #1
 800333e:	d00c      	beq.n	800335a <xQueueGenericReset+0x5a>
	taskEXIT_CRITICAL();
 8003340:	f7ff fd0a 	bl	8002d58 <vPortExitCritical>
}
 8003344:	2001      	movs	r0, #1
 8003346:	bd38      	pop	{r3, r4, r5, pc}
 8003348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334c:	f383 8811 	msr	BASEPRI, r3
 8003350:	f3bf 8f6f 	isb	sy
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	e7fe      	b.n	8003358 <xQueueGenericReset+0x58>
					queueYIELD_IF_USING_PREEMPTION();
 800335a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800335e:	4b08      	ldr	r3, [pc, #32]	; (8003380 <xQueueGenericReset+0x80>)
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	f3bf 8f4f 	dsb	sy
 8003366:	f3bf 8f6f 	isb	sy
 800336a:	e7e9      	b.n	8003340 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800336c:	f104 0010 	add.w	r0, r4, #16
 8003370:	f7ff fc30 	bl	8002bd4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003374:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003378:	f7ff fc2c 	bl	8002bd4 <vListInitialise>
 800337c:	e7e0      	b.n	8003340 <xQueueGenericReset+0x40>
 800337e:	bf00      	nop
 8003380:	e000ed04 	.word	0xe000ed04

08003384 <xQueueGenericCreate>:
{
 8003384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003386:	b940      	cbnz	r0, 800339a <xQueueGenericCreate+0x16>
 8003388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338c:	f383 8811 	msr	BASEPRI, r3
 8003390:	f3bf 8f6f 	isb	sy
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	e7fe      	b.n	8003398 <xQueueGenericCreate+0x14>
 800339a:	4606      	mov	r6, r0
	if( uxItemSize == ( UBaseType_t ) 0 )
 800339c:	b119      	cbz	r1, 80033a6 <xQueueGenericCreate+0x22>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800339e:	fb01 f000 	mul.w	r0, r1, r0
 80033a2:	3001      	adds	r0, #1
 80033a4:	e000      	b.n	80033a8 <xQueueGenericCreate+0x24>
		xQueueSizeInBytes = ( size_t ) 0;
 80033a6:	2000      	movs	r0, #0
 80033a8:	4617      	mov	r7, r2
 80033aa:	460d      	mov	r5, r1
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80033ac:	3054      	adds	r0, #84	; 0x54
 80033ae:	f7ff fe49 	bl	8003044 <pvPortMalloc>
	if( pxNewQueue != NULL )
 80033b2:	4604      	mov	r4, r0
 80033b4:	b180      	cbz	r0, 80033d8 <xQueueGenericCreate+0x54>
		if( uxItemSize == ( UBaseType_t ) 0 )
 80033b6:	b95d      	cbnz	r5, 80033d0 <xQueueGenericCreate+0x4c>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033b8:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 80033ba:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 80033bc:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033be:	2101      	movs	r1, #1
 80033c0:	4620      	mov	r0, r4
 80033c2:	f7ff ff9d 	bl	8003300 <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 80033c6:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		xReturn = pxNewQueue;
 80033ca:	4620      	mov	r0, r4
	configASSERT( xReturn );
 80033cc:	b130      	cbz	r0, 80033dc <xQueueGenericCreate+0x58>
}
 80033ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80033d0:	f100 0354 	add.w	r3, r0, #84	; 0x54
 80033d4:	6003      	str	r3, [r0, #0]
 80033d6:	e7f0      	b.n	80033ba <xQueueGenericCreate+0x36>
QueueHandle_t xReturn = NULL;
 80033d8:	2000      	movs	r0, #0
 80033da:	e7f7      	b.n	80033cc <xQueueGenericCreate+0x48>
 80033dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e0:	f383 8811 	msr	BASEPRI, r3
 80033e4:	f3bf 8f6f 	isb	sy
 80033e8:	f3bf 8f4f 	dsb	sy
 80033ec:	e7fe      	b.n	80033ec <xQueueGenericCreate+0x68>
	...

080033f0 <xQueueGenericSend>:
{
 80033f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f2:	b085      	sub	sp, #20
 80033f4:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80033f6:	b160      	cbz	r0, 8003412 <xQueueGenericSend+0x22>
 80033f8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033fa:	b199      	cbz	r1, 8003424 <xQueueGenericSend+0x34>
 80033fc:	2501      	movs	r5, #1
 80033fe:	b9bd      	cbnz	r5, 8003430 <xQueueGenericSend+0x40>
 8003400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003404:	f383 8811 	msr	BASEPRI, r3
 8003408:	f3bf 8f6f 	isb	sy
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	e7fe      	b.n	8003410 <xQueueGenericSend+0x20>
 8003412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003416:	f383 8811 	msr	BASEPRI, r3
 800341a:	f3bf 8f6f 	isb	sy
 800341e:	f3bf 8f4f 	dsb	sy
 8003422:	e7fe      	b.n	8003422 <xQueueGenericSend+0x32>
 8003424:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003426:	b90a      	cbnz	r2, 800342c <xQueueGenericSend+0x3c>
 8003428:	2501      	movs	r5, #1
 800342a:	e7e8      	b.n	80033fe <xQueueGenericSend+0xe>
 800342c:	2500      	movs	r5, #0
 800342e:	e7e6      	b.n	80033fe <xQueueGenericSend+0xe>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003430:	2b02      	cmp	r3, #2
 8003432:	d009      	beq.n	8003448 <xQueueGenericSend+0x58>
 8003434:	b96d      	cbnz	r5, 8003452 <xQueueGenericSend+0x62>
 8003436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343a:	f383 8811 	msr	BASEPRI, r3
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	e7fe      	b.n	8003446 <xQueueGenericSend+0x56>
 8003448:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800344a:	2a01      	cmp	r2, #1
 800344c:	d0f2      	beq.n	8003434 <xQueueGenericSend+0x44>
 800344e:	2500      	movs	r5, #0
 8003450:	e7f0      	b.n	8003434 <xQueueGenericSend+0x44>
 8003452:	461e      	mov	r6, r3
 8003454:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003456:	f000 ff27 	bl	80042a8 <xTaskGetSchedulerState>
 800345a:	b910      	cbnz	r0, 8003462 <xQueueGenericSend+0x72>
 800345c:	9b01      	ldr	r3, [sp, #4]
 800345e:	b103      	cbz	r3, 8003462 <xQueueGenericSend+0x72>
 8003460:	2500      	movs	r5, #0
 8003462:	b945      	cbnz	r5, 8003476 <xQueueGenericSend+0x86>
 8003464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003468:	f383 8811 	msr	BASEPRI, r3
 800346c:	f3bf 8f6f 	isb	sy
 8003470:	f3bf 8f4f 	dsb	sy
 8003474:	e7fe      	b.n	8003474 <xQueueGenericSend+0x84>
 8003476:	2500      	movs	r5, #0
 8003478:	e02d      	b.n	80034d6 <xQueueGenericSend+0xe6>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800347a:	4632      	mov	r2, r6
 800347c:	4639      	mov	r1, r7
 800347e:	4620      	mov	r0, r4
 8003480:	f7ff feb8 	bl	80031f4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003484:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003486:	b193      	cbz	r3, 80034ae <xQueueGenericSend+0xbe>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8003488:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800348c:	f000 fe6a 	bl	8004164 <xTaskRemoveFromEventList>
 8003490:	2801      	cmp	r0, #1
 8003492:	d107      	bne.n	80034a4 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 8003494:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003498:	4b34      	ldr	r3, [pc, #208]	; (800356c <xQueueGenericSend+0x17c>)
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80034a4:	f7ff fc58 	bl	8002d58 <vPortExitCritical>
				return pdPASS;
 80034a8:	2001      	movs	r0, #1
}
 80034aa:	b005      	add	sp, #20
 80034ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
					else if( xYieldRequired != pdFALSE )
 80034ae:	2800      	cmp	r0, #0
 80034b0:	d0f8      	beq.n	80034a4 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 80034b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034b6:	4b2d      	ldr	r3, [pc, #180]	; (800356c <xQueueGenericSend+0x17c>)
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	f3bf 8f4f 	dsb	sy
 80034be:	f3bf 8f6f 	isb	sy
 80034c2:	e7ef      	b.n	80034a4 <xQueueGenericSend+0xb4>
					taskEXIT_CRITICAL();
 80034c4:	f7ff fc48 	bl	8002d58 <vPortExitCritical>
					return errQUEUE_FULL;
 80034c8:	2000      	movs	r0, #0
 80034ca:	e7ee      	b.n	80034aa <xQueueGenericSend+0xba>
				prvUnlockQueue( pxQueue );
 80034cc:	4620      	mov	r0, r4
 80034ce:	f7ff fee2 	bl	8003296 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034d2:	f000 fcc1 	bl	8003e58 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80034d6:	f7ff fc1d 	bl	8002d14 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80034dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80034de:	429a      	cmp	r2, r3
 80034e0:	d3cb      	bcc.n	800347a <xQueueGenericSend+0x8a>
 80034e2:	2e02      	cmp	r6, #2
 80034e4:	d0c9      	beq.n	800347a <xQueueGenericSend+0x8a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80034e6:	9b01      	ldr	r3, [sp, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0eb      	beq.n	80034c4 <xQueueGenericSend+0xd4>
				else if( xEntryTimeSet == pdFALSE )
 80034ec:	b91d      	cbnz	r5, 80034f6 <xQueueGenericSend+0x106>
					vTaskSetTimeOutState( &xTimeOut );
 80034ee:	a802      	add	r0, sp, #8
 80034f0:	f000 fe7e 	bl	80041f0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034f4:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 80034f6:	f7ff fc2f 	bl	8002d58 <vPortExitCritical>
		vTaskSuspendAll();
 80034fa:	f000 fc0f 	bl	8003d1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034fe:	f7ff fc09 	bl	8002d14 <vPortEnterCritical>
 8003502:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003508:	d101      	bne.n	800350e <xQueueGenericSend+0x11e>
 800350a:	2300      	movs	r3, #0
 800350c:	6463      	str	r3, [r4, #68]	; 0x44
 800350e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003514:	d101      	bne.n	800351a <xQueueGenericSend+0x12a>
 8003516:	2300      	movs	r3, #0
 8003518:	64a3      	str	r3, [r4, #72]	; 0x48
 800351a:	f7ff fc1d 	bl	8002d58 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800351e:	a901      	add	r1, sp, #4
 8003520:	a802      	add	r0, sp, #8
 8003522:	f000 fe7b 	bl	800421c <xTaskCheckForTimeOut>
 8003526:	b9c8      	cbnz	r0, 800355c <xQueueGenericSend+0x16c>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003528:	4620      	mov	r0, r4
 800352a:	f7ff fe47 	bl	80031bc <prvIsQueueFull>
 800352e:	2800      	cmp	r0, #0
 8003530:	d0cc      	beq.n	80034cc <xQueueGenericSend+0xdc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003532:	9901      	ldr	r1, [sp, #4]
 8003534:	f104 0010 	add.w	r0, r4, #16
 8003538:	f000 fddc 	bl	80040f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800353c:	4620      	mov	r0, r4
 800353e:	f7ff feaa 	bl	8003296 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003542:	f000 fc89 	bl	8003e58 <xTaskResumeAll>
 8003546:	2800      	cmp	r0, #0
 8003548:	d1c5      	bne.n	80034d6 <xQueueGenericSend+0xe6>
					portYIELD_WITHIN_API();
 800354a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800354e:	4b07      	ldr	r3, [pc, #28]	; (800356c <xQueueGenericSend+0x17c>)
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	f3bf 8f4f 	dsb	sy
 8003556:	f3bf 8f6f 	isb	sy
 800355a:	e7bc      	b.n	80034d6 <xQueueGenericSend+0xe6>
			prvUnlockQueue( pxQueue );
 800355c:	4620      	mov	r0, r4
 800355e:	f7ff fe9a 	bl	8003296 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003562:	f000 fc79 	bl	8003e58 <xTaskResumeAll>
			return errQUEUE_FULL;
 8003566:	2000      	movs	r0, #0
 8003568:	e79f      	b.n	80034aa <xQueueGenericSend+0xba>
 800356a:	bf00      	nop
 800356c:	e000ed04 	.word	0xe000ed04

08003570 <xQueueCreateMutex>:
	{
 8003570:	b570      	push	{r4, r5, r6, lr}
 8003572:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 8003574:	2054      	movs	r0, #84	; 0x54
 8003576:	f7ff fd65 	bl	8003044 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800357a:	4604      	mov	r4, r0
 800357c:	b1d8      	cbz	r0, 80035b6 <xQueueCreateMutex+0x46>
			pxNewQueue->pxMutexHolder = NULL;
 800357e:	2500      	movs	r5, #0
 8003580:	6045      	str	r5, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003582:	6005      	str	r5, [r0, #0]
			pxNewQueue->pcWriteTo = NULL;
 8003584:	6085      	str	r5, [r0, #8]
			pxNewQueue->u.pcReadFrom = NULL;
 8003586:	60c5      	str	r5, [r0, #12]
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003588:	6385      	str	r5, [r0, #56]	; 0x38
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 800358a:	2301      	movs	r3, #1
 800358c:	63c3      	str	r3, [r0, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
 800358e:	6405      	str	r5, [r0, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
 8003590:	f04f 33ff 	mov.w	r3, #4294967295
 8003594:	6443      	str	r3, [r0, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
 8003596:	6483      	str	r3, [r0, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
 8003598:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 800359c:	3010      	adds	r0, #16
 800359e:	f7ff fb19 	bl	8002bd4 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 80035a2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80035a6:	f7ff fb15 	bl	8002bd4 <vListInitialise>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80035aa:	462b      	mov	r3, r5
 80035ac:	462a      	mov	r2, r5
 80035ae:	4629      	mov	r1, r5
 80035b0:	4620      	mov	r0, r4
 80035b2:	f7ff ff1d 	bl	80033f0 <xQueueGenericSend>
	}
 80035b6:	4620      	mov	r0, r4
 80035b8:	bd70      	pop	{r4, r5, r6, pc}

080035ba <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 80035ba:	b160      	cbz	r0, 80035d6 <xQueueGiveFromISR+0x1c>
{
 80035bc:	b570      	push	{r4, r5, r6, lr}
 80035be:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80035c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80035c2:	b18b      	cbz	r3, 80035e8 <xQueueGiveFromISR+0x2e>
 80035c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c8:	f383 8811 	msr	BASEPRI, r3
 80035cc:	f3bf 8f6f 	isb	sy
 80035d0:	f3bf 8f4f 	dsb	sy
 80035d4:	e7fe      	b.n	80035d4 <xQueueGiveFromISR+0x1a>
 80035d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035da:	f383 8811 	msr	BASEPRI, r3
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	f3bf 8f4f 	dsb	sy
 80035e6:	e7fe      	b.n	80035e6 <xQueueGiveFromISR+0x2c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80035e8:	6803      	ldr	r3, [r0, #0]
 80035ea:	b153      	cbz	r3, 8003602 <xQueueGiveFromISR+0x48>
 80035ec:	2301      	movs	r3, #1
 80035ee:	b973      	cbnz	r3, 800360e <xQueueGiveFromISR+0x54>
 80035f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f4:	f383 8811 	msr	BASEPRI, r3
 80035f8:	f3bf 8f6f 	isb	sy
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	e7fe      	b.n	8003600 <xQueueGiveFromISR+0x46>
 8003602:	6843      	ldr	r3, [r0, #4]
 8003604:	b90b      	cbnz	r3, 800360a <xQueueGiveFromISR+0x50>
 8003606:	2301      	movs	r3, #1
 8003608:	e7f1      	b.n	80035ee <xQueueGiveFromISR+0x34>
 800360a:	2300      	movs	r3, #0
 800360c:	e7ef      	b.n	80035ee <xQueueGiveFromISR+0x34>
 800360e:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003610:	f7ff fc8c 	bl	8002f2c <vPortValidateInterruptPriority>
	__asm volatile
 8003614:	f3ef 8611 	mrs	r6, BASEPRI
 8003618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8003628:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800362a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800362c:	429a      	cmp	r2, r3
 800362e:	d218      	bcs.n	8003662 <xQueueGiveFromISR+0xa8>
			++( pxQueue->uxMessagesWaiting );
 8003630:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003632:	3301      	adds	r3, #1
 8003634:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 8003636:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363c:	d10c      	bne.n	8003658 <xQueueGiveFromISR+0x9e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800363e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003640:	b18b      	cbz	r3, 8003666 <xQueueGiveFromISR+0xac>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003642:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003646:	f000 fd8d 	bl	8004164 <xTaskRemoveFromEventList>
 800364a:	b170      	cbz	r0, 800366a <xQueueGiveFromISR+0xb0>
							if( pxHigherPriorityTaskWoken != NULL )
 800364c:	b17d      	cbz	r5, 800366e <xQueueGiveFromISR+0xb4>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800364e:	2001      	movs	r0, #1
 8003650:	6028      	str	r0, [r5, #0]
	__asm volatile
 8003652:	f386 8811 	msr	BASEPRI, r6
}
 8003656:	bd70      	pop	{r4, r5, r6, pc}
				++( pxQueue->xTxLock );
 8003658:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800365a:	3301      	adds	r3, #1
 800365c:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800365e:	2001      	movs	r0, #1
 8003660:	e7f7      	b.n	8003652 <xQueueGiveFromISR+0x98>
			xReturn = errQUEUE_FULL;
 8003662:	2000      	movs	r0, #0
 8003664:	e7f5      	b.n	8003652 <xQueueGiveFromISR+0x98>
			xReturn = pdPASS;
 8003666:	2001      	movs	r0, #1
 8003668:	e7f3      	b.n	8003652 <xQueueGiveFromISR+0x98>
 800366a:	2001      	movs	r0, #1
 800366c:	e7f1      	b.n	8003652 <xQueueGiveFromISR+0x98>
 800366e:	2001      	movs	r0, #1
 8003670:	e7ef      	b.n	8003652 <xQueueGiveFromISR+0x98>
	...

08003674 <xQueueGenericReceive>:
{
 8003674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003676:	b085      	sub	sp, #20
 8003678:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800367a:	b160      	cbz	r0, 8003696 <xQueueGenericReceive+0x22>
 800367c:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800367e:	b199      	cbz	r1, 80036a8 <xQueueGenericReceive+0x34>
 8003680:	2501      	movs	r5, #1
 8003682:	b9bd      	cbnz	r5, 80036b4 <xQueueGenericReceive+0x40>
	__asm volatile
 8003684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003688:	f383 8811 	msr	BASEPRI, r3
 800368c:	f3bf 8f6f 	isb	sy
 8003690:	f3bf 8f4f 	dsb	sy
 8003694:	e7fe      	b.n	8003694 <xQueueGenericReceive+0x20>
 8003696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369a:	f383 8811 	msr	BASEPRI, r3
 800369e:	f3bf 8f6f 	isb	sy
 80036a2:	f3bf 8f4f 	dsb	sy
 80036a6:	e7fe      	b.n	80036a6 <xQueueGenericReceive+0x32>
 80036a8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80036aa:	b90a      	cbnz	r2, 80036b0 <xQueueGenericReceive+0x3c>
 80036ac:	2501      	movs	r5, #1
 80036ae:	e7e8      	b.n	8003682 <xQueueGenericReceive+0xe>
 80036b0:	2500      	movs	r5, #0
 80036b2:	e7e6      	b.n	8003682 <xQueueGenericReceive+0xe>
 80036b4:	461f      	mov	r7, r3
 80036b6:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036b8:	f000 fdf6 	bl	80042a8 <xTaskGetSchedulerState>
 80036bc:	b910      	cbnz	r0, 80036c4 <xQueueGenericReceive+0x50>
 80036be:	9b01      	ldr	r3, [sp, #4]
 80036c0:	b103      	cbz	r3, 80036c4 <xQueueGenericReceive+0x50>
 80036c2:	2500      	movs	r5, #0
 80036c4:	b945      	cbnz	r5, 80036d8 <xQueueGenericReceive+0x64>
 80036c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ca:	f383 8811 	msr	BASEPRI, r3
 80036ce:	f3bf 8f6f 	isb	sy
 80036d2:	f3bf 8f4f 	dsb	sy
 80036d6:	e7fe      	b.n	80036d6 <xQueueGenericReceive+0x62>
 80036d8:	2500      	movs	r5, #0
 80036da:	e046      	b.n	800376a <xQueueGenericReceive+0xf6>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80036dc:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80036de:	4631      	mov	r1, r6
 80036e0:	4620      	mov	r0, r4
 80036e2:	f7ff fdc6 	bl	8003272 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 80036e6:	b9e7      	cbnz	r7, 8003722 <xQueueGenericReceive+0xae>
					--( pxQueue->uxMessagesWaiting );
 80036e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036ea:	3b01      	subs	r3, #1
 80036ec:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	b913      	cbnz	r3, 80036f8 <xQueueGenericReceive+0x84>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80036f2:	f000 fe95 	bl	8004420 <pvTaskIncrementMutexHeldCount>
 80036f6:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036f8:	6923      	ldr	r3, [r4, #16]
 80036fa:	b16b      	cbz	r3, 8003718 <xQueueGenericReceive+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 80036fc:	f104 0010 	add.w	r0, r4, #16
 8003700:	f000 fd30 	bl	8004164 <xTaskRemoveFromEventList>
 8003704:	2801      	cmp	r0, #1
 8003706:	d107      	bne.n	8003718 <xQueueGenericReceive+0xa4>
							queueYIELD_IF_USING_PREEMPTION();
 8003708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800370c:	4b3c      	ldr	r3, [pc, #240]	; (8003800 <xQueueGenericReceive+0x18c>)
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003718:	f7ff fb1e 	bl	8002d58 <vPortExitCritical>
				return pdPASS;
 800371c:	2001      	movs	r0, #1
}
 800371e:	b005      	add	sp, #20
 8003720:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8003722:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003724:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0f6      	beq.n	8003718 <xQueueGenericReceive+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800372a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800372e:	f000 fd19 	bl	8004164 <xTaskRemoveFromEventList>
 8003732:	2800      	cmp	r0, #0
 8003734:	d0f0      	beq.n	8003718 <xQueueGenericReceive+0xa4>
							queueYIELD_IF_USING_PREEMPTION();
 8003736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800373a:	4b31      	ldr	r3, [pc, #196]	; (8003800 <xQueueGenericReceive+0x18c>)
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	f3bf 8f4f 	dsb	sy
 8003742:	f3bf 8f6f 	isb	sy
 8003746:	e7e7      	b.n	8003718 <xQueueGenericReceive+0xa4>
					taskEXIT_CRITICAL();
 8003748:	f7ff fb06 	bl	8002d58 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800374c:	2000      	movs	r0, #0
 800374e:	e7e6      	b.n	800371e <xQueueGenericReceive+0xaa>
						taskENTER_CRITICAL();
 8003750:	f7ff fae0 	bl	8002d14 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003754:	6860      	ldr	r0, [r4, #4]
 8003756:	f000 fdb7 	bl	80042c8 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800375a:	f7ff fafd 	bl	8002d58 <vPortExitCritical>
 800375e:	e032      	b.n	80037c6 <xQueueGenericReceive+0x152>
				prvUnlockQueue( pxQueue );
 8003760:	4620      	mov	r0, r4
 8003762:	f7ff fd98 	bl	8003296 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003766:	f000 fb77 	bl	8003e58 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800376a:	f7ff fad3 	bl	8002d14 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800376e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1b3      	bne.n	80036dc <xQueueGenericReceive+0x68>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003774:	9b01      	ldr	r3, [sp, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0e6      	beq.n	8003748 <xQueueGenericReceive+0xd4>
				else if( xEntryTimeSet == pdFALSE )
 800377a:	b91d      	cbnz	r5, 8003784 <xQueueGenericReceive+0x110>
					vTaskSetTimeOutState( &xTimeOut );
 800377c:	a802      	add	r0, sp, #8
 800377e:	f000 fd37 	bl	80041f0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003782:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 8003784:	f7ff fae8 	bl	8002d58 <vPortExitCritical>
		vTaskSuspendAll();
 8003788:	f000 fac8 	bl	8003d1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800378c:	f7ff fac2 	bl	8002d14 <vPortEnterCritical>
 8003790:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003796:	d101      	bne.n	800379c <xQueueGenericReceive+0x128>
 8003798:	2300      	movs	r3, #0
 800379a:	6463      	str	r3, [r4, #68]	; 0x44
 800379c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800379e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a2:	d101      	bne.n	80037a8 <xQueueGenericReceive+0x134>
 80037a4:	2300      	movs	r3, #0
 80037a6:	64a3      	str	r3, [r4, #72]	; 0x48
 80037a8:	f7ff fad6 	bl	8002d58 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037ac:	a901      	add	r1, sp, #4
 80037ae:	a802      	add	r0, sp, #8
 80037b0:	f000 fd34 	bl	800421c <xTaskCheckForTimeOut>
 80037b4:	b9e0      	cbnz	r0, 80037f0 <xQueueGenericReceive+0x17c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037b6:	4620      	mov	r0, r4
 80037b8:	f7ff fd0f 	bl	80031da <prvIsQueueEmpty>
 80037bc:	2800      	cmp	r0, #0
 80037be:	d0cf      	beq.n	8003760 <xQueueGenericReceive+0xec>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037c0:	6823      	ldr	r3, [r4, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0c4      	beq.n	8003750 <xQueueGenericReceive+0xdc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80037c6:	9901      	ldr	r1, [sp, #4]
 80037c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80037cc:	f000 fc92 	bl	80040f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80037d0:	4620      	mov	r0, r4
 80037d2:	f7ff fd60 	bl	8003296 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80037d6:	f000 fb3f 	bl	8003e58 <xTaskResumeAll>
 80037da:	2800      	cmp	r0, #0
 80037dc:	d1c5      	bne.n	800376a <xQueueGenericReceive+0xf6>
					portYIELD_WITHIN_API();
 80037de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037e2:	4b07      	ldr	r3, [pc, #28]	; (8003800 <xQueueGenericReceive+0x18c>)
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	f3bf 8f6f 	isb	sy
 80037ee:	e7bc      	b.n	800376a <xQueueGenericReceive+0xf6>
			prvUnlockQueue( pxQueue );
 80037f0:	4620      	mov	r0, r4
 80037f2:	f7ff fd50 	bl	8003296 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037f6:	f000 fb2f 	bl	8003e58 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 80037fa:	2000      	movs	r0, #0
 80037fc:	e78f      	b.n	800371e <xQueueGenericReceive+0xaa>
 80037fe:	bf00      	nop
 8003800:	e000ed04 	.word	0xe000ed04

08003804 <xQueueReceiveFromISR>:
{
 8003804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxQueue );
 8003806:	b160      	cbz	r0, 8003822 <xQueueReceiveFromISR+0x1e>
 8003808:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800380a:	b199      	cbz	r1, 8003834 <xQueueReceiveFromISR+0x30>
 800380c:	2301      	movs	r3, #1
 800380e:	b9bb      	cbnz	r3, 8003840 <xQueueReceiveFromISR+0x3c>
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	e7fe      	b.n	8003820 <xQueueReceiveFromISR+0x1c>
 8003822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	e7fe      	b.n	8003832 <xQueueReceiveFromISR+0x2e>
 8003834:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003836:	b90b      	cbnz	r3, 800383c <xQueueReceiveFromISR+0x38>
 8003838:	2301      	movs	r3, #1
 800383a:	e7e8      	b.n	800380e <xQueueReceiveFromISR+0xa>
 800383c:	2300      	movs	r3, #0
 800383e:	e7e6      	b.n	800380e <xQueueReceiveFromISR+0xa>
 8003840:	4615      	mov	r5, r2
 8003842:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003844:	f7ff fb72 	bl	8002f2c <vPortValidateInterruptPriority>
	__asm volatile
 8003848:	f3ef 8711 	mrs	r7, BASEPRI
 800384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800385c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800385e:	b1e3      	cbz	r3, 800389a <xQueueReceiveFromISR+0x96>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003860:	4631      	mov	r1, r6
 8003862:	4620      	mov	r0, r4
 8003864:	f7ff fd05 	bl	8003272 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 8003868:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800386a:	3b01      	subs	r3, #1
 800386c:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800386e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003874:	d10c      	bne.n	8003890 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003876:	6923      	ldr	r3, [r4, #16]
 8003878:	b18b      	cbz	r3, 800389e <xQueueReceiveFromISR+0x9a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800387a:	f104 0010 	add.w	r0, r4, #16
 800387e:	f000 fc71 	bl	8004164 <xTaskRemoveFromEventList>
 8003882:	b170      	cbz	r0, 80038a2 <xQueueReceiveFromISR+0x9e>
						if( pxHigherPriorityTaskWoken != NULL )
 8003884:	b17d      	cbz	r5, 80038a6 <xQueueReceiveFromISR+0xa2>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003886:	2001      	movs	r0, #1
 8003888:	6028      	str	r0, [r5, #0]
	__asm volatile
 800388a:	f387 8811 	msr	BASEPRI, r7
}
 800388e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				++( pxQueue->xRxLock );
 8003890:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003892:	3301      	adds	r3, #1
 8003894:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8003896:	2001      	movs	r0, #1
 8003898:	e7f7      	b.n	800388a <xQueueReceiveFromISR+0x86>
			xReturn = pdFAIL;
 800389a:	2000      	movs	r0, #0
 800389c:	e7f5      	b.n	800388a <xQueueReceiveFromISR+0x86>
			xReturn = pdPASS;
 800389e:	2001      	movs	r0, #1
 80038a0:	e7f3      	b.n	800388a <xQueueReceiveFromISR+0x86>
 80038a2:	2001      	movs	r0, #1
 80038a4:	e7f1      	b.n	800388a <xQueueReceiveFromISR+0x86>
 80038a6:	2001      	movs	r0, #1
 80038a8:	e7ef      	b.n	800388a <xQueueReceiveFromISR+0x86>

080038aa <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 80038aa:	b940      	cbnz	r0, 80038be <uxQueueMessagesWaiting+0x14>
	__asm volatile
 80038ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	e7fe      	b.n	80038bc <uxQueueMessagesWaiting+0x12>
{
 80038be:	b510      	push	{r4, lr}
 80038c0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80038c2:	f7ff fa27 	bl	8002d14 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80038c6:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80038c8:	f7ff fa46 	bl	8002d58 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80038cc:	4620      	mov	r0, r4
 80038ce:	bd10      	pop	{r4, pc}

080038d0 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038d0:	2300      	movs	r3, #0
 80038d2:	2b07      	cmp	r3, #7
 80038d4:	d80c      	bhi.n	80038f0 <vQueueUnregisterQueue+0x20>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80038d6:	4a07      	ldr	r2, [pc, #28]	; (80038f4 <vQueueUnregisterQueue+0x24>)
 80038d8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80038dc:	6852      	ldr	r2, [r2, #4]
 80038de:	4282      	cmp	r2, r0
 80038e0:	d001      	beq.n	80038e6 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038e2:	3301      	adds	r3, #1
 80038e4:	e7f5      	b.n	80038d2 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80038e6:	2100      	movs	r1, #0
 80038e8:	4a02      	ldr	r2, [pc, #8]	; (80038f4 <vQueueUnregisterQueue+0x24>)
 80038ea:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				break;
 80038ee:	4770      	bx	lr
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	20004018 	.word	0x20004018

080038f8 <vQueueDelete>:
	configASSERT( pxQueue );
 80038f8:	b940      	cbnz	r0, 800390c <vQueueDelete+0x14>
 80038fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fe:	f383 8811 	msr	BASEPRI, r3
 8003902:	f3bf 8f6f 	isb	sy
 8003906:	f3bf 8f4f 	dsb	sy
 800390a:	e7fe      	b.n	800390a <vQueueDelete+0x12>
{
 800390c:	b510      	push	{r4, lr}
 800390e:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8003910:	f7ff ffde 	bl	80038d0 <vQueueUnregisterQueue>
	vPortFree( pxQueue );
 8003914:	4620      	mov	r0, r4
 8003916:	f7ff fc19 	bl	800314c <vPortFree>
 800391a:	bd10      	pop	{r4, pc}

0800391c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800391c:	4b0a      	ldr	r3, [pc, #40]	; (8003948 <prvResetNextTaskUnblockTime+0x2c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	b94b      	cbnz	r3, 8003938 <prvResetNextTaskUnblockTime+0x1c>
 8003924:	2301      	movs	r3, #1
 8003926:	b94b      	cbnz	r3, 800393c <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003928:	4b07      	ldr	r3, [pc, #28]	; (8003948 <prvResetNextTaskUnblockTime+0x2c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	4b06      	ldr	r3, [pc, #24]	; (800394c <prvResetNextTaskUnblockTime+0x30>)
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003938:	2300      	movs	r3, #0
 800393a:	e7f4      	b.n	8003926 <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
 800393c:	f04f 32ff 	mov.w	r2, #4294967295
 8003940:	4b02      	ldr	r3, [pc, #8]	; (800394c <prvResetNextTaskUnblockTime+0x30>)
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	20003ce8 	.word	0x20003ce8
 800394c:	20003dbc 	.word	0x20003dbc

08003950 <prvDeleteTCB>:
	{
 8003950:	b510      	push	{r4, lr}
 8003952:	4604      	mov	r4, r0
			vPortFreeAligned( pxTCB->pxStack );
 8003954:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003956:	f7ff fbf9 	bl	800314c <vPortFree>
		vPortFree( pxTCB );
 800395a:	4620      	mov	r0, r4
 800395c:	f7ff fbf6 	bl	800314c <vPortFree>
 8003960:	bd10      	pop	{r4, pc}

08003962 <prvAllocateTCBAndStack>:
{
 8003962:	b570      	push	{r4, r5, r6, lr}
 8003964:	4606      	mov	r6, r0
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003966:	460c      	mov	r4, r1
 8003968:	b919      	cbnz	r1, 8003972 <prvAllocateTCBAndStack+0x10>
 800396a:	0080      	lsls	r0, r0, #2
 800396c:	f7ff fb6a 	bl	8003044 <pvPortMalloc>
 8003970:	4604      	mov	r4, r0
		if( pxStack != NULL )
 8003972:	b18c      	cbz	r4, 8003998 <prvAllocateTCBAndStack+0x36>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8003974:	205c      	movs	r0, #92	; 0x5c
 8003976:	f7ff fb65 	bl	8003044 <pvPortMalloc>
			if( pxNewTCB != NULL )
 800397a:	4605      	mov	r5, r0
 800397c:	b140      	cbz	r0, 8003990 <prvAllocateTCBAndStack+0x2e>
				pxNewTCB->pxStack = pxStack;
 800397e:	6304      	str	r4, [r0, #48]	; 0x30
	if( pxNewTCB != NULL )
 8003980:	b125      	cbz	r5, 800398c <prvAllocateTCBAndStack+0x2a>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8003982:	00b2      	lsls	r2, r6, #2
 8003984:	21a5      	movs	r1, #165	; 0xa5
 8003986:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003988:	f008 f984 	bl	800bc94 <memset>
}
 800398c:	4628      	mov	r0, r5
 800398e:	bd70      	pop	{r4, r5, r6, pc}
				vPortFree( pxStack );
 8003990:	4620      	mov	r0, r4
 8003992:	f7ff fbdb 	bl	800314c <vPortFree>
 8003996:	e7f3      	b.n	8003980 <prvAllocateTCBAndStack+0x1e>
			pxNewTCB = NULL;
 8003998:	2500      	movs	r5, #0
 800399a:	e7f1      	b.n	8003980 <prvAllocateTCBAndStack+0x1e>

0800399c <prvInitialiseTCBVariables>:
{
 800399c:	b570      	push	{r4, r5, r6, lr}
 800399e:	4604      	mov	r4, r0
 80039a0:	4615      	mov	r5, r2
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039a2:	2300      	movs	r3, #0
 80039a4:	2b0f      	cmp	r3, #15
 80039a6:	d919      	bls.n	80039dc <prvInitialiseTCBVariables+0x40>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039a8:	2300      	movs	r3, #0
 80039aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039ae:	2d06      	cmp	r5, #6
 80039b0:	d900      	bls.n	80039b4 <prvInitialiseTCBVariables+0x18>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039b2:	2506      	movs	r5, #6
	pxTCB->uxPriority = uxPriority;
 80039b4:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 80039b6:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 80039b8:	2600      	movs	r6, #0
 80039ba:	6526      	str	r6, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 80039bc:	1d20      	adds	r0, r4, #4
 80039be:	f7ff f914 	bl	8002bea <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 80039c2:	f104 0018 	add.w	r0, r4, #24
 80039c6:	f7ff f910 	bl	8002bea <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 80039ca:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039cc:	f1c5 0507 	rsb	r5, r5, #7
 80039d0:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 80039d2:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
 80039d4:	6566      	str	r6, [r4, #84]	; 0x54
		pxTCB->eNotifyState = eNotWaitingNotification;
 80039d6:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
 80039da:	bd70      	pop	{r4, r5, r6, pc}
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 80039dc:	5cc8      	ldrb	r0, [r1, r3]
 80039de:	18e2      	adds	r2, r4, r3
 80039e0:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 80039e4:	5cca      	ldrb	r2, [r1, r3]
 80039e6:	2a00      	cmp	r2, #0
 80039e8:	d0de      	beq.n	80039a8 <prvInitialiseTCBVariables+0xc>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039ea:	3301      	adds	r3, #1
 80039ec:	e7da      	b.n	80039a4 <prvInitialiseTCBVariables+0x8>
	...

080039f0 <prvInitialiseTaskLists>:
{
 80039f0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039f2:	2400      	movs	r4, #0
 80039f4:	2c06      	cmp	r4, #6
 80039f6:	d915      	bls.n	8003a24 <prvInitialiseTaskLists+0x34>
	vListInitialise( &xDelayedTaskList1 );
 80039f8:	4d0e      	ldr	r5, [pc, #56]	; (8003a34 <prvInitialiseTaskLists+0x44>)
 80039fa:	4628      	mov	r0, r5
 80039fc:	f7ff f8ea 	bl	8002bd4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a00:	4c0d      	ldr	r4, [pc, #52]	; (8003a38 <prvInitialiseTaskLists+0x48>)
 8003a02:	4620      	mov	r0, r4
 8003a04:	f7ff f8e6 	bl	8002bd4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a08:	480c      	ldr	r0, [pc, #48]	; (8003a3c <prvInitialiseTaskLists+0x4c>)
 8003a0a:	f7ff f8e3 	bl	8002bd4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003a0e:	480c      	ldr	r0, [pc, #48]	; (8003a40 <prvInitialiseTaskLists+0x50>)
 8003a10:	f7ff f8e0 	bl	8002bd4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8003a14:	480b      	ldr	r0, [pc, #44]	; (8003a44 <prvInitialiseTaskLists+0x54>)
 8003a16:	f7ff f8dd 	bl	8002bd4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a1a:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <prvInitialiseTaskLists+0x58>)
 8003a1c:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <prvInitialiseTaskLists+0x5c>)
 8003a20:	601c      	str	r4, [r3, #0]
 8003a22:	bd38      	pop	{r3, r4, r5, pc}
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a24:	2014      	movs	r0, #20
 8003a26:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <prvInitialiseTaskLists+0x60>)
 8003a28:	fb00 3004 	mla	r0, r0, r4, r3
 8003a2c:	f7ff f8d2 	bl	8002bd4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a30:	3401      	adds	r4, #1
 8003a32:	e7df      	b.n	80039f4 <prvInitialiseTaskLists+0x4>
 8003a34:	20003d94 	.word	0x20003d94
 8003a38:	20003da8 	.word	0x20003da8
 8003a3c:	20003dc4 	.word	0x20003dc4
 8003a40:	20003df0 	.word	0x20003df0
 8003a44:	20003ddc 	.word	0x20003ddc
 8003a48:	20003ce8 	.word	0x20003ce8
 8003a4c:	20003cec 	.word	0x20003cec
 8003a50:	20003cf0 	.word	0x20003cf0

08003a54 <prvAddCurrentTaskToDelayedList>:
{
 8003a54:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8003a56:	4b0f      	ldr	r3, [pc, #60]	; (8003a94 <prvAddCurrentTaskToDelayedList+0x40>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 8003a5c:	4b0e      	ldr	r3, [pc, #56]	; (8003a98 <prvAddCurrentTaskToDelayedList+0x44>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4298      	cmp	r0, r3
 8003a62:	d30e      	bcc.n	8003a82 <prvAddCurrentTaskToDelayedList+0x2e>
 8003a64:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8003a66:	4b0d      	ldr	r3, [pc, #52]	; (8003a9c <prvAddCurrentTaskToDelayedList+0x48>)
 8003a68:	6818      	ldr	r0, [r3, #0]
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <prvAddCurrentTaskToDelayedList+0x40>)
 8003a6c:	6819      	ldr	r1, [r3, #0]
 8003a6e:	3104      	adds	r1, #4
 8003a70:	f7ff f8ca 	bl	8002c08 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 8003a74:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <prvAddCurrentTaskToDelayedList+0x4c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	429c      	cmp	r4, r3
 8003a7a:	d201      	bcs.n	8003a80 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
 8003a7c:	4b08      	ldr	r3, [pc, #32]	; (8003aa0 <prvAddCurrentTaskToDelayedList+0x4c>)
 8003a7e:	601c      	str	r4, [r3, #0]
 8003a80:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8003a82:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <prvAddCurrentTaskToDelayedList+0x50>)
 8003a84:	6818      	ldr	r0, [r3, #0]
 8003a86:	4b03      	ldr	r3, [pc, #12]	; (8003a94 <prvAddCurrentTaskToDelayedList+0x40>)
 8003a88:	6819      	ldr	r1, [r3, #0]
 8003a8a:	3104      	adds	r1, #4
 8003a8c:	f7ff f8bc 	bl	8002c08 <vListInsert>
 8003a90:	bd10      	pop	{r4, pc}
 8003a92:	bf00      	nop
 8003a94:	20003ce4 	.word	0x20003ce4
 8003a98:	20003e04 	.word	0x20003e04
 8003a9c:	20003ce8 	.word	0x20003ce8
 8003aa0:	20003dbc 	.word	0x20003dbc
 8003aa4:	20003cec 	.word	0x20003cec

08003aa8 <xTaskGenericCreate>:
{
 8003aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aac:	b083      	sub	sp, #12
 8003aae:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8003ab0:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
	configASSERT( pxTaskCode );
 8003ab4:	b158      	cbz	r0, 8003ace <xTaskGenericCreate+0x26>
 8003ab6:	4680      	mov	r8, r0
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 8003ab8:	2f06      	cmp	r7, #6
 8003aba:	d911      	bls.n	8003ae0 <xTaskGenericCreate+0x38>
 8003abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac0:	f383 8811 	msr	BASEPRI, r3
 8003ac4:	f3bf 8f6f 	isb	sy
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	e7fe      	b.n	8003acc <xTaskGenericCreate+0x24>
 8003ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad2:	f383 8811 	msr	BASEPRI, r3
 8003ad6:	f3bf 8f6f 	isb	sy
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	e7fe      	b.n	8003ade <xTaskGenericCreate+0x36>
 8003ae0:	4699      	mov	r9, r3
 8003ae2:	4616      	mov	r6, r2
 8003ae4:	468a      	mov	sl, r1
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8003ae6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003ae8:	4610      	mov	r0, r2
 8003aea:	f7ff ff3a 	bl	8003962 <prvAllocateTCBAndStack>
	if( pxNewTCB != NULL )
 8003aee:	4604      	mov	r4, r0
 8003af0:	2800      	cmp	r0, #0
 8003af2:	d062      	beq.n	8003bba <xTaskGenericCreate+0x112>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 8003af4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003af6:	f106 4580 	add.w	r5, r6, #1073741824	; 0x40000000
 8003afa:	3d01      	subs	r5, #1
 8003afc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003b00:	f023 0507 	bic.w	r5, r3, #7
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8003b04:	9600      	str	r6, [sp, #0]
 8003b06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003b08:	463a      	mov	r2, r7
 8003b0a:	4651      	mov	r1, sl
 8003b0c:	f7ff ff46 	bl	800399c <prvInitialiseTCBVariables>
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b10:	464a      	mov	r2, r9
 8003b12:	4641      	mov	r1, r8
 8003b14:	4628      	mov	r0, r5
 8003b16:	f7ff f8d9 	bl	8002ccc <pxPortInitialiseStack>
 8003b1a:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 8003b1c:	f1bb 0f00 	cmp.w	fp, #0
 8003b20:	d001      	beq.n	8003b26 <xTaskGenericCreate+0x7e>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b22:	f8cb 4000 	str.w	r4, [fp]
		taskENTER_CRITICAL();
 8003b26:	f7ff f8f5 	bl	8002d14 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 8003b2a:	4a25      	ldr	r2, [pc, #148]	; (8003bc0 <xTaskGenericCreate+0x118>)
 8003b2c:	6813      	ldr	r3, [r2, #0]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 8003b32:	4b24      	ldr	r3, [pc, #144]	; (8003bc4 <xTaskGenericCreate+0x11c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d133      	bne.n	8003ba2 <xTaskGenericCreate+0xfa>
				pxCurrentTCB =  pxNewTCB;
 8003b3a:	4b22      	ldr	r3, [pc, #136]	; (8003bc4 <xTaskGenericCreate+0x11c>)
 8003b3c:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b3e:	6813      	ldr	r3, [r2, #0]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <xTaskGenericCreate+0xa0>
					prvInitialiseTaskLists();
 8003b44:	f7ff ff54 	bl	80039f0 <prvInitialiseTaskLists>
			uxTaskNumber++;
 8003b48:	4a1f      	ldr	r2, [pc, #124]	; (8003bc8 <xTaskGenericCreate+0x120>)
 8003b4a:	6813      	ldr	r3, [r2, #0]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003b50:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 8003b52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003b54:	2501      	movs	r5, #1
 8003b56:	fa05 f203 	lsl.w	r2, r5, r3
 8003b5a:	491c      	ldr	r1, [pc, #112]	; (8003bcc <xTaskGenericCreate+0x124>)
 8003b5c:	6808      	ldr	r0, [r1, #0]
 8003b5e:	4302      	orrs	r2, r0
 8003b60:	600a      	str	r2, [r1, #0]
 8003b62:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003b66:	009a      	lsls	r2, r3, #2
 8003b68:	1d21      	adds	r1, r4, #4
 8003b6a:	4819      	ldr	r0, [pc, #100]	; (8003bd0 <xTaskGenericCreate+0x128>)
 8003b6c:	4410      	add	r0, r2
 8003b6e:	f7ff f83f 	bl	8002bf0 <vListInsertEnd>
		taskEXIT_CRITICAL();
 8003b72:	f7ff f8f1 	bl	8002d58 <vPortExitCritical>
			xReturn = pdPASS;
 8003b76:	4628      	mov	r0, r5
	if( xReturn == pdPASS )
 8003b78:	2801      	cmp	r0, #1
 8003b7a:	d10f      	bne.n	8003b9c <xTaskGenericCreate+0xf4>
		if( xSchedulerRunning != pdFALSE )
 8003b7c:	4b15      	ldr	r3, [pc, #84]	; (8003bd4 <xTaskGenericCreate+0x12c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	b163      	cbz	r3, 8003b9c <xTaskGenericCreate+0xf4>
			if( pxCurrentTCB->uxPriority < uxPriority )
 8003b82:	4b10      	ldr	r3, [pc, #64]	; (8003bc4 <xTaskGenericCreate+0x11c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	429f      	cmp	r7, r3
 8003b8a:	d907      	bls.n	8003b9c <xTaskGenericCreate+0xf4>
				taskYIELD_IF_USING_PREEMPTION();
 8003b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b90:	4b11      	ldr	r3, [pc, #68]	; (8003bd8 <xTaskGenericCreate+0x130>)
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	f3bf 8f6f 	isb	sy
}
 8003b9c:	b003      	add	sp, #12
 8003b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( xSchedulerRunning == pdFALSE )
 8003ba2:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <xTaskGenericCreate+0x12c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1ce      	bne.n	8003b48 <xTaskGenericCreate+0xa0>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8003baa:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <xTaskGenericCreate+0x11c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	429f      	cmp	r7, r3
 8003bb2:	d3c9      	bcc.n	8003b48 <xTaskGenericCreate+0xa0>
						pxCurrentTCB = pxNewTCB;
 8003bb4:	4b03      	ldr	r3, [pc, #12]	; (8003bc4 <xTaskGenericCreate+0x11c>)
 8003bb6:	601c      	str	r4, [r3, #0]
 8003bb8:	e7c6      	b.n	8003b48 <xTaskGenericCreate+0xa0>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003bba:	f04f 30ff 	mov.w	r0, #4294967295
 8003bbe:	e7db      	b.n	8003b78 <xTaskGenericCreate+0xd0>
 8003bc0:	20003d7c 	.word	0x20003d7c
 8003bc4:	20003ce4 	.word	0x20003ce4
 8003bc8:	20003d88 	.word	0x20003d88
 8003bcc:	20003d90 	.word	0x20003d90
 8003bd0:	20003cf0 	.word	0x20003cf0
 8003bd4:	20003dd8 	.word	0x20003dd8
 8003bd8:	e000ed04 	.word	0xe000ed04

08003bdc <vTaskDelete>:
	{
 8003bdc:	b538      	push	{r3, r4, r5, lr}
 8003bde:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 8003be0:	f7ff f898 	bl	8002d14 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003be4:	2c00      	cmp	r4, #0
 8003be6:	d035      	beq.n	8003c54 <vTaskDelete+0x78>
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8003be8:	1d25      	adds	r5, r4, #4
 8003bea:	4628      	mov	r0, r5
 8003bec:	f7ff f826 	bl	8002c3c <uxListRemove>
 8003bf0:	b970      	cbnz	r0, 8003c10 <vTaskDelete+0x34>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003bf2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003bf4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003bf8:	008b      	lsls	r3, r1, #2
 8003bfa:	4922      	ldr	r1, [pc, #136]	; (8003c84 <vTaskDelete+0xa8>)
 8003bfc:	58cb      	ldr	r3, [r1, r3]
 8003bfe:	b93b      	cbnz	r3, 8003c10 <vTaskDelete+0x34>
 8003c00:	2301      	movs	r3, #1
 8003c02:	fa03 f202 	lsl.w	r2, r3, r2
 8003c06:	4920      	ldr	r1, [pc, #128]	; (8003c88 <vTaskDelete+0xac>)
 8003c08:	680b      	ldr	r3, [r1, #0]
 8003c0a:	ea23 0302 	bic.w	r3, r3, r2
 8003c0e:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003c12:	b11b      	cbz	r3, 8003c1c <vTaskDelete+0x40>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c14:	f104 0018 	add.w	r0, r4, #24
 8003c18:	f7ff f810 	bl	8002c3c <uxListRemove>
			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 8003c1c:	4629      	mov	r1, r5
 8003c1e:	481b      	ldr	r0, [pc, #108]	; (8003c8c <vTaskDelete+0xb0>)
 8003c20:	f7fe ffe6 	bl	8002bf0 <vListInsertEnd>
			++uxTasksDeleted;
 8003c24:	4a1a      	ldr	r2, [pc, #104]	; (8003c90 <vTaskDelete+0xb4>)
 8003c26:	6813      	ldr	r3, [r2, #0]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	6013      	str	r3, [r2, #0]
			uxTaskNumber++;
 8003c2c:	4a19      	ldr	r2, [pc, #100]	; (8003c94 <vTaskDelete+0xb8>)
 8003c2e:	6813      	ldr	r3, [r2, #0]
 8003c30:	3301      	adds	r3, #1
 8003c32:	6013      	str	r3, [r2, #0]
		taskEXIT_CRITICAL();
 8003c34:	f7ff f890 	bl	8002d58 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8003c38:	4b17      	ldr	r3, [pc, #92]	; (8003c98 <vTaskDelete+0xbc>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	b14b      	cbz	r3, 8003c52 <vTaskDelete+0x76>
			if( pxTCB == pxCurrentTCB )
 8003c3e:	4b17      	ldr	r3, [pc, #92]	; (8003c9c <vTaskDelete+0xc0>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	429c      	cmp	r4, r3
 8003c44:	d009      	beq.n	8003c5a <vTaskDelete+0x7e>
				taskENTER_CRITICAL();
 8003c46:	f7ff f865 	bl	8002d14 <vPortEnterCritical>
					prvResetNextTaskUnblockTime();
 8003c4a:	f7ff fe67 	bl	800391c <prvResetNextTaskUnblockTime>
				taskEXIT_CRITICAL();
 8003c4e:	f7ff f883 	bl	8002d58 <vPortExitCritical>
 8003c52:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003c54:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <vTaskDelete+0xc0>)
 8003c56:	681c      	ldr	r4, [r3, #0]
 8003c58:	e7c6      	b.n	8003be8 <vTaskDelete+0xc>
				configASSERT( uxSchedulerSuspended == 0 );
 8003c5a:	4b11      	ldr	r3, [pc, #68]	; (8003ca0 <vTaskDelete+0xc4>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	b143      	cbz	r3, 8003c72 <vTaskDelete+0x96>
 8003c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c64:	f383 8811 	msr	BASEPRI, r3
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	e7fe      	b.n	8003c70 <vTaskDelete+0x94>
				portYIELD_WITHIN_API();
 8003c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c76:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <vTaskDelete+0xc8>)
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	bd38      	pop	{r3, r4, r5, pc}
 8003c84:	20003cf0 	.word	0x20003cf0
 8003c88:	20003d90 	.word	0x20003d90
 8003c8c:	20003df0 	.word	0x20003df0
 8003c90:	20003d8c 	.word	0x20003d8c
 8003c94:	20003d88 	.word	0x20003d88
 8003c98:	20003dd8 	.word	0x20003dd8
 8003c9c:	20003ce4 	.word	0x20003ce4
 8003ca0:	20003d84 	.word	0x20003d84
 8003ca4:	e000ed04 	.word	0xe000ed04

08003ca8 <vTaskStartScheduler>:
{
 8003ca8:	b500      	push	{lr}
 8003caa:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 8003cac:	2300      	movs	r3, #0
 8003cae:	9303      	str	r3, [sp, #12]
 8003cb0:	9302      	str	r3, [sp, #8]
 8003cb2:	9301      	str	r3, [sp, #4]
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	2280      	movs	r2, #128	; 0x80
 8003cb8:	4913      	ldr	r1, [pc, #76]	; (8003d08 <vTaskStartScheduler+0x60>)
 8003cba:	4814      	ldr	r0, [pc, #80]	; (8003d0c <vTaskStartScheduler+0x64>)
 8003cbc:	f7ff fef4 	bl	8003aa8 <xTaskGenericCreate>
	if( xReturn == pdPASS )
 8003cc0:	2801      	cmp	r0, #1
 8003cc2:	d009      	beq.n	8003cd8 <vTaskStartScheduler+0x30>
		configASSERT( xReturn );
 8003cc4:	b9e0      	cbnz	r0, 8003d00 <vTaskStartScheduler+0x58>
 8003cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cca:	f383 8811 	msr	BASEPRI, r3
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	e7fe      	b.n	8003cd6 <vTaskStartScheduler+0x2e>
 8003cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cdc:	f383 8811 	msr	BASEPRI, r3
 8003ce0:	f3bf 8f6f 	isb	sy
 8003ce4:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cec:	4b08      	ldr	r3, [pc, #32]	; (8003d10 <vTaskStartScheduler+0x68>)
 8003cee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	4b08      	ldr	r3, [pc, #32]	; (8003d14 <vTaskStartScheduler+0x6c>)
 8003cf4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <vTaskStartScheduler+0x70>)
 8003cfa:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003cfc:	f7ff f8a0 	bl	8002e40 <xPortStartScheduler>
}
 8003d00:	b005      	add	sp, #20
 8003d02:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d06:	bf00      	nop
 8003d08:	0800d0a0 	.word	0x0800d0a0
 8003d0c:	08004031 	.word	0x08004031
 8003d10:	20003dbc 	.word	0x20003dbc
 8003d14:	20003dd8 	.word	0x20003dd8
 8003d18:	20003e04 	.word	0x20003e04

08003d1c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003d1c:	4a02      	ldr	r2, [pc, #8]	; (8003d28 <vTaskSuspendAll+0xc>)
 8003d1e:	6813      	ldr	r3, [r2, #0]
 8003d20:	3301      	adds	r3, #1
 8003d22:	6013      	str	r3, [r2, #0]
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	20003d84 	.word	0x20003d84

08003d2c <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003d2c:	4b01      	ldr	r3, [pc, #4]	; (8003d34 <xTaskGetTickCount+0x8>)
 8003d2e:	6818      	ldr	r0, [r3, #0]
}
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	20003e04 	.word	0x20003e04

08003d38 <xTaskIncrementTick>:
{
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d3a:	4b3c      	ldr	r3, [pc, #240]	; (8003e2c <xTaskIncrementTick+0xf4>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d169      	bne.n	8003e16 <xTaskIncrementTick+0xde>
		++xTickCount;
 8003d42:	4b3b      	ldr	r3, [pc, #236]	; (8003e30 <xTaskIncrementTick+0xf8>)
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	3201      	adds	r2, #1
 8003d48:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 8003d4a:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 8003d4c:	b9c6      	cbnz	r6, 8003d80 <xTaskIncrementTick+0x48>
				taskSWITCH_DELAYED_LISTS();
 8003d4e:	4b39      	ldr	r3, [pc, #228]	; (8003e34 <xTaskIncrementTick+0xfc>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	b143      	cbz	r3, 8003d68 <xTaskIncrementTick+0x30>
 8003d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5a:	f383 8811 	msr	BASEPRI, r3
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	f3bf 8f4f 	dsb	sy
 8003d66:	e7fe      	b.n	8003d66 <xTaskIncrementTick+0x2e>
 8003d68:	4a32      	ldr	r2, [pc, #200]	; (8003e34 <xTaskIncrementTick+0xfc>)
 8003d6a:	6811      	ldr	r1, [r2, #0]
 8003d6c:	4b32      	ldr	r3, [pc, #200]	; (8003e38 <xTaskIncrementTick+0x100>)
 8003d6e:	6818      	ldr	r0, [r3, #0]
 8003d70:	6010      	str	r0, [r2, #0]
 8003d72:	6019      	str	r1, [r3, #0]
 8003d74:	4a31      	ldr	r2, [pc, #196]	; (8003e3c <xTaskIncrementTick+0x104>)
 8003d76:	6813      	ldr	r3, [r2, #0]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	6013      	str	r3, [r2, #0]
 8003d7c:	f7ff fdce 	bl	800391c <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 8003d80:	4b2f      	ldr	r3, [pc, #188]	; (8003e40 <xTaskIncrementTick+0x108>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	429e      	cmp	r6, r3
 8003d86:	d23a      	bcs.n	8003dfe <xTaskIncrementTick+0xc6>
BaseType_t xSwitchRequired = pdFALSE;
 8003d88:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d8a:	4b2e      	ldr	r3, [pc, #184]	; (8003e44 <xTaskIncrementTick+0x10c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003d94:	009a      	lsls	r2, r3, #2
 8003d96:	4b2c      	ldr	r3, [pc, #176]	; (8003e48 <xTaskIncrementTick+0x110>)
 8003d98:	589b      	ldr	r3, [r3, r2]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d940      	bls.n	8003e20 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8003d9e:	2401      	movs	r4, #1
 8003da0:	e03e      	b.n	8003e20 <xTaskIncrementTick+0xe8>
								xSwitchRequired = pdTRUE;
 8003da2:	2401      	movs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003da4:	4b23      	ldr	r3, [pc, #140]	; (8003e34 <xTaskIncrementTick+0xfc>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	b353      	cbz	r3, 8003e02 <xTaskIncrementTick+0xca>
 8003dac:	2300      	movs	r3, #0
 8003dae:	bb53      	cbnz	r3, 8003e06 <xTaskIncrementTick+0xce>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003db0:	4b20      	ldr	r3, [pc, #128]	; (8003e34 <xTaskIncrementTick+0xfc>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8003db8:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
 8003dba:	429e      	cmp	r6, r3
 8003dbc:	d328      	bcc.n	8003e10 <xTaskIncrementTick+0xd8>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8003dbe:	1d2f      	adds	r7, r5, #4
 8003dc0:	4638      	mov	r0, r7
 8003dc2:	f7fe ff3b 	bl	8002c3c <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003dc6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003dc8:	b11b      	cbz	r3, 8003dd2 <xTaskIncrementTick+0x9a>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dca:	f105 0018 	add.w	r0, r5, #24
 8003dce:	f7fe ff35 	bl	8002c3c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8003dd2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	491c      	ldr	r1, [pc, #112]	; (8003e4c <xTaskIncrementTick+0x114>)
 8003dda:	6808      	ldr	r0, [r1, #0]
 8003ddc:	4302      	orrs	r2, r0
 8003dde:	600a      	str	r2, [r1, #0]
 8003de0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003de4:	009a      	lsls	r2, r3, #2
 8003de6:	4639      	mov	r1, r7
 8003de8:	4817      	ldr	r0, [pc, #92]	; (8003e48 <xTaskIncrementTick+0x110>)
 8003dea:	4410      	add	r0, r2
 8003dec:	f7fe ff00 	bl	8002bf0 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003df0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003df2:	4b14      	ldr	r3, [pc, #80]	; (8003e44 <xTaskIncrementTick+0x10c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d2d2      	bcs.n	8003da2 <xTaskIncrementTick+0x6a>
 8003dfc:	e7d2      	b.n	8003da4 <xTaskIncrementTick+0x6c>
 8003dfe:	2400      	movs	r4, #0
 8003e00:	e7d0      	b.n	8003da4 <xTaskIncrementTick+0x6c>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e02:	2301      	movs	r3, #1
 8003e04:	e7d3      	b.n	8003dae <xTaskIncrementTick+0x76>
						xNextTaskUnblockTime = portMAX_DELAY;
 8003e06:	f04f 32ff 	mov.w	r2, #4294967295
 8003e0a:	4b0d      	ldr	r3, [pc, #52]	; (8003e40 <xTaskIncrementTick+0x108>)
 8003e0c:	601a      	str	r2, [r3, #0]
						break;
 8003e0e:	e7bc      	b.n	8003d8a <xTaskIncrementTick+0x52>
							xNextTaskUnblockTime = xItemValue;
 8003e10:	4a0b      	ldr	r2, [pc, #44]	; (8003e40 <xTaskIncrementTick+0x108>)
 8003e12:	6013      	str	r3, [r2, #0]
							break;
 8003e14:	e7b9      	b.n	8003d8a <xTaskIncrementTick+0x52>
		++uxPendedTicks;
 8003e16:	4a0e      	ldr	r2, [pc, #56]	; (8003e50 <xTaskIncrementTick+0x118>)
 8003e18:	6813      	ldr	r3, [r2, #0]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8003e1e:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8003e20:	4b0c      	ldr	r3, [pc, #48]	; (8003e54 <xTaskIncrementTick+0x11c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	b103      	cbz	r3, 8003e28 <xTaskIncrementTick+0xf0>
			xSwitchRequired = pdTRUE;
 8003e26:	2401      	movs	r4, #1
}
 8003e28:	4620      	mov	r0, r4
 8003e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e2c:	20003d84 	.word	0x20003d84
 8003e30:	20003e04 	.word	0x20003e04
 8003e34:	20003ce8 	.word	0x20003ce8
 8003e38:	20003cec 	.word	0x20003cec
 8003e3c:	20003dc0 	.word	0x20003dc0
 8003e40:	20003dbc 	.word	0x20003dbc
 8003e44:	20003ce4 	.word	0x20003ce4
 8003e48:	20003cf0 	.word	0x20003cf0
 8003e4c:	20003d90 	.word	0x20003d90
 8003e50:	20003d80 	.word	0x20003d80
 8003e54:	20003e08 	.word	0x20003e08

08003e58 <xTaskResumeAll>:
{
 8003e58:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8003e5a:	4b35      	ldr	r3, [pc, #212]	; (8003f30 <xTaskResumeAll+0xd8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	b943      	cbnz	r3, 8003e72 <xTaskResumeAll+0x1a>
 8003e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	e7fe      	b.n	8003e70 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8003e72:	f7fe ff4f 	bl	8002d14 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003e76:	4b2e      	ldr	r3, [pc, #184]	; (8003f30 <xTaskResumeAll+0xd8>)
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	3a01      	subs	r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d150      	bne.n	8003f26 <xTaskResumeAll+0xce>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e84:	4b2b      	ldr	r3, [pc, #172]	; (8003f34 <xTaskResumeAll+0xdc>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	bb23      	cbnz	r3, 8003ed4 <xTaskResumeAll+0x7c>
BaseType_t xAlreadyYielded = pdFALSE;
 8003e8a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003e8c:	f7fe ff64 	bl	8002d58 <vPortExitCritical>
}
 8003e90:	4620      	mov	r0, r4
 8003e92:	bd38      	pop	{r3, r4, r5, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003e94:	4b28      	ldr	r3, [pc, #160]	; (8003f38 <xTaskResumeAll+0xe0>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e9a:	f104 0018 	add.w	r0, r4, #24
 8003e9e:	f7fe fecd 	bl	8002c3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8003ea2:	1d25      	adds	r5, r4, #4
 8003ea4:	4628      	mov	r0, r5
 8003ea6:	f7fe fec9 	bl	8002c3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003eaa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003eac:	2201      	movs	r2, #1
 8003eae:	409a      	lsls	r2, r3
 8003eb0:	4922      	ldr	r1, [pc, #136]	; (8003f3c <xTaskResumeAll+0xe4>)
 8003eb2:	6808      	ldr	r0, [r1, #0]
 8003eb4:	4302      	orrs	r2, r0
 8003eb6:	600a      	str	r2, [r1, #0]
 8003eb8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003ebc:	009a      	lsls	r2, r3, #2
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	481f      	ldr	r0, [pc, #124]	; (8003f40 <xTaskResumeAll+0xe8>)
 8003ec2:	4410      	add	r0, r2
 8003ec4:	f7fe fe94 	bl	8002bf0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ec8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003eca:	4b1e      	ldr	r3, [pc, #120]	; (8003f44 <xTaskResumeAll+0xec>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d214      	bcs.n	8003efe <xTaskResumeAll+0xa6>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ed4:	4b18      	ldr	r3, [pc, #96]	; (8003f38 <xTaskResumeAll+0xe0>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1db      	bne.n	8003e94 <xTaskResumeAll+0x3c>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8003edc:	4b1a      	ldr	r3, [pc, #104]	; (8003f48 <xTaskResumeAll+0xf0>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	b9ab      	cbnz	r3, 8003f0e <xTaskResumeAll+0xb6>
				if( xYieldPending == pdTRUE )
 8003ee2:	4b1a      	ldr	r3, [pc, #104]	; (8003f4c <xTaskResumeAll+0xf4>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d11f      	bne.n	8003f2a <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
 8003eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eee:	4b18      	ldr	r3, [pc, #96]	; (8003f50 <xTaskResumeAll+0xf8>)
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	f3bf 8f4f 	dsb	sy
 8003ef6:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003efa:	2401      	movs	r4, #1
 8003efc:	e7c6      	b.n	8003e8c <xTaskResumeAll+0x34>
						xYieldPending = pdTRUE;
 8003efe:	2201      	movs	r2, #1
 8003f00:	4b12      	ldr	r3, [pc, #72]	; (8003f4c <xTaskResumeAll+0xf4>)
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	e7e6      	b.n	8003ed4 <xTaskResumeAll+0x7c>
						--uxPendedTicks;
 8003f06:	4a10      	ldr	r2, [pc, #64]	; (8003f48 <xTaskResumeAll+0xf0>)
 8003f08:	6813      	ldr	r3, [r2, #0]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	6013      	str	r3, [r2, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8003f0e:	4b0e      	ldr	r3, [pc, #56]	; (8003f48 <xTaskResumeAll+0xf0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0e5      	beq.n	8003ee2 <xTaskResumeAll+0x8a>
						if( xTaskIncrementTick() != pdFALSE )
 8003f16:	f7ff ff0f 	bl	8003d38 <xTaskIncrementTick>
 8003f1a:	2800      	cmp	r0, #0
 8003f1c:	d0f3      	beq.n	8003f06 <xTaskResumeAll+0xae>
							xYieldPending = pdTRUE;
 8003f1e:	2201      	movs	r2, #1
 8003f20:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <xTaskResumeAll+0xf4>)
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	e7ef      	b.n	8003f06 <xTaskResumeAll+0xae>
BaseType_t xAlreadyYielded = pdFALSE;
 8003f26:	2400      	movs	r4, #0
 8003f28:	e7b0      	b.n	8003e8c <xTaskResumeAll+0x34>
 8003f2a:	2400      	movs	r4, #0
 8003f2c:	e7ae      	b.n	8003e8c <xTaskResumeAll+0x34>
 8003f2e:	bf00      	nop
 8003f30:	20003d84 	.word	0x20003d84
 8003f34:	20003d7c 	.word	0x20003d7c
 8003f38:	20003dc4 	.word	0x20003dc4
 8003f3c:	20003d90 	.word	0x20003d90
 8003f40:	20003cf0 	.word	0x20003cf0
 8003f44:	20003ce4 	.word	0x20003ce4
 8003f48:	20003d80 	.word	0x20003d80
 8003f4c:	20003e08 	.word	0x20003e08
 8003f50:	e000ed04 	.word	0xe000ed04

08003f54 <vTaskDelay>:
	{
 8003f54:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f56:	b340      	cbz	r0, 8003faa <vTaskDelay+0x56>
 8003f58:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8003f5a:	4b19      	ldr	r3, [pc, #100]	; (8003fc0 <vTaskDelay+0x6c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	b143      	cbz	r3, 8003f72 <vTaskDelay+0x1e>
 8003f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f64:	f383 8811 	msr	BASEPRI, r3
 8003f68:	f3bf 8f6f 	isb	sy
 8003f6c:	f3bf 8f4f 	dsb	sy
 8003f70:	e7fe      	b.n	8003f70 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8003f72:	f7ff fed3 	bl	8003d1c <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 8003f76:	4b13      	ldr	r3, [pc, #76]	; (8003fc4 <vTaskDelay+0x70>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8003f7c:	4b12      	ldr	r3, [pc, #72]	; (8003fc8 <vTaskDelay+0x74>)
 8003f7e:	6818      	ldr	r0, [r3, #0]
 8003f80:	3004      	adds	r0, #4
 8003f82:	f7fe fe5b 	bl	8002c3c <uxListRemove>
 8003f86:	b950      	cbnz	r0, 8003f9e <vTaskDelay+0x4a>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003f88:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <vTaskDelay+0x74>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f8e:	2301      	movs	r3, #1
 8003f90:	fa03 f202 	lsl.w	r2, r3, r2
 8003f94:	490d      	ldr	r1, [pc, #52]	; (8003fcc <vTaskDelay+0x78>)
 8003f96:	680b      	ldr	r3, [r1, #0]
 8003f98:	ea23 0302 	bic.w	r3, r3, r2
 8003f9c:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8003f9e:	4620      	mov	r0, r4
 8003fa0:	f7ff fd58 	bl	8003a54 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003fa4:	f7ff ff58 	bl	8003e58 <xTaskResumeAll>
 8003fa8:	e000      	b.n	8003fac <vTaskDelay+0x58>
	BaseType_t xAlreadyYielded = pdFALSE;
 8003faa:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 8003fac:	b938      	cbnz	r0, 8003fbe <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
 8003fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fb2:	4b07      	ldr	r3, [pc, #28]	; (8003fd0 <vTaskDelay+0x7c>)
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	f3bf 8f4f 	dsb	sy
 8003fba:	f3bf 8f6f 	isb	sy
 8003fbe:	bd10      	pop	{r4, pc}
 8003fc0:	20003d84 	.word	0x20003d84
 8003fc4:	20003e04 	.word	0x20003e04
 8003fc8:	20003ce4 	.word	0x20003ce4
 8003fcc:	20003d90 	.word	0x20003d90
 8003fd0:	e000ed04 	.word	0xe000ed04

08003fd4 <prvCheckTasksWaitingTermination>:
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8003fd4:	4b13      	ldr	r3, [pc, #76]	; (8004024 <prvCheckTasksWaitingTermination+0x50>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	b313      	cbz	r3, 8004020 <prvCheckTasksWaitingTermination+0x4c>
{
 8003fda:	b510      	push	{r4, lr}
			vTaskSuspendAll();
 8003fdc:	f7ff fe9e 	bl	8003d1c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003fe0:	4b11      	ldr	r3, [pc, #68]	; (8004028 <prvCheckTasksWaitingTermination+0x54>)
 8003fe2:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
 8003fe4:	f7ff ff38 	bl	8003e58 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8003fe8:	b924      	cbnz	r4, 8003ff4 <prvCheckTasksWaitingTermination+0x20>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8003fea:	4b0e      	ldr	r3, [pc, #56]	; (8004024 <prvCheckTasksWaitingTermination+0x50>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1f4      	bne.n	8003fdc <prvCheckTasksWaitingTermination+0x8>
}
 8003ff2:	bd10      	pop	{r4, pc}
				taskENTER_CRITICAL();
 8003ff4:	f7fe fe8e 	bl	8002d14 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003ff8:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <prvCheckTasksWaitingTermination+0x54>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8003ffe:	1d20      	adds	r0, r4, #4
 8004000:	f7fe fe1c 	bl	8002c3c <uxListRemove>
					--uxCurrentNumberOfTasks;
 8004004:	4a09      	ldr	r2, [pc, #36]	; (800402c <prvCheckTasksWaitingTermination+0x58>)
 8004006:	6813      	ldr	r3, [r2, #0]
 8004008:	3b01      	subs	r3, #1
 800400a:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800400c:	4a05      	ldr	r2, [pc, #20]	; (8004024 <prvCheckTasksWaitingTermination+0x50>)
 800400e:	6813      	ldr	r3, [r2, #0]
 8004010:	3b01      	subs	r3, #1
 8004012:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 8004014:	f7fe fea0 	bl	8002d58 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 8004018:	4620      	mov	r0, r4
 800401a:	f7ff fc99 	bl	8003950 <prvDeleteTCB>
 800401e:	e7e4      	b.n	8003fea <prvCheckTasksWaitingTermination+0x16>
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	20003d8c 	.word	0x20003d8c
 8004028:	20003df0 	.word	0x20003df0
 800402c:	20003d7c 	.word	0x20003d7c

08004030 <prvIdleTask>:
{
 8004030:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8004032:	f7ff ffcf 	bl	8003fd4 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004036:	4b06      	ldr	r3, [pc, #24]	; (8004050 <prvIdleTask+0x20>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d9f9      	bls.n	8004032 <prvIdleTask+0x2>
				taskYIELD();
 800403e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004042:	4b04      	ldr	r3, [pc, #16]	; (8004054 <prvIdleTask+0x24>)
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	e7f0      	b.n	8004032 <prvIdleTask+0x2>
 8004050:	20003cf0 	.word	0x20003cf0
 8004054:	e000ed04 	.word	0xe000ed04

08004058 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004058:	4b21      	ldr	r3, [pc, #132]	; (80040e0 <vTaskSwitchContext+0x88>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	b9c3      	cbnz	r3, 8004090 <vTaskSwitchContext+0x38>
		xYieldPending = pdFALSE;
 800405e:	2200      	movs	r2, #0
 8004060:	4b20      	ldr	r3, [pc, #128]	; (80040e4 <vTaskSwitchContext+0x8c>)
 8004062:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004064:	4b20      	ldr	r3, [pc, #128]	; (80040e8 <vTaskSwitchContext+0x90>)
 8004066:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8004068:	fab3 f383 	clz	r3, r3
 800406c:	b2db      	uxtb	r3, r3
 800406e:	f1c3 031f 	rsb	r3, r3, #31
 8004072:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004076:	008a      	lsls	r2, r1, #2
 8004078:	491c      	ldr	r1, [pc, #112]	; (80040ec <vTaskSwitchContext+0x94>)
 800407a:	588a      	ldr	r2, [r1, r2]
 800407c:	b962      	cbnz	r2, 8004098 <vTaskSwitchContext+0x40>
	__asm volatile
 800407e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	e7fe      	b.n	800408e <vTaskSwitchContext+0x36>
		xYieldPending = pdTRUE;
 8004090:	2201      	movs	r2, #1
 8004092:	4b14      	ldr	r3, [pc, #80]	; (80040e4 <vTaskSwitchContext+0x8c>)
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	4770      	bx	lr
{
 8004098:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800409a:	4814      	ldr	r0, [pc, #80]	; (80040ec <vTaskSwitchContext+0x94>)
 800409c:	009a      	lsls	r2, r3, #2
 800409e:	18d4      	adds	r4, r2, r3
 80040a0:	00a1      	lsls	r1, r4, #2
 80040a2:	4401      	add	r1, r0
 80040a4:	684c      	ldr	r4, [r1, #4]
 80040a6:	6864      	ldr	r4, [r4, #4]
 80040a8:	604c      	str	r4, [r1, #4]
 80040aa:	441a      	add	r2, r3
 80040ac:	0091      	lsls	r1, r2, #2
 80040ae:	3108      	adds	r1, #8
 80040b0:	4408      	add	r0, r1
 80040b2:	4284      	cmp	r4, r0
 80040b4:	d00b      	beq.n	80040ce <vTaskSwitchContext+0x76>
 80040b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80040ba:	009a      	lsls	r2, r3, #2
 80040bc:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <vTaskSwitchContext+0x94>)
 80040be:	4413      	add	r3, r2
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	4b0a      	ldr	r3, [pc, #40]	; (80040f0 <vTaskSwitchContext+0x98>)
 80040c6:	601a      	str	r2, [r3, #0]
}
 80040c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040cc:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80040ce:	6860      	ldr	r0, [r4, #4]
 80040d0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80040d4:	0091      	lsls	r1, r2, #2
 80040d6:	4a05      	ldr	r2, [pc, #20]	; (80040ec <vTaskSwitchContext+0x94>)
 80040d8:	440a      	add	r2, r1
 80040da:	6050      	str	r0, [r2, #4]
 80040dc:	e7eb      	b.n	80040b6 <vTaskSwitchContext+0x5e>
 80040de:	bf00      	nop
 80040e0:	20003d84 	.word	0x20003d84
 80040e4:	20003e08 	.word	0x20003e08
 80040e8:	20003d90 	.word	0x20003d90
 80040ec:	20003cf0 	.word	0x20003cf0
 80040f0:	20003ce4 	.word	0x20003ce4

080040f4 <vTaskPlaceOnEventList>:
{
 80040f4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
 80040f6:	b1e8      	cbz	r0, 8004134 <vTaskPlaceOnEventList+0x40>
 80040f8:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040fa:	4d16      	ldr	r5, [pc, #88]	; (8004154 <vTaskPlaceOnEventList+0x60>)
 80040fc:	6829      	ldr	r1, [r5, #0]
 80040fe:	3118      	adds	r1, #24
 8004100:	f7fe fd82 	bl	8002c08 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8004104:	6828      	ldr	r0, [r5, #0]
 8004106:	3004      	adds	r0, #4
 8004108:	f7fe fd98 	bl	8002c3c <uxListRemove>
 800410c:	b948      	cbnz	r0, 8004122 <vTaskPlaceOnEventList+0x2e>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800410e:	682b      	ldr	r3, [r5, #0]
 8004110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004112:	2301      	movs	r3, #1
 8004114:	fa03 f202 	lsl.w	r2, r3, r2
 8004118:	490f      	ldr	r1, [pc, #60]	; (8004158 <vTaskPlaceOnEventList+0x64>)
 800411a:	680b      	ldr	r3, [r1, #0]
 800411c:	ea23 0302 	bic.w	r3, r3, r2
 8004120:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
 8004122:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004126:	d00e      	beq.n	8004146 <vTaskPlaceOnEventList+0x52>
			xTimeToWake = xTickCount + xTicksToWait;
 8004128:	4b0c      	ldr	r3, [pc, #48]	; (800415c <vTaskPlaceOnEventList+0x68>)
 800412a:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800412c:	4420      	add	r0, r4
 800412e:	f7ff fc91 	bl	8003a54 <prvAddCurrentTaskToDelayedList>
 8004132:	bd38      	pop	{r3, r4, r5, pc}
 8004134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	e7fe      	b.n	8004144 <vTaskPlaceOnEventList+0x50>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8004146:	4b03      	ldr	r3, [pc, #12]	; (8004154 <vTaskPlaceOnEventList+0x60>)
 8004148:	6819      	ldr	r1, [r3, #0]
 800414a:	3104      	adds	r1, #4
 800414c:	4804      	ldr	r0, [pc, #16]	; (8004160 <vTaskPlaceOnEventList+0x6c>)
 800414e:	f7fe fd4f 	bl	8002bf0 <vListInsertEnd>
 8004152:	bd38      	pop	{r3, r4, r5, pc}
 8004154:	20003ce4 	.word	0x20003ce4
 8004158:	20003d90 	.word	0x20003d90
 800415c:	20003e04 	.word	0x20003e04
 8004160:	20003ddc 	.word	0x20003ddc

08004164 <xTaskRemoveFromEventList>:
{
 8004164:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004166:	68c3      	ldr	r3, [r0, #12]
 8004168:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800416a:	b324      	cbz	r4, 80041b6 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800416c:	f104 0518 	add.w	r5, r4, #24
 8004170:	4628      	mov	r0, r5
 8004172:	f7fe fd63 	bl	8002c3c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004176:	4b18      	ldr	r3, [pc, #96]	; (80041d8 <xTaskRemoveFromEventList+0x74>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	bb2b      	cbnz	r3, 80041c8 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800417c:	1d25      	adds	r5, r4, #4
 800417e:	4628      	mov	r0, r5
 8004180:	f7fe fd5c 	bl	8002c3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004184:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004186:	2201      	movs	r2, #1
 8004188:	409a      	lsls	r2, r3
 800418a:	4914      	ldr	r1, [pc, #80]	; (80041dc <xTaskRemoveFromEventList+0x78>)
 800418c:	6808      	ldr	r0, [r1, #0]
 800418e:	4302      	orrs	r2, r0
 8004190:	600a      	str	r2, [r1, #0]
 8004192:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004196:	009a      	lsls	r2, r3, #2
 8004198:	4629      	mov	r1, r5
 800419a:	4811      	ldr	r0, [pc, #68]	; (80041e0 <xTaskRemoveFromEventList+0x7c>)
 800419c:	4410      	add	r0, r2
 800419e:	f7fe fd27 	bl	8002bf0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80041a4:	4b0f      	ldr	r3, [pc, #60]	; (80041e4 <xTaskRemoveFromEventList+0x80>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d911      	bls.n	80041d2 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 80041ae:	2001      	movs	r0, #1
 80041b0:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <xTaskRemoveFromEventList+0x84>)
 80041b2:	6018      	str	r0, [r3, #0]
 80041b4:	bd38      	pop	{r3, r4, r5, pc}
 80041b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	e7fe      	b.n	80041c6 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80041c8:	4629      	mov	r1, r5
 80041ca:	4808      	ldr	r0, [pc, #32]	; (80041ec <xTaskRemoveFromEventList+0x88>)
 80041cc:	f7fe fd10 	bl	8002bf0 <vListInsertEnd>
 80041d0:	e7e7      	b.n	80041a2 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 80041d2:	2000      	movs	r0, #0
}
 80041d4:	bd38      	pop	{r3, r4, r5, pc}
 80041d6:	bf00      	nop
 80041d8:	20003d84 	.word	0x20003d84
 80041dc:	20003d90 	.word	0x20003d90
 80041e0:	20003cf0 	.word	0x20003cf0
 80041e4:	20003ce4 	.word	0x20003ce4
 80041e8:	20003e08 	.word	0x20003e08
 80041ec:	20003dc4 	.word	0x20003dc4

080041f0 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 80041f0:	b130      	cbz	r0, 8004200 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041f2:	4a08      	ldr	r2, [pc, #32]	; (8004214 <vTaskSetTimeOutState+0x24>)
 80041f4:	6812      	ldr	r2, [r2, #0]
 80041f6:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80041f8:	4a07      	ldr	r2, [pc, #28]	; (8004218 <vTaskSetTimeOutState+0x28>)
 80041fa:	6812      	ldr	r2, [r2, #0]
 80041fc:	6042      	str	r2, [r0, #4]
 80041fe:	4770      	bx	lr
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	e7fe      	b.n	8004210 <vTaskSetTimeOutState+0x20>
 8004212:	bf00      	nop
 8004214:	20003dc0 	.word	0x20003dc0
 8004218:	20003e04 	.word	0x20003e04

0800421c <xTaskCheckForTimeOut>:
{
 800421c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
 800421e:	b1c0      	cbz	r0, 8004252 <xTaskCheckForTimeOut+0x36>
 8004220:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
 8004222:	b1f9      	cbz	r1, 8004264 <xTaskCheckForTimeOut+0x48>
 8004224:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8004226:	f7fe fd75 	bl	8002d14 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800422a:	4b1a      	ldr	r3, [pc, #104]	; (8004294 <xTaskCheckForTimeOut+0x78>)
 800422c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800422e:	682b      	ldr	r3, [r5, #0]
 8004230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004234:	d02a      	beq.n	800428c <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004236:	6820      	ldr	r0, [r4, #0]
 8004238:	4a17      	ldr	r2, [pc, #92]	; (8004298 <xTaskCheckForTimeOut+0x7c>)
 800423a:	6812      	ldr	r2, [r2, #0]
 800423c:	4290      	cmp	r0, r2
 800423e:	d002      	beq.n	8004246 <xTaskCheckForTimeOut+0x2a>
 8004240:	6862      	ldr	r2, [r4, #4]
 8004242:	4291      	cmp	r1, r2
 8004244:	d224      	bcs.n	8004290 <xTaskCheckForTimeOut+0x74>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8004246:	6862      	ldr	r2, [r4, #4]
 8004248:	1a88      	subs	r0, r1, r2
 800424a:	4283      	cmp	r3, r0
 800424c:	d813      	bhi.n	8004276 <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
 800424e:	2401      	movs	r4, #1
 8004250:	e018      	b.n	8004284 <xTaskCheckForTimeOut+0x68>
 8004252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	e7fe      	b.n	8004262 <xTaskCheckForTimeOut+0x46>
 8004264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	e7fe      	b.n	8004274 <xTaskCheckForTimeOut+0x58>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8004276:	1a52      	subs	r2, r2, r1
 8004278:	4413      	add	r3, r2
 800427a:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800427c:	4620      	mov	r0, r4
 800427e:	f7ff ffb7 	bl	80041f0 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8004282:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004284:	f7fe fd68 	bl	8002d58 <vPortExitCritical>
}
 8004288:	4620      	mov	r0, r4
 800428a:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
 800428c:	2400      	movs	r4, #0
 800428e:	e7f9      	b.n	8004284 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 8004290:	2401      	movs	r4, #1
 8004292:	e7f7      	b.n	8004284 <xTaskCheckForTimeOut+0x68>
 8004294:	20003e04 	.word	0x20003e04
 8004298:	20003dc0 	.word	0x20003dc0

0800429c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800429c:	2201      	movs	r2, #1
 800429e:	4b01      	ldr	r3, [pc, #4]	; (80042a4 <vTaskMissedYield+0x8>)
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	4770      	bx	lr
 80042a4:	20003e08 	.word	0x20003e08

080042a8 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <xTaskGetSchedulerState+0x18>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	b123      	cbz	r3, 80042b8 <xTaskGetSchedulerState+0x10>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042ae:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <xTaskGetSchedulerState+0x1c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	b91b      	cbnz	r3, 80042bc <xTaskGetSchedulerState+0x14>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042b4:	2002      	movs	r0, #2
 80042b6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042b8:	2001      	movs	r0, #1
 80042ba:	4770      	bx	lr
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042bc:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
 80042be:	4770      	bx	lr
 80042c0:	20003dd8 	.word	0x20003dd8
 80042c4:	20003d84 	.word	0x20003d84

080042c8 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 80042c8:	2800      	cmp	r0, #0
 80042ca:	d047      	beq.n	800435c <vTaskPriorityInherit+0x94>
	{
 80042cc:	b538      	push	{r3, r4, r5, lr}
 80042ce:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80042d0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80042d2:	4923      	ldr	r1, [pc, #140]	; (8004360 <vTaskPriorityInherit+0x98>)
 80042d4:	6809      	ldr	r1, [r1, #0]
 80042d6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80042d8:	428b      	cmp	r3, r1
 80042da:	d216      	bcs.n	800430a <vTaskPriorityInherit+0x42>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80042dc:	6981      	ldr	r1, [r0, #24]
 80042de:	2900      	cmp	r1, #0
 80042e0:	db05      	blt.n	80042ee <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042e2:	491f      	ldr	r1, [pc, #124]	; (8004360 <vTaskPriorityInherit+0x98>)
 80042e4:	6809      	ldr	r1, [r1, #0]
 80042e6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80042e8:	f1c1 0107 	rsb	r1, r1, #7
 80042ec:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 80042ee:	6960      	ldr	r0, [r4, #20]
 80042f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80042f4:	0099      	lsls	r1, r3, #2
 80042f6:	4b1b      	ldr	r3, [pc, #108]	; (8004364 <vTaskPriorityInherit+0x9c>)
 80042f8:	440b      	add	r3, r1
 80042fa:	4298      	cmp	r0, r3
 80042fc:	d006      	beq.n	800430c <vTaskPriorityInherit+0x44>
 80042fe:	2300      	movs	r3, #0
 8004300:	b933      	cbnz	r3, 8004310 <vTaskPriorityInherit+0x48>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004302:	4b17      	ldr	r3, [pc, #92]	; (8004360 <vTaskPriorityInherit+0x98>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004308:	62e3      	str	r3, [r4, #44]	; 0x2c
 800430a:	bd38      	pop	{r3, r4, r5, pc}
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800430c:	2301      	movs	r3, #1
 800430e:	e7f7      	b.n	8004300 <vTaskPriorityInherit+0x38>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8004310:	1d25      	adds	r5, r4, #4
 8004312:	4628      	mov	r0, r5
 8004314:	f7fe fc92 	bl	8002c3c <uxListRemove>
 8004318:	b968      	cbnz	r0, 8004336 <vTaskPriorityInherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800431a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800431c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004320:	008a      	lsls	r2, r1, #2
 8004322:	4910      	ldr	r1, [pc, #64]	; (8004364 <vTaskPriorityInherit+0x9c>)
 8004324:	588a      	ldr	r2, [r1, r2]
 8004326:	b932      	cbnz	r2, 8004336 <vTaskPriorityInherit+0x6e>
 8004328:	2201      	movs	r2, #1
 800432a:	409a      	lsls	r2, r3
 800432c:	490e      	ldr	r1, [pc, #56]	; (8004368 <vTaskPriorityInherit+0xa0>)
 800432e:	680b      	ldr	r3, [r1, #0]
 8004330:	ea23 0302 	bic.w	r3, r3, r2
 8004334:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004336:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <vTaskPriorityInherit+0x98>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800433e:	2201      	movs	r2, #1
 8004340:	409a      	lsls	r2, r3
 8004342:	4909      	ldr	r1, [pc, #36]	; (8004368 <vTaskPriorityInherit+0xa0>)
 8004344:	6808      	ldr	r0, [r1, #0]
 8004346:	4302      	orrs	r2, r0
 8004348:	600a      	str	r2, [r1, #0]
 800434a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800434e:	009a      	lsls	r2, r3, #2
 8004350:	4629      	mov	r1, r5
 8004352:	4804      	ldr	r0, [pc, #16]	; (8004364 <vTaskPriorityInherit+0x9c>)
 8004354:	4410      	add	r0, r2
 8004356:	f7fe fc4b 	bl	8002bf0 <vListInsertEnd>
 800435a:	bd38      	pop	{r3, r4, r5, pc}
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	20003ce4 	.word	0x20003ce4
 8004364:	20003cf0 	.word	0x20003cf0
 8004368:	20003d90 	.word	0x20003d90

0800436c <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
 800436c:	2800      	cmp	r0, #0
 800436e:	d04a      	beq.n	8004406 <xTaskPriorityDisinherit+0x9a>
	{
 8004370:	b538      	push	{r3, r4, r5, lr}
 8004372:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004374:	4a27      	ldr	r2, [pc, #156]	; (8004414 <xTaskPriorityDisinherit+0xa8>)
 8004376:	6812      	ldr	r2, [r2, #0]
 8004378:	4290      	cmp	r0, r2
 800437a:	d008      	beq.n	800438e <xTaskPriorityDisinherit+0x22>
 800437c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004380:	f383 8811 	msr	BASEPRI, r3
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	e7fe      	b.n	800438c <xTaskPriorityDisinherit+0x20>

			configASSERT( pxTCB->uxMutexesHeld );
 800438e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004390:	b942      	cbnz	r2, 80043a4 <xTaskPriorityDisinherit+0x38>
 8004392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004396:	f383 8811 	msr	BASEPRI, r3
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	e7fe      	b.n	80043a2 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 80043a4:	3a01      	subs	r2, #1
 80043a6:	6502      	str	r2, [r0, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80043a8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80043aa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80043ac:	4288      	cmp	r0, r1
 80043ae:	d02c      	beq.n	800440a <xTaskPriorityDisinherit+0x9e>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80043b0:	bb6a      	cbnz	r2, 800440e <xTaskPriorityDisinherit+0xa2>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80043b2:	1d25      	adds	r5, r4, #4
 80043b4:	4628      	mov	r0, r5
 80043b6:	f7fe fc41 	bl	8002c3c <uxListRemove>
 80043ba:	b970      	cbnz	r0, 80043da <xTaskPriorityDisinherit+0x6e>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80043bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80043be:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80043c2:	008b      	lsls	r3, r1, #2
 80043c4:	4914      	ldr	r1, [pc, #80]	; (8004418 <xTaskPriorityDisinherit+0xac>)
 80043c6:	58cb      	ldr	r3, [r1, r3]
 80043c8:	b93b      	cbnz	r3, 80043da <xTaskPriorityDisinherit+0x6e>
 80043ca:	2301      	movs	r3, #1
 80043cc:	fa03 f202 	lsl.w	r2, r3, r2
 80043d0:	4912      	ldr	r1, [pc, #72]	; (800441c <xTaskPriorityDisinherit+0xb0>)
 80043d2:	680b      	ldr	r3, [r1, #0]
 80043d4:	ea23 0302 	bic.w	r3, r3, r2
 80043d8:	600b      	str	r3, [r1, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80043da:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80043dc:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043de:	f1c3 0207 	rsb	r2, r3, #7
 80043e2:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80043e4:	2401      	movs	r4, #1
 80043e6:	fa04 f203 	lsl.w	r2, r4, r3
 80043ea:	490c      	ldr	r1, [pc, #48]	; (800441c <xTaskPriorityDisinherit+0xb0>)
 80043ec:	6808      	ldr	r0, [r1, #0]
 80043ee:	4302      	orrs	r2, r0
 80043f0:	600a      	str	r2, [r1, #0]
 80043f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80043f6:	009a      	lsls	r2, r3, #2
 80043f8:	4629      	mov	r1, r5
 80043fa:	4807      	ldr	r0, [pc, #28]	; (8004418 <xTaskPriorityDisinherit+0xac>)
 80043fc:	4410      	add	r0, r2
 80043fe:	f7fe fbf7 	bl	8002bf0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004402:	4620      	mov	r0, r4
 8004404:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8004406:	2000      	movs	r0, #0
 8004408:	4770      	bx	lr
 800440a:	2000      	movs	r0, #0
 800440c:	bd38      	pop	{r3, r4, r5, pc}
 800440e:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 8004410:	bd38      	pop	{r3, r4, r5, pc}
 8004412:	bf00      	nop
 8004414:	20003ce4 	.word	0x20003ce4
 8004418:	20003cf0 	.word	0x20003cf0
 800441c:	20003d90 	.word	0x20003d90

08004420 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004420:	4b05      	ldr	r3, [pc, #20]	; (8004438 <pvTaskIncrementMutexHeldCount+0x18>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	b123      	cbz	r3, 8004430 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004426:	4b04      	ldr	r3, [pc, #16]	; (8004438 <pvTaskIncrementMutexHeldCount+0x18>)
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800442c:	3301      	adds	r3, #1
 800442e:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004430:	4b01      	ldr	r3, [pc, #4]	; (8004438 <pvTaskIncrementMutexHeldCount+0x18>)
 8004432:	6818      	ldr	r0, [r3, #0]
	}
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	20003ce4 	.word	0x20003ce4

0800443c <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800443c:	b570      	push	{r4, r5, r6, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	460d      	mov	r5, r1
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);

  conn = netconn_alloc(t, callback);
 8004442:	4611      	mov	r1, r2
 8004444:	f000 fbf0 	bl	8004c28 <netconn_alloc>
  if (conn != NULL) {
 8004448:	4604      	mov	r4, r0
 800444a:	b148      	cbz	r0, 8004460 <netconn_new_with_proto_and_callback+0x24>
    err_t err;
    API_MSG_VAR_ALLOC_DONTFAIL(msg);
    API_MSG_VAR_REF(msg).msg.msg.n.proto = proto;
 800444c:	f88d 500c 	strb.w	r5, [sp, #12]
    API_MSG_VAR_REF(msg).msg.conn = conn;
 8004450:	9001      	str	r0, [sp, #4]
    TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_newconn, err);
 8004452:	a806      	add	r0, sp, #24
 8004454:	4b11      	ldr	r3, [pc, #68]	; (800449c <netconn_new_with_proto_and_callback+0x60>)
 8004456:	f840 3d18 	str.w	r3, [r0, #-24]!
 800445a:	f001 fa03 	bl	8005864 <tcpip_apimsg>
    API_MSG_VAR_FREE(msg);
    if (err != ERR_OK) {
 800445e:	b910      	cbnz	r0, 8004466 <netconn_new_with_proto_and_callback+0x2a>
      memp_free(MEMP_NETCONN, conn);
      return NULL;
    }
  }
  return conn;
}
 8004460:	4620      	mov	r0, r4
 8004462:	b006      	add	sp, #24
 8004464:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8004466:	f104 0510 	add.w	r5, r4, #16
 800446a:	4628      	mov	r0, r5
 800446c:	f006 fb16 	bl	800aa9c <sys_mbox_valid>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8004470:	f104 0014 	add.w	r0, r4, #20
 8004474:	f006 fb12 	bl	800aa9c <sys_mbox_valid>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8004478:	f104 060c 	add.w	r6, r4, #12
 800447c:	4630      	mov	r0, r6
 800447e:	f006 fb64 	bl	800ab4a <sys_sem_valid>
      sys_sem_free(&conn->op_completed);
 8004482:	4630      	mov	r0, r6
 8004484:	f006 fb5c 	bl	800ab40 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 8004488:	4628      	mov	r0, r5
 800448a:	f006 fa9d 	bl	800a9c8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800448e:	4621      	mov	r1, r4
 8004490:	2007      	movs	r0, #7
 8004492:	f002 faff 	bl	8006a94 <memp_free>
      return NULL;
 8004496:	2400      	movs	r4, #0
 8004498:	e7e2      	b.n	8004460 <netconn_new_with_proto_and_callback+0x24>
 800449a:	bf00      	nop
 800449c:	08004bf7 	.word	0x08004bf7

080044a0 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80044a0:	b530      	push	{r4, r5, lr}
 80044a2:	b087      	sub	sp, #28
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80044a4:	b198      	cbz	r0, 80044ce <netconn_delete+0x2e>
 80044a6:	4604      	mov	r4, r0
    return ERR_OK;
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).msg.conn = conn;
 80044a8:	9001      	str	r0, [sp, #4]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.msg.sd.polls_left =
 80044aa:	2329      	movs	r3, #41	; 0x29
 80044ac:	f88d 300d 	strb.w	r3, [sp, #13]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_delconn, err);
 80044b0:	a806      	add	r0, sp, #24
 80044b2:	4b08      	ldr	r3, [pc, #32]	; (80044d4 <netconn_delete+0x34>)
 80044b4:	f840 3d18 	str.w	r3, [r0, #-24]!
 80044b8:	f001 f9d4 	bl	8005864 <tcpip_apimsg>
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80044bc:	4605      	mov	r5, r0
 80044be:	b110      	cbz	r0, 80044c6 <netconn_delete+0x26>
  }

  netconn_free(conn);

  return ERR_OK;
}
 80044c0:	4628      	mov	r0, r5
 80044c2:	b007      	add	sp, #28
 80044c4:	bd30      	pop	{r4, r5, pc}
  netconn_free(conn);
 80044c6:	4620      	mov	r0, r4
 80044c8:	f000 fbe5 	bl	8004c96 <netconn_free>
  return ERR_OK;
 80044cc:	e7f8      	b.n	80044c0 <netconn_delete+0x20>
    return ERR_OK;
 80044ce:	2500      	movs	r5, #0
 80044d0:	e7f6      	b.n	80044c0 <netconn_delete+0x20>
 80044d2:	bf00      	nop
 80044d4:	08004d61 	.word	0x08004d61

080044d8 <netconn_connect>:
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 80044d8:	b170      	cbz	r0, 80044f8 <netconn_connect+0x20>
{
 80044da:	b500      	push	{lr}
 80044dc:	b087      	sub	sp, #28
#if LWIP_MPU_COMPATIBLE
  if (addr == NULL) {
    addr = IP_ADDR_ANY;
  }
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_REF(msg).msg.conn = conn;
 80044de:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80044e0:	9103      	str	r1, [sp, #12]
  API_MSG_VAR_REF(msg).msg.msg.bc.port = port;
 80044e2:	f8ad 2010 	strh.w	r2, [sp, #16]
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_connect, err);
 80044e6:	a806      	add	r0, sp, #24
 80044e8:	4b05      	ldr	r3, [pc, #20]	; (8004500 <netconn_connect+0x28>)
 80044ea:	f840 3d18 	str.w	r3, [r0, #-24]!
 80044ee:	f001 f9b9 	bl	8005864 <tcpip_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
}
 80044f2:	b007      	add	sp, #28
 80044f4:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 80044f8:	f06f 000e 	mvn.w	r0, #14
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	08004e0d 	.word	0x08004e0d

08004504 <netconn_disconnect>:
netconn_disconnect(struct netconn *conn)
{
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 8004504:	b158      	cbz	r0, 800451e <netconn_disconnect+0x1a>
{
 8004506:	b500      	push	{lr}
 8004508:	b087      	sub	sp, #28

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).msg.conn = conn;
 800450a:	9001      	str	r0, [sp, #4]
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_disconnect, err);
 800450c:	a806      	add	r0, sp, #24
 800450e:	4b05      	ldr	r3, [pc, #20]	; (8004524 <netconn_disconnect+0x20>)
 8004510:	f840 3d18 	str.w	r3, [r0, #-24]!
 8004514:	f001 f9a6 	bl	8005864 <tcpip_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
}
 8004518:	b007      	add	sp, #28
 800451a:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 800451e:	f06f 000e 	mvn.w	r0, #14
 8004522:	4770      	bx	lr
 8004524:	08004ebd 	.word	0x08004ebd

08004528 <netconn_send>:
netconn_send(struct netconn *conn, struct netbuf *buf)
{
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8004528:	b160      	cbz	r0, 8004544 <netconn_send+0x1c>
{
 800452a:	b500      	push	{lr}
 800452c:	b087      	sub	sp, #28

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));
  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).msg.conn = conn;
 800452e:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.msg.b = buf;
 8004530:	9103      	str	r1, [sp, #12]
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_send, err);
 8004532:	a806      	add	r0, sp, #24
 8004534:	4b05      	ldr	r3, [pc, #20]	; (800454c <netconn_send+0x24>)
 8004536:	f840 3d18 	str.w	r3, [r0, #-24]!
 800453a:	f001 f993 	bl	8005864 <tcpip_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
}
 800453e:	b007      	add	sp, #28
 8004540:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8004544:	f06f 000e 	mvn.w	r0, #14
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	08004efb 	.word	0x08004efb

08004550 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8004550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004552:	b087      	sub	sp, #28
 8004554:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8004556:	b358      	cbz	r0, 80045b0 <netconn_write_partly+0x60>
 8004558:	4604      	mov	r4, r0
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 800455a:	7800      	ldrb	r0, [r0, #0]
 800455c:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8004560:	2810      	cmp	r0, #16
 8004562:	d128      	bne.n	80045b6 <netconn_write_partly+0x66>
  if (size == 0) {
 8004564:	b352      	cbz	r2, 80045bc <netconn_write_partly+0x6c>
    return ERR_OK;
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8004566:	7f20      	ldrb	r0, [r4, #28]
 8004568:	f010 0f02 	tst.w	r0, #2
 800456c:	d104      	bne.n	8004578 <netconn_write_partly+0x28>
 800456e:	f013 0f04 	tst.w	r3, #4
 8004572:	d018      	beq.n	80045a6 <netconn_write_partly+0x56>
 8004574:	2001      	movs	r0, #1
 8004576:	e000      	b.n	800457a <netconn_write_partly+0x2a>
 8004578:	2001      	movs	r0, #1
  if (dontblock && !bytes_written) {
 800457a:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 800457e:	b100      	cbz	r0, 8004582 <netconn_write_partly+0x32>
 8004580:	b305      	cbz	r5, 80045c4 <netconn_write_partly+0x74>
 8004582:	4617      	mov	r7, r2
    return ERR_VAL;
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).msg.conn = conn;
 8004584:	9401      	str	r4, [sp, #4]
  API_MSG_VAR_REF(msg).msg.msg.w.dataptr = dataptr;
 8004586:	9103      	str	r1, [sp, #12]
  API_MSG_VAR_REF(msg).msg.msg.w.apiflags = apiflags;
 8004588:	f88d 3014 	strb.w	r3, [sp, #20]
  API_MSG_VAR_REF(msg).msg.msg.w.len = size;
 800458c:	9204      	str	r2, [sp, #16]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_write, err);
 800458e:	a806      	add	r0, sp, #24
 8004590:	4b0e      	ldr	r3, [pc, #56]	; (80045cc <netconn_write_partly+0x7c>)
 8004592:	f840 3d18 	str.w	r3, [r0, #-24]!
 8004596:	f001 f965 	bl	8005864 <tcpip_apimsg>
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 800459a:	4603      	mov	r3, r0
 800459c:	b978      	cbnz	r0, 80045be <netconn_write_partly+0x6e>
 800459e:	b175      	cbz	r5, 80045be <netconn_write_partly+0x6e>
    if (dontblock
 80045a0:	b91e      	cbnz	r6, 80045aa <netconn_write_partly+0x5a>
       ) {
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.msg.w.len;
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 80045a2:	602f      	str	r7, [r5, #0]
 80045a4:	e00b      	b.n	80045be <netconn_write_partly+0x6e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80045a6:	2000      	movs	r0, #0
 80045a8:	e7e7      	b.n	800457a <netconn_write_partly+0x2a>
      *bytes_written = API_MSG_VAR_REF(msg).msg.msg.w.len;
 80045aa:	9a04      	ldr	r2, [sp, #16]
 80045ac:	602a      	str	r2, [r5, #0]
 80045ae:	e006      	b.n	80045be <netconn_write_partly+0x6e>
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80045b0:	f06f 030e 	mvn.w	r3, #14
 80045b4:	e003      	b.n	80045be <netconn_write_partly+0x6e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 80045b6:	f06f 0305 	mvn.w	r3, #5
 80045ba:	e000      	b.n	80045be <netconn_write_partly+0x6e>
    return ERR_OK;
 80045bc:	2300      	movs	r3, #0
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
}
 80045be:	4618      	mov	r0, r3
 80045c0:	b007      	add	sp, #28
 80045c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_VAL;
 80045c4:	f06f 0305 	mvn.w	r3, #5
 80045c8:	e7f9      	b.n	80045be <netconn_write_partly+0x6e>
 80045ca:	bf00      	nop
 80045cc:	08004f5f 	.word	0x08004f5f

080045d0 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 80045d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045d4:	4614      	mov	r4, r2
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox)) {
 80045d6:	b138      	cbz	r0, 80045e8 <recv_udp+0x18>
 80045d8:	4698      	mov	r8, r3
 80045da:	4605      	mov	r5, r0
 80045dc:	f100 0610 	add.w	r6, r0, #16
 80045e0:	4630      	mov	r0, r6
 80045e2:	f006 fa5b 	bl	800aa9c <sys_mbox_valid>
 80045e6:	b920      	cbnz	r0, 80045f2 <recv_udp+0x22>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80045e8:	4620      	mov	r0, r4
 80045ea:	f002 fbd5 	bl	8006d98 <pbuf_free>
    return;
 80045ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80045f2:	2006      	movs	r0, #6
 80045f4:	f002 fa40 	bl	8006a78 <memp_malloc>
  if (buf == NULL) {
 80045f8:	4607      	mov	r7, r0
 80045fa:	b1c0      	cbz	r0, 800462e <recv_udp+0x5e>
    pbuf_free(p);
    return;
  } else {
    buf->p = p;
 80045fc:	6004      	str	r4, [r0, #0]
    buf->ptr = p;
 80045fe:	6044      	str	r4, [r0, #4]
    ip_addr_set(&buf->addr, addr);
 8004600:	f1b8 0f00 	cmp.w	r8, #0
 8004604:	d018      	beq.n	8004638 <recv_udp+0x68>
 8004606:	f8d8 3000 	ldr.w	r3, [r8]
 800460a:	60bb      	str	r3, [r7, #8]
    buf->port = port;
 800460c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8004610:	81bb      	strh	r3, [r7, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8004612:	8924      	ldrh	r4, [r4, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8004614:	4639      	mov	r1, r7
 8004616:	4630      	mov	r0, r6
 8004618:	f006 f9ee 	bl	800a9f8 <sys_mbox_trypost>
 800461c:	b970      	cbnz	r0, 800463c <recv_udp+0x6c>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800461e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004620:	b11b      	cbz	r3, 800462a <recv_udp+0x5a>
 8004622:	4622      	mov	r2, r4
 8004624:	2100      	movs	r1, #0
 8004626:	4628      	mov	r0, r5
 8004628:	4798      	blx	r3
 800462a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_free(p);
 800462e:	4620      	mov	r0, r4
 8004630:	f002 fbb2 	bl	8006d98 <pbuf_free>
    return;
 8004634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ip_addr_set(&buf->addr, addr);
 8004638:	2300      	movs	r3, #0
 800463a:	e7e6      	b.n	800460a <recv_udp+0x3a>
    netbuf_delete(buf);
 800463c:	4638      	mov	r0, r7
 800463e:	f000 fcc1 	bl	8004fc4 <netbuf_delete>
    return;
 8004642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004648 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8004648:	b510      	push	{r4, lr}
 800464a:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800464c:	6844      	ldr	r4, [r0, #4]
  tcp_arg(pcb, conn);
 800464e:	4620      	mov	r0, r4
 8004650:	f002 fdf2 	bl	8007238 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8004654:	4908      	ldr	r1, [pc, #32]	; (8004678 <setup_tcp+0x30>)
 8004656:	4620      	mov	r0, r4
 8004658:	f002 fdf0 	bl	800723c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800465c:	4907      	ldr	r1, [pc, #28]	; (800467c <setup_tcp+0x34>)
 800465e:	4620      	mov	r0, r4
 8004660:	f002 fdef 	bl	8007242 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8004664:	2202      	movs	r2, #2
 8004666:	4906      	ldr	r1, [pc, #24]	; (8004680 <setup_tcp+0x38>)
 8004668:	4620      	mov	r0, r4
 800466a:	f002 fdf1 	bl	8007250 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800466e:	4905      	ldr	r1, [pc, #20]	; (8004684 <setup_tcp+0x3c>)
 8004670:	4620      	mov	r0, r4
 8004672:	f002 fde8 	bl	8007246 <tcp_err>
 8004676:	bd10      	pop	{r4, pc}
 8004678:	08004b85 	.word	0x08004b85
 800467c:	08004b35 	.word	0x08004b35
 8004680:	08004ad9 	.word	0x08004ad9
 8004684:	0800475b 	.word	0x0800475b

08004688 <pcb_new>:
 * @param msg the api_msg_msg describing the connection type
 * @return msg->conn->err, but the return value is currently ignored
 */
static void
pcb_new(struct api_msg_msg *msg)
{
 8004688:	b538      	push	{r3, r4, r5, lr}
 800468a:	4604      	mov	r4, r0
  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800468c:	6805      	ldr	r5, [r0, #0]

  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 800468e:	782b      	ldrb	r3, [r5, #0]
 8004690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004694:	2b10      	cmp	r3, #16
 8004696:	d017      	beq.n	80046c8 <pcb_new+0x40>
 8004698:	2b20      	cmp	r3, #32
 800469a:	d11f      	bne.n	80046dc <pcb_new+0x54>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new();
 800469c:	f005 fd46 	bl	800a12c <udp_new>
 80046a0:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.udp != NULL) {
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	b142      	cbz	r2, 80046ba <pcb_new+0x32>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	2b22      	cmp	r3, #34	; 0x22
 80046ac:	d009      	beq.n	80046c2 <pcb_new+0x3a>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80046ae:	6823      	ldr	r3, [r4, #0]
 80046b0:	461a      	mov	r2, r3
 80046b2:	490d      	ldr	r1, [pc, #52]	; (80046e8 <pcb_new+0x60>)
 80046b4:	6858      	ldr	r0, [r3, #4]
 80046b6:	f005 fd19 	bl	800a0ec <udp_recv>
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
    return;
  }
  if (msg->conn->pcb.ip == NULL) {
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	b183      	cbz	r3, 80046e2 <pcb_new+0x5a>
 80046c0:	bd38      	pop	{r3, r4, r5, pc}
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80046c2:	2301      	movs	r3, #1
 80046c4:	7413      	strb	r3, [r2, #16]
 80046c6:	e7f2      	b.n	80046ae <pcb_new+0x26>
    msg->conn->pcb.tcp = tcp_new();
 80046c8:	f003 fa7a 	bl	8007bc0 <tcp_new>
 80046cc:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.tcp != NULL) {
 80046ce:	6820      	ldr	r0, [r4, #0]
 80046d0:	6843      	ldr	r3, [r0, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0f1      	beq.n	80046ba <pcb_new+0x32>
      setup_tcp(msg->conn);
 80046d6:	f7ff ffb7 	bl	8004648 <setup_tcp>
 80046da:	e7ee      	b.n	80046ba <pcb_new+0x32>
    msg->err = ERR_VAL;
 80046dc:	23fa      	movs	r3, #250	; 0xfa
 80046de:	7103      	strb	r3, [r0, #4]
    return;
 80046e0:	bd38      	pop	{r3, r4, r5, pc}
    msg->err = ERR_MEM;
 80046e2:	23ff      	movs	r3, #255	; 0xff
 80046e4:	7123      	strb	r3, [r4, #4]
 80046e6:	e7eb      	b.n	80046c0 <pcb_new+0x38>
 80046e8:	080045d1 	.word	0x080045d1

080046ec <lwip_netconn_do_connected>:

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;

  if (conn == NULL) {
 80046ec:	b390      	cbz	r0, 8004754 <lwip_netconn_do_connected+0x68>
{
 80046ee:	b570      	push	{r4, r5, r6, lr}
 80046f0:	4604      	mov	r4, r0
    return ERR_VAL;
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 80046f2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 80046f4:	b30b      	cbz	r3, 800473a <lwip_netconn_do_connected+0x4e>
    conn->current_msg->err = err;
 80046f6:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80046f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80046fa:	681d      	ldr	r5, [r3, #0]
 80046fc:	350c      	adds	r5, #12
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 80046fe:	7823      	ldrb	r3, [r4, #0]
 8004700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004704:	2b10      	cmp	r3, #16
 8004706:	d01a      	beq.n	800473e <lwip_netconn_do_connected+0x52>
    setup_tcp(conn);
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8004708:	7f23      	ldrb	r3, [r4, #28]
 800470a:	f003 0604 	and.w	r6, r3, #4
  SET_NONBLOCKING_CONNECT(conn, 0);
 800470e:	f023 0304 	bic.w	r3, r3, #4
 8004712:	7723      	strb	r3, [r4, #28]
  LWIP_ASSERT("blocking connect state error",
    (was_blocking && op_completed_sem != NULL) ||
    (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8004714:	2300      	movs	r3, #0
 8004716:	6263      	str	r3, [r4, #36]	; 0x24
  conn->state = NETCONN_NONE;
 8004718:	7063      	strb	r3, [r4, #1]
  NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 800471a:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800471e:	f113 0f0b 	cmn.w	r3, #11
 8004722:	db01      	blt.n	8004728 <lwip_netconn_do_connected+0x3c>
 8004724:	2300      	movs	r3, #0
 8004726:	7223      	strb	r3, [r4, #8]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8004728:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800472a:	b11b      	cbz	r3, 8004734 <lwip_netconn_do_connected+0x48>
 800472c:	2200      	movs	r2, #0
 800472e:	2102      	movs	r1, #2
 8004730:	4620      	mov	r0, r4
 8004732:	4798      	blx	r3

  if (was_blocking) {
 8004734:	b14e      	cbz	r6, 800474a <lwip_netconn_do_connected+0x5e>
    sys_sem_signal(op_completed_sem);
  }
  return ERR_OK;
 8004736:	2000      	movs	r0, #0
}
 8004738:	bd70      	pop	{r4, r5, r6, pc}
  sys_sem_t* op_completed_sem = NULL;
 800473a:	2500      	movs	r5, #0
 800473c:	e7df      	b.n	80046fe <lwip_netconn_do_connected+0x12>
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800473e:	2a00      	cmp	r2, #0
 8004740:	d1e2      	bne.n	8004708 <lwip_netconn_do_connected+0x1c>
    setup_tcp(conn);
 8004742:	4620      	mov	r0, r4
 8004744:	f7ff ff80 	bl	8004648 <setup_tcp>
 8004748:	e7de      	b.n	8004708 <lwip_netconn_do_connected+0x1c>
    sys_sem_signal(op_completed_sem);
 800474a:	4628      	mov	r0, r5
 800474c:	f006 f9f0 	bl	800ab30 <sys_sem_signal>
  return ERR_OK;
 8004750:	2000      	movs	r0, #0
 8004752:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8004754:	f06f 0005 	mvn.w	r0, #5
 8004758:	4770      	bx	lr

0800475a <err_tcp>:
{
 800475a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475c:	4604      	mov	r4, r0
 800475e:	460e      	mov	r6, r1
  conn->pcb.tcp = NULL;
 8004760:	2300      	movs	r3, #0
 8004762:	6043      	str	r3, [r0, #4]
  SYS_ARCH_SET(conn->last_err, err);
 8004764:	7201      	strb	r1, [r0, #8]
  old_state = conn->state;
 8004766:	7845      	ldrb	r5, [r0, #1]
  conn->state = NETCONN_NONE;
 8004768:	7043      	strb	r3, [r0, #1]
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800476a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800476c:	b113      	cbz	r3, 8004774 <err_tcp+0x1a>
 800476e:	2200      	movs	r2, #0
 8004770:	2104      	movs	r1, #4
 8004772:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8004774:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004776:	b11b      	cbz	r3, 8004780 <err_tcp+0x26>
 8004778:	2200      	movs	r2, #0
 800477a:	4611      	mov	r1, r2
 800477c:	4620      	mov	r0, r4
 800477e:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8004780:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004782:	b11b      	cbz	r3, 800478c <err_tcp+0x32>
 8004784:	2200      	movs	r2, #0
 8004786:	2102      	movs	r1, #2
 8004788:	4620      	mov	r0, r4
 800478a:	4798      	blx	r3
  if (sys_mbox_valid(&conn->recvmbox)) {
 800478c:	f104 0710 	add.w	r7, r4, #16
 8004790:	4638      	mov	r0, r7
 8004792:	f006 f983 	bl	800aa9c <sys_mbox_valid>
 8004796:	b998      	cbnz	r0, 80047c0 <err_tcp+0x66>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8004798:	f104 0714 	add.w	r7, r4, #20
 800479c:	4638      	mov	r0, r7
 800479e:	f006 f97d 	bl	800aa9c <sys_mbox_valid>
 80047a2:	b990      	cbnz	r0, 80047ca <err_tcp+0x70>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80047a4:	2d01      	cmp	r5, #1
 80047a6:	d003      	beq.n	80047b0 <err_tcp+0x56>
 80047a8:	2d04      	cmp	r5, #4
 80047aa:	d001      	beq.n	80047b0 <err_tcp+0x56>
 80047ac:	2d03      	cmp	r5, #3
 80047ae:	d106      	bne.n	80047be <err_tcp+0x64>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80047b0:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80047b2:	f023 0204 	bic.w	r2, r3, #4
 80047b6:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 80047b8:	f013 0f04 	tst.w	r3, #4
 80047bc:	d00a      	beq.n	80047d4 <err_tcp+0x7a>
 80047be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sys_mbox_trypost(&conn->recvmbox, NULL);
 80047c0:	2100      	movs	r1, #0
 80047c2:	4638      	mov	r0, r7
 80047c4:	f006 f918 	bl	800a9f8 <sys_mbox_trypost>
 80047c8:	e7e6      	b.n	8004798 <err_tcp+0x3e>
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 80047ca:	2100      	movs	r1, #0
 80047cc:	4638      	mov	r0, r7
 80047ce:	f006 f913 	bl	800a9f8 <sys_mbox_trypost>
 80047d2:	e7e7      	b.n	80047a4 <err_tcp+0x4a>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80047d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
      conn->current_msg->err = err;
 80047d6:	711e      	strb	r6, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80047d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047da:	681d      	ldr	r5, [r3, #0]
 80047dc:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80047de:	4628      	mov	r0, r5
 80047e0:	f006 f9b3 	bl	800ab4a <sys_sem_valid>
      conn->current_msg = NULL;
 80047e4:	2300      	movs	r3, #0
 80047e6:	6263      	str	r3, [r4, #36]	; 0x24
      NETCONN_SET_SAFE_ERR(conn, err);
 80047e8:	b12c      	cbz	r4, 80047f6 <err_tcp+0x9c>
 80047ea:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80047ee:	f113 0f0b 	cmn.w	r3, #11
 80047f2:	db00      	blt.n	80047f6 <err_tcp+0x9c>
 80047f4:	7226      	strb	r6, [r4, #8]
      sys_sem_signal(op_completed_sem);
 80047f6:	4628      	mov	r0, r5
 80047f8:	f006 f99a 	bl	800ab30 <sys_sem_signal>
}
 80047fc:	e7df      	b.n	80047be <err_tcp+0x64>

080047fe <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80047fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004800:	4604      	mov	r4, r0
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004802:	6a41      	ldr	r1, [r0, #36]	; 0x24
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8004804:	6840      	ldr	r0, [r0, #4]
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8004806:	6a26      	ldr	r6, [r4, #32]
 8004808:	68ca      	ldr	r2, [r1, #12]
    conn->write_offset < conn->current_msg->msg.w.len);

  dontblock = netconn_is_nonblocking(conn) ||
 800480a:	7f23      	ldrb	r3, [r4, #28]
 800480c:	f013 0f02 	tst.w	r3, #2
 8004810:	d105      	bne.n	800481e <lwip_netconn_do_writemore+0x20>
       (conn->current_msg->msg.w.apiflags & NETCONN_DONTBLOCK);
 8004812:	7c0b      	ldrb	r3, [r1, #16]
  dontblock = netconn_is_nonblocking(conn) ||
 8004814:	f013 0f04 	tst.w	r3, #4
 8004818:	d027      	beq.n	800486a <lwip_netconn_do_writemore+0x6c>
 800481a:	2501      	movs	r5, #1
 800481c:	e000      	b.n	8004820 <lwip_netconn_do_writemore+0x22>
 800481e:	2501      	movs	r5, #1
 8004820:	b2ed      	uxtb	r5, r5
  apiflags = conn->current_msg->msg.w.apiflags;
 8004822:	7c0b      	ldrb	r3, [r1, #16]
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8004824:	6889      	ldr	r1, [r1, #8]
 8004826:	4431      	add	r1, r6
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 8004828:	1b92      	subs	r2, r2, r6
    if (diff > 0xffffUL) { /* max_u16_t */
 800482a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800482e:	d31e      	bcc.n	800486e <lwip_netconn_do_writemore+0x70>
      len = 0xffff;
      apiflags |= TCP_WRITE_FLAG_MORE;
 8004830:	f043 0302 	orr.w	r3, r3, #2
      len = 0xffff;
 8004834:	f64f 72ff 	movw	r2, #65535	; 0xffff
    } else {
      len = (u16_t)diff;
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 8004838:	f8b0 6066 	ldrh.w	r6, [r0, #102]	; 0x66
    if (available < len) {
 800483c:	42b2      	cmp	r2, r6
 800483e:	d93e      	bls.n	80048be <lwip_netconn_do_writemore+0xc0>
      /* don't try to write more than sendbuf */
      len = available;
      if (dontblock) {
 8004840:	b1bd      	cbz	r5, 8004872 <lwip_netconn_do_writemore+0x74>
        if (!len) {
 8004842:	b9c6      	cbnz	r6, 8004876 <lwip_netconn_do_writemore+0x78>
          err = ERR_WOULDBLOCK;
 8004844:	f06f 0706 	mvn.w	r7, #6
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 8004848:	2d00      	cmp	r5, #0
 800484a:	d03a      	beq.n	80048c2 <lwip_netconn_do_writemore+0xc4>
 800484c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	429e      	cmp	r6, r3
 8004852:	d236      	bcs.n	80048c2 <lwip_netconn_do_writemore+0xc4>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8004854:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004856:	b11b      	cbz	r3, 8004860 <lwip_netconn_do_writemore+0x62>
 8004858:	4632      	mov	r2, r6
 800485a:	2103      	movs	r1, #3
 800485c:	4620      	mov	r0, r4
 800485e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8004860:	7f23      	ldrb	r3, [r4, #28]
 8004862:	f043 0310 	orr.w	r3, r3, #16
 8004866:	7723      	strb	r3, [r4, #28]
 8004868:	e00d      	b.n	8004886 <lwip_netconn_do_writemore+0x88>
  dontblock = netconn_is_nonblocking(conn) ||
 800486a:	2500      	movs	r5, #0
 800486c:	e7d8      	b.n	8004820 <lwip_netconn_do_writemore+0x22>
      len = (u16_t)diff;
 800486e:	b292      	uxth	r2, r2
 8004870:	e7e2      	b.n	8004838 <lwip_netconn_do_writemore+0x3a>
        apiflags |= TCP_WRITE_FLAG_MORE;
 8004872:	f043 0302 	orr.w	r3, r3, #2
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8004876:	4632      	mov	r2, r6
 8004878:	f004 fdc6 	bl	8009408 <tcp_write>
 800487c:	4607      	mov	r7, r0
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800487e:	1c43      	adds	r3, r0, #1
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b01      	cmp	r3, #1
 8004884:	d9e0      	bls.n	8004848 <lwip_netconn_do_writemore+0x4a>
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
      }
    }

    if (err == ERR_OK) {
 8004886:	bb77      	cbnz	r7, 80048e6 <lwip_netconn_do_writemore+0xe8>
      err_t out_err;
      conn->write_offset += len;
 8004888:	6a23      	ldr	r3, [r4, #32]
 800488a:	441e      	add	r6, r3
 800488c:	6226      	str	r6, [r4, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 800488e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	4296      	cmp	r6, r2
 8004894:	d000      	beq.n	8004898 <lwip_netconn_do_writemore+0x9a>
 8004896:	b11d      	cbz	r5, 80048a0 <lwip_netconn_do_writemore+0xa2>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 8004898:	60de      	str	r6, [r3, #12]
        /* everything was written */
        write_finished = 1;
        conn->write_offset = 0;
 800489a:	2300      	movs	r3, #0
 800489c:	6223      	str	r3, [r4, #32]
        write_finished = 1;
 800489e:	2501      	movs	r5, #1
      }
      out_err = tcp_output(conn->pcb.tcp);
 80048a0:	6860      	ldr	r0, [r4, #4]
 80048a2:	f005 f80b 	bl	80098bc <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 80048a6:	f110 0f0b 	cmn.w	r0, #11
 80048aa:	db02      	blt.n	80048b2 <lwip_netconn_do_writemore+0xb4>
 80048ac:	f110 0f04 	cmn.w	r0, #4
 80048b0:	d120      	bne.n	80048f4 <lwip_netconn_do_writemore+0xf6>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
        write_finished = 1;
        conn->current_msg->msg.w.len = 0;
 80048b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048b4:	2200      	movs	r2, #0
 80048b6:	60da      	str	r2, [r3, #12]
        err = out_err;
 80048b8:	4607      	mov	r7, r0
        write_finished = 1;
 80048ba:	2501      	movs	r5, #1
 80048bc:	e01a      	b.n	80048f4 <lwip_netconn_do_writemore+0xf6>
 80048be:	4616      	mov	r6, r2
 80048c0:	e7d9      	b.n	8004876 <lwip_netconn_do_writemore+0x78>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80048c2:	6863      	ldr	r3, [r4, #4]
 80048c4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80048c8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80048cc:	d303      	bcc.n	80048d6 <lwip_netconn_do_writemore+0xd8>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80048ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d9d7      	bls.n	8004886 <lwip_netconn_do_writemore+0x88>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 80048d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0d4      	beq.n	8004886 <lwip_netconn_do_writemore+0x88>
 80048dc:	4632      	mov	r2, r6
 80048de:	2103      	movs	r1, #3
 80048e0:	4620      	mov	r0, r4
 80048e2:	4798      	blx	r3
 80048e4:	e7cf      	b.n	8004886 <lwip_netconn_do_writemore+0x88>
      }
    } else if ((err == ERR_MEM) && !dontblock) {
 80048e6:	f1b7 3fff 	cmp.w	r7, #4294967295
 80048ea:	d016      	beq.n	800491a <lwip_netconn_do_writemore+0x11c>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
      conn->current_msg->msg.w.len = 0;
 80048ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048ee:	2200      	movs	r2, #0
 80048f0:	60da      	str	r2, [r3, #12]
      write_finished = 1;
 80048f2:	2501      	movs	r5, #1
    }
  }
  if (write_finished) {
 80048f4:	b17d      	cbz	r5, 8004916 <lwip_netconn_do_writemore+0x118>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80048f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048f8:	6818      	ldr	r0, [r3, #0]
 80048fa:	300c      	adds	r0, #12
    conn->current_msg->err = err;
 80048fc:	711f      	strb	r7, [r3, #4]
    conn->current_msg = NULL;
 80048fe:	2300      	movs	r3, #0
 8004900:	6263      	str	r3, [r4, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8004902:	7063      	strb	r3, [r4, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 8004904:	b12c      	cbz	r4, 8004912 <lwip_netconn_do_writemore+0x114>
 8004906:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800490a:	f113 0f0b 	cmn.w	r3, #11
 800490e:	db00      	blt.n	8004912 <lwip_netconn_do_writemore+0x114>
 8004910:	7227      	strb	r7, [r4, #8]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
#endif
    {
      sys_sem_signal(op_completed_sem);
 8004912:	f006 f90d 	bl	800ab30 <sys_sem_signal>
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
}
 8004916:	2000      	movs	r0, #0
 8004918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if ((err == ERR_MEM) && !dontblock) {
 800491a:	2d00      	cmp	r5, #0
 800491c:	d1e6      	bne.n	80048ec <lwip_netconn_do_writemore+0xee>
      err_t out_err = tcp_output(conn->pcb.tcp);
 800491e:	6860      	ldr	r0, [r4, #4]
 8004920:	f004 ffcc 	bl	80098bc <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8004924:	f110 0f0b 	cmn.w	r0, #11
 8004928:	db02      	blt.n	8004930 <lwip_netconn_do_writemore+0x132>
 800492a:	f110 0f04 	cmn.w	r0, #4
 800492e:	d1e1      	bne.n	80048f4 <lwip_netconn_do_writemore+0xf6>
        conn->current_msg->msg.w.len = 0;
 8004930:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004932:	2200      	movs	r2, #0
 8004934:	60da      	str	r2, [r3, #12]
        err = out_err;
 8004936:	4607      	mov	r7, r0
        write_finished = 1;
 8004938:	2501      	movs	r5, #1
 800493a:	e7db      	b.n	80048f4 <lwip_netconn_do_writemore+0xf6>

0800493c <lwip_netconn_do_close_internal>:
{
 800493c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004940:	4604      	mov	r4, r0
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8004942:	6845      	ldr	r5, [r0, #4]
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004944:	6a43      	ldr	r3, [r0, #36]	; 0x24
  shut = conn->current_msg->msg.sd.shut;
 8004946:	7a1b      	ldrb	r3, [r3, #8]
  shut_rx = shut & NETCONN_SHUT_RD;
 8004948:	f003 0901 	and.w	r9, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 800494c:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 8004950:	2b03      	cmp	r3, #3
 8004952:	d012      	beq.n	800497a <lwip_netconn_do_close_internal+0x3e>
  } else if (shut_rx &&
 8004954:	f1b9 0f00 	cmp.w	r9, #0
 8004958:	d006      	beq.n	8004968 <lwip_netconn_do_close_internal+0x2c>
             ((tpcb->state == FIN_WAIT_1) ||
 800495a:	7e2a      	ldrb	r2, [r5, #24]
 800495c:	1f53      	subs	r3, r2, #5
 800495e:	b2db      	uxtb	r3, r3
  } else if (shut_rx &&
 8004960:	2b01      	cmp	r3, #1
 8004962:	d922      	bls.n	80049aa <lwip_netconn_do_close_internal+0x6e>
              (tpcb->state == FIN_WAIT_2) ||
 8004964:	2a08      	cmp	r2, #8
 8004966:	d022      	beq.n	80049ae <lwip_netconn_do_close_internal+0x72>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8004968:	f1b8 0f00 	cmp.w	r8, #0
 800496c:	d021      	beq.n	80049b2 <lwip_netconn_do_close_internal+0x76>
 800496e:	7fab      	ldrb	r3, [r5, #30]
 8004970:	f013 0f10 	tst.w	r3, #16
 8004974:	d11f      	bne.n	80049b6 <lwip_netconn_do_close_internal+0x7a>
    close = 0;
 8004976:	2700      	movs	r7, #0
 8004978:	e000      	b.n	800497c <lwip_netconn_do_close_internal+0x40>
    close = 1;
 800497a:	2701      	movs	r7, #1
  if (close) {
 800497c:	b9ef      	cbnz	r7, 80049ba <lwip_netconn_do_close_internal+0x7e>
  if (tpcb->state == LISTEN) {
 800497e:	7e2b      	ldrb	r3, [r5, #24]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d01f      	beq.n	80049c4 <lwip_netconn_do_close_internal+0x88>
    if (shut_rx) {
 8004984:	f1b9 0f00 	cmp.w	r9, #0
 8004988:	d121      	bne.n	80049ce <lwip_netconn_do_close_internal+0x92>
    if (shut_tx) {
 800498a:	f1b8 0f00 	cmp.w	r8, #0
 800498e:	d127      	bne.n	80049e0 <lwip_netconn_do_close_internal+0xa4>
    if (close) {
 8004990:	bb5f      	cbnz	r7, 80049ea <lwip_netconn_do_close_internal+0xae>
  if (close) {
 8004992:	b3a7      	cbz	r7, 80049fe <lwip_netconn_do_close_internal+0xc2>
      err = tcp_close(tpcb);
 8004994:	4628      	mov	r0, r5
 8004996:	f002 fef7 	bl	8007788 <tcp_close>
 800499a:	4606      	mov	r6, r0
  if (err == ERR_OK) {
 800499c:	2e00      	cmp	r6, #0
 800499e:	d046      	beq.n	8004a2e <lwip_netconn_do_close_internal+0xf2>
    if (err == ERR_MEM) {
 80049a0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80049a4:	d032      	beq.n	8004a0c <lwip_netconn_do_close_internal+0xd0>
      close_finished = 1;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e042      	b.n	8004a30 <lwip_netconn_do_close_internal+0xf4>
    close = 1;
 80049aa:	2701      	movs	r7, #1
 80049ac:	e7e6      	b.n	800497c <lwip_netconn_do_close_internal+0x40>
 80049ae:	2701      	movs	r7, #1
 80049b0:	e7e4      	b.n	800497c <lwip_netconn_do_close_internal+0x40>
    close = 0;
 80049b2:	2700      	movs	r7, #0
 80049b4:	e7e2      	b.n	800497c <lwip_netconn_do_close_internal+0x40>
    close = 1;
 80049b6:	2701      	movs	r7, #1
 80049b8:	e7e0      	b.n	800497c <lwip_netconn_do_close_internal+0x40>
    tcp_arg(tpcb, NULL);
 80049ba:	2100      	movs	r1, #0
 80049bc:	4628      	mov	r0, r5
 80049be:	f002 fc3b 	bl	8007238 <tcp_arg>
 80049c2:	e7dc      	b.n	800497e <lwip_netconn_do_close_internal+0x42>
    tcp_accept(tpcb, NULL);
 80049c4:	2100      	movs	r1, #0
 80049c6:	4628      	mov	r0, r5
 80049c8:	f002 fc40 	bl	800724c <tcp_accept>
 80049cc:	e7e1      	b.n	8004992 <lwip_netconn_do_close_internal+0x56>
      tcp_recv(tpcb, NULL);
 80049ce:	2100      	movs	r1, #0
 80049d0:	4628      	mov	r0, r5
 80049d2:	f002 fc33 	bl	800723c <tcp_recv>
      tcp_accept(tpcb, NULL);
 80049d6:	2100      	movs	r1, #0
 80049d8:	4628      	mov	r0, r5
 80049da:	f002 fc37 	bl	800724c <tcp_accept>
 80049de:	e7d4      	b.n	800498a <lwip_netconn_do_close_internal+0x4e>
      tcp_sent(tpcb, NULL);
 80049e0:	2100      	movs	r1, #0
 80049e2:	4628      	mov	r0, r5
 80049e4:	f002 fc2d 	bl	8007242 <tcp_sent>
 80049e8:	e7d2      	b.n	8004990 <lwip_netconn_do_close_internal+0x54>
      tcp_poll(tpcb, NULL, 0);
 80049ea:	2200      	movs	r2, #0
 80049ec:	4611      	mov	r1, r2
 80049ee:	4628      	mov	r0, r5
 80049f0:	f002 fc2e 	bl	8007250 <tcp_poll>
      tcp_err(tpcb, NULL);
 80049f4:	2100      	movs	r1, #0
 80049f6:	4628      	mov	r0, r5
 80049f8:	f002 fc25 	bl	8007246 <tcp_err>
 80049fc:	e7c9      	b.n	8004992 <lwip_netconn_do_close_internal+0x56>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80049fe:	4642      	mov	r2, r8
 8004a00:	4649      	mov	r1, r9
 8004a02:	4628      	mov	r0, r5
 8004a04:	f002 ff60 	bl	80078c8 <tcp_shutdown>
 8004a08:	4606      	mov	r6, r0
 8004a0a:	e7c7      	b.n	800499c <lwip_netconn_do_close_internal+0x60>
      if (netconn_is_nonblocking(conn)) {
 8004a0c:	7f23      	ldrb	r3, [r4, #28]
 8004a0e:	f013 0f02 	tst.w	r3, #2
 8004a12:	d13f      	bne.n	8004a94 <lwip_netconn_do_close_internal+0x158>
        if (conn->current_msg->msg.sd.polls_left == 0) {
 8004a14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a16:	7a5b      	ldrb	r3, [r3, #9]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d13f      	bne.n	8004a9c <lwip_netconn_do_close_internal+0x160>
          if (close) {
 8004a1c:	b90f      	cbnz	r7, 8004a22 <lwip_netconn_do_close_internal+0xe6>
          close_finished = 1;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e006      	b.n	8004a30 <lwip_netconn_do_close_internal+0xf4>
            tcp_abort(tpcb);
 8004a22:	4628      	mov	r0, r5
 8004a24:	f002 ffe0 	bl	80079e8 <tcp_abort>
          close_finished = 1;
 8004a28:	463b      	mov	r3, r7
            err = ERR_OK;
 8004a2a:	2600      	movs	r6, #0
 8004a2c:	e000      	b.n	8004a30 <lwip_netconn_do_close_internal+0xf4>
    close_finished = 1;
 8004a2e:	2301      	movs	r3, #1
  if (close_finished) {
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d035      	beq.n	8004aa0 <lwip_netconn_do_close_internal+0x164>
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8004a34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a36:	681d      	ldr	r5, [r3, #0]
 8004a38:	350c      	adds	r5, #12
    conn->current_msg->err = err;
 8004a3a:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	6263      	str	r3, [r4, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8004a40:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 8004a42:	b9ce      	cbnz	r6, 8004a78 <lwip_netconn_do_close_internal+0x13c>
      if (close) {
 8004a44:	b137      	cbz	r7, 8004a54 <lwip_netconn_do_close_internal+0x118>
        conn->pcb.tcp = NULL;
 8004a46:	6063      	str	r3, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8004a48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004a4a:	b11b      	cbz	r3, 8004a54 <lwip_netconn_do_close_internal+0x118>
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	2104      	movs	r1, #4
 8004a50:	4620      	mov	r0, r4
 8004a52:	4798      	blx	r3
      if (shut_rx) {
 8004a54:	f1b9 0f00 	cmp.w	r9, #0
 8004a58:	d005      	beq.n	8004a66 <lwip_netconn_do_close_internal+0x12a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8004a5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004a5c:	b11b      	cbz	r3, 8004a66 <lwip_netconn_do_close_internal+0x12a>
 8004a5e:	2200      	movs	r2, #0
 8004a60:	4611      	mov	r1, r2
 8004a62:	4620      	mov	r0, r4
 8004a64:	4798      	blx	r3
      if (shut_tx) {
 8004a66:	f1b8 0f00 	cmp.w	r8, #0
 8004a6a:	d005      	beq.n	8004a78 <lwip_netconn_do_close_internal+0x13c>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8004a6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004a6e:	b11b      	cbz	r3, 8004a78 <lwip_netconn_do_close_internal+0x13c>
 8004a70:	2200      	movs	r2, #0
 8004a72:	2102      	movs	r1, #2
 8004a74:	4620      	mov	r0, r4
 8004a76:	4798      	blx	r3
    NETCONN_SET_SAFE_ERR(conn, err);
 8004a78:	b12c      	cbz	r4, 8004a86 <lwip_netconn_do_close_internal+0x14a>
 8004a7a:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8004a7e:	f113 0f0b 	cmn.w	r3, #11
 8004a82:	db00      	blt.n	8004a86 <lwip_netconn_do_close_internal+0x14a>
 8004a84:	7226      	strb	r6, [r4, #8]
      sys_sem_signal(op_completed_sem);
 8004a86:	4628      	mov	r0, r5
 8004a88:	f006 f852 	bl	800ab30 <sys_sem_signal>
    return ERR_OK;
 8004a8c:	2600      	movs	r6, #0
}
 8004a8e:	4630      	mov	r0, r6
 8004a90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        close_finished = 1;
 8004a94:	2301      	movs	r3, #1
        err = ERR_WOULDBLOCK;
 8004a96:	f06f 0606 	mvn.w	r6, #6
 8004a9a:	e7c9      	b.n	8004a30 <lwip_netconn_do_close_internal+0xf4>
  u8_t close_finished = 0;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	e7c7      	b.n	8004a30 <lwip_netconn_do_close_internal+0xf4>
    if (shut_tx) {
 8004aa0:	f1b8 0f00 	cmp.w	r8, #0
 8004aa4:	d10d      	bne.n	8004ac2 <lwip_netconn_do_close_internal+0x186>
    tcp_poll(tpcb, poll_tcp, 1);
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	4908      	ldr	r1, [pc, #32]	; (8004acc <lwip_netconn_do_close_internal+0x190>)
 8004aaa:	4628      	mov	r0, r5
 8004aac:	f002 fbd0 	bl	8007250 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8004ab0:	4907      	ldr	r1, [pc, #28]	; (8004ad0 <lwip_netconn_do_close_internal+0x194>)
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	f002 fbc7 	bl	8007246 <tcp_err>
    tcp_arg(tpcb, conn);
 8004ab8:	4621      	mov	r1, r4
 8004aba:	4628      	mov	r0, r5
 8004abc:	f002 fbbc 	bl	8007238 <tcp_arg>
  return err;
 8004ac0:	e7e5      	b.n	8004a8e <lwip_netconn_do_close_internal+0x152>
      tcp_sent(tpcb, sent_tcp);
 8004ac2:	4904      	ldr	r1, [pc, #16]	; (8004ad4 <lwip_netconn_do_close_internal+0x198>)
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	f002 fbbc 	bl	8007242 <tcp_sent>
 8004aca:	e7ec      	b.n	8004aa6 <lwip_netconn_do_close_internal+0x16a>
 8004acc:	08004ad9 	.word	0x08004ad9
 8004ad0:	0800475b 	.word	0x0800475b
 8004ad4:	08004b35 	.word	0x08004b35

08004ad8 <poll_tcp>:
{
 8004ad8:	b510      	push	{r4, lr}
 8004ada:	4604      	mov	r4, r0
  if (conn->state == NETCONN_WRITE) {
 8004adc:	7843      	ldrb	r3, [r0, #1]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d01b      	beq.n	8004b1a <poll_tcp+0x42>
  } else if (conn->state == NETCONN_CLOSE) {
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d01c      	beq.n	8004b20 <poll_tcp+0x48>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8004ae6:	7f23      	ldrb	r3, [r4, #28]
 8004ae8:	f013 0f10 	tst.w	r3, #16
 8004aec:	d013      	beq.n	8004b16 <poll_tcp+0x3e>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8004aee:	6862      	ldr	r2, [r4, #4]
 8004af0:	b18a      	cbz	r2, 8004b16 <poll_tcp+0x3e>
 8004af2:	f8b2 1066 	ldrh.w	r1, [r2, #102]	; 0x66
 8004af6:	f5b1 6f86 	cmp.w	r1, #1072	; 0x430
 8004afa:	d30c      	bcc.n	8004b16 <poll_tcp+0x3e>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8004afc:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8004b00:	2a04      	cmp	r2, #4
 8004b02:	d808      	bhi.n	8004b16 <poll_tcp+0x3e>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8004b04:	f023 0310 	bic.w	r3, r3, #16
 8004b08:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8004b0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b0c:	b11b      	cbz	r3, 8004b16 <poll_tcp+0x3e>
 8004b0e:	2200      	movs	r2, #0
 8004b10:	2102      	movs	r1, #2
 8004b12:	4620      	mov	r0, r4
 8004b14:	4798      	blx	r3
}
 8004b16:	2000      	movs	r0, #0
 8004b18:	bd10      	pop	{r4, pc}
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8004b1a:	f7ff fe70 	bl	80047fe <lwip_netconn_do_writemore>
 8004b1e:	e7e2      	b.n	8004ae6 <poll_tcp+0xe>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8004b20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004b22:	b11b      	cbz	r3, 8004b2c <poll_tcp+0x54>
 8004b24:	7a5a      	ldrb	r2, [r3, #9]
 8004b26:	b10a      	cbz	r2, 8004b2c <poll_tcp+0x54>
      conn->current_msg->msg.sd.polls_left--;
 8004b28:	3a01      	subs	r2, #1
 8004b2a:	725a      	strb	r2, [r3, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	f7ff ff05 	bl	800493c <lwip_netconn_do_close_internal>
 8004b32:	e7d8      	b.n	8004ae6 <poll_tcp+0xe>

08004b34 <sent_tcp>:
  if (conn) {
 8004b34:	b320      	cbz	r0, 8004b80 <sent_tcp+0x4c>
{
 8004b36:	b538      	push	{r3, r4, r5, lr}
 8004b38:	4604      	mov	r4, r0
 8004b3a:	4615      	mov	r5, r2
    if (conn->state == NETCONN_WRITE) {
 8004b3c:	7843      	ldrb	r3, [r0, #1]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d018      	beq.n	8004b74 <sent_tcp+0x40>
    } else if (conn->state == NETCONN_CLOSE) {
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d019      	beq.n	8004b7a <sent_tcp+0x46>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8004b46:	6863      	ldr	r3, [r4, #4]
 8004b48:	b193      	cbz	r3, 8004b70 <sent_tcp+0x3c>
 8004b4a:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8004b4e:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8004b52:	d30d      	bcc.n	8004b70 <sent_tcp+0x3c>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8004b54:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d809      	bhi.n	8004b70 <sent_tcp+0x3c>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8004b5c:	7f23      	ldrb	r3, [r4, #28]
 8004b5e:	f023 0310 	bic.w	r3, r3, #16
 8004b62:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8004b64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b66:	b11b      	cbz	r3, 8004b70 <sent_tcp+0x3c>
 8004b68:	462a      	mov	r2, r5
 8004b6a:	2102      	movs	r1, #2
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	4798      	blx	r3
}
 8004b70:	2000      	movs	r0, #0
 8004b72:	bd38      	pop	{r3, r4, r5, pc}
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8004b74:	f7ff fe43 	bl	80047fe <lwip_netconn_do_writemore>
 8004b78:	e7e5      	b.n	8004b46 <sent_tcp+0x12>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8004b7a:	f7ff fedf 	bl	800493c <lwip_netconn_do_close_internal>
 8004b7e:	e7e2      	b.n	8004b46 <sent_tcp+0x12>
}
 8004b80:	2000      	movs	r0, #0
 8004b82:	4770      	bx	lr

08004b84 <recv_tcp>:
{
 8004b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (conn == NULL) {
 8004b88:	b368      	cbz	r0, 8004be6 <recv_tcp+0x62>
 8004b8a:	4605      	mov	r5, r0
 8004b8c:	461e      	mov	r6, r3
 8004b8e:	4614      	mov	r4, r2
 8004b90:	460f      	mov	r7, r1
  if (!sys_mbox_valid(&conn->recvmbox)) {
 8004b92:	f100 0810 	add.w	r8, r0, #16
 8004b96:	4640      	mov	r0, r8
 8004b98:	f005 ff80 	bl	800aa9c <sys_mbox_valid>
 8004b9c:	b948      	cbnz	r0, 8004bb2 <recv_tcp+0x2e>
    if (p != NULL) {
 8004b9e:	b32c      	cbz	r4, 8004bec <recv_tcp+0x68>
      tcp_recved(pcb, p->tot_len);
 8004ba0:	8921      	ldrh	r1, [r4, #8]
 8004ba2:	4638      	mov	r0, r7
 8004ba4:	f002 faf7 	bl	8007196 <tcp_recved>
      pbuf_free(p);
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f002 f8f5 	bl	8006d98 <pbuf_free>
    return ERR_OK;
 8004bae:	2400      	movs	r4, #0
 8004bb0:	e014      	b.n	8004bdc <recv_tcp+0x58>
  if (err != ERR_OK) {
 8004bb2:	b12e      	cbz	r6, 8004bc0 <recv_tcp+0x3c>
    NETCONN_SET_SAFE_ERR(conn, err);
 8004bb4:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8004bb8:	f113 0f0b 	cmn.w	r3, #11
 8004bbc:	db00      	blt.n	8004bc0 <recv_tcp+0x3c>
 8004bbe:	722e      	strb	r6, [r5, #8]
  if (p != NULL) {
 8004bc0:	b17c      	cbz	r4, 8004be2 <recv_tcp+0x5e>
    len = p->tot_len;
 8004bc2:	8926      	ldrh	r6, [r4, #8]
  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 8004bc4:	4621      	mov	r1, r4
 8004bc6:	4640      	mov	r0, r8
 8004bc8:	f005 ff16 	bl	800a9f8 <sys_mbox_trypost>
 8004bcc:	4604      	mov	r4, r0
 8004bce:	b978      	cbnz	r0, 8004bf0 <recv_tcp+0x6c>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8004bd0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004bd2:	b11b      	cbz	r3, 8004bdc <recv_tcp+0x58>
 8004bd4:	4632      	mov	r2, r6
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	4628      	mov	r0, r5
 8004bda:	4798      	blx	r3
}
 8004bdc:	4620      	mov	r0, r4
 8004bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    len = 0;
 8004be2:	2600      	movs	r6, #0
 8004be4:	e7ee      	b.n	8004bc4 <recv_tcp+0x40>
    return ERR_VAL;
 8004be6:	f06f 0405 	mvn.w	r4, #5
 8004bea:	e7f7      	b.n	8004bdc <recv_tcp+0x58>
    return ERR_OK;
 8004bec:	2400      	movs	r4, #0
 8004bee:	e7f5      	b.n	8004bdc <recv_tcp+0x58>
    return ERR_MEM;
 8004bf0:	f04f 34ff 	mov.w	r4, #4294967295
 8004bf4:	e7f2      	b.n	8004bdc <recv_tcp+0x58>

08004bf6 <lwip_netconn_do_newconn>:
{
 8004bf6:	b510      	push	{r4, lr}
 8004bf8:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8004bfe:	6803      	ldr	r3, [r0, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	b173      	cbz	r3, 8004c22 <lwip_netconn_do_newconn+0x2c>
  TCPIP_APIMSG_ACK(msg);
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	b13b      	cbz	r3, 8004c18 <lwip_netconn_do_newconn+0x22>
 8004c08:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004c0c:	f112 0f0b 	cmn.w	r2, #11
 8004c10:	db02      	blt.n	8004c18 <lwip_netconn_do_newconn+0x22>
 8004c12:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8004c16:	721a      	strb	r2, [r3, #8]
 8004c18:	6820      	ldr	r0, [r4, #0]
 8004c1a:	300c      	adds	r0, #12
 8004c1c:	f005 ff88 	bl	800ab30 <sys_sem_signal>
 8004c20:	bd10      	pop	{r4, pc}
    pcb_new(msg);
 8004c22:	f7ff fd31 	bl	8004688 <pcb_new>
 8004c26:	e7ed      	b.n	8004c04 <lwip_netconn_do_newconn+0xe>

08004c28 <netconn_alloc>:
{
 8004c28:	b570      	push	{r4, r5, r6, lr}
 8004c2a:	4605      	mov	r5, r0
 8004c2c:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8004c2e:	2007      	movs	r0, #7
 8004c30:	f001 ff22 	bl	8006a78 <memp_malloc>
  if (conn == NULL) {
 8004c34:	4604      	mov	r4, r0
 8004c36:	b318      	cbz	r0, 8004c80 <netconn_alloc+0x58>
  conn->last_err = ERR_OK;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	7203      	strb	r3, [r0, #8]
  conn->type = t;
 8004c3c:	7005      	strb	r5, [r0, #0]
  conn->pcb.tcp = NULL;
 8004c3e:	6043      	str	r3, [r0, #4]
  switch(NETCONNTYPE_GROUP(t)) {
 8004c40:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8004c44:	2d10      	cmp	r5, #16
 8004c46:	d001      	beq.n	8004c4c <netconn_alloc+0x24>
 8004c48:	2d20      	cmp	r5, #32
 8004c4a:	d11e      	bne.n	8004c8a <netconn_alloc+0x62>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8004c4c:	f104 0510 	add.w	r5, r4, #16
 8004c50:	2100      	movs	r1, #0
 8004c52:	4628      	mov	r0, r5
 8004c54:	f005 feaa 	bl	800a9ac <sys_mbox_new>
 8004c58:	b9b8      	cbnz	r0, 8004c8a <netconn_alloc+0x62>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	f104 000c 	add.w	r0, r4, #12
 8004c60:	f005 ff25 	bl	800aaae <sys_sem_new>
 8004c64:	b970      	cbnz	r0, 8004c84 <netconn_alloc+0x5c>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8004c66:	f104 0014 	add.w	r0, r4, #20
 8004c6a:	f005 ff1d 	bl	800aaa8 <sys_mbox_set_invalid>
  conn->state        = NETCONN_NONE;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	7063      	strb	r3, [r4, #1]
  conn->socket       = -1;
 8004c72:	f04f 32ff 	mov.w	r2, #4294967295
 8004c76:	61a2      	str	r2, [r4, #24]
  conn->callback     = callback;
 8004c78:	62a6      	str	r6, [r4, #40]	; 0x28
  conn->current_msg  = NULL;
 8004c7a:	6263      	str	r3, [r4, #36]	; 0x24
  conn->write_offset = 0;
 8004c7c:	6223      	str	r3, [r4, #32]
  conn->flags = 0;
 8004c7e:	7723      	strb	r3, [r4, #28]
}
 8004c80:	4620      	mov	r0, r4
 8004c82:	bd70      	pop	{r4, r5, r6, pc}
    sys_mbox_free(&conn->recvmbox);
 8004c84:	4628      	mov	r0, r5
 8004c86:	f005 fe9f 	bl	800a9c8 <sys_mbox_free>
  memp_free(MEMP_NETCONN, conn);
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	2007      	movs	r0, #7
 8004c8e:	f001 ff01 	bl	8006a94 <memp_free>
  return NULL;
 8004c92:	2400      	movs	r4, #0
 8004c94:	e7f4      	b.n	8004c80 <netconn_alloc+0x58>

08004c96 <netconn_free>:
{
 8004c96:	b538      	push	{r3, r4, r5, lr}
 8004c98:	4604      	mov	r4, r0
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8004c9a:	3010      	adds	r0, #16
 8004c9c:	f005 fefe 	bl	800aa9c <sys_mbox_valid>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8004ca0:	f104 0014 	add.w	r0, r4, #20
 8004ca4:	f005 fefa 	bl	800aa9c <sys_mbox_valid>
  sys_sem_free(&conn->op_completed);
 8004ca8:	f104 050c 	add.w	r5, r4, #12
 8004cac:	4628      	mov	r0, r5
 8004cae:	f005 ff47 	bl	800ab40 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8004cb2:	4628      	mov	r0, r5
 8004cb4:	f005 ff4f 	bl	800ab56 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 8004cb8:	4621      	mov	r1, r4
 8004cba:	2007      	movs	r0, #7
 8004cbc:	f001 feea 	bl	8006a94 <memp_free>
 8004cc0:	bd38      	pop	{r3, r4, r5, pc}

08004cc2 <netconn_drain>:
{
 8004cc2:	b570      	push	{r4, r5, r6, lr}
 8004cc4:	b082      	sub	sp, #8
 8004cc6:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8004cc8:	f100 0510 	add.w	r5, r0, #16
 8004ccc:	4628      	mov	r0, r5
 8004cce:	f005 fee5 	bl	800aa9c <sys_mbox_valid>
 8004cd2:	b980      	cbnz	r0, 8004cf6 <netconn_drain+0x34>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8004cd4:	f104 0514 	add.w	r5, r4, #20
 8004cd8:	4628      	mov	r0, r5
 8004cda:	f005 fedf 	bl	800aa9c <sys_mbox_valid>
 8004cde:	bb20      	cbnz	r0, 8004d2a <netconn_drain+0x68>
 8004ce0:	e03c      	b.n	8004d5c <netconn_drain+0x9a>
        if (mem != NULL) {
 8004ce2:	9e01      	ldr	r6, [sp, #4]
 8004ce4:	b13e      	cbz	r6, 8004cf6 <netconn_drain+0x34>
          if (conn->pcb.tcp != NULL) {
 8004ce6:	6860      	ldr	r0, [r4, #4]
 8004ce8:	b110      	cbz	r0, 8004cf0 <netconn_drain+0x2e>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8004cea:	8931      	ldrh	r1, [r6, #8]
 8004cec:	f002 fa53 	bl	8007196 <tcp_recved>
          pbuf_free(p);
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	f002 f851 	bl	8006d98 <pbuf_free>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8004cf6:	a901      	add	r1, sp, #4
 8004cf8:	4628      	mov	r0, r5
 8004cfa:	f005 febb 	bl	800aa74 <sys_arch_mbox_tryfetch>
 8004cfe:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004d02:	d008      	beq.n	8004d16 <netconn_drain+0x54>
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8004d04:	7823      	ldrb	r3, [r4, #0]
 8004d06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d0a:	2b10      	cmp	r3, #16
 8004d0c:	d0e9      	beq.n	8004ce2 <netconn_drain+0x20>
        netbuf_delete((struct netbuf *)mem);
 8004d0e:	9801      	ldr	r0, [sp, #4]
 8004d10:	f000 f958 	bl	8004fc4 <netbuf_delete>
 8004d14:	e7ef      	b.n	8004cf6 <netconn_drain+0x34>
    sys_mbox_free(&conn->recvmbox);
 8004d16:	4628      	mov	r0, r5
 8004d18:	f005 fe56 	bl	800a9c8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	f005 fec3 	bl	800aaa8 <sys_mbox_set_invalid>
 8004d22:	e7d7      	b.n	8004cd4 <netconn_drain+0x12>
      netconn_free(newconn);
 8004d24:	4620      	mov	r0, r4
 8004d26:	f7ff ffb6 	bl	8004c96 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8004d2a:	a901      	add	r1, sp, #4
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	f005 fea1 	bl	800aa74 <sys_arch_mbox_tryfetch>
 8004d32:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004d36:	d00b      	beq.n	8004d50 <netconn_drain+0x8e>
      struct netconn *newconn = (struct netconn *)mem;
 8004d38:	9c01      	ldr	r4, [sp, #4]
      netconn_drain(newconn);
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	f7ff ffc1 	bl	8004cc2 <netconn_drain>
      if (newconn->pcb.tcp != NULL) {
 8004d40:	6860      	ldr	r0, [r4, #4]
 8004d42:	2800      	cmp	r0, #0
 8004d44:	d0ee      	beq.n	8004d24 <netconn_drain+0x62>
        tcp_abort(newconn->pcb.tcp);
 8004d46:	f002 fe4f 	bl	80079e8 <tcp_abort>
        newconn->pcb.tcp = NULL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	6063      	str	r3, [r4, #4]
 8004d4e:	e7e9      	b.n	8004d24 <netconn_drain+0x62>
    sys_mbox_free(&conn->acceptmbox);
 8004d50:	4628      	mov	r0, r5
 8004d52:	f005 fe39 	bl	800a9c8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8004d56:	4628      	mov	r0, r5
 8004d58:	f005 fea6 	bl	800aaa8 <sys_mbox_set_invalid>
}
 8004d5c:	b002      	add	sp, #8
 8004d5e:	bd70      	pop	{r4, r5, r6, pc}

08004d60 <lwip_netconn_do_delconn>:
{
 8004d60:	b510      	push	{r4, lr}
 8004d62:	4604      	mov	r4, r0
  enum netconn_state state = msg->conn->state;
 8004d64:	6800      	ldr	r0, [r0, #0]
 8004d66:	7843      	ldrb	r3, [r0, #1]
  if (((state != NETCONN_NONE) &&
 8004d68:	b1cb      	cbz	r3, 8004d9e <lwip_netconn_do_delconn+0x3e>
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d017      	beq.n	8004d9e <lwip_netconn_do_delconn+0x3e>
       (state != NETCONN_LISTEN) &&
 8004d6e:	2b03      	cmp	r3, #3
 8004d70:	d015      	beq.n	8004d9e <lwip_netconn_do_delconn+0x3e>
    msg->err = ERR_INPROGRESS;
 8004d72:	23fb      	movs	r3, #251	; 0xfb
 8004d74:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8004d76:	6820      	ldr	r0, [r4, #0]
 8004d78:	300c      	adds	r0, #12
 8004d7a:	f005 fee6 	bl	800ab4a <sys_sem_valid>
 8004d7e:	b168      	cbz	r0, 8004d9c <lwip_netconn_do_delconn+0x3c>
    TCPIP_APIMSG_ACK(msg);
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	b13b      	cbz	r3, 8004d94 <lwip_netconn_do_delconn+0x34>
 8004d84:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004d88:	f112 0f0b 	cmn.w	r2, #11
 8004d8c:	db02      	blt.n	8004d94 <lwip_netconn_do_delconn+0x34>
 8004d8e:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8004d92:	721a      	strb	r2, [r3, #8]
 8004d94:	6820      	ldr	r0, [r4, #0]
 8004d96:	300c      	adds	r0, #12
 8004d98:	f005 feca 	bl	800ab30 <sys_sem_signal>
 8004d9c:	bd10      	pop	{r4, pc}
       (state != NETCONN_CONNECT)) ||
 8004d9e:	2b03      	cmp	r3, #3
 8004da0:	d024      	beq.n	8004dec <lwip_netconn_do_delconn+0x8c>
    msg->err = ERR_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	7123      	strb	r3, [r4, #4]
    netconn_drain(msg->conn);
 8004da6:	f7ff ff8c 	bl	8004cc2 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 8004daa:	6822      	ldr	r2, [r4, #0]
 8004dac:	6851      	ldr	r1, [r2, #4]
 8004dae:	b179      	cbz	r1, 8004dd0 <lwip_netconn_do_delconn+0x70>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8004db0:	7813      	ldrb	r3, [r2, #0]
 8004db2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004db6:	2b10      	cmp	r3, #16
 8004db8:	d01d      	beq.n	8004df6 <lwip_netconn_do_delconn+0x96>
 8004dba:	2b20      	cmp	r3, #32
 8004dbc:	d105      	bne.n	8004dca <lwip_netconn_do_delconn+0x6a>
        msg->conn->pcb.udp->recv_arg = NULL;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61cb      	str	r3, [r1, #28]
        udp_remove(msg->conn->pcb.udp);
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	6858      	ldr	r0, [r3, #4]
 8004dc6:	f005 f995 	bl	800a0f4 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8004dd0:	6820      	ldr	r0, [r4, #0]
 8004dd2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004dd4:	b113      	cbz	r3, 8004ddc <lwip_netconn_do_delconn+0x7c>
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	4611      	mov	r1, r2
 8004dda:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8004ddc:	6820      	ldr	r0, [r4, #0]
 8004dde:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0c8      	beq.n	8004d76 <lwip_netconn_do_delconn+0x16>
 8004de4:	2200      	movs	r2, #0
 8004de6:	2102      	movs	r1, #2
 8004de8:	4798      	blx	r3
 8004dea:	e7c4      	b.n	8004d76 <lwip_netconn_do_delconn+0x16>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8004dec:	7f03      	ldrb	r3, [r0, #28]
 8004dee:	f013 0f04 	tst.w	r3, #4
 8004df2:	d1d6      	bne.n	8004da2 <lwip_netconn_do_delconn+0x42>
 8004df4:	e7bd      	b.n	8004d72 <lwip_netconn_do_delconn+0x12>
        msg->conn->state = NETCONN_CLOSE;
 8004df6:	2304      	movs	r3, #4
 8004df8:	7053      	strb	r3, [r2, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	7223      	strb	r3, [r4, #8]
        msg->conn->current_msg = msg;
 8004dfe:	6823      	ldr	r3, [r4, #0]
 8004e00:	625c      	str	r4, [r3, #36]	; 0x24
        lwip_netconn_do_close_internal(msg->conn);
 8004e02:	6820      	ldr	r0, [r4, #0]
 8004e04:	f7ff fd9a 	bl	800493c <lwip_netconn_do_close_internal>
        return;
 8004e08:	bd10      	pop	{r4, pc}
	...

08004e0c <lwip_netconn_do_connect>:
{
 8004e0c:	b510      	push	{r4, lr}
 8004e0e:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp == NULL) {
 8004e10:	6802      	ldr	r2, [r0, #0]
 8004e12:	6850      	ldr	r0, [r2, #4]
 8004e14:	b1d0      	cbz	r0, 8004e4c <lwip_netconn_do_connect+0x40>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8004e16:	7813      	ldrb	r3, [r2, #0]
 8004e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e1c:	2b10      	cmp	r3, #16
 8004e1e:	d018      	beq.n	8004e52 <lwip_netconn_do_connect+0x46>
 8004e20:	2b20      	cmp	r3, #32
 8004e22:	d146      	bne.n	8004eb2 <lwip_netconn_do_connect+0xa6>
      msg->err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8004e24:	89a2      	ldrh	r2, [r4, #12]
 8004e26:	68a1      	ldr	r1, [r4, #8]
 8004e28:	f005 f92a 	bl	800a080 <udp_connect>
 8004e2c:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	b13b      	cbz	r3, 8004e42 <lwip_netconn_do_connect+0x36>
 8004e32:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004e36:	f112 0f0b 	cmn.w	r2, #11
 8004e3a:	db02      	blt.n	8004e42 <lwip_netconn_do_connect+0x36>
 8004e3c:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8004e40:	721a      	strb	r2, [r3, #8]
 8004e42:	6820      	ldr	r0, [r4, #0]
 8004e44:	300c      	adds	r0, #12
 8004e46:	f005 fe73 	bl	800ab30 <sys_sem_signal>
 8004e4a:	bd10      	pop	{r4, pc}
    msg->err = ERR_CLSD;
 8004e4c:	23f2      	movs	r3, #242	; 0xf2
 8004e4e:	7123      	strb	r3, [r4, #4]
 8004e50:	e7ed      	b.n	8004e2e <lwip_netconn_do_connect+0x22>
      if (msg->conn->state == NETCONN_CONNECT) {
 8004e52:	7853      	ldrb	r3, [r2, #1]
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	d003      	beq.n	8004e60 <lwip_netconn_do_connect+0x54>
      } else if (msg->conn->state != NETCONN_NONE) {
 8004e58:	b12b      	cbz	r3, 8004e66 <lwip_netconn_do_connect+0x5a>
        msg->err = ERR_ISCONN;
 8004e5a:	23f6      	movs	r3, #246	; 0xf6
 8004e5c:	7123      	strb	r3, [r4, #4]
 8004e5e:	e7e6      	b.n	8004e2e <lwip_netconn_do_connect+0x22>
        msg->err = ERR_ALREADY;
 8004e60:	23f7      	movs	r3, #247	; 0xf7
 8004e62:	7123      	strb	r3, [r4, #4]
 8004e64:	e7e3      	b.n	8004e2e <lwip_netconn_do_connect+0x22>
        setup_tcp(msg->conn);
 8004e66:	4610      	mov	r0, r2
 8004e68:	f7ff fbee 	bl	8004648 <setup_tcp>
        msg->err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8004e6c:	6820      	ldr	r0, [r4, #0]
 8004e6e:	4b12      	ldr	r3, [pc, #72]	; (8004eb8 <lwip_netconn_do_connect+0xac>)
 8004e70:	89a2      	ldrh	r2, [r4, #12]
 8004e72:	68a1      	ldr	r1, [r4, #8]
 8004e74:	6840      	ldr	r0, [r0, #4]
 8004e76:	f002 febb 	bl	8007bf0 <tcp_connect>
 8004e7a:	7120      	strb	r0, [r4, #4]
        if (msg->err == ERR_OK) {
 8004e7c:	2800      	cmp	r0, #0
 8004e7e:	d1d6      	bne.n	8004e2e <lwip_netconn_do_connect+0x22>
          u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8004e80:	6822      	ldr	r2, [r4, #0]
 8004e82:	7f13      	ldrb	r3, [r2, #28]
          msg->conn->state = NETCONN_CONNECT;
 8004e84:	2103      	movs	r1, #3
 8004e86:	7051      	strb	r1, [r2, #1]
          SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8004e88:	f013 0302 	ands.w	r3, r3, #2
 8004e8c:	d008      	beq.n	8004ea0 <lwip_netconn_do_connect+0x94>
 8004e8e:	6821      	ldr	r1, [r4, #0]
 8004e90:	7f0a      	ldrb	r2, [r1, #28]
 8004e92:	f042 0204 	orr.w	r2, r2, #4
 8004e96:	770a      	strb	r2, [r1, #28]
          if (non_blocking) {
 8004e98:	b143      	cbz	r3, 8004eac <lwip_netconn_do_connect+0xa0>
            msg->err = ERR_INPROGRESS;
 8004e9a:	23fb      	movs	r3, #251	; 0xfb
 8004e9c:	7123      	strb	r3, [r4, #4]
 8004e9e:	e7c6      	b.n	8004e2e <lwip_netconn_do_connect+0x22>
          SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8004ea0:	6821      	ldr	r1, [r4, #0]
 8004ea2:	7f0a      	ldrb	r2, [r1, #28]
 8004ea4:	f022 0204 	bic.w	r2, r2, #4
 8004ea8:	770a      	strb	r2, [r1, #28]
 8004eaa:	e7f5      	b.n	8004e98 <lwip_netconn_do_connect+0x8c>
            msg->conn->current_msg = msg;
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	625c      	str	r4, [r3, #36]	; 0x24
            return;
 8004eb0:	bd10      	pop	{r4, pc}
      LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
 8004eb2:	23fa      	movs	r3, #250	; 0xfa
 8004eb4:	7123      	strb	r3, [r4, #4]
      break;
 8004eb6:	e7ba      	b.n	8004e2e <lwip_netconn_do_connect+0x22>
 8004eb8:	080046ed 	.word	0x080046ed

08004ebc <lwip_netconn_do_disconnect>:
{
 8004ebc:	b510      	push	{r4, lr}
 8004ebe:	4604      	mov	r4, r0
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 8004ec0:	6802      	ldr	r2, [r0, #0]
 8004ec2:	7813      	ldrb	r3, [r2, #0]
 8004ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ec8:	2b20      	cmp	r3, #32
 8004eca:	d010      	beq.n	8004eee <lwip_netconn_do_disconnect+0x32>
    msg->err = ERR_VAL;
 8004ecc:	23fa      	movs	r3, #250	; 0xfa
 8004ece:	7103      	strb	r3, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	b13b      	cbz	r3, 8004ee4 <lwip_netconn_do_disconnect+0x28>
 8004ed4:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004ed8:	f112 0f0b 	cmn.w	r2, #11
 8004edc:	db02      	blt.n	8004ee4 <lwip_netconn_do_disconnect+0x28>
 8004ede:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8004ee2:	721a      	strb	r2, [r3, #8]
 8004ee4:	6820      	ldr	r0, [r4, #0]
 8004ee6:	300c      	adds	r0, #12
 8004ee8:	f005 fe22 	bl	800ab30 <sys_sem_signal>
 8004eec:	bd10      	pop	{r4, pc}
    udp_disconnect(msg->conn->pcb.udp);
 8004eee:	6850      	ldr	r0, [r2, #4]
 8004ef0:	f005 f8f4 	bl	800a0dc <udp_disconnect>
    msg->err = ERR_OK;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	7123      	strb	r3, [r4, #4]
 8004ef8:	e7ea      	b.n	8004ed0 <lwip_netconn_do_disconnect+0x14>

08004efa <lwip_netconn_do_send>:
{
 8004efa:	b510      	push	{r4, lr}
 8004efc:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8004efe:	6803      	ldr	r3, [r0, #0]
 8004f00:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004f04:	f112 0f0b 	cmn.w	r2, #11
 8004f08:	da0f      	bge.n	8004f2a <lwip_netconn_do_send+0x30>
    msg->err = msg->conn->last_err;
 8004f0a:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 8004f0c:	6823      	ldr	r3, [r4, #0]
 8004f0e:	b13b      	cbz	r3, 8004f20 <lwip_netconn_do_send+0x26>
 8004f10:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004f14:	f112 0f0b 	cmn.w	r2, #11
 8004f18:	db02      	blt.n	8004f20 <lwip_netconn_do_send+0x26>
 8004f1a:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8004f1e:	721a      	strb	r2, [r3, #8]
 8004f20:	6820      	ldr	r0, [r4, #0]
 8004f22:	300c      	adds	r0, #12
 8004f24:	f005 fe04 	bl	800ab30 <sys_sem_signal>
 8004f28:	bd10      	pop	{r4, pc}
    msg->err = ERR_CONN;
 8004f2a:	22f5      	movs	r2, #245	; 0xf5
 8004f2c:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8004f2e:	6858      	ldr	r0, [r3, #4]
 8004f30:	2800      	cmp	r0, #0
 8004f32:	d0eb      	beq.n	8004f0c <lwip_netconn_do_send+0x12>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	d1e6      	bne.n	8004f0c <lwip_netconn_do_send+0x12>
        if (ip_addr_isany_val(msg->msg.b->addr)) {
 8004f3e:	68a1      	ldr	r1, [r4, #8]
 8004f40:	688b      	ldr	r3, [r1, #8]
 8004f42:	b923      	cbnz	r3, 8004f4e <lwip_netconn_do_send+0x54>
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8004f44:	6809      	ldr	r1, [r1, #0]
 8004f46:	f005 f893 	bl	800a070 <udp_send>
 8004f4a:	7120      	strb	r0, [r4, #4]
 8004f4c:	e7de      	b.n	8004f0c <lwip_netconn_do_send+0x12>
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8004f4e:	898b      	ldrh	r3, [r1, #12]
 8004f50:	f101 0208 	add.w	r2, r1, #8
 8004f54:	6809      	ldr	r1, [r1, #0]
 8004f56:	f005 f871 	bl	800a03c <udp_sendto>
 8004f5a:	7120      	strb	r0, [r4, #4]
 8004f5c:	e7d6      	b.n	8004f0c <lwip_netconn_do_send+0x12>

08004f5e <lwip_netconn_do_write>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(struct api_msg_msg *msg)
{
 8004f5e:	b508      	push	{r3, lr}
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8004f60:	6803      	ldr	r3, [r0, #0]
 8004f62:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004f66:	f112 0f0b 	cmn.w	r2, #11
 8004f6a:	da0e      	bge.n	8004f8a <lwip_netconn_do_write+0x2c>
    msg->err = msg->conn->last_err;
 8004f6c:	7102      	strb	r2, [r0, #4]
    } else {
      msg->err = ERR_VAL;
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8004f6e:	b13b      	cbz	r3, 8004f80 <lwip_netconn_do_write+0x22>
 8004f70:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004f74:	f112 0f0b 	cmn.w	r2, #11
 8004f78:	db02      	blt.n	8004f80 <lwip_netconn_do_write+0x22>
 8004f7a:	f990 2004 	ldrsb.w	r2, [r0, #4]
 8004f7e:	721a      	strb	r2, [r3, #8]
 8004f80:	6800      	ldr	r0, [r0, #0]
 8004f82:	300c      	adds	r0, #12
 8004f84:	f005 fdd4 	bl	800ab30 <sys_sem_signal>
 8004f88:	bd08      	pop	{r3, pc}
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8004f8a:	781a      	ldrb	r2, [r3, #0]
 8004f8c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004f90:	2a10      	cmp	r2, #16
 8004f92:	d002      	beq.n	8004f9a <lwip_netconn_do_write+0x3c>
      msg->err = ERR_VAL;
 8004f94:	22fa      	movs	r2, #250	; 0xfa
 8004f96:	7102      	strb	r2, [r0, #4]
 8004f98:	e7e9      	b.n	8004f6e <lwip_netconn_do_write+0x10>
      if (msg->conn->state != NETCONN_NONE) {
 8004f9a:	785a      	ldrb	r2, [r3, #1]
 8004f9c:	b112      	cbz	r2, 8004fa4 <lwip_netconn_do_write+0x46>
        msg->err = ERR_INPROGRESS;
 8004f9e:	22fb      	movs	r2, #251	; 0xfb
 8004fa0:	7102      	strb	r2, [r0, #4]
 8004fa2:	e7e4      	b.n	8004f6e <lwip_netconn_do_write+0x10>
      } else if (msg->conn->pcb.tcp != NULL) {
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	b152      	cbz	r2, 8004fbe <lwip_netconn_do_write+0x60>
        msg->conn->state = NETCONN_WRITE;
 8004fa8:	2201      	movs	r2, #1
 8004faa:	705a      	strb	r2, [r3, #1]
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8004fac:	6803      	ldr	r3, [r0, #0]
        msg->conn->current_msg = msg;
 8004fae:	6258      	str	r0, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 8004fb0:	6803      	ldr	r3, [r0, #0]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	621a      	str	r2, [r3, #32]
        lwip_netconn_do_writemore(msg->conn);
 8004fb6:	6800      	ldr	r0, [r0, #0]
 8004fb8:	f7ff fc21 	bl	80047fe <lwip_netconn_do_writemore>
        return;
 8004fbc:	bd08      	pop	{r3, pc}
        msg->err = ERR_CONN;
 8004fbe:	22f5      	movs	r2, #245	; 0xf5
 8004fc0:	7102      	strb	r2, [r0, #4]
 8004fc2:	e7d4      	b.n	8004f6e <lwip_netconn_do_write+0x10>

08004fc4 <netbuf_delete>:
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  if (buf != NULL) {
 8004fc4:	b168      	cbz	r0, 8004fe2 <netbuf_delete+0x1e>
{
 8004fc6:	b510      	push	{r4, lr}
 8004fc8:	4604      	mov	r4, r0
    if (buf->p != NULL) {
 8004fca:	6800      	ldr	r0, [r0, #0]
 8004fcc:	b120      	cbz	r0, 8004fd8 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 8004fce:	f001 fee3 	bl	8006d98 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	6063      	str	r3, [r4, #4]
 8004fd6:	6023      	str	r3, [r4, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8004fd8:	4621      	mov	r1, r4
 8004fda:	2006      	movs	r0, #6
 8004fdc:	f001 fd5a 	bl	8006a94 <memp_free>
 8004fe0:	bd10      	pop	{r4, pc}
 8004fe2:	4770      	bx	lr

08004fe4 <netbuf_free>:
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 8004fe4:	b148      	cbz	r0, 8004ffa <netbuf_free+0x16>
{
 8004fe6:	b510      	push	{r4, lr}
 8004fe8:	4604      	mov	r4, r0
  if (buf->p != NULL) {
 8004fea:	6800      	ldr	r0, [r0, #0]
 8004fec:	b108      	cbz	r0, 8004ff2 <netbuf_free+0xe>
    pbuf_free(buf->p);
 8004fee:	f001 fed3 	bl	8006d98 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	6063      	str	r3, [r4, #4]
 8004ff6:	6023      	str	r3, [r4, #0]
 8004ff8:	bd10      	pop	{r4, pc}
 8004ffa:	4770      	bx	lr

08004ffc <netbuf_ref>:
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8004ffc:	b1d8      	cbz	r0, 8005036 <netbuf_ref+0x3a>
{
 8004ffe:	b570      	push	{r4, r5, r6, lr}
 8005000:	4604      	mov	r4, r0
 8005002:	4615      	mov	r5, r2
 8005004:	460e      	mov	r6, r1
  if (buf->p != NULL) {
 8005006:	6800      	ldr	r0, [r0, #0]
 8005008:	b108      	cbz	r0, 800500e <netbuf_ref+0x12>
    pbuf_free(buf->p);
 800500a:	f001 fec5 	bl	8006d98 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800500e:	2202      	movs	r2, #2
 8005010:	2100      	movs	r1, #0
 8005012:	4608      	mov	r0, r1
 8005014:	f001 feee 	bl	8006df4 <pbuf_alloc>
 8005018:	6020      	str	r0, [r4, #0]
  if (buf->p == NULL) {
 800501a:	b138      	cbz	r0, 800502c <netbuf_ref+0x30>
    buf->ptr = NULL;
    return ERR_MEM;
  }
  ((struct pbuf_rom*)buf->p)->payload = dataptr;
 800501c:	6046      	str	r6, [r0, #4]
  buf->p->len = buf->p->tot_len = size;
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	811d      	strh	r5, [r3, #8]
 8005022:	815d      	strh	r5, [r3, #10]
  buf->ptr = buf->p;
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	6063      	str	r3, [r4, #4]
  return ERR_OK;
 8005028:	2000      	movs	r0, #0
 800502a:	bd70      	pop	{r4, r5, r6, pc}
    buf->ptr = NULL;
 800502c:	2300      	movs	r3, #0
 800502e:	6063      	str	r3, [r4, #4]
    return ERR_MEM;
 8005030:	f04f 30ff 	mov.w	r0, #4294967295
 8005034:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8005036:	f06f 000e 	mvn.w	r0, #14
 800503a:	4770      	bx	lr

0800503c <tryget_socket>:
 */
static struct lwip_sock *
tryget_socket(int s)
{
  s -= LWIP_SOCKET_OFFSET;
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800503c:	2803      	cmp	r0, #3
 800503e:	d80b      	bhi.n	8005058 <tryget_socket+0x1c>
    return NULL;
  }
  if (!sockets[s].conn) {
 8005040:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8005044:	0093      	lsls	r3, r2, #2
 8005046:	4a06      	ldr	r2, [pc, #24]	; (8005060 <tryget_socket+0x24>)
 8005048:	58d3      	ldr	r3, [r2, r3]
 800504a:	b13b      	cbz	r3, 800505c <tryget_socket+0x20>
    return NULL;
  }
  return &sockets[s];
 800504c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005050:	0083      	lsls	r3, r0, #2
 8005052:	4610      	mov	r0, r2
 8005054:	4418      	add	r0, r3
 8005056:	4770      	bx	lr
    return NULL;
 8005058:	2000      	movs	r0, #0
 800505a:	4770      	bx	lr
    return NULL;
 800505c:	2000      	movs	r0, #0
}
 800505e:	4770      	bx	lr
 8005060:	20003e14 	.word	0x20003e14

08005064 <alloc_socket>:
{
  int i;
  SYS_ARCH_DECL_PROTECT(lev);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8005064:	2300      	movs	r3, #0
 8005066:	2b03      	cmp	r3, #3
 8005068:	dc2d      	bgt.n	80050c6 <alloc_socket+0x62>
{
 800506a:	b430      	push	{r4, r5}
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
    if (!sockets[i].conn) {
 800506c:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8005070:	00a2      	lsls	r2, r4, #2
 8005072:	4c17      	ldr	r4, [pc, #92]	; (80050d0 <alloc_socket+0x6c>)
 8005074:	58a2      	ldr	r2, [r4, r2]
 8005076:	b13a      	cbz	r2, 8005088 <alloc_socket+0x24>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8005078:	3301      	adds	r3, #1
 800507a:	2b03      	cmp	r3, #3
 800507c:	ddf6      	ble.n	800506c <alloc_socket+0x8>
      sockets[i].select_waiting = 0;
      return i + LWIP_SOCKET_OFFSET;
    }
    SYS_ARCH_UNPROTECT(lev);
  }
  return -1;
 800507e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005082:	4618      	mov	r0, r3
 8005084:	bc30      	pop	{r4, r5}
 8005086:	4770      	bx	lr
      sockets[i].conn       = newconn;
 8005088:	4625      	mov	r5, r4
 800508a:	009a      	lsls	r2, r3, #2
 800508c:	441a      	add	r2, r3
 800508e:	0094      	lsls	r4, r2, #2
 8005090:	192a      	adds	r2, r5, r4
 8005092:	5128      	str	r0, [r5, r4]
      sockets[i].lastdata   = NULL;
 8005094:	2400      	movs	r4, #0
 8005096:	6054      	str	r4, [r2, #4]
      sockets[i].lastoffset = 0;
 8005098:	8114      	strh	r4, [r2, #8]
      sockets[i].rcvevent   = 0;
 800509a:	8154      	strh	r4, [r2, #10]
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800509c:	7802      	ldrb	r2, [r0, #0]
 800509e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80050a2:	2a10      	cmp	r2, #16
 80050a4:	d00b      	beq.n	80050be <alloc_socket+0x5a>
 80050a6:	2101      	movs	r1, #1
 80050a8:	0098      	lsls	r0, r3, #2
 80050aa:	4418      	add	r0, r3
 80050ac:	0084      	lsls	r4, r0, #2
 80050ae:	4a08      	ldr	r2, [pc, #32]	; (80050d0 <alloc_socket+0x6c>)
 80050b0:	4422      	add	r2, r4
 80050b2:	8191      	strh	r1, [r2, #12]
      sockets[i].errevent   = 0;
 80050b4:	2100      	movs	r1, #0
 80050b6:	81d1      	strh	r1, [r2, #14]
      sockets[i].err        = 0;
 80050b8:	7411      	strb	r1, [r2, #16]
      sockets[i].select_waiting = 0;
 80050ba:	7451      	strb	r1, [r2, #17]
      return i + LWIP_SOCKET_OFFSET;
 80050bc:	e7e1      	b.n	8005082 <alloc_socket+0x1e>
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 80050be:	2900      	cmp	r1, #0
 80050c0:	d0f2      	beq.n	80050a8 <alloc_socket+0x44>
 80050c2:	2101      	movs	r1, #1
 80050c4:	e7f0      	b.n	80050a8 <alloc_socket+0x44>
  return -1;
 80050c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	20003e14 	.word	0x20003e14

080050d4 <lwip_setsockopt_impl>:
/** lwip_setsockopt_impl: the actual implementation of setsockopt:
 * same argument as lwip_setsockopt, either called directly or through callback
 */
static u8_t
lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 80050d4:	b570      	push	{r4, r5, r6, lr}
 80050d6:	460c      	mov	r4, r1
 80050d8:	4615      	mov	r5, r2
 80050da:	461e      	mov	r6, r3
  u8_t err = 0;
  struct lwip_sock *sock = tryget_socket(s);
 80050dc:	f7ff ffae 	bl	800503c <tryget_socket>
  if (!sock) {
 80050e0:	2800      	cmp	r0, #0
 80050e2:	f000 809a 	beq.w	800521a <lwip_setsockopt_impl+0x146>
 80050e6:	4603      	mov	r3, r0
    return EBADF;
  }

  switch (level) {
 80050e8:	2c06      	cmp	r4, #6
 80050ea:	d06b      	beq.n	80051c4 <lwip_setsockopt_impl+0xf0>
 80050ec:	f640 72ff 	movw	r2, #4095	; 0xfff
 80050f0:	4294      	cmp	r4, r2
 80050f2:	d003      	beq.n	80050fc <lwip_setsockopt_impl+0x28>
 80050f4:	2c00      	cmp	r4, #0
 80050f6:	d043      	beq.n	8005180 <lwip_setsockopt_impl+0xac>
      break;
#endif /* LWIP_IPV6 && LWIP_RAW */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
 80050f8:	205c      	movs	r0, #92	; 0x5c
 80050fa:	bd70      	pop	{r4, r5, r6, pc}
    switch (optname) {
 80050fc:	2d20      	cmp	r5, #32
 80050fe:	d007      	beq.n	8005110 <lwip_setsockopt_impl+0x3c>
 8005100:	f241 020a 	movw	r2, #4106	; 0x100a
 8005104:	4295      	cmp	r5, r2
 8005106:	d01b      	beq.n	8005140 <lwip_setsockopt_impl+0x6c>
 8005108:	2d08      	cmp	r5, #8
 800510a:	d001      	beq.n	8005110 <lwip_setsockopt_impl+0x3c>
      err = ENOPROTOOPT;
 800510c:	205c      	movs	r0, #92	; 0x5c
 800510e:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 8005110:	9a04      	ldr	r2, [sp, #16]
 8005112:	2a03      	cmp	r2, #3
 8005114:	d801      	bhi.n	800511a <lwip_setsockopt_impl+0x46>
 8005116:	2016      	movs	r0, #22
 8005118:	bd70      	pop	{r4, r5, r6, pc}
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d07e      	beq.n	800521e <lwip_setsockopt_impl+0x14a>
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d07d      	beq.n	8005222 <lwip_setsockopt_impl+0x14e>
      if (*(const int*)optval) {
 8005126:	6832      	ldr	r2, [r6, #0]
 8005128:	b122      	cbz	r2, 8005134 <lwip_setsockopt_impl+0x60>
        ip_set_option(sock->conn->pcb.ip, optname);
 800512a:	7a1a      	ldrb	r2, [r3, #8]
 800512c:	4315      	orrs	r5, r2
 800512e:	721d      	strb	r5, [r3, #8]
  u8_t err = 0;
 8005130:	2000      	movs	r0, #0
 8005132:	bd70      	pop	{r4, r5, r6, pc}
        ip_reset_option(sock->conn->pcb.ip, optname);
 8005134:	7a1a      	ldrb	r2, [r3, #8]
 8005136:	ea22 0505 	bic.w	r5, r2, r5
 800513a:	721d      	strb	r5, [r3, #8]
  u8_t err = 0;
 800513c:	2000      	movs	r0, #0
 800513e:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
 8005140:	9a04      	ldr	r2, [sp, #16]
 8005142:	2a03      	cmp	r2, #3
 8005144:	d801      	bhi.n	800514a <lwip_setsockopt_impl+0x76>
 8005146:	2016      	movs	r0, #22
 8005148:	bd70      	pop	{r4, r5, r6, pc}
 800514a:	6803      	ldr	r3, [r0, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d06a      	beq.n	8005226 <lwip_setsockopt_impl+0x152>
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	2a00      	cmp	r2, #0
 8005154:	d069      	beq.n	800522a <lwip_setsockopt_impl+0x156>
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800515c:	2b20      	cmp	r3, #32
 800515e:	d001      	beq.n	8005164 <lwip_setsockopt_impl+0x90>
 8005160:	205c      	movs	r0, #92	; 0x5c
 8005162:	bd70      	pop	{r4, r5, r6, pc}
      if (*(const int*)optval) {
 8005164:	6833      	ldr	r3, [r6, #0]
 8005166:	b12b      	cbz	r3, 8005174 <lwip_setsockopt_impl+0xa0>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_NOCHKSUM);
 8005168:	7c13      	ldrb	r3, [r2, #16]
 800516a:	f043 0301 	orr.w	r3, r3, #1
 800516e:	7413      	strb	r3, [r2, #16]
  u8_t err = 0;
 8005170:	2000      	movs	r0, #0
 8005172:	bd70      	pop	{r4, r5, r6, pc}
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
 8005174:	7c13      	ldrb	r3, [r2, #16]
 8005176:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800517a:	7413      	strb	r3, [r2, #16]
  u8_t err = 0;
 800517c:	2000      	movs	r0, #0
 800517e:	bd70      	pop	{r4, r5, r6, pc}
    switch (optname) {
 8005180:	2d01      	cmp	r5, #1
 8005182:	d010      	beq.n	80051a6 <lwip_setsockopt_impl+0xd2>
 8005184:	2d02      	cmp	r5, #2
 8005186:	d152      	bne.n	800522e <lwip_setsockopt_impl+0x15a>
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 8005188:	9a04      	ldr	r2, [sp, #16]
 800518a:	2a03      	cmp	r2, #3
 800518c:	d801      	bhi.n	8005192 <lwip_setsockopt_impl+0xbe>
 800518e:	2016      	movs	r0, #22
 8005190:	bd70      	pop	{r4, r5, r6, pc}
 8005192:	6803      	ldr	r3, [r0, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d04c      	beq.n	8005232 <lwip_setsockopt_impl+0x15e>
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d04b      	beq.n	8005236 <lwip_setsockopt_impl+0x162>
      sock->conn->pcb.ip->ttl = (u8_t)(*(const int*)optval);
 800519e:	7832      	ldrb	r2, [r6, #0]
 80051a0:	729a      	strb	r2, [r3, #10]
  u8_t err = 0;
 80051a2:	2000      	movs	r0, #0
      break;
 80051a4:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 80051a6:	9a04      	ldr	r2, [sp, #16]
 80051a8:	2a03      	cmp	r2, #3
 80051aa:	d801      	bhi.n	80051b0 <lwip_setsockopt_impl+0xdc>
 80051ac:	2016      	movs	r0, #22
 80051ae:	bd70      	pop	{r4, r5, r6, pc}
 80051b0:	6803      	ldr	r3, [r0, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d041      	beq.n	800523a <lwip_setsockopt_impl+0x166>
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d040      	beq.n	800523e <lwip_setsockopt_impl+0x16a>
      sock->conn->pcb.ip->tos = (u8_t)(*(const int*)optval);
 80051bc:	7832      	ldrb	r2, [r6, #0]
 80051be:	725a      	strb	r2, [r3, #9]
  u8_t err = 0;
 80051c0:	2000      	movs	r0, #0
      break;
 80051c2:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
 80051c4:	9a04      	ldr	r2, [sp, #16]
 80051c6:	2a03      	cmp	r2, #3
 80051c8:	d801      	bhi.n	80051ce <lwip_setsockopt_impl+0xfa>
 80051ca:	2016      	movs	r0, #22
 80051cc:	bd70      	pop	{r4, r5, r6, pc}
 80051ce:	6803      	ldr	r3, [r0, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d036      	beq.n	8005242 <lwip_setsockopt_impl+0x16e>
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	2a00      	cmp	r2, #0
 80051d8:	d035      	beq.n	8005246 <lwip_setsockopt_impl+0x172>
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051e0:	2b10      	cmp	r3, #16
 80051e2:	d001      	beq.n	80051e8 <lwip_setsockopt_impl+0x114>
 80051e4:	205c      	movs	r0, #92	; 0x5c
 80051e6:	bd70      	pop	{r4, r5, r6, pc}
    switch (optname) {
 80051e8:	2d01      	cmp	r5, #1
 80051ea:	d003      	beq.n	80051f4 <lwip_setsockopt_impl+0x120>
 80051ec:	2d02      	cmp	r5, #2
 80051ee:	d00f      	beq.n	8005210 <lwip_setsockopt_impl+0x13c>
      err = ENOPROTOOPT;
 80051f0:	205c      	movs	r0, #92	; 0x5c
    err = ENOPROTOOPT;
    break;
  }  /* switch (level) */

  return err;
}
 80051f2:	bd70      	pop	{r4, r5, r6, pc}
      if (*(const int*)optval) {
 80051f4:	6833      	ldr	r3, [r6, #0]
 80051f6:	b12b      	cbz	r3, 8005204 <lwip_setsockopt_impl+0x130>
        tcp_nagle_disable(sock->conn->pcb.tcp);
 80051f8:	7f93      	ldrb	r3, [r2, #30]
 80051fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051fe:	7793      	strb	r3, [r2, #30]
  u8_t err = 0;
 8005200:	2000      	movs	r0, #0
 8005202:	bd70      	pop	{r4, r5, r6, pc}
        tcp_nagle_enable(sock->conn->pcb.tcp);
 8005204:	7f93      	ldrb	r3, [r2, #30]
 8005206:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 800520a:	7793      	strb	r3, [r2, #30]
  u8_t err = 0;
 800520c:	2000      	movs	r0, #0
 800520e:	bd70      	pop	{r4, r5, r6, pc}
      sock->conn->pcb.tcp->keep_idle = (u32_t)(*(const int*)optval);
 8005210:	6833      	ldr	r3, [r6, #0]
 8005212:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  u8_t err = 0;
 8005216:	2000      	movs	r0, #0
      break;
 8005218:	bd70      	pop	{r4, r5, r6, pc}
    return EBADF;
 800521a:	2009      	movs	r0, #9
 800521c:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800521e:	2016      	movs	r0, #22
 8005220:	bd70      	pop	{r4, r5, r6, pc}
 8005222:	2016      	movs	r0, #22
 8005224:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
 8005226:	2016      	movs	r0, #22
 8005228:	bd70      	pop	{r4, r5, r6, pc}
 800522a:	2016      	movs	r0, #22
 800522c:	bd70      	pop	{r4, r5, r6, pc}
      err = ENOPROTOOPT;
 800522e:	205c      	movs	r0, #92	; 0x5c
 8005230:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 8005232:	2016      	movs	r0, #22
 8005234:	bd70      	pop	{r4, r5, r6, pc}
 8005236:	2016      	movs	r0, #22
 8005238:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800523a:	2016      	movs	r0, #22
 800523c:	bd70      	pop	{r4, r5, r6, pc}
 800523e:	2016      	movs	r0, #22
 8005240:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
 8005242:	2016      	movs	r0, #22
 8005244:	bd70      	pop	{r4, r5, r6, pc}
 8005246:	2016      	movs	r0, #22
 8005248:	bd70      	pop	{r4, r5, r6, pc}
	...

0800524c <get_socket>:
{
 800524c:	b510      	push	{r4, lr}
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800524e:	2803      	cmp	r0, #3
 8005250:	d809      	bhi.n	8005266 <get_socket+0x1a>
  sock = &sockets[s];
 8005252:	4c0b      	ldr	r4, [pc, #44]	; (8005280 <get_socket+0x34>)
 8005254:	0083      	lsls	r3, r0, #2
 8005256:	1819      	adds	r1, r3, r0
 8005258:	008a      	lsls	r2, r1, #2
 800525a:	4611      	mov	r1, r2
 800525c:	4422      	add	r2, r4
  if (!sock->conn) {
 800525e:	5863      	ldr	r3, [r4, r1]
 8005260:	b13b      	cbz	r3, 8005272 <get_socket+0x26>
}
 8005262:	4610      	mov	r0, r2
 8005264:	bd10      	pop	{r4, pc}
    set_errno(EBADF);
 8005266:	f006 fcd1 	bl	800bc0c <__errno>
 800526a:	2309      	movs	r3, #9
 800526c:	6003      	str	r3, [r0, #0]
    return NULL;
 800526e:	2200      	movs	r2, #0
 8005270:	e7f7      	b.n	8005262 <get_socket+0x16>
    set_errno(EBADF);
 8005272:	f006 fccb 	bl	800bc0c <__errno>
 8005276:	2309      	movs	r3, #9
 8005278:	6003      	str	r3, [r0, #0]
    return NULL;
 800527a:	2200      	movs	r2, #0
 800527c:	e7f1      	b.n	8005262 <get_socket+0x16>
 800527e:	bf00      	nop
 8005280:	20003e14 	.word	0x20003e14

08005284 <free_socket>:
{
 8005284:	b508      	push	{r3, lr}
  lastdata         = sock->lastdata;
 8005286:	6842      	ldr	r2, [r0, #4]
  sock->lastdata   = NULL;
 8005288:	2300      	movs	r3, #0
 800528a:	6043      	str	r3, [r0, #4]
  sock->lastoffset = 0;
 800528c:	8103      	strh	r3, [r0, #8]
  sock->err        = 0;
 800528e:	7403      	strb	r3, [r0, #16]
  SYS_ARCH_SET(sock->conn, NULL);
 8005290:	6003      	str	r3, [r0, #0]
  if (lastdata != NULL) {
 8005292:	b11a      	cbz	r2, 800529c <free_socket+0x18>
    if (is_tcp) {
 8005294:	b919      	cbnz	r1, 800529e <free_socket+0x1a>
      netbuf_delete((struct netbuf *)lastdata);
 8005296:	4610      	mov	r0, r2
 8005298:	f7ff fe94 	bl	8004fc4 <netbuf_delete>
 800529c:	bd08      	pop	{r3, pc}
      pbuf_free((struct pbuf *)lastdata);
 800529e:	4610      	mov	r0, r2
 80052a0:	f001 fd7a 	bl	8006d98 <pbuf_free>
 80052a4:	bd08      	pop	{r3, pc}
	...

080052a8 <event_callback>:
  if (conn) {
 80052a8:	2800      	cmp	r0, #0
 80052aa:	d076      	beq.n	800539a <event_callback+0xf2>
{
 80052ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = conn->socket;
 80052ae:	6987      	ldr	r7, [r0, #24]
    if (s < 0) {
 80052b0:	2f00      	cmp	r7, #0
 80052b2:	db0d      	blt.n	80052d0 <event_callback+0x28>
 80052b4:	460c      	mov	r4, r1
    sock = get_socket(s);
 80052b6:	4638      	mov	r0, r7
 80052b8:	f7ff ffc8 	bl	800524c <get_socket>
    if (!sock) {
 80052bc:	4606      	mov	r6, r0
 80052be:	2800      	cmp	r0, #0
 80052c0:	d06a      	beq.n	8005398 <event_callback+0xf0>
  switch (evt) {
 80052c2:	2c04      	cmp	r4, #4
 80052c4:	d80d      	bhi.n	80052e2 <event_callback+0x3a>
 80052c6:	e8df f004 	tbb	[pc, r4]
 80052ca:	1208      	.short	0x1208
 80052cc:	1a17      	.short	0x1a17
 80052ce:	1d          	.byte	0x1d
 80052cf:	00          	.byte	0x00
        if (evt == NETCONN_EVT_RCVPLUS) {
 80052d0:	2900      	cmp	r1, #0
 80052d2:	d161      	bne.n	8005398 <event_callback+0xf0>
          conn->socket--;
 80052d4:	3f01      	subs	r7, #1
 80052d6:	6187      	str	r7, [r0, #24]
 80052d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      sock->rcvevent++;
 80052da:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80052de:	3301      	adds	r3, #1
 80052e0:	8143      	strh	r3, [r0, #10]
  if (sock->select_waiting == 0) {
 80052e2:	7c73      	ldrb	r3, [r6, #17]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d057      	beq.n	8005398 <event_callback+0xf0>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 80052e8:	4b2c      	ldr	r3, [pc, #176]	; (800539c <event_callback+0xf4>)
 80052ea:	681c      	ldr	r4, [r3, #0]
 80052ec:	e014      	b.n	8005318 <event_callback+0x70>
      sock->rcvevent--;
 80052ee:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	8143      	strh	r3, [r0, #10]
      break;
 80052f6:	e7f4      	b.n	80052e2 <event_callback+0x3a>
      sock->sendevent = 1;
 80052f8:	2301      	movs	r3, #1
 80052fa:	8183      	strh	r3, [r0, #12]
      break;
 80052fc:	e7f1      	b.n	80052e2 <event_callback+0x3a>
      sock->sendevent = 0;
 80052fe:	2300      	movs	r3, #0
 8005300:	8183      	strh	r3, [r0, #12]
      break;
 8005302:	e7ee      	b.n	80052e2 <event_callback+0x3a>
      sock->errevent = 1;
 8005304:	2301      	movs	r3, #1
 8005306:	81c3      	strh	r3, [r0, #14]
      break;
 8005308:	e7eb      	b.n	80052e2 <event_callback+0x3a>
      if (do_signal) {
 800530a:	2b00      	cmp	r3, #0
 800530c:	d13d      	bne.n	800538a <event_callback+0xe2>
    if (last_select_cb_ctr != select_cb_ctr) {
 800530e:	4b24      	ldr	r3, [pc, #144]	; (80053a0 <event_callback+0xf8>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	429d      	cmp	r5, r3
 8005314:	d1e8      	bne.n	80052e8 <event_callback+0x40>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8005316:	6824      	ldr	r4, [r4, #0]
 8005318:	2c00      	cmp	r4, #0
 800531a:	d03d      	beq.n	8005398 <event_callback+0xf0>
    last_select_cb_ctr = select_cb_ctr;
 800531c:	4b20      	ldr	r3, [pc, #128]	; (80053a0 <event_callback+0xf8>)
 800531e:	681d      	ldr	r5, [r3, #0]
    if (scb->sem_signalled == 0) {
 8005320:	6963      	ldr	r3, [r4, #20]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1f3      	bne.n	800530e <event_callback+0x66>
      if (sock->rcvevent > 0) {
 8005326:	f9b6 200a 	ldrsh.w	r2, [r6, #10]
 800532a:	2a00      	cmp	r2, #0
 800532c:	dd0b      	ble.n	8005346 <event_callback+0x9e>
        if (scb->readset && FD_ISSET(s, scb->readset)) {
 800532e:	68a2      	ldr	r2, [r4, #8]
 8005330:	b14a      	cbz	r2, 8005346 <event_callback+0x9e>
 8005332:	0979      	lsrs	r1, r7, #5
 8005334:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8005338:	f007 001f 	and.w	r0, r7, #31
 800533c:	2201      	movs	r2, #1
 800533e:	4082      	lsls	r2, r0
 8005340:	4211      	tst	r1, r2
 8005342:	d000      	beq.n	8005346 <event_callback+0x9e>
          do_signal = 1;
 8005344:	2301      	movs	r3, #1
      if (sock->sendevent != 0) {
 8005346:	89b2      	ldrh	r2, [r6, #12]
 8005348:	b162      	cbz	r2, 8005364 <event_callback+0xbc>
        if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800534a:	b95b      	cbnz	r3, 8005364 <event_callback+0xbc>
 800534c:	68e2      	ldr	r2, [r4, #12]
 800534e:	b14a      	cbz	r2, 8005364 <event_callback+0xbc>
 8005350:	0979      	lsrs	r1, r7, #5
 8005352:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8005356:	f007 001f 	and.w	r0, r7, #31
 800535a:	2201      	movs	r2, #1
 800535c:	4082      	lsls	r2, r0
 800535e:	4211      	tst	r1, r2
 8005360:	d000      	beq.n	8005364 <event_callback+0xbc>
          do_signal = 1;
 8005362:	2301      	movs	r3, #1
      if (sock->errevent != 0) {
 8005364:	89f2      	ldrh	r2, [r6, #14]
 8005366:	2a00      	cmp	r2, #0
 8005368:	d0cf      	beq.n	800530a <event_callback+0x62>
        if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1cd      	bne.n	800530a <event_callback+0x62>
 800536e:	6922      	ldr	r2, [r4, #16]
 8005370:	2a00      	cmp	r2, #0
 8005372:	d0ca      	beq.n	800530a <event_callback+0x62>
 8005374:	0979      	lsrs	r1, r7, #5
 8005376:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800537a:	f007 001f 	and.w	r0, r7, #31
 800537e:	2201      	movs	r2, #1
 8005380:	4082      	lsls	r2, r0
 8005382:	4211      	tst	r1, r2
 8005384:	d0c1      	beq.n	800530a <event_callback+0x62>
          do_signal = 1;
 8005386:	2301      	movs	r3, #1
 8005388:	e7bf      	b.n	800530a <event_callback+0x62>
        scb->sem_signalled = 1;
 800538a:	2301      	movs	r3, #1
 800538c:	6163      	str	r3, [r4, #20]
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800538e:	f104 0018 	add.w	r0, r4, #24
 8005392:	f005 fbcd 	bl	800ab30 <sys_sem_signal>
 8005396:	e7ba      	b.n	800530e <event_callback+0x66>
 8005398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800539a:	4770      	bx	lr
 800539c:	20003e10 	.word	0x20003e10
 80053a0:	20003e0c 	.word	0x20003e0c

080053a4 <lwip_setsockopt_callback>:
{
 80053a4:	b510      	push	{r4, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	4604      	mov	r4, r0
  data->err = lwip_setsockopt_impl(data->s, data->level, data->optname,
 80053aa:	6903      	ldr	r3, [r0, #16]
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	68c3      	ldr	r3, [r0, #12]
 80053b0:	6882      	ldr	r2, [r0, #8]
 80053b2:	6841      	ldr	r1, [r0, #4]
 80053b4:	6800      	ldr	r0, [r0, #0]
 80053b6:	f7ff fe8d 	bl	80050d4 <lwip_setsockopt_impl>
 80053ba:	7520      	strb	r0, [r4, #20]
  sys_sem_signal((sys_sem_t*)(data->completed_sem));
 80053bc:	69a0      	ldr	r0, [r4, #24]
 80053be:	f005 fbb7 	bl	800ab30 <sys_sem_signal>
}
 80053c2:	b002      	add	sp, #8
 80053c4:	bd10      	pop	{r4, pc}
	...

080053c8 <lwip_close>:
{
 80053c8:	b538      	push	{r3, r4, r5, lr}
  sock = get_socket(s);
 80053ca:	f7ff ff3f 	bl	800524c <get_socket>
  if (!sock) {
 80053ce:	b338      	cbz	r0, 8005420 <lwip_close+0x58>
 80053d0:	4605      	mov	r5, r0
  if (sock->conn != NULL) {
 80053d2:	6800      	ldr	r0, [r0, #0]
 80053d4:	b1a0      	cbz	r0, 8005400 <lwip_close+0x38>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 80053d6:	7801      	ldrb	r1, [r0, #0]
 80053d8:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 80053dc:	2910      	cmp	r1, #16
 80053de:	bf14      	ite	ne
 80053e0:	2400      	movne	r4, #0
 80053e2:	2401      	moveq	r4, #1
  err = netconn_delete(sock->conn);
 80053e4:	f7ff f85c 	bl	80044a0 <netconn_delete>
  if (err != ERR_OK) {
 80053e8:	b1a0      	cbz	r0, 8005414 <lwip_close+0x4c>
    sock_set_errno(sock, err_to_errno(err));
 80053ea:	4240      	negs	r0, r0
 80053ec:	2810      	cmp	r0, #16
 80053ee:	d809      	bhi.n	8005404 <lwip_close+0x3c>
 80053f0:	4b0d      	ldr	r3, [pc, #52]	; (8005428 <lwip_close+0x60>)
 80053f2:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 80053f6:	742c      	strb	r4, [r5, #16]
 80053f8:	b934      	cbnz	r4, 8005408 <lwip_close+0x40>
    return -1;
 80053fa:	f04f 30ff 	mov.w	r0, #4294967295
}
 80053fe:	bd38      	pop	{r3, r4, r5, pc}
  int is_tcp = 0;
 8005400:	2400      	movs	r4, #0
 8005402:	e7ef      	b.n	80053e4 <lwip_close+0x1c>
    sock_set_errno(sock, err_to_errno(err));
 8005404:	2405      	movs	r4, #5
 8005406:	e7f6      	b.n	80053f6 <lwip_close+0x2e>
 8005408:	f006 fc00 	bl	800bc0c <__errno>
 800540c:	6004      	str	r4, [r0, #0]
    return -1;
 800540e:	f04f 30ff 	mov.w	r0, #4294967295
 8005412:	bd38      	pop	{r3, r4, r5, pc}
  free_socket(sock, is_tcp);
 8005414:	4621      	mov	r1, r4
 8005416:	4628      	mov	r0, r5
 8005418:	f7ff ff34 	bl	8005284 <free_socket>
  return 0;
 800541c:	2000      	movs	r0, #0
 800541e:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 8005420:	f04f 30ff 	mov.w	r0, #4294967295
 8005424:	bd38      	pop	{r3, r4, r5, pc}
 8005426:	bf00      	nop
 8005428:	0800d0a8 	.word	0x0800d0a8

0800542c <lwip_connect>:
{
 800542c:	b570      	push	{r4, r5, r6, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	460c      	mov	r4, r1
 8005432:	4616      	mov	r6, r2
  sock = get_socket(s);
 8005434:	f7ff ff0a 	bl	800524c <get_socket>
  if (!sock) {
 8005438:	2800      	cmp	r0, #0
 800543a:	d039      	beq.n	80054b0 <lwip_connect+0x84>
 800543c:	4605      	mov	r5, r0
  if (name->sa_family == AF_UNSPEC) {
 800543e:	7863      	ldrb	r3, [r4, #1]
 8005440:	b1d3      	cbz	r3, 8005478 <lwip_connect+0x4c>
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8005442:	2e10      	cmp	r6, #16
 8005444:	d11c      	bne.n	8005480 <lwip_connect+0x54>
 8005446:	2b02      	cmp	r3, #2
 8005448:	d11a      	bne.n	8005480 <lwip_connect+0x54>
 800544a:	f014 0f03 	tst.w	r4, #3
 800544e:	d117      	bne.n	8005480 <lwip_connect+0x54>
    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 8005450:	6863      	ldr	r3, [r4, #4]
 8005452:	ae02      	add	r6, sp, #8
 8005454:	f846 3d04 	str.w	r3, [r6, #-4]!
 8005458:	8860      	ldrh	r0, [r4, #2]
 800545a:	f000 fa4a 	bl	80058f2 <lwip_ntohs>
    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 800545e:	4602      	mov	r2, r0
 8005460:	4631      	mov	r1, r6
 8005462:	6828      	ldr	r0, [r5, #0]
 8005464:	f7ff f838 	bl	80044d8 <netconn_connect>
  if (err != ERR_OK) {
 8005468:	b1f0      	cbz	r0, 80054a8 <lwip_connect+0x7c>
    sock_set_errno(sock, err_to_errno(err));
 800546a:	4240      	negs	r0, r0
 800546c:	2810      	cmp	r0, #16
 800546e:	d80f      	bhi.n	8005490 <lwip_connect+0x64>
 8005470:	4b11      	ldr	r3, [pc, #68]	; (80054b8 <lwip_connect+0x8c>)
 8005472:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8005476:	e00c      	b.n	8005492 <lwip_connect+0x66>
    err = netconn_disconnect(sock->conn);
 8005478:	6800      	ldr	r0, [r0, #0]
 800547a:	f7ff f843 	bl	8004504 <netconn_disconnect>
 800547e:	e7f3      	b.n	8005468 <lwip_connect+0x3c>
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8005480:	2405      	movs	r4, #5
 8005482:	742c      	strb	r4, [r5, #16]
 8005484:	f006 fbc2 	bl	800bc0c <__errno>
 8005488:	6004      	str	r4, [r0, #0]
 800548a:	f04f 30ff 	mov.w	r0, #4294967295
 800548e:	e00d      	b.n	80054ac <lwip_connect+0x80>
    sock_set_errno(sock, err_to_errno(err));
 8005490:	2405      	movs	r4, #5
 8005492:	742c      	strb	r4, [r5, #16]
 8005494:	b914      	cbnz	r4, 800549c <lwip_connect+0x70>
    return -1;
 8005496:	f04f 30ff 	mov.w	r0, #4294967295
 800549a:	e007      	b.n	80054ac <lwip_connect+0x80>
    sock_set_errno(sock, err_to_errno(err));
 800549c:	f006 fbb6 	bl	800bc0c <__errno>
 80054a0:	6004      	str	r4, [r0, #0]
    return -1;
 80054a2:	f04f 30ff 	mov.w	r0, #4294967295
 80054a6:	e001      	b.n	80054ac <lwip_connect+0x80>
  sock_set_errno(sock, 0);
 80054a8:	2000      	movs	r0, #0
 80054aa:	7428      	strb	r0, [r5, #16]
}
 80054ac:	b002      	add	sp, #8
 80054ae:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
 80054b0:	f04f 30ff 	mov.w	r0, #4294967295
 80054b4:	e7fa      	b.n	80054ac <lwip_connect+0x80>
 80054b6:	bf00      	nop
 80054b8:	0800d0a8 	.word	0x0800d0a8

080054bc <lwip_sendto>:
{
 80054bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80054c0:	b085      	sub	sp, #20
 80054c2:	4680      	mov	r8, r0
 80054c4:	460f      	mov	r7, r1
 80054c6:	4615      	mov	r5, r2
 80054c8:	4699      	mov	r9, r3
 80054ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  sock = get_socket(s);
 80054cc:	f7ff febe 	bl	800524c <get_socket>
  if (!sock) {
 80054d0:	2800      	cmp	r0, #0
 80054d2:	d056      	beq.n	8005582 <lwip_sendto+0xc6>
 80054d4:	4606      	mov	r6, r0
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 80054d6:	6803      	ldr	r3, [r0, #0]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054de:	2b10      	cmp	r3, #16
 80054e0:	d027      	beq.n	8005532 <lwip_sendto+0x76>
  short_size = (u16_t)size;
 80054e2:	fa1f f885 	uxth.w	r8, r5
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 80054e6:	b35c      	cbz	r4, 8005540 <lwip_sendto+0x84>
 80054e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054ea:	2b10      	cmp	r3, #16
 80054ec:	d12c      	bne.n	8005548 <lwip_sendto+0x8c>
 80054ee:	7863      	ldrb	r3, [r4, #1]
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d129      	bne.n	8005548 <lwip_sendto+0x8c>
 80054f4:	f014 0f03 	tst.w	r4, #3
 80054f8:	d126      	bne.n	8005548 <lwip_sendto+0x8c>
  buf.p = buf.ptr = NULL;
 80054fa:	2300      	movs	r3, #0
 80054fc:	9301      	str	r3, [sp, #4]
 80054fe:	9300      	str	r3, [sp, #0]
  if (to) {
 8005500:	b354      	cbz	r4, 8005558 <lwip_sendto+0x9c>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 8005502:	6863      	ldr	r3, [r4, #4]
 8005504:	9302      	str	r3, [sp, #8]
 8005506:	8860      	ldrh	r0, [r4, #2]
 8005508:	f000 f9f3 	bl	80058f2 <lwip_ntohs>
  netbuf_fromport(&buf) = remote_port;
 800550c:	f8ad 000c 	strh.w	r0, [sp, #12]
  err = netbuf_ref(&buf, data, short_size);
 8005510:	4642      	mov	r2, r8
 8005512:	4639      	mov	r1, r7
 8005514:	4668      	mov	r0, sp
 8005516:	f7ff fd71 	bl	8004ffc <netbuf_ref>
  if (err == ERR_OK) {
 800551a:	4604      	mov	r4, r0
 800551c:	b1f8      	cbz	r0, 800555e <lwip_sendto+0xa2>
  netbuf_free(&buf);
 800551e:	4668      	mov	r0, sp
 8005520:	f7ff fd60 	bl	8004fe4 <netbuf_free>
  sock_set_errno(sock, err_to_errno(err));
 8005524:	4263      	negs	r3, r4
 8005526:	2b10      	cmp	r3, #16
 8005528:	d81f      	bhi.n	800556a <lwip_sendto+0xae>
 800552a:	4a19      	ldr	r2, [pc, #100]	; (8005590 <lwip_sendto+0xd4>)
 800552c:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8005530:	e01c      	b.n	800556c <lwip_sendto+0xb0>
    return lwip_send(s, data, size, flags);
 8005532:	464b      	mov	r3, r9
 8005534:	462a      	mov	r2, r5
 8005536:	4639      	mov	r1, r7
 8005538:	4640      	mov	r0, r8
 800553a:	f000 f82b 	bl	8005594 <lwip_send>
 800553e:	e019      	b.n	8005574 <lwip_sendto+0xb8>
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8005540:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0d9      	beq.n	80054fa <lwip_sendto+0x3e>
 8005546:	e7cf      	b.n	80054e8 <lwip_sendto+0x2c>
 8005548:	2405      	movs	r4, #5
 800554a:	7434      	strb	r4, [r6, #16]
 800554c:	f006 fb5e 	bl	800bc0c <__errno>
 8005550:	6004      	str	r4, [r0, #0]
 8005552:	f04f 30ff 	mov.w	r0, #4294967295
 8005556:	e00d      	b.n	8005574 <lwip_sendto+0xb8>
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 8005558:	2000      	movs	r0, #0
 800555a:	9002      	str	r0, [sp, #8]
 800555c:	e7d6      	b.n	800550c <lwip_sendto+0x50>
    err = netconn_send(sock->conn, &buf);
 800555e:	4669      	mov	r1, sp
 8005560:	6830      	ldr	r0, [r6, #0]
 8005562:	f7fe ffe1 	bl	8004528 <netconn_send>
 8005566:	4604      	mov	r4, r0
 8005568:	e7d9      	b.n	800551e <lwip_sendto+0x62>
  sock_set_errno(sock, err_to_errno(err));
 800556a:	2705      	movs	r7, #5
 800556c:	7437      	strb	r7, [r6, #16]
 800556e:	b927      	cbnz	r7, 800557a <lwip_sendto+0xbe>
  return (err == ERR_OK ? short_size : -1);
 8005570:	b954      	cbnz	r4, 8005588 <lwip_sendto+0xcc>
 8005572:	b2a8      	uxth	r0, r5
}
 8005574:	b005      	add	sp, #20
 8005576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sock_set_errno(sock, err_to_errno(err));
 800557a:	f006 fb47 	bl	800bc0c <__errno>
 800557e:	6007      	str	r7, [r0, #0]
 8005580:	e7f6      	b.n	8005570 <lwip_sendto+0xb4>
    return -1;
 8005582:	f04f 30ff 	mov.w	r0, #4294967295
 8005586:	e7f5      	b.n	8005574 <lwip_sendto+0xb8>
  return (err == ERR_OK ? short_size : -1);
 8005588:	f04f 30ff 	mov.w	r0, #4294967295
 800558c:	e7f2      	b.n	8005574 <lwip_sendto+0xb8>
 800558e:	bf00      	nop
 8005590:	0800d0a8 	.word	0x0800d0a8

08005594 <lwip_send>:
{
 8005594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005598:	b084      	sub	sp, #16
 800559a:	4680      	mov	r8, r0
 800559c:	460e      	mov	r6, r1
 800559e:	4617      	mov	r7, r2
 80055a0:	461d      	mov	r5, r3
  sock = get_socket(s);
 80055a2:	f7ff fe53 	bl	800524c <get_socket>
  if (!sock) {
 80055a6:	2800      	cmp	r0, #0
 80055a8:	d03b      	beq.n	8005622 <lwip_send+0x8e>
 80055aa:	4604      	mov	r4, r0
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 80055ac:	6803      	ldr	r3, [r0, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055b4:	2b10      	cmp	r3, #16
 80055b6:	d120      	bne.n	80055fa <lwip_send+0x66>
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 80055b8:	f015 0f10 	tst.w	r5, #16
 80055bc:	d027      	beq.n	800560e <lwip_send+0x7a>
 80055be:	2103      	movs	r1, #3
 80055c0:	f015 0f08 	tst.w	r5, #8
 80055c4:	d025      	beq.n	8005612 <lwip_send+0x7e>
 80055c6:	2304      	movs	r3, #4
  written = 0;
 80055c8:	aa04      	add	r2, sp, #16
 80055ca:	2000      	movs	r0, #0
 80055cc:	f842 0d04 	str.w	r0, [r2, #-4]!
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 80055d0:	6820      	ldr	r0, [r4, #0]
 80055d2:	9200      	str	r2, [sp, #0]
 80055d4:	430b      	orrs	r3, r1
 80055d6:	463a      	mov	r2, r7
 80055d8:	4631      	mov	r1, r6
 80055da:	f7fe ffb9 	bl	8004550 <netconn_write_partly>
 80055de:	4606      	mov	r6, r0
  sock_set_errno(sock, err_to_errno(err));
 80055e0:	4243      	negs	r3, r0
 80055e2:	2b10      	cmp	r3, #16
 80055e4:	d817      	bhi.n	8005616 <lwip_send+0x82>
 80055e6:	4a12      	ldr	r2, [pc, #72]	; (8005630 <lwip_send+0x9c>)
 80055e8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80055ec:	7425      	strb	r5, [r4, #16]
 80055ee:	b9a5      	cbnz	r5, 800561a <lwip_send+0x86>
  return (err == ERR_OK ? (int)written : -1);
 80055f0:	b9d6      	cbnz	r6, 8005628 <lwip_send+0x94>
 80055f2:	9803      	ldr	r0, [sp, #12]
}
 80055f4:	b004      	add	sp, #16
 80055f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return lwip_sendto(s, data, size, flags, NULL, 0);
 80055fa:	2300      	movs	r3, #0
 80055fc:	9301      	str	r3, [sp, #4]
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	462b      	mov	r3, r5
 8005602:	463a      	mov	r2, r7
 8005604:	4631      	mov	r1, r6
 8005606:	4640      	mov	r0, r8
 8005608:	f7ff ff58 	bl	80054bc <lwip_sendto>
 800560c:	e7f2      	b.n	80055f4 <lwip_send+0x60>
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800560e:	2101      	movs	r1, #1
 8005610:	e7d6      	b.n	80055c0 <lwip_send+0x2c>
 8005612:	2300      	movs	r3, #0
 8005614:	e7d8      	b.n	80055c8 <lwip_send+0x34>
  sock_set_errno(sock, err_to_errno(err));
 8005616:	2505      	movs	r5, #5
 8005618:	e7e8      	b.n	80055ec <lwip_send+0x58>
 800561a:	f006 faf7 	bl	800bc0c <__errno>
 800561e:	6005      	str	r5, [r0, #0]
 8005620:	e7e6      	b.n	80055f0 <lwip_send+0x5c>
    return -1;
 8005622:	f04f 30ff 	mov.w	r0, #4294967295
 8005626:	e7e5      	b.n	80055f4 <lwip_send+0x60>
  return (err == ERR_OK ? (int)written : -1);
 8005628:	f04f 30ff 	mov.w	r0, #4294967295
 800562c:	e7e2      	b.n	80055f4 <lwip_send+0x60>
 800562e:	bf00      	nop
 8005630:	0800d0a8 	.word	0x0800d0a8

08005634 <lwip_socket>:
{
 8005634:	b538      	push	{r3, r4, r5, lr}
 8005636:	4613      	mov	r3, r2
  switch (type) {
 8005638:	2902      	cmp	r1, #2
 800563a:	d01c      	beq.n	8005676 <lwip_socket+0x42>
 800563c:	2903      	cmp	r1, #3
 800563e:	d008      	beq.n	8005652 <lwip_socket+0x1e>
 8005640:	2901      	cmp	r1, #1
 8005642:	d023      	beq.n	800568c <lwip_socket+0x58>
    set_errno(EINVAL);
 8005644:	f006 fae2 	bl	800bc0c <__errno>
 8005648:	2316      	movs	r3, #22
 800564a:	6003      	str	r3, [r0, #0]
    return -1;
 800564c:	f04f 34ff 	mov.w	r4, #4294967295
 8005650:	e00f      	b.n	8005672 <lwip_socket+0x3e>
    conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 8005652:	4a1c      	ldr	r2, [pc, #112]	; (80056c4 <lwip_socket+0x90>)
 8005654:	b2d9      	uxtb	r1, r3
 8005656:	2040      	movs	r0, #64	; 0x40
 8005658:	f7fe fef0 	bl	800443c <netconn_new_with_proto_and_callback>
 800565c:	4605      	mov	r5, r0
  if (!conn) {
 800565e:	b315      	cbz	r5, 80056a6 <lwip_socket+0x72>
  i = alloc_socket(conn, 0);
 8005660:	2100      	movs	r1, #0
 8005662:	4628      	mov	r0, r5
 8005664:	f7ff fcfe 	bl	8005064 <alloc_socket>
 8005668:	4604      	mov	r4, r0
  if (i == -1) {
 800566a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800566e:	d021      	beq.n	80056b4 <lwip_socket+0x80>
  conn->socket = i;
 8005670:	61a8      	str	r0, [r5, #24]
}
 8005672:	4620      	mov	r0, r4
 8005674:	bd38      	pop	{r3, r4, r5, pc}
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 8005676:	2a88      	cmp	r2, #136	; 0x88
 8005678:	d006      	beq.n	8005688 <lwip_socket+0x54>
 800567a:	2020      	movs	r0, #32
 800567c:	4a11      	ldr	r2, [pc, #68]	; (80056c4 <lwip_socket+0x90>)
 800567e:	2100      	movs	r1, #0
 8005680:	f7fe fedc 	bl	800443c <netconn_new_with_proto_and_callback>
 8005684:	4605      	mov	r5, r0
    break;
 8005686:	e7ea      	b.n	800565e <lwip_socket+0x2a>
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 8005688:	2021      	movs	r0, #33	; 0x21
 800568a:	e7f7      	b.n	800567c <lwip_socket+0x48>
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), event_callback);
 800568c:	4a0d      	ldr	r2, [pc, #52]	; (80056c4 <lwip_socket+0x90>)
 800568e:	2100      	movs	r1, #0
 8005690:	2010      	movs	r0, #16
 8005692:	f7fe fed3 	bl	800443c <netconn_new_with_proto_and_callback>
    if (conn != NULL) {
 8005696:	4605      	mov	r5, r0
 8005698:	2800      	cmp	r0, #0
 800569a:	d0e0      	beq.n	800565e <lwip_socket+0x2a>
      netconn_set_noautorecved(conn, 1);
 800569c:	7f03      	ldrb	r3, [r0, #28]
 800569e:	f043 0308 	orr.w	r3, r3, #8
 80056a2:	7703      	strb	r3, [r0, #28]
 80056a4:	e7db      	b.n	800565e <lwip_socket+0x2a>
    set_errno(ENOBUFS);
 80056a6:	f006 fab1 	bl	800bc0c <__errno>
 80056aa:	2369      	movs	r3, #105	; 0x69
 80056ac:	6003      	str	r3, [r0, #0]
    return -1;
 80056ae:	f04f 34ff 	mov.w	r4, #4294967295
 80056b2:	e7de      	b.n	8005672 <lwip_socket+0x3e>
    netconn_delete(conn);
 80056b4:	4628      	mov	r0, r5
 80056b6:	f7fe fef3 	bl	80044a0 <netconn_delete>
    set_errno(ENFILE);
 80056ba:	f006 faa7 	bl	800bc0c <__errno>
 80056be:	2317      	movs	r3, #23
 80056c0:	6003      	str	r3, [r0, #0]
    return -1;
 80056c2:	e7d6      	b.n	8005672 <lwip_socket+0x3e>
 80056c4:	080052a9 	.word	0x080052a9

080056c8 <lwip_setsockopt>:
{
 80056c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056cc:	b088      	sub	sp, #32
 80056ce:	4680      	mov	r8, r0
 80056d0:	460f      	mov	r7, r1
 80056d2:	4616      	mov	r6, r2
 80056d4:	461c      	mov	r4, r3
  struct lwip_sock *sock = get_socket(s);
 80056d6:	f7ff fdb9 	bl	800524c <get_socket>
  if (!sock) {
 80056da:	2800      	cmp	r0, #0
 80056dc:	d044      	beq.n	8005768 <lwip_setsockopt+0xa0>
 80056de:	4605      	mov	r5, r0
  if (NULL == optval) {
 80056e0:	b1d4      	cbz	r4, 8005718 <lwip_setsockopt+0x50>
  LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).s = s;
 80056e2:	f8cd 8004 	str.w	r8, [sp, #4]
  LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).level = level;
 80056e6:	9702      	str	r7, [sp, #8]
  LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).optname = optname;
 80056e8:	9603      	str	r6, [sp, #12]
  LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).optlen = optlen;
 80056ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056ec:	9305      	str	r3, [sp, #20]
  LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).optval.pc = (const void*)optval;
 80056ee:	9404      	str	r4, [sp, #16]
  LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err = 0;
 80056f0:	2300      	movs	r3, #0
 80056f2:	f88d 3018 	strb.w	r3, [sp, #24]
  LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).completed_sem = &sock->conn->op_completed;
 80056f6:	6803      	ldr	r3, [r0, #0]
 80056f8:	330c      	adds	r3, #12
 80056fa:	9307      	str	r3, [sp, #28]
  err = tcpip_callback(lwip_setsockopt_callback, &LWIP_SETGETSOCKOPT_DATA_VAR_REF(data));
 80056fc:	2201      	movs	r2, #1
 80056fe:	a901      	add	r1, sp, #4
 8005700:	481b      	ldr	r0, [pc, #108]	; (8005770 <lwip_setsockopt+0xa8>)
 8005702:	f000 f87f 	bl	8005804 <tcpip_callback_with_block>
 8005706:	b2c0      	uxtb	r0, r0
  if (err != ERR_OK) {
 8005708:	b1e0      	cbz	r0, 8005744 <lwip_setsockopt+0x7c>
    sock_set_errno(sock, err_to_errno(err));
 800570a:	4240      	negs	r0, r0
 800570c:	2810      	cmp	r0, #16
 800570e:	d80b      	bhi.n	8005728 <lwip_setsockopt+0x60>
 8005710:	4b18      	ldr	r3, [pc, #96]	; (8005774 <lwip_setsockopt+0xac>)
 8005712:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8005716:	e008      	b.n	800572a <lwip_setsockopt+0x62>
    sock_set_errno(sock, EFAULT);
 8005718:	240e      	movs	r4, #14
 800571a:	7404      	strb	r4, [r0, #16]
 800571c:	f006 fa76 	bl	800bc0c <__errno>
 8005720:	6004      	str	r4, [r0, #0]
    return -1;
 8005722:	f04f 30ff 	mov.w	r0, #4294967295
 8005726:	e004      	b.n	8005732 <lwip_setsockopt+0x6a>
    sock_set_errno(sock, err_to_errno(err));
 8005728:	2405      	movs	r4, #5
 800572a:	742c      	strb	r4, [r5, #16]
 800572c:	b924      	cbnz	r4, 8005738 <lwip_setsockopt+0x70>
    return -1;
 800572e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005732:	b008      	add	sp, #32
 8005734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sock_set_errno(sock, err_to_errno(err));
 8005738:	f006 fa68 	bl	800bc0c <__errno>
 800573c:	6004      	str	r4, [r0, #0]
    return -1;
 800573e:	f04f 30ff 	mov.w	r0, #4294967295
 8005742:	e7f6      	b.n	8005732 <lwip_setsockopt+0x6a>
  sys_arch_sem_wait((sys_sem_t*)(LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).completed_sem), 0);
 8005744:	2100      	movs	r1, #0
 8005746:	9807      	ldr	r0, [sp, #28]
 8005748:	f005 f9cf 	bl	800aaea <sys_arch_sem_wait>
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
 800574c:	f89d 4018 	ldrb.w	r4, [sp, #24]
  sock_set_errno(sock, err);
 8005750:	742c      	strb	r4, [r5, #16]
 8005752:	b914      	cbnz	r4, 800575a <lwip_setsockopt+0x92>
  return err ? -1 : 0;
 8005754:	b92c      	cbnz	r4, 8005762 <lwip_setsockopt+0x9a>
 8005756:	2000      	movs	r0, #0
 8005758:	e7eb      	b.n	8005732 <lwip_setsockopt+0x6a>
  sock_set_errno(sock, err);
 800575a:	f006 fa57 	bl	800bc0c <__errno>
 800575e:	6004      	str	r4, [r0, #0]
 8005760:	e7f8      	b.n	8005754 <lwip_setsockopt+0x8c>
  return err ? -1 : 0;
 8005762:	f04f 30ff 	mov.w	r0, #4294967295
 8005766:	e7e4      	b.n	8005732 <lwip_setsockopt+0x6a>
    return -1;
 8005768:	f04f 30ff 	mov.w	r0, #4294967295
 800576c:	e7e1      	b.n	8005732 <lwip_setsockopt+0x6a>
 800576e:	bf00      	nop
 8005770:	080053a5 	.word	0x080053a5
 8005774:	0800d0a8 	.word	0x0800d0a8

08005778 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8005778:	b500      	push	{lr}
 800577a:	b083      	sub	sp, #12
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800577c:	4b1e      	ldr	r3, [pc, #120]	; (80057f8 <tcpip_thread+0x80>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	b13b      	cbz	r3, 8005792 <tcpip_thread+0x1a>
    tcpip_init_done(tcpip_init_done_arg);
 8005782:	4a1e      	ldr	r2, [pc, #120]	; (80057fc <tcpip_thread+0x84>)
 8005784:	6810      	ldr	r0, [r2, #0]
 8005786:	4798      	blx	r3
 8005788:	e003      	b.n	8005792 <tcpip_thread+0x1a>
    }
    switch (msg->type) {
#if LWIP_NETCONN || LWIP_SOCKET
    case TCPIP_MSG_API:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: API message %p\n", (void *)msg));
      msg->msg.apimsg->function(&(msg->msg.apimsg->msg));
 800578a:	6898      	ldr	r0, [r3, #8]
 800578c:	f850 3b04 	ldr.w	r3, [r0], #4
 8005790:	4798      	blx	r3
    sys_timeouts_mbox_fetch(&mbox, (void **)&msg);
 8005792:	a901      	add	r1, sp, #4
 8005794:	481a      	ldr	r0, [pc, #104]	; (8005800 <tcpip_thread+0x88>)
 8005796:	f000 ff9f 	bl	80066d8 <sys_timeouts_mbox_fetch>
    if (msg == NULL) {
 800579a:	9b01      	ldr	r3, [sp, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0f8      	beq.n	8005792 <tcpip_thread+0x1a>
    switch (msg->type) {
 80057a0:	781a      	ldrb	r2, [r3, #0]
 80057a2:	2a03      	cmp	r2, #3
 80057a4:	d8f5      	bhi.n	8005792 <tcpip_thread+0x1a>
 80057a6:	a101      	add	r1, pc, #4	; (adr r1, 80057ac <tcpip_thread+0x34>)
 80057a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80057ac:	0800578b 	.word	0x0800578b
 80057b0:	080057bd 	.word	0x080057bd
 80057b4:	080057e1 	.word	0x080057e1
 80057b8:	080057f1 	.word	0x080057f1

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
#if LWIP_ETHERNET
      if (msg->msg.inp.netif->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80057bc:	68d9      	ldr	r1, [r3, #12]
 80057be:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
 80057c2:	f012 0f18 	tst.w	r2, #24
 80057c6:	d007      	beq.n	80057d8 <tcpip_thread+0x60>
        ethernet_input(msg->msg.inp.p, msg->msg.inp.netif);
 80057c8:	6898      	ldr	r0, [r3, #8]
 80057ca:	f005 f8a1 	bl	800a910 <ethernet_input>
      } else
#endif /* LWIP_ETHERNET */
      ip_input(msg->msg.inp.p, msg->msg.inp.netif);
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80057ce:	9901      	ldr	r1, [sp, #4]
 80057d0:	2009      	movs	r0, #9
 80057d2:	f001 f95f 	bl	8006a94 <memp_free>
      break;
 80057d6:	e7dc      	b.n	8005792 <tcpip_thread+0x1a>
      ip_input(msg->msg.inp.p, msg->msg.inp.netif);
 80057d8:	6898      	ldr	r0, [r3, #8]
 80057da:	f000 fa95 	bl	8005d08 <ip_input>
 80057de:	e7f6      	b.n	80057ce <tcpip_thread+0x56>
      break;
#endif /* LWIP_TCPIP_TIMEOUT */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80057e0:	689a      	ldr	r2, [r3, #8]
 80057e2:	68d8      	ldr	r0, [r3, #12]
 80057e4:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80057e6:	9901      	ldr	r1, [sp, #4]
 80057e8:	2008      	movs	r0, #8
 80057ea:	f001 f953 	bl	8006a94 <memp_free>
      break;
 80057ee:	e7d0      	b.n	8005792 <tcpip_thread+0x1a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80057f0:	689a      	ldr	r2, [r3, #8]
 80057f2:	68d8      	ldr	r0, [r3, #12]
 80057f4:	4790      	blx	r2
      break;
 80057f6:	e7cc      	b.n	8005792 <tcpip_thread+0x1a>
 80057f8:	20003e68 	.word	0x20003e68
 80057fc:	20003e6c 	.word	0x20003e6c
 8005800:	20003e64 	.word	0x20003e64

08005804 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8005804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005806:	4607      	mov	r7, r0
 8005808:	460e      	mov	r6, r1
 800580a:	4615      	mov	r5, r2
  struct tcpip_msg *msg;

  if (sys_mbox_valid_val(mbox)) {
 800580c:	4814      	ldr	r0, [pc, #80]	; (8005860 <tcpip_callback_with_block+0x5c>)
 800580e:	f005 f945 	bl	800aa9c <sys_mbox_valid>
 8005812:	b1f0      	cbz	r0, 8005852 <tcpip_callback_with_block+0x4e>
    msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8005814:	2008      	movs	r0, #8
 8005816:	f001 f92f 	bl	8006a78 <memp_malloc>
    if (msg == NULL) {
 800581a:	4604      	mov	r4, r0
 800581c:	b1e0      	cbz	r0, 8005858 <tcpip_callback_with_block+0x54>
      return ERR_MEM;
    }

    msg->type = TCPIP_MSG_CALLBACK;
 800581e:	2302      	movs	r3, #2
 8005820:	7003      	strb	r3, [r0, #0]
    msg->msg.cb.function = function;
 8005822:	6087      	str	r7, [r0, #8]
    msg->msg.cb.ctx = ctx;
 8005824:	60c6      	str	r6, [r0, #12]
    if (block) {
 8005826:	b93d      	cbnz	r5, 8005838 <tcpip_callback_with_block+0x34>
      sys_mbox_post(&mbox, msg);
    } else {
      if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8005828:	4601      	mov	r1, r0
 800582a:	480d      	ldr	r0, [pc, #52]	; (8005860 <tcpip_callback_with_block+0x5c>)
 800582c:	f005 f8e4 	bl	800a9f8 <sys_mbox_trypost>
 8005830:	4603      	mov	r3, r0
 8005832:	b938      	cbnz	r0, 8005844 <tcpip_callback_with_block+0x40>
      }
    }
    return ERR_OK;
  }
  return ERR_VAL;
}
 8005834:	4618      	mov	r0, r3
 8005836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      sys_mbox_post(&mbox, msg);
 8005838:	4601      	mov	r1, r0
 800583a:	4809      	ldr	r0, [pc, #36]	; (8005860 <tcpip_callback_with_block+0x5c>)
 800583c:	f005 f8cd 	bl	800a9da <sys_mbox_post>
    return ERR_OK;
 8005840:	2300      	movs	r3, #0
 8005842:	e7f7      	b.n	8005834 <tcpip_callback_with_block+0x30>
        memp_free(MEMP_TCPIP_MSG_API, msg);
 8005844:	4621      	mov	r1, r4
 8005846:	2008      	movs	r0, #8
 8005848:	f001 f924 	bl	8006a94 <memp_free>
        return ERR_MEM;
 800584c:	f04f 33ff 	mov.w	r3, #4294967295
 8005850:	e7f0      	b.n	8005834 <tcpip_callback_with_block+0x30>
  return ERR_VAL;
 8005852:	f06f 0305 	mvn.w	r3, #5
 8005856:	e7ed      	b.n	8005834 <tcpip_callback_with_block+0x30>
      return ERR_MEM;
 8005858:	f04f 33ff 	mov.w	r3, #4294967295
 800585c:	e7ea      	b.n	8005834 <tcpip_callback_with_block+0x30>
 800585e:	bf00      	nop
 8005860:	20003e64 	.word	0x20003e64

08005864 <tcpip_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_apimsg(struct api_msg *apimsg)
{
 8005864:	b530      	push	{r4, r5, lr}
 8005866:	b085      	sub	sp, #20
 8005868:	4604      	mov	r4, r0
#ifdef LWIP_DEBUG
  /* catch functions that don't set err */
  apimsg->msg.err = ERR_VAL;
#endif

  if (sys_mbox_valid_val(mbox)) {
 800586a:	480c      	ldr	r0, [pc, #48]	; (800589c <tcpip_apimsg+0x38>)
 800586c:	f005 f916 	bl	800aa9c <sys_mbox_valid>
 8005870:	b180      	cbz	r0, 8005894 <tcpip_apimsg+0x30>
    TCPIP_MSG_VAR_ALLOC(msg);
    TCPIP_MSG_VAR_REF(msg).type = TCPIP_MSG_API;
 8005872:	2500      	movs	r5, #0
 8005874:	f88d 5000 	strb.w	r5, [sp]
    TCPIP_MSG_VAR_REF(msg).msg.apimsg = apimsg;
 8005878:	9402      	str	r4, [sp, #8]
#if LWIP_NETCONN_SEM_PER_THREAD
    apimsg->msg.op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
    LWIP_ASSERT("netconn semaphore not initialized",
      sys_sem_valid(apimsg->msg.op_completed_sem));
#endif
    sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
 800587a:	4669      	mov	r1, sp
 800587c:	4807      	ldr	r0, [pc, #28]	; (800589c <tcpip_apimsg+0x38>)
 800587e:	f005 f8ac 	bl	800a9da <sys_mbox_post>
    sys_arch_sem_wait(LWIP_API_MSG_SEM(&apimsg->msg), 0);
 8005882:	6860      	ldr	r0, [r4, #4]
 8005884:	4629      	mov	r1, r5
 8005886:	300c      	adds	r0, #12
 8005888:	f005 f92f 	bl	800aaea <sys_arch_sem_wait>
    TCPIP_MSG_VAR_FREE(msg);
    return apimsg->msg.err;
 800588c:	f994 0008 	ldrsb.w	r0, [r4, #8]
  }
  return ERR_VAL;
}
 8005890:	b005      	add	sp, #20
 8005892:	bd30      	pop	{r4, r5, pc}
  return ERR_VAL;
 8005894:	f06f 0005 	mvn.w	r0, #5
 8005898:	e7fa      	b.n	8005890 <tcpip_apimsg+0x2c>
 800589a:	bf00      	nop
 800589c:	20003e64 	.word	0x20003e64

080058a0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80058a0:	b530      	push	{r4, r5, lr}
 80058a2:	b083      	sub	sp, #12
 80058a4:	4605      	mov	r5, r0
 80058a6:	460c      	mov	r4, r1
  lwip_init();
 80058a8:	f000 f837 	bl	800591a <lwip_init>

  tcpip_init_done = initfunc;
 80058ac:	4b09      	ldr	r3, [pc, #36]	; (80058d4 <tcpip_init+0x34>)
 80058ae:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 80058b0:	4b09      	ldr	r3, [pc, #36]	; (80058d8 <tcpip_init+0x38>)
 80058b2:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80058b4:	2100      	movs	r1, #0
 80058b6:	4809      	ldr	r0, [pc, #36]	; (80058dc <tcpip_init+0x3c>)
 80058b8:	f005 f878 	bl	800a9ac <sys_mbox_new>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80058bc:	2306      	movs	r3, #6
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058c4:	2200      	movs	r2, #0
 80058c6:	4906      	ldr	r1, [pc, #24]	; (80058e0 <tcpip_init+0x40>)
 80058c8:	4806      	ldr	r0, [pc, #24]	; (80058e4 <tcpip_init+0x44>)
 80058ca:	f005 f967 	bl	800ab9c <sys_thread_new>
}
 80058ce:	b003      	add	sp, #12
 80058d0:	bd30      	pop	{r4, r5, pc}
 80058d2:	bf00      	nop
 80058d4:	20003e68 	.word	0x20003e68
 80058d8:	20003e6c 	.word	0x20003e6c
 80058dc:	20003e64 	.word	0x20003e64
 80058e0:	08005779 	.word	0x08005779
 80058e4:	0800d0ec 	.word	0x0800d0ec

080058e8 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return ((n & 0xff) << 8) | ((n & 0xff00) >> 8);
 80058e8:	0a03      	lsrs	r3, r0, #8
 80058ea:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 80058ee:	b280      	uxth	r0, r0
 80058f0:	4770      	bx	lr

080058f2 <lwip_ntohs>:
 * @param n u16_t in network byte order
 * @return n in host byte order
 */
u16_t
lwip_ntohs(u16_t n)
{
 80058f2:	b508      	push	{r3, lr}
  return lwip_htons(n);
 80058f4:	f7ff fff8 	bl	80058e8 <lwip_htons>
}
 80058f8:	bd08      	pop	{r3, pc}

080058fa <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return ((n & 0xff) << 24) |
    ((n & 0xff00) << 8) |
 80058fa:	0203      	lsls	r3, r0, #8
 80058fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  return ((n & 0xff) << 24) |
 8005900:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
    ((n & 0xff0000UL) >> 8) |
 8005904:	0a02      	lsrs	r2, r0, #8
 8005906:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    ((n & 0xff00) << 8) |
 800590a:	4313      	orrs	r3, r2
    ((n & 0xff000000UL) >> 24);
}
 800590c:	ea43 6010 	orr.w	r0, r3, r0, lsr #24
 8005910:	4770      	bx	lr

08005912 <lwip_ntohl>:
 * @param n u32_t in network byte order
 * @return n in host byte order
 */
u32_t
lwip_ntohl(u32_t n)
{
 8005912:	b508      	push	{r3, lr}
  return lwip_htonl(n);
 8005914:	f7ff fff1 	bl	80058fa <lwip_htonl>
}
 8005918:	bd08      	pop	{r3, pc}

0800591a <lwip_init>:
/**
 * Initialize all modules.
 */
void
lwip_init(void)
{
 800591a:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800591c:	f005 f91e 	bl	800ab5c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8005920:	f000 ff46 	bl	80067b0 <mem_init>
  memp_init();
 8005924:	f001 f88c 	bl	8006a40 <memp_init>
  pbuf_init();
  netif_init();
 8005928:	f001 f8d1 	bl	8006ace <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800592c:	f004 fa22 	bl	8009d74 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005930:	f001 fc12 	bl	8007158 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005934:	f000 fea6 	bl	8006684 <sys_timeouts_init>
 8005938:	bd08      	pop	{r3, pc}

0800593a <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800593a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	4606      	mov	r6, r0
 8005942:	4688      	mov	r8, r1
 8005944:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8005946:	2200      	movs	r2, #0
 8005948:	2124      	movs	r1, #36	; 0x24
 800594a:	2001      	movs	r0, #1
 800594c:	f001 fa52 	bl	8006df4 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8005950:	b3a0      	cbz	r0, 80059bc <icmp_send_response+0x82>
 8005952:	4605      	mov	r5, r0
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8005954:	f8d6 e004 	ldr.w	lr, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8005958:	6844      	ldr	r4, [r0, #4]
  icmphdr->type = type;
 800595a:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 800595e:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 8005960:	2300      	movs	r3, #0
 8005962:	7123      	strb	r3, [r4, #4]
 8005964:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8005966:	71a3      	strb	r3, [r4, #6]
 8005968:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800596a:	6847      	ldr	r7, [r0, #4]
 800596c:	6873      	ldr	r3, [r6, #4]
 800596e:	681e      	ldr	r6, [r3, #0]
 8005970:	6858      	ldr	r0, [r3, #4]
 8005972:	6899      	ldr	r1, [r3, #8]
 8005974:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8005978:	60be      	str	r6, [r7, #8]
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	6139      	str	r1, [r7, #16]
 800597e:	f8c7 c014 	str.w	ip, [r7, #20]
 8005982:	691e      	ldr	r6, [r3, #16]
 8005984:	6958      	ldr	r0, [r3, #20]
 8005986:	6999      	ldr	r1, [r3, #24]
 8005988:	61be      	str	r6, [r7, #24]
 800598a:	61f8      	str	r0, [r7, #28]
 800598c:	6239      	str	r1, [r7, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800598e:	f8de 300c 	ldr.w	r3, [lr, #12]
 8005992:	a806      	add	r0, sp, #24
 8005994:	f840 3d04 	str.w	r3, [r0, #-4]!
  netif = ip4_route(&iphdr_src);
 8005998:	f000 f8a0 	bl	8005adc <ip4_route>
  if (netif != NULL) {
 800599c:	b158      	cbz	r0, 80059b6 <icmp_send_response+0x7c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800599e:	2100      	movs	r1, #0
 80059a0:	70a1      	strb	r1, [r4, #2]
 80059a2:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80059a4:	9002      	str	r0, [sp, #8]
 80059a6:	2301      	movs	r3, #1
 80059a8:	9301      	str	r3, [sp, #4]
 80059aa:	9100      	str	r1, [sp, #0]
 80059ac:	23ff      	movs	r3, #255	; 0xff
 80059ae:	aa05      	add	r2, sp, #20
 80059b0:	4628      	mov	r0, r5
 80059b2:	f000 fa09 	bl	8005dc8 <ip4_output_if>
  }
  pbuf_free(q);
 80059b6:	4628      	mov	r0, r5
 80059b8:	f001 f9ee 	bl	8006d98 <pbuf_free>
}
 80059bc:	b006      	add	sp, #24
 80059be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080059c4 <icmp_input>:
{
 80059c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80059c8:	b085      	sub	sp, #20
 80059ca:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 80059cc:	4b3c      	ldr	r3, [pc, #240]	; (8005ac0 <icmp_input+0xfc>)
 80059ce:	689e      	ldr	r6, [r3, #8]
  hlen = IPH_HL(iphdr_in) * 4;
 80059d0:	7834      	ldrb	r4, [r6, #0]
  if (p->len < sizeof(u16_t)*2) {
 80059d2:	8943      	ldrh	r3, [r0, #10]
 80059d4:	2b03      	cmp	r3, #3
 80059d6:	d917      	bls.n	8005a08 <icmp_input+0x44>
 80059d8:	460f      	mov	r7, r1
 80059da:	f004 040f 	and.w	r4, r4, #15
 80059de:	00a4      	lsls	r4, r4, #2
 80059e0:	fa0f f884 	sxth.w	r8, r4
  type = *((u8_t *)p->payload);
 80059e4:	6843      	ldr	r3, [r0, #4]
 80059e6:	781b      	ldrb	r3, [r3, #0]
  switch (type) {
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d14d      	bne.n	8005a88 <icmp_input+0xc4>
    if (ip_addr_ismulticast(ip_current_dest_addr())) {
 80059ec:	4b34      	ldr	r3, [pc, #208]	; (8005ac0 <icmp_input+0xfc>)
 80059ee:	6958      	ldr	r0, [r3, #20]
 80059f0:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80059f4:	2be0      	cmp	r3, #224	; 0xe0
 80059f6:	d026      	beq.n	8005a46 <icmp_input+0x82>
    if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif())) {
 80059f8:	4b31      	ldr	r3, [pc, #196]	; (8005ac0 <icmp_input+0xfc>)
 80059fa:	6819      	ldr	r1, [r3, #0]
 80059fc:	f000 f9f9 	bl	8005df2 <ip4_addr_isbroadcast_u32>
 8005a00:	bb08      	cbnz	r0, 8005a46 <icmp_input+0x82>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8005a02:	892b      	ldrh	r3, [r5, #8]
 8005a04:	2b07      	cmp	r3, #7
 8005a06:	d803      	bhi.n	8005a10 <icmp_input+0x4c>
  pbuf_free(p);
 8005a08:	4628      	mov	r0, r5
 8005a0a:	f001 f9c5 	bl	8006d98 <pbuf_free>
  return;
 8005a0e:	e01d      	b.n	8005a4c <icmp_input+0x88>
    if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8005a10:	2122      	movs	r1, #34	; 0x22
 8005a12:	4628      	mov	r0, r5
 8005a14:	f001 f9b6 	bl	8006d84 <pbuf_header>
 8005a18:	b348      	cbz	r0, 8005a6e <icmp_input+0xaa>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8005a1a:	8929      	ldrh	r1, [r5, #8]
 8005a1c:	4421      	add	r1, r4
 8005a1e:	2200      	movs	r2, #0
 8005a20:	b289      	uxth	r1, r1
 8005a22:	2002      	movs	r0, #2
 8005a24:	f001 f9e6 	bl	8006df4 <pbuf_alloc>
      if (r == NULL) {
 8005a28:	4681      	mov	r9, r0
 8005a2a:	b160      	cbz	r0, 8005a46 <icmp_input+0x82>
      MEMCPY(r->payload, iphdr_in, hlen);
 8005a2c:	4642      	mov	r2, r8
 8005a2e:	4631      	mov	r1, r6
 8005a30:	6840      	ldr	r0, [r0, #4]
 8005a32:	f006 f924 	bl	800bc7e <memcpy>
      if (pbuf_header(r, -hlen)) {
 8005a36:	4261      	negs	r1, r4
 8005a38:	4648      	mov	r0, r9
 8005a3a:	f001 f9a3 	bl	8006d84 <pbuf_header>
 8005a3e:	b140      	cbz	r0, 8005a52 <icmp_input+0x8e>
        pbuf_free(r);
 8005a40:	4648      	mov	r0, r9
 8005a42:	f001 f9a9 	bl	8006d98 <pbuf_free>
  pbuf_free(p);
 8005a46:	4628      	mov	r0, r5
 8005a48:	f001 f9a6 	bl	8006d98 <pbuf_free>
}
 8005a4c:	b005      	add	sp, #20
 8005a4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (pbuf_copy(r, p) != ERR_OK) {
 8005a52:	4629      	mov	r1, r5
 8005a54:	4648      	mov	r0, r9
 8005a56:	f001 fab9 	bl	8006fcc <pbuf_copy>
 8005a5a:	b118      	cbz	r0, 8005a64 <icmp_input+0xa0>
        pbuf_free(r);
 8005a5c:	4648      	mov	r0, r9
 8005a5e:	f001 f99b 	bl	8006d98 <pbuf_free>
        goto icmperr;
 8005a62:	e7f0      	b.n	8005a46 <icmp_input+0x82>
      pbuf_free(p);
 8005a64:	4628      	mov	r0, r5
 8005a66:	f001 f997 	bl	8006d98 <pbuf_free>
      p = r;
 8005a6a:	464d      	mov	r5, r9
 8005a6c:	e006      	b.n	8005a7c <icmp_input+0xb8>
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8005a6e:	f06f 0121 	mvn.w	r1, #33	; 0x21
 8005a72:	4628      	mov	r0, r5
 8005a74:	f001 f986 	bl	8006d84 <pbuf_header>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	d1e4      	bne.n	8005a46 <icmp_input+0x82>
    iecho = (struct icmp_echo_hdr *)p->payload;
 8005a7c:	686c      	ldr	r4, [r5, #4]
    if (pbuf_header(p, hlen)) {
 8005a7e:	4641      	mov	r1, r8
 8005a80:	4628      	mov	r0, r5
 8005a82:	f001 f97f 	bl	8006d84 <pbuf_header>
 8005a86:	b118      	cbz	r0, 8005a90 <icmp_input+0xcc>
  pbuf_free(p);
 8005a88:	4628      	mov	r0, r5
 8005a8a:	f001 f985 	bl	8006d98 <pbuf_free>
  return;
 8005a8e:	e7dd      	b.n	8005a4c <icmp_input+0x88>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8005a90:	6868      	ldr	r0, [r5, #4]
      ip4_addr_copy(iphdr->src, *src);
 8005a92:	490b      	ldr	r1, [pc, #44]	; (8005ac0 <icmp_input+0xfc>)
 8005a94:	694b      	ldr	r3, [r1, #20]
 8005a96:	60c3      	str	r3, [r0, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8005a98:	690b      	ldr	r3, [r1, #16]
 8005a9a:	6103      	str	r3, [r0, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	7022      	strb	r2, [r4, #0]
      iecho->chksum = 0;
 8005aa0:	70a2      	strb	r2, [r4, #2]
 8005aa2:	70e2      	strb	r2, [r4, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8005aa4:	23ff      	movs	r3, #255	; 0xff
 8005aa6:	7203      	strb	r3, [r0, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8005aa8:	7282      	strb	r2, [r0, #10]
 8005aaa:	72c2      	strb	r2, [r0, #11]
      ret = ip4_output_if(p, src, IP_HDRINCL,
 8005aac:	9702      	str	r7, [sp, #8]
 8005aae:	2001      	movs	r0, #1
 8005ab0:	9001      	str	r0, [sp, #4]
 8005ab2:	9200      	str	r2, [sp, #0]
 8005ab4:	3114      	adds	r1, #20
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	f000 f986 	bl	8005dc8 <ip4_output_if>
 8005abc:	e7e4      	b.n	8005a88 <icmp_input+0xc4>
 8005abe:	bf00      	nop
 8005ac0:	20004058 	.word	0x20004058

08005ac4 <icmp_dest_unreach>:
{
 8005ac4:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_DUR, t);
 8005ac6:	460a      	mov	r2, r1
 8005ac8:	2103      	movs	r1, #3
 8005aca:	f7ff ff36 	bl	800593a <icmp_send_response>
 8005ace:	bd08      	pop	{r3, pc}

08005ad0 <icmp_time_exceeded>:
{
 8005ad0:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_TE, t);
 8005ad2:	460a      	mov	r2, r1
 8005ad4:	210b      	movs	r1, #11
 8005ad6:	f7ff ff30 	bl	800593a <icmp_send_response>
 8005ada:	bd08      	pop	{r3, pc}

08005adc <ip4_route>:
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8005adc:	4b25      	ldr	r3, [pc, #148]	; (8005b74 <ip4_route+0x98>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	e02b      	b.n	8005b3a <ip4_route+0x5e>
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	b1ab      	cbz	r3, 8005b12 <ip4_route+0x36>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005ae6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005aea:	f002 0105 	and.w	r1, r2, #5
 8005aee:	2905      	cmp	r1, #5
 8005af0:	d1f7      	bne.n	8005ae2 <ip4_route+0x6>
 8005af2:	6859      	ldr	r1, [r3, #4]
 8005af4:	2900      	cmp	r1, #0
 8005af6:	d0f4      	beq.n	8005ae2 <ip4_route+0x6>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8005af8:	6804      	ldr	r4, [r0, #0]
 8005afa:	689d      	ldr	r5, [r3, #8]
 8005afc:	4061      	eors	r1, r4
 8005afe:	4229      	tst	r1, r5
 8005b00:	d016      	beq.n	8005b30 <ip4_route+0x54>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8005b02:	f012 0f02 	tst.w	r2, #2
 8005b06:	d1ec      	bne.n	8005ae2 <ip4_route+0x6>
 8005b08:	68da      	ldr	r2, [r3, #12]
 8005b0a:	4294      	cmp	r4, r2
 8005b0c:	d1e9      	bne.n	8005ae2 <ip4_route+0x6>
        /* return netif on which to forward IP packet */
        return netif;
 8005b0e:	4618      	mov	r0, r3
 8005b10:	e00a      	b.n	8005b28 <ip4_route+0x4c>
    }
    return NULL;
  }
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8005b12:	4a19      	ldr	r2, [pc, #100]	; (8005b78 <ip4_route+0x9c>)
 8005b14:	6810      	ldr	r0, [r2, #0]
 8005b16:	b138      	cbz	r0, 8005b28 <ip4_route+0x4c>
 8005b18:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
 8005b1c:	f002 0205 	and.w	r2, r2, #5
 8005b20:	2a05      	cmp	r2, #5
 8005b22:	d107      	bne.n	8005b34 <ip4_route+0x58>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8005b24:	6842      	ldr	r2, [r0, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8005b26:	b10a      	cbz	r2, 8005b2c <ip4_route+0x50>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8005b28:	bc30      	pop	{r4, r5}
 8005b2a:	4770      	bx	lr
    return NULL;
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	e7fb      	b.n	8005b28 <ip4_route+0x4c>
        return netif;
 8005b30:	4618      	mov	r0, r3
 8005b32:	e7f9      	b.n	8005b28 <ip4_route+0x4c>
    return NULL;
 8005b34:	4618      	mov	r0, r3
 8005b36:	e7f7      	b.n	8005b28 <ip4_route+0x4c>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	b153      	cbz	r3, 8005b52 <ip4_route+0x76>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005b3c:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005b40:	f002 0105 	and.w	r1, r2, #5
 8005b44:	2905      	cmp	r1, #5
 8005b46:	d1f7      	bne.n	8005b38 <ip4_route+0x5c>
 8005b48:	6859      	ldr	r1, [r3, #4]
 8005b4a:	2900      	cmp	r1, #0
 8005b4c:	d0f4      	beq.n	8005b38 <ip4_route+0x5c>
{
 8005b4e:	b430      	push	{r4, r5}
 8005b50:	e7d2      	b.n	8005af8 <ip4_route+0x1c>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8005b52:	4a09      	ldr	r2, [pc, #36]	; (8005b78 <ip4_route+0x9c>)
 8005b54:	6810      	ldr	r0, [r2, #0]
 8005b56:	2800      	cmp	r0, #0
 8005b58:	d0e7      	beq.n	8005b2a <ip4_route+0x4e>
 8005b5a:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
 8005b5e:	f002 0205 	and.w	r2, r2, #5
 8005b62:	2a05      	cmp	r2, #5
 8005b64:	d104      	bne.n	8005b70 <ip4_route+0x94>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8005b66:	6842      	ldr	r2, [r0, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8005b68:	2a00      	cmp	r2, #0
 8005b6a:	d1de      	bne.n	8005b2a <ip4_route+0x4e>
    return NULL;
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	4770      	bx	lr
 8005b70:	4618      	mov	r0, r3
 8005b72:	4770      	bx	lr
 8005b74:	20007b1c 	.word	0x20007b1c
 8005b78:	20007b20 	.word	0x20007b20

08005b7c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8005b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b80:	4607      	mov	r7, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8005b82:	f8d0 9004 	ldr.w	r9, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 8005b86:	f899 8000 	ldrb.w	r8, [r9]
 8005b8a:	ea4f 1318 	mov.w	r3, r8, lsr #4
 8005b8e:	2b04      	cmp	r3, #4
 8005b90:	d004      	beq.n	8005b9c <ip4_input+0x20>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8005b92:	f001 f901 	bl	8006d98 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8005b96:	2000      	movs	r0, #0
 8005b98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b9c:	460e      	mov	r6, r1
  iphdr_hlen = IPH_HL(iphdr);
 8005b9e:	f008 080f 	and.w	r8, r8, #15
  iphdr_hlen *= 4;
 8005ba2:	ea4f 0888 	mov.w	r8, r8, lsl #2
  iphdr_len = ntohs(IPH_LEN(iphdr));
 8005ba6:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 8005baa:	f7ff fea2 	bl	80058f2 <lwip_ntohs>
 8005bae:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 8005bb0:	893b      	ldrh	r3, [r7, #8]
 8005bb2:	4298      	cmp	r0, r3
 8005bb4:	d30f      	bcc.n	8005bd6 <ip4_input+0x5a>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
 8005bb6:	897b      	ldrh	r3, [r7, #10]
 8005bb8:	4598      	cmp	r8, r3
 8005bba:	d811      	bhi.n	8005be0 <ip4_input+0x64>
 8005bbc:	893b      	ldrh	r3, [r7, #8]
 8005bbe:	429c      	cmp	r4, r3
 8005bc0:	d80e      	bhi.n	8005be0 <ip4_input+0x64>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8005bc2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8005bc6:	4b4e      	ldr	r3, [pc, #312]	; (8005d00 <ip4_input+0x184>)
 8005bc8:	615a      	str	r2, [r3, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8005bca:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8005bce:	611a      	str	r2, [r3, #16]
    netif = inp;
 8005bd0:	4634      	mov	r4, r6
    int first = 1;
 8005bd2:	2501      	movs	r5, #1
 8005bd4:	e010      	b.n	8005bf8 <ip4_input+0x7c>
    pbuf_realloc(p, iphdr_len);
 8005bd6:	4601      	mov	r1, r0
 8005bd8:	4638      	mov	r0, r7
 8005bda:	f001 f99f 	bl	8006f1c <pbuf_realloc>
 8005bde:	e7ea      	b.n	8005bb6 <ip4_input+0x3a>
    pbuf_free(p);
 8005be0:	4638      	mov	r0, r7
 8005be2:	f001 f8d9 	bl	8006d98 <pbuf_free>
    return ERR_OK;
 8005be6:	e7d6      	b.n	8005b96 <ip4_input+0x1a>
      if (first) {
 8005be8:	2d00      	cmp	r5, #0
 8005bea:	d065      	beq.n	8005cb8 <ip4_input+0x13c>
        netif = netif_list;
 8005bec:	4b45      	ldr	r3, [pc, #276]	; (8005d04 <ip4_input+0x188>)
 8005bee:	681c      	ldr	r4, [r3, #0]
        first = 0;
 8005bf0:	2500      	movs	r5, #0
      if (netif == inp) {
 8005bf2:	42b4      	cmp	r4, r6
 8005bf4:	d062      	beq.n	8005cbc <ip4_input+0x140>
    } while (netif != NULL);
 8005bf6:	b184      	cbz	r4, 8005c1a <ip4_input+0x9e>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8005bf8:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8005bfc:	f013 0f01 	tst.w	r3, #1
 8005c00:	d0f2      	beq.n	8005be8 <ip4_input+0x6c>
 8005c02:	6863      	ldr	r3, [r4, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0ef      	beq.n	8005be8 <ip4_input+0x6c>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8005c08:	4a3d      	ldr	r2, [pc, #244]	; (8005d00 <ip4_input+0x184>)
 8005c0a:	6950      	ldr	r0, [r2, #20]
 8005c0c:	4283      	cmp	r3, r0
 8005c0e:	d004      	beq.n	8005c1a <ip4_input+0x9e>
            ip_addr_isbroadcast(ip_current_dest_addr(), netif)
 8005c10:	4621      	mov	r1, r4
 8005c12:	f000 f8ee 	bl	8005df2 <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8005c16:	2800      	cmp	r0, #0
 8005c18:	d0e6      	beq.n	8005be8 <ip4_input+0x6c>
    if ((ip_addr_isbroadcast(ip_current_src_addr(), inp)) ||
 8005c1a:	4631      	mov	r1, r6
 8005c1c:	4b38      	ldr	r3, [pc, #224]	; (8005d00 <ip4_input+0x184>)
 8005c1e:	6918      	ldr	r0, [r3, #16]
 8005c20:	f000 f8e7 	bl	8005df2 <ip4_addr_isbroadcast_u32>
 8005c24:	2800      	cmp	r0, #0
 8005c26:	d14b      	bne.n	8005cc0 <ip4_input+0x144>
        (ip_addr_ismulticast(ip_current_src_addr()))) {
 8005c28:	4b35      	ldr	r3, [pc, #212]	; (8005d00 <ip4_input+0x184>)
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip_addr_isbroadcast(ip_current_src_addr(), inp)) ||
 8005c30:	2be0      	cmp	r3, #224	; 0xe0
 8005c32:	d045      	beq.n	8005cc0 <ip4_input+0x144>
  if (netif == NULL) {
 8005c34:	2c00      	cmp	r4, #0
 8005c36:	d047      	beq.n	8005cc8 <ip4_input+0x14c>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8005c38:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 8005c3c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	b13b      	cbz	r3, 8005c54 <ip4_input+0xd8>
    p = ip4_reass(p);
 8005c44:	4638      	mov	r0, r7
 8005c46:	f000 fb23 	bl	8006290 <ip4_reass>
    if (p == NULL) {
 8005c4a:	4607      	mov	r7, r0
 8005c4c:	2800      	cmp	r0, #0
 8005c4e:	d0a2      	beq.n	8005b96 <ip4_input+0x1a>
    iphdr = (struct ip_hdr *)p->payload;
 8005c50:	f8d0 9004 	ldr.w	r9, [r0, #4]
  ip_data.current_netif = netif;
 8005c54:	4a2a      	ldr	r2, [pc, #168]	; (8005d00 <ip4_input+0x184>)
 8005c56:	6014      	str	r4, [r2, #0]
  ip_data.current_input_netif = inp;
 8005c58:	6056      	str	r6, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8005c5a:	f8c2 9008 	str.w	r9, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8005c5e:	f899 3000 	ldrb.w	r3, [r9]
 8005c62:	f003 030f 	and.w	r3, r3, #15
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	8193      	strh	r3, [r2, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8005c6a:	f1c8 0100 	rsb	r1, r8, #0
 8005c6e:	4638      	mov	r0, r7
 8005c70:	f001 f888 	bl	8006d84 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 8005c74:	f899 3009 	ldrb.w	r3, [r9, #9]
 8005c78:	2b06      	cmp	r3, #6
 8005c7a:	d036      	beq.n	8005cea <ip4_input+0x16e>
 8005c7c:	2b11      	cmp	r3, #17
 8005c7e:	d027      	beq.n	8005cd0 <ip4_input+0x154>
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d037      	beq.n	8005cf4 <ip4_input+0x178>
      if (!ip_addr_isbroadcast(ip_current_dest_addr(), netif) &&
 8005c84:	4621      	mov	r1, r4
 8005c86:	4b1e      	ldr	r3, [pc, #120]	; (8005d00 <ip4_input+0x184>)
 8005c88:	6958      	ldr	r0, [r3, #20]
 8005c8a:	f000 f8b2 	bl	8005df2 <ip4_addr_isbroadcast_u32>
 8005c8e:	b978      	cbnz	r0, 8005cb0 <ip4_input+0x134>
          !ip_addr_ismulticast(ip_current_dest_addr())) {
 8005c90:	4b1b      	ldr	r3, [pc, #108]	; (8005d00 <ip4_input+0x184>)
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip_addr_isbroadcast(ip_current_dest_addr(), netif) &&
 8005c98:	2be0      	cmp	r3, #224	; 0xe0
 8005c9a:	d009      	beq.n	8005cb0 <ip4_input+0x134>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8005c9c:	4641      	mov	r1, r8
 8005c9e:	4638      	mov	r0, r7
 8005ca0:	f001 f875 	bl	8006d8e <pbuf_header_force>
        p->payload = iphdr;
 8005ca4:	f8c7 9004 	str.w	r9, [r7, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8005ca8:	2102      	movs	r1, #2
 8005caa:	4638      	mov	r0, r7
 8005cac:	f7ff ff0a 	bl	8005ac4 <icmp_dest_unreach>
      pbuf_free(p);
 8005cb0:	4638      	mov	r0, r7
 8005cb2:	f001 f871 	bl	8006d98 <pbuf_free>
 8005cb6:	e00f      	b.n	8005cd8 <ip4_input+0x15c>
        netif = netif->next;
 8005cb8:	6824      	ldr	r4, [r4, #0]
 8005cba:	e79a      	b.n	8005bf2 <ip4_input+0x76>
        netif = netif->next;
 8005cbc:	6824      	ldr	r4, [r4, #0]
 8005cbe:	e79a      	b.n	8005bf6 <ip4_input+0x7a>
      pbuf_free(p);
 8005cc0:	4638      	mov	r0, r7
 8005cc2:	f001 f869 	bl	8006d98 <pbuf_free>
      return ERR_OK;
 8005cc6:	e766      	b.n	8005b96 <ip4_input+0x1a>
    pbuf_free(p);
 8005cc8:	4638      	mov	r0, r7
 8005cca:	f001 f865 	bl	8006d98 <pbuf_free>
    return ERR_OK;
 8005cce:	e762      	b.n	8005b96 <ip4_input+0x1a>
      udp_input(p, inp);
 8005cd0:	4631      	mov	r1, r6
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	f004 f850 	bl	8009d78 <udp_input>
  ip_data.current_netif = NULL;
 8005cd8:	4b09      	ldr	r3, [pc, #36]	; (8005d00 <ip4_input+0x184>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8005cde:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8005ce0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8005ce2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8005ce4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8005ce6:	615a      	str	r2, [r3, #20]
  return ERR_OK;
 8005ce8:	e755      	b.n	8005b96 <ip4_input+0x1a>
      tcp_input(p, inp);
 8005cea:	4631      	mov	r1, r6
 8005cec:	4638      	mov	r0, r7
 8005cee:	f003 f83d 	bl	8008d6c <tcp_input>
      break;
 8005cf2:	e7f1      	b.n	8005cd8 <ip4_input+0x15c>
      icmp_input(p, inp);
 8005cf4:	4631      	mov	r1, r6
 8005cf6:	4638      	mov	r0, r7
 8005cf8:	f7ff fe64 	bl	80059c4 <icmp_input>
      break;
 8005cfc:	e7ec      	b.n	8005cd8 <ip4_input+0x15c>
 8005cfe:	bf00      	nop
 8005d00:	20004058 	.word	0x20004058
 8005d04:	20007b1c 	.word	0x20007b1c

08005d08 <ip_input>:
{
 8005d08:	b508      	push	{r3, lr}
  return ip4_input(p, inp);
 8005d0a:	f7ff ff37 	bl	8005b7c <ip4_input>
}
 8005d0e:	bd08      	pop	{r3, pc}

08005d10 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8005d10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d14:	b083      	sub	sp, #12
 8005d16:	4605      	mov	r5, r0
 8005d18:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != IP_HDRINCL) {
 8005d1a:	2a00      	cmp	r2, #0
 8005d1c:	d041      	beq.n	8005da2 <ip4_output_if_src+0x92>
 8005d1e:	4689      	mov	r9, r1
 8005d20:	4698      	mov	r8, r3
 8005d22:	4617      	mov	r7, r2
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8005d24:	2114      	movs	r1, #20
 8005d26:	f001 f82d 	bl	8006d84 <pbuf_header>
 8005d2a:	2800      	cmp	r0, #0
 8005d2c:	d145      	bne.n	8005dba <ip4_output_if_src+0xaa>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 8005d2e:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8005d30:	f884 8008 	strb.w	r8, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 8005d34:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8005d38:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(proto, ttl);
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8005d3e:	2345      	movs	r3, #69	; 0x45
 8005d40:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 8005d42:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8005d46:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, htons(p->tot_len));
 8005d48:	8928      	ldrh	r0, [r5, #8]
 8005d4a:	f7ff fdcd 	bl	80058e8 <lwip_htons>
 8005d4e:	8060      	strh	r0, [r4, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8005d50:	2300      	movs	r3, #0
 8005d52:	71a3      	strb	r3, [r4, #6]
 8005d54:	71e3      	strb	r3, [r4, #7]
    IPH_ID_SET(iphdr, htons(ip_id));
 8005d56:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8005dc4 <ip4_output_if_src+0xb4>
 8005d5a:	f8b8 0000 	ldrh.w	r0, [r8]
 8005d5e:	f7ff fdc3 	bl	80058e8 <lwip_htons>
 8005d62:	80a0      	strh	r0, [r4, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8005d64:	f8b8 3000 	ldrh.w	r3, [r8]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	f8a8 3000 	strh.w	r3, [r8]

    if (src == NULL) {
 8005d6e:	f1b9 0f00 	cmp.w	r9, #0
 8005d72:	d012      	beq.n	8005d9a <ip4_output_if_src+0x8a>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8005d74:	f8d9 3000 	ldr.w	r3, [r9]
 8005d78:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	72a3      	strb	r3, [r4, #10]
 8005d7e:	72e3      	strb	r3, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8005d80:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8005d82:	b113      	cbz	r3, 8005d8a <ip4_output_if_src+0x7a>
 8005d84:	892a      	ldrh	r2, [r5, #8]
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d311      	bcc.n	8005dae <ip4_output_if_src+0x9e>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8005d8a:	6973      	ldr	r3, [r6, #20]
 8005d8c:	463a      	mov	r2, r7
 8005d8e:	4629      	mov	r1, r5
 8005d90:	4630      	mov	r0, r6
 8005d92:	4798      	blx	r3
}
 8005d94:	b003      	add	sp, #12
 8005d96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY);
 8005d9a:	4b09      	ldr	r3, [pc, #36]	; (8005dc0 <ip4_output_if_src+0xb0>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	60e3      	str	r3, [r4, #12]
 8005da0:	e7eb      	b.n	8005d7a <ip4_output_if_src+0x6a>
    iphdr = (struct ip_hdr *)p->payload;
 8005da2:	6843      	ldr	r3, [r0, #4]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	af02      	add	r7, sp, #8
 8005da8:	f847 3d04 	str.w	r3, [r7, #-4]!
 8005dac:	e7e8      	b.n	8005d80 <ip4_output_if_src+0x70>
    return ip4_frag(p, netif, dest);
 8005dae:	463a      	mov	r2, r7
 8005db0:	4631      	mov	r1, r6
 8005db2:	4628      	mov	r0, r5
 8005db4:	f000 fb30 	bl	8006418 <ip4_frag>
 8005db8:	e7ec      	b.n	8005d94 <ip4_output_if_src+0x84>
      return ERR_BUF;
 8005dba:	f06f 0001 	mvn.w	r0, #1
 8005dbe:	e7e9      	b.n	8005d94 <ip4_output_if_src+0x84>
 8005dc0:	0800d0fc 	.word	0x0800d0fc
 8005dc4:	20003e70 	.word	0x20003e70

08005dc8 <ip4_output_if>:
{
 8005dc8:	b530      	push	{r4, r5, lr}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (dest != IP_HDRINCL) {
 8005dce:	4615      	mov	r5, r2
 8005dd0:	b11a      	cbz	r2, 8005dda <ip4_output_if+0x12>
    if (ip4_addr_isany(src)) {
 8005dd2:	b109      	cbz	r1, 8005dd8 <ip4_output_if+0x10>
 8005dd4:	680a      	ldr	r2, [r1, #0]
 8005dd6:	b902      	cbnz	r2, 8005dda <ip4_output_if+0x12>
      src_used = netif_ip4_addr(netif);
 8005dd8:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8005dda:	9402      	str	r4, [sp, #8]
 8005ddc:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 8005de0:	9201      	str	r2, [sp, #4]
 8005de2:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8005de6:	9200      	str	r2, [sp, #0]
 8005de8:	462a      	mov	r2, r5
 8005dea:	f7ff ff91 	bl	8005d10 <ip4_output_if_src>
}
 8005dee:	b005      	add	sp, #20
 8005df0:	bd30      	pop	{r4, r5, pc}

08005df2 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8005df2:	1e43      	subs	r3, r0, #1
 8005df4:	f113 0f03 	cmn.w	r3, #3
 8005df8:	d811      	bhi.n	8005e1e <ip4_addr_isbroadcast_u32+0x2c>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8005dfa:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 8005dfe:	f013 0f02 	tst.w	r3, #2
 8005e02:	d00e      	beq.n	8005e22 <ip4_addr_isbroadcast_u32+0x30>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8005e04:	684b      	ldr	r3, [r1, #4]
 8005e06:	4298      	cmp	r0, r3
 8005e08:	d00d      	beq.n	8005e26 <ip4_addr_isbroadcast_u32+0x34>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8005e0a:	688a      	ldr	r2, [r1, #8]
 8005e0c:	4043      	eors	r3, r0
 8005e0e:	4213      	tst	r3, r2
 8005e10:	d10b      	bne.n	8005e2a <ip4_addr_isbroadcast_u32+0x38>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8005e12:	43d2      	mvns	r2, r2
 8005e14:	ea32 0300 	bics.w	r3, r2, r0
 8005e18:	d009      	beq.n	8005e2e <ip4_addr_isbroadcast_u32+0x3c>
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	4770      	bx	lr
    return 1;
 8005e1e:	2001      	movs	r0, #1
 8005e20:	4770      	bx	lr
    return 0;
 8005e22:	2000      	movs	r0, #0
 8005e24:	4770      	bx	lr
    return 0;
 8005e26:	2000      	movs	r0, #0
 8005e28:	4770      	bx	lr
    return 0;
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	4770      	bx	lr
    return 1;
 8005e2e:	2001      	movs	r0, #1
  }
}
 8005e30:	4770      	bx	lr

08005e32 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8005e32:	b570      	push	{r4, r5, r6, lr}
 8005e34:	b084      	sub	sp, #16
 8005e36:	4605      	mov	r5, r0
 8005e38:	460c      	mov	r4, r1
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;

  c = *cp;
 8005e3a:	7803      	ldrb	r3, [r0, #0]
  u32_t *pp = parts;
 8005e3c:	466e      	mov	r6, sp
 8005e3e:	e03b      	b.n	8005eb8 <ip4addr_aton+0x86>
      return 0;
    }
    val = 0;
    base = 10;
    if (c == '0') {
      c = *++cp;
 8005e40:	1c6a      	adds	r2, r5, #1
 8005e42:	786b      	ldrb	r3, [r5, #1]
      if (c == 'x' || c == 'X') {
 8005e44:	2b78      	cmp	r3, #120	; 0x78
 8005e46:	d004      	beq.n	8005e52 <ip4addr_aton+0x20>
 8005e48:	2b58      	cmp	r3, #88	; 0x58
 8005e4a:	d002      	beq.n	8005e52 <ip4addr_aton+0x20>
      c = *++cp;
 8005e4c:	4615      	mov	r5, r2
        base = 16;
        c = *++cp;
      } else {
        base = 8;
 8005e4e:	2108      	movs	r1, #8
 8005e50:	e03a      	b.n	8005ec8 <ip4addr_aton+0x96>
        c = *++cp;
 8005e52:	78ab      	ldrb	r3, [r5, #2]
 8005e54:	3502      	adds	r5, #2
        base = 16;
 8005e56:	2110      	movs	r1, #16
        c = *++cp;
 8005e58:	e036      	b.n	8005ec8 <ip4addr_aton+0x96>
    }
    for (;;) {
      if (isdigit(c)) {
        val = (val * base) + (int)(c - '0');
        c = *++cp;
      } else if (base == 16 && isxdigit(c)) {
 8005e5a:	2910      	cmp	r1, #16
 8005e5c:	d123      	bne.n	8005ea6 <ip4addr_aton+0x74>
 8005e5e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005e62:	b2d2      	uxtb	r2, r2
 8005e64:	2a05      	cmp	r2, #5
 8005e66:	d904      	bls.n	8005e72 <ip4addr_aton+0x40>
 8005e68:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005e6c:	b2d2      	uxtb	r2, r2
 8005e6e:	2a05      	cmp	r2, #5
 8005e70:	d819      	bhi.n	8005ea6 <ip4addr_aton+0x74>
        val = (val << 4) | (int)(c + 10 - (islower(c) ? 'a' : 'A'));
 8005e72:	0100      	lsls	r0, r0, #4
 8005e74:	f103 020a 	add.w	r2, r3, #10
 8005e78:	3b61      	subs	r3, #97	; 0x61
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b19      	cmp	r3, #25
 8005e7e:	d810      	bhi.n	8005ea2 <ip4addr_aton+0x70>
 8005e80:	2361      	movs	r3, #97	; 0x61
 8005e82:	1ad2      	subs	r2, r2, r3
 8005e84:	4310      	orrs	r0, r2
        c = *++cp;
 8005e86:	f815 3f01 	ldrb.w	r3, [r5, #1]!
      if (isdigit(c)) {
 8005e8a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	2a09      	cmp	r2, #9
 8005e92:	d8e2      	bhi.n	8005e5a <ip4addr_aton+0x28>
        val = (val * base) + (int)(c - '0');
 8005e94:	fb00 3301 	mla	r3, r0, r1, r3
 8005e98:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
        c = *++cp;
 8005e9c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8005ea0:	e7f3      	b.n	8005e8a <ip4addr_aton+0x58>
        val = (val << 4) | (int)(c + 10 - (islower(c) ? 'a' : 'A'));
 8005ea2:	2341      	movs	r3, #65	; 0x41
 8005ea4:	e7ed      	b.n	8005e82 <ip4addr_aton+0x50>
      } else {
        break;
      }
    }
    if (c == '.') {
 8005ea6:	2b2e      	cmp	r3, #46	; 0x2e
 8005ea8:	d110      	bne.n	8005ecc <ip4addr_aton+0x9a>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8005eaa:	ab03      	add	r3, sp, #12
 8005eac:	429e      	cmp	r6, r3
 8005eae:	d258      	bcs.n	8005f62 <ip4addr_aton+0x130>
        return 0;
      }
      *pp++ = val;
 8005eb0:	6030      	str	r0, [r6, #0]
      c = *++cp;
 8005eb2:	786b      	ldrb	r3, [r5, #1]
      *pp++ = val;
 8005eb4:	3604      	adds	r6, #4
      c = *++cp;
 8005eb6:	3501      	adds	r5, #1
    if (!isdigit(c)) {
 8005eb8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005ebc:	b2d2      	uxtb	r2, r2
 8005ebe:	2a09      	cmp	r2, #9
 8005ec0:	d84d      	bhi.n	8005f5e <ip4addr_aton+0x12c>
    if (c == '0') {
 8005ec2:	2b30      	cmp	r3, #48	; 0x30
 8005ec4:	d0bc      	beq.n	8005e40 <ip4addr_aton+0xe>
    base = 10;
 8005ec6:	210a      	movs	r1, #10
        base = 16;
 8005ec8:	2000      	movs	r0, #0
 8005eca:	e7de      	b.n	8005e8a <ip4addr_aton+0x58>
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 8005ecc:	b16b      	cbz	r3, 8005eea <ip4addr_aton+0xb8>
 8005ece:	2b20      	cmp	r3, #32
 8005ed0:	d00b      	beq.n	8005eea <ip4addr_aton+0xb8>
 8005ed2:	2b0c      	cmp	r3, #12
 8005ed4:	d009      	beq.n	8005eea <ip4addr_aton+0xb8>
 8005ed6:	2b0a      	cmp	r3, #10
 8005ed8:	d007      	beq.n	8005eea <ip4addr_aton+0xb8>
 8005eda:	2b0d      	cmp	r3, #13
 8005edc:	d005      	beq.n	8005eea <ip4addr_aton+0xb8>
 8005ede:	2b09      	cmp	r3, #9
 8005ee0:	d003      	beq.n	8005eea <ip4addr_aton+0xb8>
 8005ee2:	2b0b      	cmp	r3, #11
 8005ee4:	d001      	beq.n	8005eea <ip4addr_aton+0xb8>
    return 0;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	e03c      	b.n	8005f64 <ip4addr_aton+0x132>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8005eea:	466b      	mov	r3, sp
 8005eec:	1af3      	subs	r3, r6, r3
 8005eee:	109b      	asrs	r3, r3, #2
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	2b04      	cmp	r3, #4
 8005ef4:	d80c      	bhi.n	8005f10 <ip4addr_aton+0xde>
 8005ef6:	e8df f003 	tbb	[pc, r3]
 8005efa:	0b35      	.short	0x0b35
 8005efc:	1203      	.short	0x1203
 8005efe:	20          	.byte	0x20
 8005eff:	00          	.byte	0x00

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 8005f00:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005f04:	d231      	bcs.n	8005f6a <ip4addr_aton+0x138>
      return 0;
    }
    if (parts[0] > 0xff) {
 8005f06:	9b00      	ldr	r3, [sp, #0]
 8005f08:	2bff      	cmp	r3, #255	; 0xff
 8005f0a:	d830      	bhi.n	8005f6e <ip4addr_aton+0x13c>
      return 0;
    }
    val |= parts[0] << 24;
 8005f0c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
    break;
  default:
    LWIP_ASSERT("unhandled", 0);
    break;
  }
  if (addr) {
 8005f10:	2c00      	cmp	r4, #0
 8005f12:	d03c      	beq.n	8005f8e <ip4addr_aton+0x15c>
    ip4_addr_set_u32(addr, htonl(val));
 8005f14:	f7ff fcf1 	bl	80058fa <lwip_htonl>
 8005f18:	6020      	str	r0, [r4, #0]
  }
  return 1;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e022      	b.n	8005f64 <ip4addr_aton+0x132>
    if (val > 0xffff) {
 8005f1e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8005f22:	d226      	bcs.n	8005f72 <ip4addr_aton+0x140>
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8005f24:	9a00      	ldr	r2, [sp, #0]
 8005f26:	2aff      	cmp	r2, #255	; 0xff
 8005f28:	d825      	bhi.n	8005f76 <ip4addr_aton+0x144>
 8005f2a:	9b01      	ldr	r3, [sp, #4]
 8005f2c:	2bff      	cmp	r3, #255	; 0xff
 8005f2e:	d824      	bhi.n	8005f7a <ip4addr_aton+0x148>
    val |= (parts[0] << 24) | (parts[1] << 16);
 8005f30:	041b      	lsls	r3, r3, #16
 8005f32:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005f36:	4318      	orrs	r0, r3
    break;
 8005f38:	e7ea      	b.n	8005f10 <ip4addr_aton+0xde>
    if (val > 0xff) {
 8005f3a:	28ff      	cmp	r0, #255	; 0xff
 8005f3c:	d81f      	bhi.n	8005f7e <ip4addr_aton+0x14c>
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8005f3e:	9900      	ldr	r1, [sp, #0]
 8005f40:	29ff      	cmp	r1, #255	; 0xff
 8005f42:	d81e      	bhi.n	8005f82 <ip4addr_aton+0x150>
 8005f44:	9b01      	ldr	r3, [sp, #4]
 8005f46:	2bff      	cmp	r3, #255	; 0xff
 8005f48:	d81d      	bhi.n	8005f86 <ip4addr_aton+0x154>
 8005f4a:	9a02      	ldr	r2, [sp, #8]
 8005f4c:	2aff      	cmp	r2, #255	; 0xff
 8005f4e:	d81c      	bhi.n	8005f8a <ip4addr_aton+0x158>
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8005f50:	041b      	lsls	r3, r3, #16
 8005f52:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005f56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005f5a:	4318      	orrs	r0, r3
    break;
 8005f5c:	e7d8      	b.n	8005f10 <ip4addr_aton+0xde>
      return 0;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	e000      	b.n	8005f64 <ip4addr_aton+0x132>
        return 0;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	b004      	add	sp, #16
 8005f68:	bd70      	pop	{r4, r5, r6, pc}
      return 0;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	e7fa      	b.n	8005f64 <ip4addr_aton+0x132>
      return 0;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	e7f8      	b.n	8005f64 <ip4addr_aton+0x132>
      return 0;
 8005f72:	2300      	movs	r3, #0
 8005f74:	e7f6      	b.n	8005f64 <ip4addr_aton+0x132>
      return 0;
 8005f76:	2300      	movs	r3, #0
 8005f78:	e7f4      	b.n	8005f64 <ip4addr_aton+0x132>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	e7f2      	b.n	8005f64 <ip4addr_aton+0x132>
      return 0;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	e7f0      	b.n	8005f64 <ip4addr_aton+0x132>
      return 0;
 8005f82:	2300      	movs	r3, #0
 8005f84:	e7ee      	b.n	8005f64 <ip4addr_aton+0x132>
 8005f86:	2300      	movs	r3, #0
 8005f88:	e7ec      	b.n	8005f64 <ip4addr_aton+0x132>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	e7ea      	b.n	8005f64 <ip4addr_aton+0x132>
  return 1;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e7e8      	b.n	8005f64 <ip4addr_aton+0x132>

08005f92 <ipaddr_addr>:
{
 8005f92:	b500      	push	{lr}
 8005f94:	b083      	sub	sp, #12
  if (ip4addr_aton(cp, &val)) {
 8005f96:	a901      	add	r1, sp, #4
 8005f98:	f7ff ff4b 	bl	8005e32 <ip4addr_aton>
 8005f9c:	b920      	cbnz	r0, 8005fa8 <ipaddr_addr+0x16>
  return (IPADDR_NONE);
 8005f9e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005fa2:	b003      	add	sp, #12
 8005fa4:	f85d fb04 	ldr.w	pc, [sp], #4
    return ip4_addr_get_u32(&val);
 8005fa8:	9801      	ldr	r0, [sp, #4]
 8005faa:	e7fa      	b.n	8005fa2 <ipaddr_addr+0x10>

08005fac <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8005fac:	b508      	push	{r3, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8005fae:	4b07      	ldr	r3, [pc, #28]	; (8005fcc <ip_reass_dequeue_datagram+0x20>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4283      	cmp	r3, r0
 8005fb4:	d006      	beq.n	8005fc4 <ip_reass_dequeue_datagram+0x18>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
 8005fb6:	6803      	ldr	r3, [r0, #0]
 8005fb8:	600b      	str	r3, [r1, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8005fba:	4601      	mov	r1, r0
 8005fbc:	2004      	movs	r0, #4
 8005fbe:	f000 fd69 	bl	8006a94 <memp_free>
 8005fc2:	bd08      	pop	{r3, pc}
    reassdatagrams = ipr->next;
 8005fc4:	6802      	ldr	r2, [r0, #0]
 8005fc6:	4b01      	ldr	r3, [pc, #4]	; (8005fcc <ip_reass_dequeue_datagram+0x20>)
 8005fc8:	601a      	str	r2, [r3, #0]
 8005fca:	e7f6      	b.n	8005fba <ip_reass_dequeue_datagram+0xe>
 8005fcc:	20003e74 	.word	0x20003e74

08005fd0 <ip_reass_free_complete_datagram>:
{
 8005fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd4:	4607      	mov	r7, r0
 8005fd6:	4688      	mov	r8, r1
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8005fd8:	6844      	ldr	r4, [r0, #4]
 8005fda:	6863      	ldr	r3, [r4, #4]
  if (iprh->start == 0) {
 8005fdc:	889a      	ldrh	r2, [r3, #4]
 8005fde:	b112      	cbz	r2, 8005fe6 <ip_reass_free_complete_datagram+0x16>
  u16_t pbufs_freed = 0;
 8005fe0:	2500      	movs	r5, #0
  p = ipr->p;
 8005fe2:	687c      	ldr	r4, [r7, #4]
  while (p != NULL) {
 8005fe4:	e025      	b.n	8006032 <ip_reass_free_complete_datagram+0x62>
    ipr->p = iprh->next_pbuf;
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6043      	str	r3, [r0, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8005fea:	4603      	mov	r3, r0
 8005fec:	6862      	ldr	r2, [r4, #4]
 8005fee:	f853 1f08 	ldr.w	r1, [r3, #8]!
 8005ff2:	685e      	ldr	r6, [r3, #4]
 8005ff4:	689d      	ldr	r5, [r3, #8]
 8005ff6:	68d8      	ldr	r0, [r3, #12]
 8005ff8:	6011      	str	r1, [r2, #0]
 8005ffa:	6056      	str	r6, [r2, #4]
 8005ffc:	6095      	str	r5, [r2, #8]
 8005ffe:	60d0      	str	r0, [r2, #12]
 8006000:	6919      	ldr	r1, [r3, #16]
 8006002:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8006004:	2101      	movs	r1, #1
 8006006:	4620      	mov	r0, r4
 8006008:	f7ff fd62 	bl	8005ad0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800600c:	4620      	mov	r0, r4
 800600e:	f000 ffb1 	bl	8006f74 <pbuf_clen>
    pbufs_freed += clen;
 8006012:	b285      	uxth	r5, r0
    pbuf_free(p);
 8006014:	4620      	mov	r0, r4
 8006016:	f000 febf 	bl	8006d98 <pbuf_free>
 800601a:	e7e2      	b.n	8005fe2 <ip_reass_free_complete_datagram+0x12>
    iprh = (struct ip_reass_helper *)p->payload;
 800601c:	6863      	ldr	r3, [r4, #4]
    p = iprh->next_pbuf;
 800601e:	681e      	ldr	r6, [r3, #0]
    clen = pbuf_clen(pcur);
 8006020:	4620      	mov	r0, r4
 8006022:	f000 ffa7 	bl	8006f74 <pbuf_clen>
    pbufs_freed += clen;
 8006026:	4405      	add	r5, r0
 8006028:	b2ad      	uxth	r5, r5
    pbuf_free(pcur);
 800602a:	4620      	mov	r0, r4
 800602c:	f000 feb4 	bl	8006d98 <pbuf_free>
    p = iprh->next_pbuf;
 8006030:	4634      	mov	r4, r6
  while (p != NULL) {
 8006032:	2c00      	cmp	r4, #0
 8006034:	d1f2      	bne.n	800601c <ip_reass_free_complete_datagram+0x4c>
  ip_reass_dequeue_datagram(ipr, prev);
 8006036:	4641      	mov	r1, r8
 8006038:	4638      	mov	r0, r7
 800603a:	f7ff ffb7 	bl	8005fac <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800603e:	4a03      	ldr	r2, [pc, #12]	; (800604c <ip_reass_free_complete_datagram+0x7c>)
 8006040:	8813      	ldrh	r3, [r2, #0]
  ip_reass_pbufcount -= pbufs_freed;
 8006042:	1b5b      	subs	r3, r3, r5
 8006044:	8013      	strh	r3, [r2, #0]
}
 8006046:	4628      	mov	r0, r5
 8006048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800604c:	20003e72 	.word	0x20003e72

08006050 <ip_reass_remove_oldest_datagram>:
{
 8006050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006054:	4605      	mov	r5, r0
 8006056:	4688      	mov	r8, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8006058:	2600      	movs	r6, #0
 800605a:	e02a      	b.n	80060b2 <ip_reass_remove_oldest_datagram+0x62>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800605c:	699a      	ldr	r2, [r3, #24]
 800605e:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8006062:	4562      	cmp	r2, ip
 8006064:	d110      	bne.n	8006088 <ip_reass_remove_oldest_datagram+0x38>
 8006066:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 800606a:	88aa      	ldrh	r2, [r5, #4]
 800606c:	4594      	cmp	ip, r2
 800606e:	d10b      	bne.n	8006088 <ip_reass_remove_oldest_datagram+0x38>
 8006070:	e001      	b.n	8006076 <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 8006072:	4671      	mov	r1, lr
          oldest = r;
 8006074:	4618      	mov	r0, r3
      if (r->next != NULL) {
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	b18a      	cbz	r2, 800609e <ip_reass_remove_oldest_datagram+0x4e>
 800607a:	469e      	mov	lr, r3
 800607c:	4613      	mov	r3, r2
    while (r != NULL) {
 800607e:	b183      	cbz	r3, 80060a2 <ip_reass_remove_oldest_datagram+0x52>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8006080:	68ea      	ldr	r2, [r5, #12]
 8006082:	695f      	ldr	r7, [r3, #20]
 8006084:	4297      	cmp	r7, r2
 8006086:	d0e9      	beq.n	800605c <ip_reass_remove_oldest_datagram+0xc>
        other_datagrams++;
 8006088:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800608a:	2800      	cmp	r0, #0
 800608c:	d0f1      	beq.n	8006072 <ip_reass_remove_oldest_datagram+0x22>
        } else if (r->timer <= oldest->timer) {
 800608e:	f893 c01f 	ldrb.w	ip, [r3, #31]
 8006092:	7fc2      	ldrb	r2, [r0, #31]
 8006094:	4594      	cmp	ip, r2
 8006096:	d8ee      	bhi.n	8006076 <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 8006098:	4671      	mov	r1, lr
          oldest = r;
 800609a:	4618      	mov	r0, r3
 800609c:	e7eb      	b.n	8006076 <ip_reass_remove_oldest_datagram+0x26>
      if (r->next != NULL) {
 800609e:	4673      	mov	r3, lr
 80060a0:	e7eb      	b.n	800607a <ip_reass_remove_oldest_datagram+0x2a>
    if (oldest != NULL) {
 80060a2:	b110      	cbz	r0, 80060aa <ip_reass_remove_oldest_datagram+0x5a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80060a4:	f7ff ff94 	bl	8005fd0 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 80060a8:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80060aa:	4546      	cmp	r6, r8
 80060ac:	da08      	bge.n	80060c0 <ip_reass_remove_oldest_datagram+0x70>
 80060ae:	2c01      	cmp	r4, #1
 80060b0:	dd06      	ble.n	80060c0 <ip_reass_remove_oldest_datagram+0x70>
    r = reassdatagrams;
 80060b2:	4b05      	ldr	r3, [pc, #20]	; (80060c8 <ip_reass_remove_oldest_datagram+0x78>)
 80060b4:	681b      	ldr	r3, [r3, #0]
    other_datagrams = 0;
 80060b6:	2400      	movs	r4, #0
    oldest_prev = NULL;
 80060b8:	4621      	mov	r1, r4
    prev = NULL;
 80060ba:	46a6      	mov	lr, r4
    oldest = NULL;
 80060bc:	4620      	mov	r0, r4
    while (r != NULL) {
 80060be:	e7de      	b.n	800607e <ip_reass_remove_oldest_datagram+0x2e>
}
 80060c0:	4630      	mov	r0, r6
 80060c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060c6:	bf00      	nop
 80060c8:	20003e74 	.word	0x20003e74

080060cc <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 80060cc:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
  memp_free(MEMP_FRAG_PBUF, p);
 80060ce:	4601      	mov	r1, r0
 80060d0:	2005      	movs	r0, #5
 80060d2:	f000 fcdf 	bl	8006a94 <memp_free>
 80060d6:	bd08      	pop	{r3, pc}

080060d8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80060d8:	b510      	push	{r4, lr}
 80060da:	4604      	mov	r4, r0
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 80060dc:	6940      	ldr	r0, [r0, #20]
 80060de:	b108      	cbz	r0, 80060e4 <ipfrag_free_pbuf_custom+0xc>
    pbuf_free(pcr->original);
 80060e0:	f000 fe5a 	bl	8006d98 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80060e4:	4620      	mov	r0, r4
 80060e6:	f7ff fff1 	bl	80060cc <ip_frag_free_pbuf_custom_ref>
 80060ea:	bd10      	pop	{r4, pc}

080060ec <ip_reass_chain_frag_into_datagram_and_validate>:
{
 80060ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ee:	4607      	mov	r7, r0
 80060f0:	460e      	mov	r6, r1
  fraghdr = (struct ip_hdr*)new_p->payload;
 80060f2:	684c      	ldr	r4, [r1, #4]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80060f4:	8860      	ldrh	r0, [r4, #2]
 80060f6:	f7ff fbfc 	bl	80058f2 <lwip_ntohs>
 80060fa:	7825      	ldrb	r5, [r4, #0]
 80060fc:	f005 050f 	and.w	r5, r5, #15
 8006100:	eba0 0585 	sub.w	r5, r0, r5, lsl #2
 8006104:	b2ad      	uxth	r5, r5
  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8006106:	88e0      	ldrh	r0, [r4, #6]
 8006108:	f7ff fbf3 	bl	80058f2 <lwip_ntohs>
 800610c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8006110:	00c1      	lsls	r1, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 8006112:	f8d6 c004 	ldr.w	ip, [r6, #4]
  iprh->next_pbuf = NULL;
 8006116:	2400      	movs	r4, #0
 8006118:	f88c 4000 	strb.w	r4, [ip]
 800611c:	f88c 4001 	strb.w	r4, [ip, #1]
 8006120:	f88c 4002 	strb.w	r4, [ip, #2]
 8006124:	f88c 4003 	strb.w	r4, [ip, #3]
  iprh->start = offset;
 8006128:	f8ac 1004 	strh.w	r1, [ip, #4]
  iprh->end = offset + len;
 800612c:	eb05 0e01 	add.w	lr, r5, r1
 8006130:	fa1f fe8e 	uxth.w	lr, lr
 8006134:	f8ac e006 	strh.w	lr, [ip, #6]
  for (q = ipr->p; q != NULL;) {
 8006138:	687d      	ldr	r5, [r7, #4]
  int valid = 1;
 800613a:	2001      	movs	r0, #1
  for (q = ipr->p; q != NULL;) {
 800613c:	e027      	b.n	800618e <ip_reass_chain_frag_into_datagram_and_validate+0xa2>
      iprh->next_pbuf = q;
 800613e:	f8cc 5000 	str.w	r5, [ip]
      if (iprh_prev != NULL) {
 8006142:	b304      	cbz	r4, 8006186 <ip_reass_chain_frag_into_datagram_and_validate+0x9a>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8006144:	88e2      	ldrh	r2, [r4, #6]
 8006146:	4291      	cmp	r1, r2
 8006148:	d341      	bcc.n	80061ce <ip_reass_chain_frag_into_datagram_and_validate+0xe2>
 800614a:	889b      	ldrh	r3, [r3, #4]
 800614c:	459e      	cmp	lr, r3
 800614e:	d83e      	bhi.n	80061ce <ip_reass_chain_frag_into_datagram_and_validate+0xe2>
        iprh_prev->next_pbuf = new_p;
 8006150:	6026      	str	r6, [r4, #0]
  if (q == NULL) {
 8006152:	b375      	cbz	r5, 80061b2 <ip_reass_chain_frag_into_datagram_and_validate+0xc6>
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
 8006154:	7fbb      	ldrb	r3, [r7, #30]
 8006156:	f013 0f01 	tst.w	r3, #1
 800615a:	d045      	beq.n	80061e8 <ip_reass_chain_frag_into_datagram_and_validate+0xfc>
    if (valid) {
 800615c:	2800      	cmp	r0, #0
 800615e:	d048      	beq.n	80061f2 <ip_reass_chain_frag_into_datagram_and_validate+0x106>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d042      	beq.n	80061ec <ip_reass_chain_frag_into_datagram_and_validate+0x100>
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	889b      	ldrh	r3, [r3, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d140      	bne.n	80061f0 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
        q = iprh->next_pbuf;
 800616e:	f8dc 2000 	ldr.w	r2, [ip]
        while (q != NULL) {
 8006172:	b34a      	cbz	r2, 80061c8 <ip_reass_chain_frag_into_datagram_and_validate+0xdc>
          iprh = (struct ip_reass_helper*)q->payload;
 8006174:	6853      	ldr	r3, [r2, #4]
          if (iprh_prev->end != iprh->start) {
 8006176:	f8bc 1006 	ldrh.w	r1, [ip, #6]
 800617a:	889a      	ldrh	r2, [r3, #4]
 800617c:	4291      	cmp	r1, r2
 800617e:	d124      	bne.n	80061ca <ip_reass_chain_frag_into_datagram_and_validate+0xde>
          q = iprh->next_pbuf;
 8006180:	681a      	ldr	r2, [r3, #0]
          iprh = (struct ip_reass_helper*)q->payload;
 8006182:	469c      	mov	ip, r3
 8006184:	e7f5      	b.n	8006172 <ip_reass_chain_frag_into_datagram_and_validate+0x86>
        ipr->p = new_p;
 8006186:	607e      	str	r6, [r7, #4]
 8006188:	e7e3      	b.n	8006152 <ip_reass_chain_frag_into_datagram_and_validate+0x66>
    q = iprh_tmp->next_pbuf;
 800618a:	681d      	ldr	r5, [r3, #0]
    iprh_prev = iprh_tmp;
 800618c:	461c      	mov	r4, r3
  for (q = ipr->p; q != NULL;) {
 800618e:	2d00      	cmp	r5, #0
 8006190:	d0df      	beq.n	8006152 <ip_reass_chain_frag_into_datagram_and_validate+0x66>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8006192:	686b      	ldr	r3, [r5, #4]
    if (iprh->start < iprh_tmp->start) {
 8006194:	889a      	ldrh	r2, [r3, #4]
 8006196:	4291      	cmp	r1, r2
 8006198:	d3d1      	bcc.n	800613e <ip_reass_chain_frag_into_datagram_and_validate+0x52>
    } else if (iprh->start == iprh_tmp->start) {
 800619a:	4291      	cmp	r1, r2
 800619c:	d017      	beq.n	80061ce <ip_reass_chain_frag_into_datagram_and_validate+0xe2>
    } else if (iprh->start < iprh_tmp->end) {
 800619e:	88dd      	ldrh	r5, [r3, #6]
 80061a0:	42a9      	cmp	r1, r5
 80061a2:	d314      	bcc.n	80061ce <ip_reass_chain_frag_into_datagram_and_validate+0xe2>
      if (iprh_prev != NULL) {
 80061a4:	2c00      	cmp	r4, #0
 80061a6:	d0f0      	beq.n	800618a <ip_reass_chain_frag_into_datagram_and_validate+0x9e>
        if (iprh_prev->end != iprh_tmp->start) {
 80061a8:	88e4      	ldrh	r4, [r4, #6]
 80061aa:	42a2      	cmp	r2, r4
 80061ac:	d0ed      	beq.n	800618a <ip_reass_chain_frag_into_datagram_and_validate+0x9e>
          valid = 0;
 80061ae:	2000      	movs	r0, #0
 80061b0:	e7eb      	b.n	800618a <ip_reass_chain_frag_into_datagram_and_validate+0x9e>
    if (iprh_prev != NULL) {
 80061b2:	b13c      	cbz	r4, 80061c4 <ip_reass_chain_frag_into_datagram_and_validate+0xd8>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80061b4:	88e2      	ldrh	r2, [r4, #6]
      iprh_prev->next_pbuf = new_p;
 80061b6:	6026      	str	r6, [r4, #0]
      if (iprh_prev->end != iprh->start) {
 80061b8:	f8bc 3004 	ldrh.w	r3, [ip, #4]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d0c9      	beq.n	8006154 <ip_reass_chain_frag_into_datagram_and_validate+0x68>
        valid = 0;
 80061c0:	2000      	movs	r0, #0
 80061c2:	e7c7      	b.n	8006154 <ip_reass_chain_frag_into_datagram_and_validate+0x68>
      ipr->p = new_p;
 80061c4:	607e      	str	r6, [r7, #4]
 80061c6:	e7c5      	b.n	8006154 <ip_reass_chain_frag_into_datagram_and_validate+0x68>
 80061c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            valid = 0;
 80061ca:	2000      	movs	r0, #0
 80061cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80061ce:	4630      	mov	r0, r6
 80061d0:	f000 fed0 	bl	8006f74 <pbuf_clen>
 80061d4:	b280      	uxth	r0, r0
 80061d6:	4a07      	ldr	r2, [pc, #28]	; (80061f4 <ip_reass_chain_frag_into_datagram_and_validate+0x108>)
 80061d8:	8813      	ldrh	r3, [r2, #0]
 80061da:	1a18      	subs	r0, r3, r0
 80061dc:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 80061de:	4630      	mov	r0, r6
 80061e0:	f000 fdda 	bl	8006d98 <pbuf_free>
  return 0;
 80061e4:	2000      	movs	r0, #0
 80061e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return 0; /* not yet valid! */
 80061e8:	2000      	movs	r0, #0
 80061ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        valid = 0;
 80061ec:	2000      	movs	r0, #0
 80061ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061f0:	2000      	movs	r0, #0
}
 80061f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061f4:	20003e72 	.word	0x20003e72

080061f8 <ip_frag_alloc_pbuf_custom_ref>:
{
 80061f8:	b508      	push	{r3, lr}
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 80061fa:	2005      	movs	r0, #5
 80061fc:	f000 fc3c 	bl	8006a78 <memp_malloc>
}
 8006200:	bd08      	pop	{r3, pc}
	...

08006204 <ip_reass_enqueue_new_datagram>:
{
 8006204:	b570      	push	{r4, r5, r6, lr}
 8006206:	4605      	mov	r5, r0
 8006208:	460e      	mov	r6, r1
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800620a:	2004      	movs	r0, #4
 800620c:	f000 fc34 	bl	8006a78 <memp_malloc>
  if (ipr == NULL) {
 8006210:	4604      	mov	r4, r0
 8006212:	b1b0      	cbz	r0, 8006242 <ip_reass_enqueue_new_datagram+0x3e>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8006214:	2220      	movs	r2, #32
 8006216:	2100      	movs	r1, #0
 8006218:	4620      	mov	r0, r4
 800621a:	f005 fd3b 	bl	800bc94 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800621e:	2303      	movs	r3, #3
 8006220:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8006222:	4b0f      	ldr	r3, [pc, #60]	; (8006260 <ip_reass_enqueue_new_datagram+0x5c>)
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 8006228:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800622a:	682a      	ldr	r2, [r5, #0]
 800622c:	686e      	ldr	r6, [r5, #4]
 800622e:	68a8      	ldr	r0, [r5, #8]
 8006230:	68e9      	ldr	r1, [r5, #12]
 8006232:	60a2      	str	r2, [r4, #8]
 8006234:	60e6      	str	r6, [r4, #12]
 8006236:	6120      	str	r0, [r4, #16]
 8006238:	6161      	str	r1, [r4, #20]
 800623a:	692a      	ldr	r2, [r5, #16]
 800623c:	61a2      	str	r2, [r4, #24]
}
 800623e:	4620      	mov	r0, r4
 8006240:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8006242:	4631      	mov	r1, r6
 8006244:	4628      	mov	r0, r5
 8006246:	f7ff ff03 	bl	8006050 <ip_reass_remove_oldest_datagram>
 800624a:	4286      	cmp	r6, r0
 800624c:	dd02      	ble.n	8006254 <ip_reass_enqueue_new_datagram+0x50>
    if (ipr == NULL)
 800624e:	2c00      	cmp	r4, #0
 8006250:	d1e0      	bne.n	8006214 <ip_reass_enqueue_new_datagram+0x10>
 8006252:	e7f4      	b.n	800623e <ip_reass_enqueue_new_datagram+0x3a>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8006254:	2004      	movs	r0, #4
 8006256:	f000 fc0f 	bl	8006a78 <memp_malloc>
 800625a:	4604      	mov	r4, r0
 800625c:	e7f7      	b.n	800624e <ip_reass_enqueue_new_datagram+0x4a>
 800625e:	bf00      	nop
 8006260:	20003e74 	.word	0x20003e74

08006264 <ip_reass_tmr>:
{
 8006264:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8006266:	4b09      	ldr	r3, [pc, #36]	; (800628c <ip_reass_tmr+0x28>)
 8006268:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 800626a:	2400      	movs	r4, #0
  while (r != NULL) {
 800626c:	e004      	b.n	8006278 <ip_reass_tmr+0x14>
      r = r->next;
 800626e:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 8006270:	4621      	mov	r1, r4
 8006272:	f7ff fead 	bl	8005fd0 <ip_reass_free_complete_datagram>
      r = r->next;
 8006276:	4628      	mov	r0, r5
  while (r != NULL) {
 8006278:	b138      	cbz	r0, 800628a <ip_reass_tmr+0x26>
    if (r->timer > 0) {
 800627a:	7fc3      	ldrb	r3, [r0, #31]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d0f6      	beq.n	800626e <ip_reass_tmr+0xa>
      r->timer--;
 8006280:	3b01      	subs	r3, #1
 8006282:	77c3      	strb	r3, [r0, #31]
      prev = r;
 8006284:	4604      	mov	r4, r0
      r = r->next;
 8006286:	6800      	ldr	r0, [r0, #0]
 8006288:	e7f6      	b.n	8006278 <ip_reass_tmr+0x14>
}
 800628a:	bd38      	pop	{r3, r4, r5, pc}
 800628c:	20003e74 	.word	0x20003e74

08006290 <ip4_reass>:
{
 8006290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006294:	4680      	mov	r8, r0
  fraghdr = (struct ip_hdr*)p->payload;
 8006296:	6845      	ldr	r5, [r0, #4]
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8006298:	782b      	ldrb	r3, [r5, #0]
 800629a:	f003 030f 	and.w	r3, r3, #15
 800629e:	2b05      	cmp	r3, #5
 80062a0:	d125      	bne.n	80062ee <ip4_reass+0x5e>
  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80062a2:	88e8      	ldrh	r0, [r5, #6]
 80062a4:	f7ff fb25 	bl	80058f2 <lwip_ntohs>
 80062a8:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80062ac:	ea4f 09c0 	mov.w	r9, r0, lsl #3
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80062b0:	8868      	ldrh	r0, [r5, #2]
 80062b2:	f7ff fb1e 	bl	80058f2 <lwip_ntohs>
 80062b6:	782e      	ldrb	r6, [r5, #0]
 80062b8:	f006 060f 	and.w	r6, r6, #15
 80062bc:	eba0 0686 	sub.w	r6, r0, r6, lsl #2
 80062c0:	b2b6      	uxth	r6, r6
  clen = pbuf_clen(p);
 80062c2:	4640      	mov	r0, r8
 80062c4:	f000 fe56 	bl	8006f74 <pbuf_clen>
 80062c8:	4607      	mov	r7, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80062ca:	4b51      	ldr	r3, [pc, #324]	; (8006410 <ip4_reass+0x180>)
 80062cc:	881b      	ldrh	r3, [r3, #0]
 80062ce:	4403      	add	r3, r0
 80062d0:	2b0a      	cmp	r3, #10
 80062d2:	dc02      	bgt.n	80062da <ip4_reass+0x4a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80062d4:	4b4f      	ldr	r3, [pc, #316]	; (8006414 <ip4_reass+0x184>)
 80062d6:	681c      	ldr	r4, [r3, #0]
 80062d8:	e00f      	b.n	80062fa <ip4_reass+0x6a>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80062da:	4601      	mov	r1, r0
 80062dc:	4628      	mov	r0, r5
 80062de:	f7ff feb7 	bl	8006050 <ip_reass_remove_oldest_datagram>
 80062e2:	b120      	cbz	r0, 80062ee <ip4_reass+0x5e>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80062e4:	4b4a      	ldr	r3, [pc, #296]	; (8006410 <ip4_reass+0x180>)
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	443b      	add	r3, r7
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80062ea:	2b0a      	cmp	r3, #10
 80062ec:	ddf2      	ble.n	80062d4 <ip4_reass+0x44>
  pbuf_free(p);
 80062ee:	4640      	mov	r0, r8
 80062f0:	f000 fd52 	bl	8006d98 <pbuf_free>
  return NULL;
 80062f4:	2700      	movs	r7, #0
 80062f6:	e085      	b.n	8006404 <ip4_reass+0x174>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80062f8:	6824      	ldr	r4, [r4, #0]
 80062fa:	b15c      	cbz	r4, 8006314 <ip4_reass+0x84>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80062fc:	6962      	ldr	r2, [r4, #20]
 80062fe:	68eb      	ldr	r3, [r5, #12]
 8006300:	429a      	cmp	r2, r3
 8006302:	d1f9      	bne.n	80062f8 <ip4_reass+0x68>
 8006304:	69a2      	ldr	r2, [r4, #24]
 8006306:	692b      	ldr	r3, [r5, #16]
 8006308:	429a      	cmp	r2, r3
 800630a:	d1f5      	bne.n	80062f8 <ip4_reass+0x68>
 800630c:	89a2      	ldrh	r2, [r4, #12]
 800630e:	88ab      	ldrh	r3, [r5, #4]
 8006310:	429a      	cmp	r2, r3
 8006312:	d1f1      	bne.n	80062f8 <ip4_reass+0x68>
  if (ipr == NULL) {
 8006314:	2c00      	cmp	r4, #0
 8006316:	d043      	beq.n	80063a0 <ip4_reass+0x110>
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8006318:	88e8      	ldrh	r0, [r5, #6]
 800631a:	f7ff faea 	bl	80058f2 <lwip_ntohs>
 800631e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8006322:	2800      	cmp	r0, #0
 8006324:	d044      	beq.n	80063b0 <ip4_reass+0x120>
  ip_reass_pbufcount += clen;
 8006326:	4b3a      	ldr	r3, [pc, #232]	; (8006410 <ip4_reass+0x180>)
 8006328:	881a      	ldrh	r2, [r3, #0]
 800632a:	4417      	add	r7, r2
 800632c:	801f      	strh	r7, [r3, #0]
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
 800632e:	88eb      	ldrh	r3, [r5, #6]
 8006330:	f013 0f20 	tst.w	r3, #32
 8006334:	d105      	bne.n	8006342 <ip4_reass+0xb2>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8006336:	7fa3      	ldrb	r3, [r4, #30]
 8006338:	f043 0301 	orr.w	r3, r3, #1
 800633c:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = offset + len;
 800633e:	444e      	add	r6, r9
 8006340:	83a6      	strh	r6, [r4, #28]
  if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
 8006342:	4641      	mov	r1, r8
 8006344:	4620      	mov	r0, r4
 8006346:	f7ff fed1 	bl	80060ec <ip_reass_chain_frag_into_datagram_and_validate>
 800634a:	2800      	cmp	r0, #0
 800634c:	d05d      	beq.n	800640a <ip4_reass+0x17a>
    ipr->datagram_len += IP_HLEN;
 800634e:	8ba3      	ldrh	r3, [r4, #28]
 8006350:	3314      	adds	r3, #20
 8006352:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8006354:	6863      	ldr	r3, [r4, #4]
 8006356:	685e      	ldr	r6, [r3, #4]
 8006358:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800635a:	4623      	mov	r3, r4
 800635c:	f853 2f08 	ldr.w	r2, [r3, #8]!
 8006360:	685f      	ldr	r7, [r3, #4]
 8006362:	6898      	ldr	r0, [r3, #8]
 8006364:	68d9      	ldr	r1, [r3, #12]
 8006366:	6032      	str	r2, [r6, #0]
 8006368:	6077      	str	r7, [r6, #4]
 800636a:	60b0      	str	r0, [r6, #8]
 800636c:	60f1      	str	r1, [r6, #12]
 800636e:	691a      	ldr	r2, [r3, #16]
 8006370:	6132      	str	r2, [r6, #16]
    IPH_LEN_SET(fraghdr, htons(ipr->datagram_len));
 8006372:	8ba0      	ldrh	r0, [r4, #28]
 8006374:	f7ff fab8 	bl	80058e8 <lwip_htons>
 8006378:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800637a:	2300      	movs	r3, #0
 800637c:	71b3      	strb	r3, [r6, #6]
 800637e:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8006380:	72b3      	strb	r3, [r6, #10]
 8006382:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 8006384:	6867      	ldr	r7, [r4, #4]
    while (r != NULL) {
 8006386:	b33d      	cbz	r5, 80063d8 <ip4_reass+0x148>
      iprh = (struct ip_reass_helper*)r->payload;
 8006388:	686e      	ldr	r6, [r5, #4]
      pbuf_header(r, -IP_HLEN);
 800638a:	f06f 0113 	mvn.w	r1, #19
 800638e:	4628      	mov	r0, r5
 8006390:	f000 fcf8 	bl	8006d84 <pbuf_header>
      pbuf_cat(p, r);
 8006394:	4629      	mov	r1, r5
 8006396:	4638      	mov	r0, r7
 8006398:	f000 fdfa 	bl	8006f90 <pbuf_cat>
      r = iprh->next_pbuf;
 800639c:	6835      	ldr	r5, [r6, #0]
 800639e:	e7f2      	b.n	8006386 <ip4_reass+0xf6>
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80063a0:	4639      	mov	r1, r7
 80063a2:	4628      	mov	r0, r5
 80063a4:	f7ff ff2e 	bl	8006204 <ip_reass_enqueue_new_datagram>
    if (ipr == NULL) {
 80063a8:	4604      	mov	r4, r0
 80063aa:	2800      	cmp	r0, #0
 80063ac:	d1bb      	bne.n	8006326 <ip4_reass+0x96>
 80063ae:	e79e      	b.n	80062ee <ip4_reass+0x5e>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80063b0:	89e0      	ldrh	r0, [r4, #14]
 80063b2:	f7ff fa9e 	bl	80058f2 <lwip_ntohs>
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80063b6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80063ba:	2800      	cmp	r0, #0
 80063bc:	d0b3      	beq.n	8006326 <ip4_reass+0x96>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80063be:	682a      	ldr	r2, [r5, #0]
 80063c0:	f8d5 e004 	ldr.w	lr, [r5, #4]
 80063c4:	68a8      	ldr	r0, [r5, #8]
 80063c6:	68e9      	ldr	r1, [r5, #12]
 80063c8:	60a2      	str	r2, [r4, #8]
 80063ca:	f8c4 e00c 	str.w	lr, [r4, #12]
 80063ce:	6120      	str	r0, [r4, #16]
 80063d0:	6161      	str	r1, [r4, #20]
 80063d2:	692a      	ldr	r2, [r5, #16]
 80063d4:	61a2      	str	r2, [r4, #24]
 80063d6:	e7a6      	b.n	8006326 <ip4_reass+0x96>
    if (ipr == reassdatagrams) {
 80063d8:	4b0e      	ldr	r3, [pc, #56]	; (8006414 <ip4_reass+0x184>)
 80063da:	6819      	ldr	r1, [r3, #0]
 80063dc:	428c      	cmp	r4, r1
 80063de:	d005      	beq.n	80063ec <ip4_reass+0x15c>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80063e0:	b129      	cbz	r1, 80063ee <ip4_reass+0x15e>
        if (ipr_prev->next == ipr) {
 80063e2:	680b      	ldr	r3, [r1, #0]
 80063e4:	429c      	cmp	r4, r3
 80063e6:	d002      	beq.n	80063ee <ip4_reass+0x15e>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80063e8:	4619      	mov	r1, r3
 80063ea:	e7f9      	b.n	80063e0 <ip4_reass+0x150>
      ipr_prev = NULL;
 80063ec:	2100      	movs	r1, #0
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80063ee:	4620      	mov	r0, r4
 80063f0:	f7ff fddc 	bl	8005fac <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 80063f4:	4638      	mov	r0, r7
 80063f6:	f000 fdbd 	bl	8006f74 <pbuf_clen>
 80063fa:	b280      	uxth	r0, r0
 80063fc:	4a04      	ldr	r2, [pc, #16]	; (8006410 <ip4_reass+0x180>)
 80063fe:	8813      	ldrh	r3, [r2, #0]
 8006400:	1a18      	subs	r0, r3, r0
 8006402:	8010      	strh	r0, [r2, #0]
}
 8006404:	4638      	mov	r0, r7
 8006406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return NULL;
 800640a:	2700      	movs	r7, #0
 800640c:	e7fa      	b.n	8006404 <ip4_reass+0x174>
 800640e:	bf00      	nop
 8006410:	20003e72 	.word	0x20003e72
 8006414:	20003e74 	.word	0x20003e74

08006418 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8006418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800641c:	b08d      	sub	sp, #52	; 0x34
 800641e:	4605      	mov	r5, r0
 8006420:	910a      	str	r1, [sp, #40]	; 0x28
 8006422:	920b      	str	r2, [sp, #44]	; 0x2c
  struct ip_hdr *original_iphdr;
#endif
  struct ip_hdr *iphdr;
  u16_t nfb;
  u16_t left, cop;
  u16_t mtu = netif->mtu;
 8006424:	8ccc      	ldrh	r4, [r1, #38]	; 0x26

  /* Copy the IP header in it */
  iphdr = (struct ip_hdr *)rambuf->payload;
  SMEMCPY(iphdr, p->payload, IP_HLEN);
#else /* IP_FRAG_USES_STATIC_BUF */
  original_iphdr = (struct ip_hdr *)p->payload;
 8006426:	f8d0 8004 	ldr.w	r8, [r0, #4]
  iphdr = original_iphdr;
#endif /* IP_FRAG_USES_STATIC_BUF */

  /* Save original offset */
  tmp = ntohs(IPH_OFFSET(iphdr));
 800642a:	f8b8 0006 	ldrh.w	r0, [r8, #6]
 800642e:	f7ff fa60 	bl	80058f2 <lwip_ntohs>
  ofo = tmp & IP_OFFMASK;
 8006432:	f3c0 030c 	ubfx	r3, r0, #0, #13
 8006436:	9304      	str	r3, [sp, #16]
  omf = tmp & IP_MF;
 8006438:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
 800643c:	9309      	str	r3, [sp, #36]	; 0x24

  left = p->tot_len - IP_HLEN;
 800643e:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8006442:	f1a9 0914 	sub.w	r9, r9, #20
 8006446:	fa1f f989 	uxth.w	r9, r9

  nfb = (mtu - IP_HLEN) / 8;
 800644a:	f1a4 0314 	sub.w	r3, r4, #20
 800644e:	9306      	str	r3, [sp, #24]
 8006450:	2b00      	cmp	r3, #0
 8006452:	db05      	blt.n	8006460 <ip4_frag+0x48>
 8006454:	f3c3 03cf 	ubfx	r3, r3, #3, #16
 8006458:	9308      	str	r3, [sp, #32]
  u16_t newpbuflen = 0;
 800645a:	2400      	movs	r4, #0
  u16_t poff = IP_HLEN;
 800645c:	2614      	movs	r6, #20

  while (left) {
 800645e:	e082      	b.n	8006566 <ip4_frag+0x14e>
  nfb = (mtu - IP_HLEN) / 8;
 8006460:	3307      	adds	r3, #7
 8006462:	e7f7      	b.n	8006454 <ip4_frag+0x3c>
    if (!last) {
      tmp = tmp | IP_MF;
    }

    /* Fill this fragment */
    cop = last ? left : nfb * 8;
 8006464:	f8cd 9014 	str.w	r9, [sp, #20]
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8006468:	2200      	movs	r2, #0
 800646a:	2114      	movs	r1, #20
 800646c:	2002      	movs	r0, #2
 800646e:	f000 fcc1 	bl	8006df4 <pbuf_alloc>
    if (rambuf == NULL) {
 8006472:	4682      	mov	sl, r0
 8006474:	2800      	cmp	r0, #0
 8006476:	f000 8091 	beq.w	800659c <ip4_frag+0x184>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800647a:	6843      	ldr	r3, [r0, #4]
 800647c:	f8d8 2000 	ldr.w	r2, [r8]
 8006480:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8006484:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8006488:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800648c:	601a      	str	r2, [r3, #0]
 800648e:	605f      	str	r7, [r3, #4]
 8006490:	6098      	str	r0, [r3, #8]
 8006492:	60d9      	str	r1, [r3, #12]
 8006494:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006498:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 800649a:	f8da b004 	ldr.w	fp, [sl, #4]

    /* Can just adjust p directly for needed offset. */
    p->payload = (u8_t *)p->payload + poff;
 800649e:	686b      	ldr	r3, [r5, #4]
 80064a0:	4433      	add	r3, r6
 80064a2:	606b      	str	r3, [r5, #4]
    p->len -= poff;
 80064a4:	896b      	ldrh	r3, [r5, #10]
 80064a6:	1b9e      	subs	r6, r3, r6
 80064a8:	816e      	strh	r6, [r5, #10]

    left_to_copy = cop;
 80064aa:	9e05      	ldr	r6, [sp, #20]
    while (left_to_copy) {
 80064ac:	e01c      	b.n	80064e8 <ip4_frag+0xd0>
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
        p = p->next;
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80064ae:	f7ff fea3 	bl	80061f8 <ip_frag_alloc_pbuf_custom_ref>
      if (pcr == NULL) {
 80064b2:	4607      	mov	r7, r0
 80064b4:	b310      	cbz	r0, 80064fc <ip4_frag+0xe4>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc, p->payload, newpbuflen);
 80064b6:	686b      	ldr	r3, [r5, #4]
 80064b8:	9401      	str	r4, [sp, #4]
 80064ba:	9300      	str	r3, [sp, #0]
 80064bc:	4603      	mov	r3, r0
 80064be:	2202      	movs	r2, #2
 80064c0:	4621      	mov	r1, r4
 80064c2:	2004      	movs	r0, #4
 80064c4:	f000 fc2e 	bl	8006d24 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 80064c8:	9003      	str	r0, [sp, #12]
 80064ca:	b1f8      	cbz	r0, 800650c <ip4_frag+0xf4>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 80064cc:	4628      	mov	r0, r5
 80064ce:	f000 fd5a 	bl	8006f86 <pbuf_ref>
      pcr->original = p;
 80064d2:	617d      	str	r5, [r7, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80064d4:	4b33      	ldr	r3, [pc, #204]	; (80065a4 <ip4_frag+0x18c>)
 80064d6:	613b      	str	r3, [r7, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80064d8:	9903      	ldr	r1, [sp, #12]
 80064da:	4650      	mov	r0, sl
 80064dc:	f000 fd58 	bl	8006f90 <pbuf_cat>
      left_to_copy -= newpbuflen;
 80064e0:	1b36      	subs	r6, r6, r4
 80064e2:	b2b6      	uxth	r6, r6
      if (left_to_copy) {
 80064e4:	b106      	cbz	r6, 80064e8 <ip4_frag+0xd0>
        p = p->next;
 80064e6:	682d      	ldr	r5, [r5, #0]
    while (left_to_copy) {
 80064e8:	b1ce      	cbz	r6, 800651e <ip4_frag+0x106>
      newpbuflen = (left_to_copy < p->len) ? left_to_copy : p->len;
 80064ea:	896c      	ldrh	r4, [r5, #10]
 80064ec:	42b4      	cmp	r4, r6
 80064ee:	bf28      	it	cs
 80064f0:	4634      	movcs	r4, r6
 80064f2:	b2a4      	uxth	r4, r4
      if (!newpbuflen) {
 80064f4:	2c00      	cmp	r4, #0
 80064f6:	d1da      	bne.n	80064ae <ip4_frag+0x96>
        p = p->next;
 80064f8:	682d      	ldr	r5, [r5, #0]
        continue;
 80064fa:	e7f5      	b.n	80064e8 <ip4_frag+0xd0>
 80064fc:	4650      	mov	r0, sl
        pbuf_free(rambuf);
 80064fe:	f000 fc4b 	bl	8006d98 <pbuf_free>
#endif /* IP_FRAG_USES_STATIC_BUF */
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8006502:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006506:	b00d      	add	sp, #52	; 0x34
 8006508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 800650c:	4638      	mov	r0, r7
 800650e:	f7ff fddd 	bl	80060cc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8006512:	4650      	mov	r0, sl
 8006514:	f000 fc40 	bl	8006d98 <pbuf_free>
  return ERR_MEM;
 8006518:	f04f 30ff 	mov.w	r0, #4294967295
        goto memerr;
 800651c:	e7f3      	b.n	8006506 <ip4_frag+0xee>
    IPH_OFFSET_SET(iphdr, htons(tmp));
 800651e:	9807      	ldr	r0, [sp, #28]
 8006520:	f7ff f9e2 	bl	80058e8 <lwip_htons>
 8006524:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, htons(cop + IP_HLEN));
 8006528:	9e05      	ldr	r6, [sp, #20]
 800652a:	f106 0014 	add.w	r0, r6, #20
 800652e:	b280      	uxth	r0, r0
 8006530:	f7ff f9da 	bl	80058e8 <lwip_htons>
 8006534:	f8ab 0002 	strh.w	r0, [fp, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8006538:	2300      	movs	r3, #0
 800653a:	f88b 300a 	strb.w	r3, [fp, #10]
 800653e:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 8006542:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006544:	6943      	ldr	r3, [r0, #20]
 8006546:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006548:	4651      	mov	r1, sl
 800654a:	4798      	blx	r3
    pbuf_free(rambuf);
 800654c:	4650      	mov	r0, sl
 800654e:	f000 fc23 	bl	8006d98 <pbuf_free>
    left -= cop;
 8006552:	eba9 0906 	sub.w	r9, r9, r6
 8006556:	fa1f f989 	uxth.w	r9, r9
    ofo += nfb;
 800655a:	9b04      	ldr	r3, [sp, #16]
 800655c:	9a08      	ldr	r2, [sp, #32]
 800655e:	4413      	add	r3, r2
 8006560:	b29b      	uxth	r3, r3
 8006562:	9304      	str	r3, [sp, #16]
    poff = newpbuflen;
 8006564:	4626      	mov	r6, r4
  while (left) {
 8006566:	f1b9 0f00 	cmp.w	r9, #0
 800656a:	d015      	beq.n	8006598 <ip4_frag+0x180>
    last = (left <= mtu - IP_HLEN);
 800656c:	464b      	mov	r3, r9
    tmp = omf | (IP_OFFMASK & (ofo));
 800656e:	9a04      	ldr	r2, [sp, #16]
 8006570:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8006574:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006576:	430a      	orrs	r2, r1
 8006578:	9207      	str	r2, [sp, #28]
    if (!last) {
 800657a:	9906      	ldr	r1, [sp, #24]
 800657c:	4549      	cmp	r1, r9
 800657e:	da02      	bge.n	8006586 <ip4_frag+0x16e>
      tmp = tmp | IP_MF;
 8006580:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006584:	9207      	str	r2, [sp, #28]
    cop = last ? left : nfb * 8;
 8006586:	9a06      	ldr	r2, [sp, #24]
 8006588:	429a      	cmp	r2, r3
 800658a:	f6bf af6b 	bge.w	8006464 <ip4_frag+0x4c>
 800658e:	9b08      	ldr	r3, [sp, #32]
 8006590:	00db      	lsls	r3, r3, #3
 8006592:	b29b      	uxth	r3, r3
 8006594:	9305      	str	r3, [sp, #20]
 8006596:	e767      	b.n	8006468 <ip4_frag+0x50>
  return ERR_OK;
 8006598:	2000      	movs	r0, #0
 800659a:	e7b4      	b.n	8006506 <ip4_frag+0xee>
  return ERR_MEM;
 800659c:	f04f 30ff 	mov.w	r0, #4294967295
 80065a0:	e7b1      	b.n	8006506 <ip4_frag+0xee>
 80065a2:	bf00      	nop
 80065a4:	080060d9 	.word	0x080060d9

080065a8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80065a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065aa:	4605      	mov	r5, r0
 80065ac:	460f      	mov	r7, r1
 80065ae:	4616      	mov	r6, r2
  struct sys_timeo *timeout, *t;
#if NO_SYS
  u32_t now, diff;
#endif

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80065b0:	200a      	movs	r0, #10
 80065b2:	f000 fa61 	bl	8006a78 <memp_malloc>
  if (timeout == NULL) {
 80065b6:	2800      	cmp	r0, #0
 80065b8:	d027      	beq.n	800660a <sys_timeout+0x62>
 80065ba:	4604      	mov	r4, r0
  } else {
    diff = now - timeouts_last_time;
  }
#endif

  timeout->next = NULL;
 80065bc:	2300      	movs	r3, #0
 80065be:	6003      	str	r3, [r0, #0]
  timeout->h = handler;
 80065c0:	6087      	str	r7, [r0, #8]
  timeout->arg = arg;
 80065c2:	60c6      	str	r6, [r0, #12]
#if NO_SYS
  timeout->time = msecs + diff;
#else
  timeout->time = msecs;
 80065c4:	6045      	str	r5, [r0, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80065c6:	4b11      	ldr	r3, [pc, #68]	; (800660c <sys_timeout+0x64>)
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	b172      	cbz	r2, 80065ea <sys_timeout+0x42>
    next_timeout = timeout;
    return;
  }

  if (next_timeout->time > msecs) {
 80065cc:	6853      	ldr	r3, [r2, #4]
 80065ce:	429d      	cmp	r5, r3
 80065d0:	d30d      	bcc.n	80065ee <sys_timeout+0x46>
    next_timeout->time -= msecs;
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80065d2:	b1d2      	cbz	r2, 800660a <sys_timeout+0x62>
      timeout->time -= t->time;
 80065d4:	6851      	ldr	r1, [r2, #4]
 80065d6:	6863      	ldr	r3, [r4, #4]
 80065d8:	1a5b      	subs	r3, r3, r1
 80065da:	6063      	str	r3, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 80065dc:	6811      	ldr	r1, [r2, #0]
 80065de:	b161      	cbz	r1, 80065fa <sys_timeout+0x52>
 80065e0:	6848      	ldr	r0, [r1, #4]
 80065e2:	4283      	cmp	r3, r0
 80065e4:	d309      	bcc.n	80065fa <sys_timeout+0x52>
    for (t = next_timeout; t != NULL; t = t->next) {
 80065e6:	460a      	mov	r2, r1
 80065e8:	e7f3      	b.n	80065d2 <sys_timeout+0x2a>
    next_timeout = timeout;
 80065ea:	6018      	str	r0, [r3, #0]
    return;
 80065ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    next_timeout->time -= msecs;
 80065ee:	1b5d      	subs	r5, r3, r5
 80065f0:	6055      	str	r5, [r2, #4]
    timeout->next = next_timeout;
 80065f2:	6002      	str	r2, [r0, #0]
    next_timeout = timeout;
 80065f4:	4b05      	ldr	r3, [pc, #20]	; (800660c <sys_timeout+0x64>)
 80065f6:	6018      	str	r0, [r3, #0]
 80065f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (t->next != NULL) {
 80065fa:	b111      	cbz	r1, 8006602 <sys_timeout+0x5a>
          t->next->time -= timeout->time;
 80065fc:	6848      	ldr	r0, [r1, #4]
 80065fe:	1ac3      	subs	r3, r0, r3
 8006600:	604b      	str	r3, [r1, #4]
        }
        timeout->next = t->next;
 8006602:	6813      	ldr	r3, [r2, #0]
 8006604:	6023      	str	r3, [r4, #0]
        t->next = timeout;
 8006606:	6014      	str	r4, [r2, #0]
        break;
 8006608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800660a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800660c:	20003e78 	.word	0x20003e78

08006610 <tcp_timer_needed>:
{
 8006610:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8006612:	4b0a      	ldr	r3, [pc, #40]	; (800663c <tcp_timer_needed+0x2c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	b953      	cbnz	r3, 800662e <tcp_timer_needed+0x1e>
 8006618:	4b09      	ldr	r3, [pc, #36]	; (8006640 <tcp_timer_needed+0x30>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	b143      	cbz	r3, 8006630 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800661e:	2201      	movs	r2, #1
 8006620:	4b06      	ldr	r3, [pc, #24]	; (800663c <tcp_timer_needed+0x2c>)
 8006622:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8006624:	2200      	movs	r2, #0
 8006626:	4907      	ldr	r1, [pc, #28]	; (8006644 <tcp_timer_needed+0x34>)
 8006628:	20fa      	movs	r0, #250	; 0xfa
 800662a:	f7ff ffbd 	bl	80065a8 <sys_timeout>
 800662e:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8006630:	4b05      	ldr	r3, [pc, #20]	; (8006648 <tcp_timer_needed+0x38>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1f2      	bne.n	800661e <tcp_timer_needed+0xe>
 8006638:	e7f9      	b.n	800662e <tcp_timer_needed+0x1e>
 800663a:	bf00      	nop
 800663c:	20003e7c 	.word	0x20003e7c
 8006640:	20007b2c 	.word	0x20007b2c
 8006644:	0800664d 	.word	0x0800664d
 8006648:	20007b3c 	.word	0x20007b3c

0800664c <tcpip_tcp_timer>:
{
 800664c:	b508      	push	{r3, lr}
  tcp_tmr();
 800664e:	f001 f929 	bl	80078a4 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8006652:	4b08      	ldr	r3, [pc, #32]	; (8006674 <tcpip_tcp_timer+0x28>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	b12b      	cbz	r3, 8006664 <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8006658:	2200      	movs	r2, #0
 800665a:	4907      	ldr	r1, [pc, #28]	; (8006678 <tcpip_tcp_timer+0x2c>)
 800665c:	20fa      	movs	r0, #250	; 0xfa
 800665e:	f7ff ffa3 	bl	80065a8 <sys_timeout>
 8006662:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8006664:	4b05      	ldr	r3, [pc, #20]	; (800667c <tcpip_tcp_timer+0x30>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1f5      	bne.n	8006658 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 800666c:	2200      	movs	r2, #0
 800666e:	4b04      	ldr	r3, [pc, #16]	; (8006680 <tcpip_tcp_timer+0x34>)
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	bd08      	pop	{r3, pc}
 8006674:	20007b2c 	.word	0x20007b2c
 8006678:	0800664d 	.word	0x0800664d
 800667c:	20007b3c 	.word	0x20007b3c
 8006680:	20003e7c 	.word	0x20003e7c

08006684 <sys_timeouts_init>:
{
 8006684:	b508      	push	{r3, lr}
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
 8006686:	2200      	movs	r2, #0
 8006688:	4905      	ldr	r1, [pc, #20]	; (80066a0 <sys_timeouts_init+0x1c>)
 800668a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800668e:	f7ff ff8b 	bl	80065a8 <sys_timeout>
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
 8006692:	2200      	movs	r2, #0
 8006694:	4903      	ldr	r1, [pc, #12]	; (80066a4 <sys_timeouts_init+0x20>)
 8006696:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800669a:	f7ff ff85 	bl	80065a8 <sys_timeout>
 800669e:	bd08      	pop	{r3, pc}
 80066a0:	080066c1 	.word	0x080066c1
 80066a4:	080066a9 	.word	0x080066a9

080066a8 <arp_timer>:
{
 80066a8:	b508      	push	{r3, lr}
  etharp_tmr();
 80066aa:	f003 ff75 	bl	800a598 <etharp_tmr>
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
 80066ae:	2200      	movs	r2, #0
 80066b0:	4902      	ldr	r1, [pc, #8]	; (80066bc <arp_timer+0x14>)
 80066b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80066b6:	f7ff ff77 	bl	80065a8 <sys_timeout>
 80066ba:	bd08      	pop	{r3, pc}
 80066bc:	080066a9 	.word	0x080066a9

080066c0 <ip_reass_timer>:
{
 80066c0:	b508      	push	{r3, lr}
  ip_reass_tmr();
 80066c2:	f7ff fdcf 	bl	8006264 <ip_reass_tmr>
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
 80066c6:	2200      	movs	r2, #0
 80066c8:	4902      	ldr	r1, [pc, #8]	; (80066d4 <ip_reass_timer+0x14>)
 80066ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80066ce:	f7ff ff6b 	bl	80065a8 <sys_timeout>
 80066d2:	bd08      	pop	{r3, pc}
 80066d4:	080066c1 	.word	0x080066c1

080066d8 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80066d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066da:	4604      	mov	r4, r0
 80066dc:	460d      	mov	r5, r1
 80066de:	e016      	b.n	800670e <sys_timeouts_mbox_fetch+0x36>
  sys_timeout_handler handler;
  void *arg;

 again:
  if (!next_timeout) {
    time_needed = sys_arch_mbox_fetch(mbox, msg, 0);
 80066e0:	2200      	movs	r2, #0
 80066e2:	4629      	mov	r1, r5
 80066e4:	4620      	mov	r0, r4
 80066e6:	f004 f99a 	bl	800aa1e <sys_arch_mbox_fetch>
 80066ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else {
    if (next_timeout->time > 0) {
      time_needed = sys_arch_mbox_fetch(mbox, msg, next_timeout->time);
 80066ec:	4629      	mov	r1, r5
 80066ee:	4620      	mov	r0, r4
 80066f0:	f004 f995 	bl	800aa1e <sys_arch_mbox_fetch>
    } else {
      time_needed = SYS_ARCH_TIMEOUT;
    }

    if (time_needed == SYS_ARCH_TIMEOUT) {
 80066f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80066f8:	d116      	bne.n	8006728 <sys_timeouts_mbox_fetch+0x50>
      /* If time == SYS_ARCH_TIMEOUT, a timeout occurred before a message
         could be fetched. We should now call the timeout handler and
         deallocate the memory allocated for the timeout. */
      tmptimeout = next_timeout;
 80066fa:	4b11      	ldr	r3, [pc, #68]	; (8006740 <sys_timeouts_mbox_fetch+0x68>)
 80066fc:	6819      	ldr	r1, [r3, #0]
      next_timeout = tmptimeout->next;
 80066fe:	680a      	ldr	r2, [r1, #0]
 8006700:	601a      	str	r2, [r3, #0]
      handler = tmptimeout->h;
 8006702:	688e      	ldr	r6, [r1, #8]
      arg = tmptimeout->arg;
 8006704:	68cf      	ldr	r7, [r1, #12]
      if (handler != NULL) {
        LWIP_DEBUGF(TIMERS_DEBUG, ("stmf calling h=%s arg=%p\n",
          tmptimeout->handler_name, arg));
      }
#endif /* LWIP_DEBUG_TIMERNAMES */
      memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8006706:	200a      	movs	r0, #10
 8006708:	f000 f9c4 	bl	8006a94 <memp_free>
      if (handler != NULL) {
 800670c:	b94e      	cbnz	r6, 8006722 <sys_timeouts_mbox_fetch+0x4a>
  if (!next_timeout) {
 800670e:	4b0c      	ldr	r3, [pc, #48]	; (8006740 <sys_timeouts_mbox_fetch+0x68>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d0e4      	beq.n	80066e0 <sys_timeouts_mbox_fetch+0x8>
    if (next_timeout->time > 0) {
 8006716:	685a      	ldr	r2, [r3, #4]
 8006718:	2a00      	cmp	r2, #0
 800671a:	d1e7      	bne.n	80066ec <sys_timeouts_mbox_fetch+0x14>
      time_needed = SYS_ARCH_TIMEOUT;
 800671c:	f04f 30ff 	mov.w	r0, #4294967295
 8006720:	e7e8      	b.n	80066f4 <sys_timeouts_mbox_fetch+0x1c>
        /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
           timeout handler function. */
        LOCK_TCPIP_CORE();
        handler(arg);
 8006722:	4638      	mov	r0, r7
 8006724:	47b0      	blx	r6
 8006726:	e7f2      	b.n	800670e <sys_timeouts_mbox_fetch+0x36>
      goto again;
    } else {
      /* If time != SYS_ARCH_TIMEOUT, a message was received before the timeout
         occured. The time variable is set to the number of
         milliseconds we waited for the message. */
      if (time_needed < next_timeout->time) {
 8006728:	4b05      	ldr	r3, [pc, #20]	; (8006740 <sys_timeouts_mbox_fetch+0x68>)
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	6853      	ldr	r3, [r2, #4]
 800672e:	4298      	cmp	r0, r3
 8006730:	d302      	bcc.n	8006738 <sys_timeouts_mbox_fetch+0x60>
        next_timeout->time -= time_needed;
      } else {
        next_timeout->time = 0;
 8006732:	2300      	movs	r3, #0
 8006734:	6053      	str	r3, [r2, #4]
 8006736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        next_timeout->time -= time_needed;
 8006738:	1a1b      	subs	r3, r3, r0
 800673a:	6053      	str	r3, [r2, #4]
 800673c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800673e:	bf00      	nop
 8006740:	20003e78 	.word	0x20003e78

08006744 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006744:	b430      	push	{r4, r5}
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006746:	4b17      	ldr	r3, [pc, #92]	; (80067a4 <plug_holes+0x60>)
 8006748:	681b      	ldr	r3, [r3, #0]
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800674a:	4a17      	ldr	r2, [pc, #92]	; (80067a8 <plug_holes+0x64>)
 800674c:	6815      	ldr	r5, [r2, #0]
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800674e:	8801      	ldrh	r1, [r0, #0]

  nmem = (struct mem *)(void *)&ram[mem->next];
 8006750:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006752:	4290      	cmp	r0, r2
 8006754:	d00d      	beq.n	8006772 <plug_holes+0x2e>
 8006756:	7914      	ldrb	r4, [r2, #4]
 8006758:	b95c      	cbnz	r4, 8006772 <plug_holes+0x2e>
 800675a:	4295      	cmp	r5, r2
 800675c:	d009      	beq.n	8006772 <plug_holes+0x2e>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800675e:	4c13      	ldr	r4, [pc, #76]	; (80067ac <plug_holes+0x68>)
 8006760:	6824      	ldr	r4, [r4, #0]
 8006762:	42a2      	cmp	r2, r4
 8006764:	d017      	beq.n	8006796 <plug_holes+0x52>
      lfree = mem;
    }
    mem->next = nmem->next;
 8006766:	5a5a      	ldrh	r2, [r3, r1]
 8006768:	8002      	strh	r2, [r0, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800676a:	5a5a      	ldrh	r2, [r3, r1]
 800676c:	441a      	add	r2, r3
 800676e:	1ac1      	subs	r1, r0, r3
 8006770:	8051      	strh	r1, [r2, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8006772:	8841      	ldrh	r1, [r0, #2]
 8006774:	185a      	adds	r2, r3, r1
  if (pmem != mem && pmem->used == 0) {
 8006776:	4290      	cmp	r0, r2
 8006778:	d00b      	beq.n	8006792 <plug_holes+0x4e>
 800677a:	7914      	ldrb	r4, [r2, #4]
 800677c:	b94c      	cbnz	r4, 8006792 <plug_holes+0x4e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800677e:	4c0b      	ldr	r4, [pc, #44]	; (80067ac <plug_holes+0x68>)
 8006780:	6824      	ldr	r4, [r4, #0]
 8006782:	42a0      	cmp	r0, r4
 8006784:	d00a      	beq.n	800679c <plug_holes+0x58>
      lfree = pmem;
    }
    pmem->next = mem->next;
 8006786:	8804      	ldrh	r4, [r0, #0]
 8006788:	525c      	strh	r4, [r3, r1]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800678a:	8801      	ldrh	r1, [r0, #0]
 800678c:	4419      	add	r1, r3
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	804b      	strh	r3, [r1, #2]
  }
}
 8006792:	bc30      	pop	{r4, r5}
 8006794:	4770      	bx	lr
      lfree = mem;
 8006796:	4a05      	ldr	r2, [pc, #20]	; (80067ac <plug_holes+0x68>)
 8006798:	6010      	str	r0, [r2, #0]
 800679a:	e7e4      	b.n	8006766 <plug_holes+0x22>
      lfree = pmem;
 800679c:	4c03      	ldr	r4, [pc, #12]	; (80067ac <plug_holes+0x68>)
 800679e:	6022      	str	r2, [r4, #0]
 80067a0:	e7f1      	b.n	8006786 <plug_holes+0x42>
 80067a2:	bf00      	nop
 80067a4:	20003e88 	.word	0x20003e88
 80067a8:	20003e8c 	.word	0x20003e8c
 80067ac:	20003e80 	.word	0x20003e80

080067b0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80067b0:	b508      	push	{r3, lr}

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80067b2:	4b0c      	ldr	r3, [pc, #48]	; (80067e4 <mem_init+0x34>)
 80067b4:	f023 0303 	bic.w	r3, r3, #3
 80067b8:	4a0b      	ldr	r2, [pc, #44]	; (80067e8 <mem_init+0x38>)
 80067ba:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 80067bc:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80067c0:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
 80067c2:	2200      	movs	r2, #0
 80067c4:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80067c6:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80067c8:	185a      	adds	r2, r3, r1
 80067ca:	4808      	ldr	r0, [pc, #32]	; (80067ec <mem_init+0x3c>)
 80067cc:	6002      	str	r2, [r0, #0]
  ram_end->used = 1;
 80067ce:	2001      	movs	r0, #1
 80067d0:	7110      	strb	r0, [r2, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80067d2:	f8a3 1640 	strh.w	r1, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 80067d6:	8051      	strh	r1, [r2, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80067d8:	4a05      	ldr	r2, [pc, #20]	; (80067f0 <mem_init+0x40>)
 80067da:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80067dc:	4805      	ldr	r0, [pc, #20]	; (80067f4 <mem_init+0x44>)
 80067de:	f004 f9c3 	bl	800ab68 <sys_mutex_new>
 80067e2:	bd08      	pop	{r3, pc}
 80067e4:	20004073 	.word	0x20004073
 80067e8:	20003e88 	.word	0x20003e88
 80067ec:	20003e8c 	.word	0x20003e8c
 80067f0:	20003e80 	.word	0x20003e80
 80067f4:	20003e84 	.word	0x20003e84

080067f8 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80067f8:	b1f0      	cbz	r0, 8006838 <mem_free+0x40>
{
 80067fa:	b510      	push	{r4, lr}
 80067fc:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80067fe:	4a0f      	ldr	r2, [pc, #60]	; (800683c <mem_free+0x44>)
 8006800:	6812      	ldr	r2, [r2, #0]
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006802:	4290      	cmp	r0, r2
 8006804:	d303      	bcc.n	800680e <mem_free+0x16>
 8006806:	4a0e      	ldr	r2, [pc, #56]	; (8006840 <mem_free+0x48>)
 8006808:	6812      	ldr	r2, [r2, #0]
 800680a:	4290      	cmp	r0, r2
 800680c:	d300      	bcc.n	8006810 <mem_free+0x18>
 800680e:	bd10      	pop	{r4, pc}
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return;
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8006810:	480c      	ldr	r0, [pc, #48]	; (8006844 <mem_free+0x4c>)
 8006812:	f004 f9b5 	bl	800ab80 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8006816:	f1a4 0008 	sub.w	r0, r4, #8
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;
 800681a:	2300      	movs	r3, #0
 800681c:	f804 3c04 	strb.w	r3, [r4, #-4]

  if (mem < lfree) {
 8006820:	4b09      	ldr	r3, [pc, #36]	; (8006848 <mem_free+0x50>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4298      	cmp	r0, r3
 8006826:	d201      	bcs.n	800682c <mem_free+0x34>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006828:	4b07      	ldr	r3, [pc, #28]	; (8006848 <mem_free+0x50>)
 800682a:	6018      	str	r0, [r3, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800682c:	f7ff ff8a 	bl	8006744 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8006830:	4804      	ldr	r0, [pc, #16]	; (8006844 <mem_free+0x4c>)
 8006832:	f004 f9aa 	bl	800ab8a <sys_mutex_unlock>
 8006836:	e7ea      	b.n	800680e <mem_free+0x16>
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	20003e88 	.word	0x20003e88
 8006840:	20003e8c 	.word	0x20003e8c
 8006844:	20003e84 	.word	0x20003e84
 8006848:	20003e80 	.word	0x20003e80

0800684c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800684c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684e:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8006850:	1ccc      	adds	r4, r1, #3
 8006852:	b2a4      	uxth	r4, r4
 8006854:	f024 0403 	bic.w	r4, r4, #3
 8006858:	b2a4      	uxth	r4, r4

  if (newsize < MIN_SIZE_ALIGNED) {
 800685a:	2c0b      	cmp	r4, #11
 800685c:	d800      	bhi.n	8006860 <mem_trim+0x14>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800685e:	240c      	movs	r4, #12
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8006860:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 8006864:	d85b      	bhi.n	800691e <mem_trim+0xd2>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006866:	4b30      	ldr	r3, [pc, #192]	; (8006928 <mem_trim+0xdc>)
 8006868:	681b      	ldr	r3, [r3, #0]
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800686a:	42ab      	cmp	r3, r5
 800686c:	d833      	bhi.n	80068d6 <mem_trim+0x8a>
 800686e:	4a2f      	ldr	r2, [pc, #188]	; (800692c <mem_trim+0xe0>)
 8006870:	6812      	ldr	r2, [r2, #0]
 8006872:	4295      	cmp	r5, r2
 8006874:	d22f      	bcs.n	80068d6 <mem_trim+0x8a>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8006876:	f1a5 0708 	sub.w	r7, r5, #8
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800687a:	1aff      	subs	r7, r7, r3
 800687c:	b2bf      	uxth	r7, r7

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800687e:	f835 6c08 	ldrh.w	r6, [r5, #-8]
 8006882:	1bf6      	subs	r6, r6, r7
 8006884:	b2b6      	uxth	r6, r6
 8006886:	3e08      	subs	r6, #8
 8006888:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
  if (newsize > size) {
 800688a:	42b4      	cmp	r4, r6
 800688c:	d849      	bhi.n	8006922 <mem_trim+0xd6>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 800688e:	d022      	beq.n	80068d6 <mem_trim+0x8a>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8006890:	4827      	ldr	r0, [pc, #156]	; (8006930 <mem_trim+0xe4>)
 8006892:	f004 f975 	bl	800ab80 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8006896:	4b24      	ldr	r3, [pc, #144]	; (8006928 <mem_trim+0xdc>)
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	f835 3c08 	ldrh.w	r3, [r5, #-8]
 800689e:	18d1      	adds	r1, r2, r3
  if (mem2->used == 0) {
 80068a0:	7908      	ldrb	r0, [r1, #4]
 80068a2:	b9f0      	cbnz	r0, 80068e2 <mem_trim+0x96>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 80068a4:	5ad0      	ldrh	r0, [r2, r3]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80068a6:	19e3      	adds	r3, r4, r7
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	3308      	adds	r3, #8
 80068ac:	b29b      	uxth	r3, r3
    if (lfree == mem2) {
 80068ae:	4c21      	ldr	r4, [pc, #132]	; (8006934 <mem_trim+0xe8>)
 80068b0:	6824      	ldr	r4, [r4, #0]
 80068b2:	42a1      	cmp	r1, r4
 80068b4:	d011      	beq.n	80068da <mem_trim+0x8e>
      lfree = (struct mem *)(void *)&ram[ptr2];
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80068b6:	18d1      	adds	r1, r2, r3
    mem2->used = 0;
 80068b8:	2400      	movs	r4, #0
 80068ba:	710c      	strb	r4, [r1, #4]
    /* restore the next pointer */
    mem2->next = next;
 80068bc:	52d0      	strh	r0, [r2, r3]
    /* link it back to mem */
    mem2->prev = ptr;
 80068be:	804f      	strh	r7, [r1, #2]
    /* link mem to it */
    mem->next = ptr2;
 80068c0:	f825 3c08 	strh.w	r3, [r5, #-8]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80068c4:	5ad1      	ldrh	r1, [r2, r3]
 80068c6:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 80068ca:	d001      	beq.n	80068d0 <mem_trim+0x84>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80068cc:	440a      	add	r2, r1
 80068ce:	8053      	strh	r3, [r2, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80068d0:	4817      	ldr	r0, [pc, #92]	; (8006930 <mem_trim+0xe4>)
 80068d2:	f004 f95a 	bl	800ab8a <sys_mutex_unlock>
  return rmem;
}
 80068d6:	4628      	mov	r0, r5
 80068d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      lfree = (struct mem *)(void *)&ram[ptr2];
 80068da:	18d1      	adds	r1, r2, r3
 80068dc:	4c15      	ldr	r4, [pc, #84]	; (8006934 <mem_trim+0xe8>)
 80068de:	6021      	str	r1, [r4, #0]
 80068e0:	e7e9      	b.n	80068b6 <mem_trim+0x6a>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80068e2:	f104 0314 	add.w	r3, r4, #20
 80068e6:	42b3      	cmp	r3, r6
 80068e8:	d8f2      	bhi.n	80068d0 <mem_trim+0x84>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80068ea:	19e3      	adds	r3, r4, r7
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	3308      	adds	r3, #8
 80068f0:	b29b      	uxth	r3, r3
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80068f2:	18d1      	adds	r1, r2, r3
    if (mem2 < lfree) {
 80068f4:	480f      	ldr	r0, [pc, #60]	; (8006934 <mem_trim+0xe8>)
 80068f6:	6800      	ldr	r0, [r0, #0]
 80068f8:	4281      	cmp	r1, r0
 80068fa:	d201      	bcs.n	8006900 <mem_trim+0xb4>
      lfree = mem2;
 80068fc:	480d      	ldr	r0, [pc, #52]	; (8006934 <mem_trim+0xe8>)
 80068fe:	6001      	str	r1, [r0, #0]
    mem2->used = 0;
 8006900:	2000      	movs	r0, #0
 8006902:	7108      	strb	r0, [r1, #4]
    mem2->next = mem->next;
 8006904:	f835 0c08 	ldrh.w	r0, [r5, #-8]
 8006908:	52d0      	strh	r0, [r2, r3]
    mem2->prev = ptr;
 800690a:	804f      	strh	r7, [r1, #2]
    mem->next = ptr2;
 800690c:	f825 3c08 	strh.w	r3, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006910:	5ad1      	ldrh	r1, [r2, r3]
 8006912:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8006916:	d0db      	beq.n	80068d0 <mem_trim+0x84>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8006918:	440a      	add	r2, r1
 800691a:	8053      	strh	r3, [r2, #2]
 800691c:	e7d8      	b.n	80068d0 <mem_trim+0x84>
    return NULL;
 800691e:	2500      	movs	r5, #0
 8006920:	e7d9      	b.n	80068d6 <mem_trim+0x8a>
    return NULL;
 8006922:	2500      	movs	r5, #0
 8006924:	e7d7      	b.n	80068d6 <mem_trim+0x8a>
 8006926:	bf00      	nop
 8006928:	20003e88 	.word	0x20003e88
 800692c:	20003e8c 	.word	0x20003e8c
 8006930:	20003e84 	.word	0x20003e84
 8006934:	20003e80 	.word	0x20003e80

08006938 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8006938:	2800      	cmp	r0, #0
 800693a:	d05b      	beq.n	80069f4 <mem_malloc+0xbc>
{
 800693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693e:	4605      	mov	r5, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8006940:	3503      	adds	r5, #3
 8006942:	b2ad      	uxth	r5, r5
 8006944:	f025 0503 	bic.w	r5, r5, #3
 8006948:	b2ad      	uxth	r5, r5

  if (size < MIN_SIZE_ALIGNED) {
 800694a:	2d0b      	cmp	r5, #11
 800694c:	d800      	bhi.n	8006950 <mem_malloc+0x18>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800694e:	250c      	movs	r5, #12
  }

  if (size > MEM_SIZE_ALIGNED) {
 8006950:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8006954:	d850      	bhi.n	80069f8 <mem_malloc+0xc0>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8006956:	4829      	ldr	r0, [pc, #164]	; (80069fc <mem_malloc+0xc4>)
 8006958:	f004 f912 	bl	800ab80 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800695c:	4b28      	ldr	r3, [pc, #160]	; (8006a00 <mem_malloc+0xc8>)
 800695e:	6818      	ldr	r0, [r3, #0]
 8006960:	4b28      	ldr	r3, [pc, #160]	; (8006a04 <mem_malloc+0xcc>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	1a1b      	subs	r3, r3, r0
 8006966:	b29b      	uxth	r3, r3
 8006968:	e019      	b.n	800699e <mem_malloc+0x66>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800696a:	2301      	movs	r3, #1
 800696c:	7123      	strb	r3, [r4, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800696e:	4b25      	ldr	r3, [pc, #148]	; (8006a04 <mem_malloc+0xcc>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	429c      	cmp	r4, r3
 8006974:	d009      	beq.n	800698a <mem_malloc+0x52>
          }
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8006976:	4821      	ldr	r0, [pc, #132]	; (80069fc <mem_malloc+0xc4>)
 8006978:	f004 f907 	bl	800ab8a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800697c:	f104 0008 	add.w	r0, r4, #8
 8006980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            cur = (struct mem *)(void *)&ram[cur->next];
 8006982:	4a1f      	ldr	r2, [pc, #124]	; (8006a00 <mem_malloc+0xc8>)
 8006984:	6812      	ldr	r2, [r2, #0]
 8006986:	881b      	ldrh	r3, [r3, #0]
 8006988:	4413      	add	r3, r2
          while (cur->used && cur != ram_end) {
 800698a:	791a      	ldrb	r2, [r3, #4]
 800698c:	b11a      	cbz	r2, 8006996 <mem_malloc+0x5e>
 800698e:	4a1e      	ldr	r2, [pc, #120]	; (8006a08 <mem_malloc+0xd0>)
 8006990:	6812      	ldr	r2, [r2, #0]
 8006992:	4293      	cmp	r3, r2
 8006994:	d1f5      	bne.n	8006982 <mem_malloc+0x4a>
          lfree = cur;
 8006996:	4a1b      	ldr	r2, [pc, #108]	; (8006a04 <mem_malloc+0xcc>)
 8006998:	6013      	str	r3, [r2, #0]
 800699a:	e7ec      	b.n	8006976 <mem_malloc+0x3e>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800699c:	8823      	ldrh	r3, [r4, #0]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800699e:	461f      	mov	r7, r3
 80069a0:	462e      	mov	r6, r5
 80069a2:	f5c5 61c8 	rsb	r1, r5, #1600	; 0x640
 80069a6:	428b      	cmp	r3, r1
 80069a8:	d21f      	bcs.n	80069ea <mem_malloc+0xb2>
      mem = (struct mem *)(void *)&ram[ptr];
 80069aa:	18c4      	adds	r4, r0, r3
      if ((!mem->used) &&
 80069ac:	7921      	ldrb	r1, [r4, #4]
 80069ae:	2900      	cmp	r1, #0
 80069b0:	d1f4      	bne.n	800699c <mem_malloc+0x64>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80069b2:	5ac2      	ldrh	r2, [r0, r3]
 80069b4:	1bd2      	subs	r2, r2, r7
 80069b6:	3a08      	subs	r2, #8
      if ((!mem->used) &&
 80069b8:	4296      	cmp	r6, r2
 80069ba:	d8ef      	bhi.n	800699c <mem_malloc+0x64>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80069bc:	3614      	adds	r6, #20
 80069be:	42b2      	cmp	r2, r6
 80069c0:	d3d3      	bcc.n	800696a <mem_malloc+0x32>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 80069c2:	18ea      	adds	r2, r5, r3
 80069c4:	b292      	uxth	r2, r2
 80069c6:	3208      	adds	r2, #8
 80069c8:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 80069ca:	1881      	adds	r1, r0, r2
          mem2->used = 0;
 80069cc:	2500      	movs	r5, #0
 80069ce:	710d      	strb	r5, [r1, #4]
          mem2->next = mem->next;
 80069d0:	8825      	ldrh	r5, [r4, #0]
 80069d2:	5285      	strh	r5, [r0, r2]
          mem2->prev = ptr;
 80069d4:	804b      	strh	r3, [r1, #2]
          mem->next = ptr2;
 80069d6:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 80069d8:	2301      	movs	r3, #1
 80069da:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 80069dc:	5a83      	ldrh	r3, [r0, r2]
 80069de:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80069e2:	d0c4      	beq.n	800696e <mem_malloc+0x36>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80069e4:	4418      	add	r0, r3
 80069e6:	8042      	strh	r2, [r0, #2]
 80069e8:	e7c1      	b.n	800696e <mem_malloc+0x36>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80069ea:	4804      	ldr	r0, [pc, #16]	; (80069fc <mem_malloc+0xc4>)
 80069ec:	f004 f8cd 	bl	800ab8a <sys_mutex_unlock>
  return NULL;
 80069f0:	2000      	movs	r0, #0
 80069f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 80069f4:	2000      	movs	r0, #0
 80069f6:	4770      	bx	lr
    return NULL;
 80069f8:	2000      	movs	r0, #0
}
 80069fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069fc:	20003e84 	.word	0x20003e84
 8006a00:	20003e88 	.word	0x20003e88
 8006a04:	20003e80 	.word	0x20003e80
 8006a08:	20003e8c 	.word	0x20003e8c

08006a0c <do_memp_free_pool>:
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element_overflow(memp, desc);
  memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

  memp->next = *desc->tab;
 8006a0c:	6883      	ldr	r3, [r0, #8]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	600b      	str	r3, [r1, #0]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first)
    *old_first = *desc->tab;
#endif

  *desc->tab = memp;
 8006a12:	6883      	ldr	r3, [r0, #8]
 8006a14:	6019      	str	r1, [r3, #0]
 8006a16:	4770      	bx	lr

08006a18 <memp_init_pool>:
  *desc->tab = NULL;
 8006a18:	6883      	ldr	r3, [r0, #8]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8006a1e:	6843      	ldr	r3, [r0, #4]
 8006a20:	3303      	adds	r3, #3
 8006a22:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8006a26:	e007      	b.n	8006a38 <memp_init_pool+0x20>
    memp->next = *desc->tab;
 8006a28:	6881      	ldr	r1, [r0, #8]
 8006a2a:	6809      	ldr	r1, [r1, #0]
 8006a2c:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 8006a2e:	6881      	ldr	r1, [r0, #8]
 8006a30:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006a32:	8801      	ldrh	r1, [r0, #0]
 8006a34:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 8006a36:	3201      	adds	r2, #1
 8006a38:	8841      	ldrh	r1, [r0, #2]
 8006a3a:	428a      	cmp	r2, r1
 8006a3c:	dbf4      	blt.n	8006a28 <memp_init_pool+0x10>
}
 8006a3e:	4770      	bx	lr

08006a40 <memp_init>:
{
 8006a40:	b510      	push	{r4, lr}
  for (i = 0; i < MEMP_MAX; ++i) {
 8006a42:	2300      	movs	r3, #0
 8006a44:	e001      	b.n	8006a4a <memp_init+0xa>
 8006a46:	3301      	adds	r3, #1
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	2b0c      	cmp	r3, #12
 8006a4c:	d9fb      	bls.n	8006a46 <memp_init+0x6>
 8006a4e:	2400      	movs	r4, #0
 8006a50:	e006      	b.n	8006a60 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006a52:	4b05      	ldr	r3, [pc, #20]	; (8006a68 <memp_init+0x28>)
 8006a54:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006a58:	f7ff ffde 	bl	8006a18 <memp_init_pool>
  for (i = 0; i < MEMP_MAX; ++i) {
 8006a5c:	3401      	adds	r4, #1
 8006a5e:	b2a4      	uxth	r4, r4
 8006a60:	2c0c      	cmp	r4, #12
 8006a62:	d9f6      	bls.n	8006a52 <memp_init+0x12>
}
 8006a64:	bd10      	pop	{r4, pc}
 8006a66:	bf00      	nop
 8006a68:	20000004 	.word	0x20000004

08006a6c <memp_malloc_pool>:
  memp = *desc->tab;
 8006a6c:	6883      	ldr	r3, [r0, #8]
 8006a6e:	6818      	ldr	r0, [r3, #0]
  if (memp != NULL) {
 8006a70:	b108      	cbz	r0, 8006a76 <memp_malloc_pool+0xa>
    *desc->tab = memp->next;
 8006a72:	6802      	ldr	r2, [r0, #0]
 8006a74:	601a      	str	r2, [r3, #0]
}
 8006a76:	4770      	bx	lr

08006a78 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006a78:	280c      	cmp	r0, #12
 8006a7a:	d806      	bhi.n	8006a8a <memp_malloc+0x12>
{
 8006a7c:	b508      	push	{r3, lr}
  memp = memp_malloc_pool(memp_pools[type]);
 8006a7e:	4b04      	ldr	r3, [pc, #16]	; (8006a90 <memp_malloc+0x18>)
 8006a80:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006a84:	f7ff fff2 	bl	8006a6c <memp_malloc_pool>
  return memp;
 8006a88:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	20000004 	.word	0x20000004

08006a94 <memp_free>:
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006a94:	280c      	cmp	r0, #12
 8006a96:	d900      	bls.n	8006a9a <memp_free+0x6>
 8006a98:	4770      	bx	lr
{
 8006a9a:	b508      	push	{r3, lr}
  MEMP_STATS_DEC(used, type);

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  do_memp_free_pool(memp_pools[type], mem, &old_first);
#else
  do_memp_free_pool(memp_pools[type], mem);
 8006a9c:	4b02      	ldr	r3, [pc, #8]	; (8006aa8 <memp_free+0x14>)
 8006a9e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006aa2:	f7ff ffb3 	bl	8006a0c <do_memp_free_pool>
 8006aa6:	bd08      	pop	{r3, pc}
 8006aa8:	20000004 	.word	0x20000004

08006aac <netif_issue_reports>:
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006aac:	f011 0f01 	tst.w	r1, #1
 8006ab0:	d00c      	beq.n	8006acc <netif_issue_reports+0x20>
{
 8006ab2:	b508      	push	{r3, lr}
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006ab4:	6843      	ldr	r3, [r0, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006ab6:	b123      	cbz	r3, 8006ac2 <netif_issue_reports+0x16>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006ab8:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8006abc:	f013 0f08 	tst.w	r3, #8
 8006ac0:	d100      	bne.n	8006ac4 <netif_issue_reports+0x18>
 8006ac2:	bd08      	pop	{r3, pc}
      etharp_gratuitous(netif);
 8006ac4:	1d01      	adds	r1, r0, #4
 8006ac6:	f003 fd5f 	bl	800a588 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8006aca:	e7fa      	b.n	8006ac2 <netif_issue_reports+0x16>
 8006acc:	4770      	bx	lr

08006ace <netif_init>:
{
 8006ace:	4770      	bx	lr

08006ad0 <netif_set_ipaddr>:
{
 8006ad0:	b570      	push	{r4, r5, r6, lr}
  ip4_addr_t new_addr = (ipaddr ? *ipaddr : *IP4_ADDR_ANY);
 8006ad2:	460c      	mov	r4, r1
 8006ad4:	b1a9      	cbz	r1, 8006b02 <netif_set_ipaddr+0x32>
 8006ad6:	680a      	ldr	r2, [r1, #0]
  if (ip4_addr_cmp(&new_addr, netif_ip4_addr(netif)) == 0) {
 8006ad8:	6843      	ldr	r3, [r0, #4]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d010      	beq.n	8006b00 <netif_set_ipaddr+0x30>
 8006ade:	4605      	mov	r5, r0
    tcp_netif_ipv4_addr_changed(netif_ip4_addr(netif), ipaddr);
 8006ae0:	1d06      	adds	r6, r0, #4
 8006ae2:	4621      	mov	r1, r4
 8006ae4:	4630      	mov	r0, r6
 8006ae6:	f001 f905 	bl	8007cf4 <tcp_netif_ipv4_addr_changed>
    udp_netif_ipv4_addr_changed(netif_ip4_addr(netif), ipaddr);
 8006aea:	4621      	mov	r1, r4
 8006aec:	4630      	mov	r0, r6
 8006aee:	f003 fb2b 	bl	800a148 <udp_netif_ipv4_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006af2:	b14c      	cbz	r4, 8006b08 <netif_set_ipaddr+0x38>
 8006af4:	6823      	ldr	r3, [r4, #0]
 8006af6:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006af8:	2101      	movs	r1, #1
 8006afa:	4628      	mov	r0, r5
 8006afc:	f7ff ffd6 	bl	8006aac <netif_issue_reports>
 8006b00:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_t new_addr = (ipaddr ? *ipaddr : *IP4_ADDR_ANY);
 8006b02:	4b02      	ldr	r3, [pc, #8]	; (8006b0c <netif_set_ipaddr+0x3c>)
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	e7e7      	b.n	8006ad8 <netif_set_ipaddr+0x8>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006b08:	2300      	movs	r3, #0
 8006b0a:	e7f4      	b.n	8006af6 <netif_set_ipaddr+0x26>
 8006b0c:	0800d0fc 	.word	0x0800d0fc

08006b10 <netif_set_gw>:
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006b10:	b111      	cbz	r1, 8006b18 <netif_set_gw+0x8>
 8006b12:	680b      	ldr	r3, [r1, #0]
 8006b14:	60c3      	str	r3, [r0, #12]
 8006b16:	4770      	bx	lr
 8006b18:	2300      	movs	r3, #0
 8006b1a:	e7fb      	b.n	8006b14 <netif_set_gw+0x4>

08006b1c <netif_set_netmask>:
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006b1c:	b111      	cbz	r1, 8006b24 <netif_set_netmask+0x8>
 8006b1e:	680b      	ldr	r3, [r1, #0]
 8006b20:	6083      	str	r3, [r0, #8]
 8006b22:	4770      	bx	lr
 8006b24:	2300      	movs	r3, #0
 8006b26:	e7fb      	b.n	8006b20 <netif_set_netmask+0x4>

08006b28 <netif_set_addr>:
{
 8006b28:	b570      	push	{r4, r5, r6, lr}
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	460d      	mov	r5, r1
 8006b2e:	461e      	mov	r6, r3
  netif_set_netmask(netif, netmask);
 8006b30:	4611      	mov	r1, r2
 8006b32:	f7ff fff3 	bl	8006b1c <netif_set_netmask>
  netif_set_gw(netif, gw);
 8006b36:	4631      	mov	r1, r6
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f7ff ffe9 	bl	8006b10 <netif_set_gw>
  netif_set_ipaddr(netif, ipaddr);
 8006b3e:	4629      	mov	r1, r5
 8006b40:	4620      	mov	r0, r4
 8006b42:	f7ff ffc5 	bl	8006ad0 <netif_set_ipaddr>
 8006b46:	bd70      	pop	{r4, r5, r6, pc}

08006b48 <netif_add>:
{
 8006b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4a:	4604      	mov	r4, r0
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006b4c:	2500      	movs	r5, #0
 8006b4e:	6045      	str	r5, [r0, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006b50:	6085      	str	r5, [r0, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006b52:	60c5      	str	r5, [r0, #12]
  netif->flags = 0;
 8006b54:	f880 502f 	strb.w	r5, [r0, #47]	; 0x2f
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8006b58:	2603      	movs	r6, #3
 8006b5a:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  netif->link_callback = NULL;
 8006b5e:	61c5      	str	r5, [r0, #28]
  netif->state = state;
 8006b60:	9d06      	ldr	r5, [sp, #24]
 8006b62:	6205      	str	r5, [r0, #32]
  netif->num = netif_num++;
 8006b64:	4e0a      	ldr	r6, [pc, #40]	; (8006b90 <netif_add+0x48>)
 8006b66:	7835      	ldrb	r5, [r6, #0]
 8006b68:	1c6f      	adds	r7, r5, #1
 8006b6a:	7037      	strb	r7, [r6, #0]
 8006b6c:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32
  netif->input = input;
 8006b70:	9d08      	ldr	r5, [sp, #32]
 8006b72:	6105      	str	r5, [r0, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006b74:	f7ff ffd8 	bl	8006b28 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8006b78:	4620      	mov	r0, r4
 8006b7a:	9b07      	ldr	r3, [sp, #28]
 8006b7c:	4798      	blx	r3
 8006b7e:	b928      	cbnz	r0, 8006b8c <netif_add+0x44>
  netif->next = netif_list;
 8006b80:	4b04      	ldr	r3, [pc, #16]	; (8006b94 <netif_add+0x4c>)
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 8006b86:	601c      	str	r4, [r3, #0]
  return netif;
 8006b88:	4620      	mov	r0, r4
 8006b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 8006b8c:	2000      	movs	r0, #0
}
 8006b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b90:	20003ec4 	.word	0x20003ec4
 8006b94:	20007b1c 	.word	0x20007b1c

08006b98 <netif_set_default>:
  netif_default = netif;
 8006b98:	4b01      	ldr	r3, [pc, #4]	; (8006ba0 <netif_set_default+0x8>)
 8006b9a:	6018      	str	r0, [r3, #0]
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	20007b20 	.word	0x20007b20

08006ba4 <netif_set_up>:
{
 8006ba4:	b508      	push	{r3, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006ba6:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8006baa:	f013 0f01 	tst.w	r3, #1
 8006bae:	d106      	bne.n	8006bbe <netif_set_up+0x1a>
    netif->flags |= NETIF_FLAG_UP;
 8006bb0:	f043 0301 	orr.w	r3, r3, #1
 8006bb4:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8006bb8:	f013 0f04 	tst.w	r3, #4
 8006bbc:	d100      	bne.n	8006bc0 <netif_set_up+0x1c>
 8006bbe:	bd08      	pop	{r3, pc}
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8006bc0:	2103      	movs	r1, #3
 8006bc2:	f7ff ff73 	bl	8006aac <netif_issue_reports>
}
 8006bc6:	e7fa      	b.n	8006bbe <netif_set_up+0x1a>

08006bc8 <netif_set_down>:
/**
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006bc8:	b508      	push	{r3, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 8006bca:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8006bce:	f013 0f01 	tst.w	r3, #1
 8006bd2:	d006      	beq.n	8006be2 <netif_set_down+0x1a>
    netif->flags &= ~NETIF_FLAG_UP;
 8006bd4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006bd8:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006bdc:	f013 0f08 	tst.w	r3, #8
 8006be0:	d100      	bne.n	8006be4 <netif_set_down+0x1c>
 8006be2:	bd08      	pop	{r3, pc}
      etharp_cleanup_netif(netif);
 8006be4:	f003 fcb4 	bl	800a550 <etharp_cleanup_netif>
    }
#endif /* LWIP_IPV4 && LWIP_ARP */
    NETIF_STATUS_CALLBACK(netif);
  }
}
 8006be8:	e7fb      	b.n	8006be2 <netif_set_down+0x1a>

08006bea <netif_set_link_up>:
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8006bea:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8006bee:	f013 0f04 	tst.w	r3, #4
 8006bf2:	d111      	bne.n	8006c18 <netif_set_link_up+0x2e>
{
 8006bf4:	b510      	push	{r4, lr}
 8006bf6:	4604      	mov	r4, r0
    netif->flags |= NETIF_FLAG_LINK_UP;
 8006bf8:	f043 0304 	orr.w	r3, r3, #4
 8006bfc:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    if (netif->autoip) {
      autoip_network_changed(netif);
    }
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 8006c00:	f013 0f01 	tst.w	r3, #1
 8006c04:	d104      	bne.n	8006c10 <netif_set_link_up+0x26>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
    }
    NETIF_LINK_CALLBACK(netif);
 8006c06:	69e3      	ldr	r3, [r4, #28]
 8006c08:	b10b      	cbz	r3, 8006c0e <netif_set_link_up+0x24>
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	4798      	blx	r3
 8006c0e:	bd10      	pop	{r4, pc}
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8006c10:	2103      	movs	r1, #3
 8006c12:	f7ff ff4b 	bl	8006aac <netif_issue_reports>
 8006c16:	e7f6      	b.n	8006c06 <netif_set_link_up+0x1c>
 8006c18:	4770      	bx	lr

08006c1a <netif_set_link_down>:
/**
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 8006c1a:	b508      	push	{r3, lr}
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8006c1c:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8006c20:	f013 0f04 	tst.w	r3, #4
 8006c24:	d006      	beq.n	8006c34 <netif_set_link_down+0x1a>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 8006c26:	f023 0304 	bic.w	r3, r3, #4
 8006c2a:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    NETIF_LINK_CALLBACK(netif);
 8006c2e:	69c3      	ldr	r3, [r0, #28]
 8006c30:	b103      	cbz	r3, 8006c34 <netif_set_link_down+0x1a>
 8006c32:	4798      	blx	r3
 8006c34:	bd08      	pop	{r3, pc}

08006c36 <netif_set_link_callback>:
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
  if (netif) {
 8006c36:	b100      	cbz	r0, 8006c3a <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 8006c38:	61c1      	str	r1, [r0, #28]
 8006c3a:	4770      	bx	lr

08006c3c <pbuf_header_impl>:
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
 8006c3c:	2900      	cmp	r1, #0
 8006c3e:	d039      	beq.n	8006cb4 <pbuf_header_impl+0x78>
 8006c40:	460b      	mov	r3, r1
 8006c42:	2800      	cmp	r0, #0
 8006c44:	d038      	beq.n	8006cb8 <pbuf_header_impl+0x7c>
{
 8006c46:	b430      	push	{r4, r5}
    return 0;
  }

  if (header_size_increment < 0) {
 8006c48:	2900      	cmp	r1, #0
 8006c4a:	db0b      	blt.n	8006c64 <pbuf_header_impl+0x28>
    increment_magnitude = -header_size_increment;
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  } else {
    increment_magnitude = header_size_increment;
 8006c4c:	b28d      	uxth	r5, r1
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8006c4e:	7b01      	ldrb	r1, [r0, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8006c50:	6844      	ldr	r4, [r0, #4]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8006c52:	b171      	cbz	r1, 8006c72 <pbuf_header_impl+0x36>
 8006c54:	2903      	cmp	r1, #3
 8006c56:	d00c      	beq.n	8006c72 <pbuf_header_impl+0x36>
      p->payload = payload;
      /* bail out unsuccessfully */
      return 1;
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8006c58:	3901      	subs	r1, #1
 8006c5a:	b289      	uxth	r1, r1
 8006c5c:	2901      	cmp	r1, #1
 8006c5e:	d91b      	bls.n	8006c98 <pbuf_header_impl+0x5c>
      return 1;
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
 8006c60:	2001      	movs	r0, #1
 8006c62:	e014      	b.n	8006c8e <pbuf_header_impl+0x52>
    increment_magnitude = -header_size_increment;
 8006c64:	424d      	negs	r5, r1
 8006c66:	b2ad      	uxth	r5, r5
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006c68:	8941      	ldrh	r1, [r0, #10]
 8006c6a:	428d      	cmp	r5, r1
 8006c6c:	d9ef      	bls.n	8006c4e <pbuf_header_impl+0x12>
 8006c6e:	2001      	movs	r0, #1
 8006c70:	e00d      	b.n	8006c8e <pbuf_header_impl+0x52>
    p->payload = (u8_t *)p->payload - header_size_increment;
 8006c72:	1ae2      	subs	r2, r4, r3
 8006c74:	6042      	str	r2, [r0, #4]
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006c76:	f100 0110 	add.w	r1, r0, #16
 8006c7a:	428a      	cmp	r2, r1
 8006c7c:	d309      	bcc.n	8006c92 <pbuf_header_impl+0x56>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	8942      	ldrh	r2, [r0, #10]
 8006c82:	441a      	add	r2, r3
 8006c84:	8142      	strh	r2, [r0, #10]
  p->tot_len += header_size_increment;
 8006c86:	8902      	ldrh	r2, [r0, #8]
 8006c88:	4413      	add	r3, r2
 8006c8a:	8103      	strh	r3, [r0, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8006c8c:	2000      	movs	r0, #0
}
 8006c8e:	bc30      	pop	{r4, r5}
 8006c90:	4770      	bx	lr
      p->payload = payload;
 8006c92:	6044      	str	r4, [r0, #4]
      return 1;
 8006c94:	2001      	movs	r0, #1
 8006c96:	e7fa      	b.n	8006c8e <pbuf_header_impl+0x52>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	db05      	blt.n	8006ca8 <pbuf_header_impl+0x6c>
    } else if ((header_size_increment > 0) && force) {
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	dd0d      	ble.n	8006cbc <pbuf_header_impl+0x80>
 8006ca0:	b172      	cbz	r2, 8006cc0 <pbuf_header_impl+0x84>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8006ca2:	1ae4      	subs	r4, r4, r3
 8006ca4:	6044      	str	r4, [r0, #4]
 8006ca6:	e7ea      	b.n	8006c7e <pbuf_header_impl+0x42>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8006ca8:	8941      	ldrh	r1, [r0, #10]
 8006caa:	428d      	cmp	r5, r1
 8006cac:	d8f6      	bhi.n	8006c9c <pbuf_header_impl+0x60>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8006cae:	1ae4      	subs	r4, r4, r3
 8006cb0:	6044      	str	r4, [r0, #4]
 8006cb2:	e7e4      	b.n	8006c7e <pbuf_header_impl+0x42>
    return 0;
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	4770      	bx	lr
 8006cb8:	2000      	movs	r0, #0
 8006cba:	4770      	bx	lr
      return 1;
 8006cbc:	2001      	movs	r0, #1
 8006cbe:	e7e6      	b.n	8006c8e <pbuf_header_impl+0x52>
 8006cc0:	2001      	movs	r0, #1
 8006cc2:	e7e4      	b.n	8006c8e <pbuf_header_impl+0x52>

08006cc4 <pbuf_pool_is_empty>:
{
 8006cc4:	b508      	push	{r3, lr}
  queued = pbuf_free_ooseq_pending;
 8006cc6:	4b08      	ldr	r3, [pc, #32]	; (8006ce8 <pbuf_pool_is_empty+0x24>)
 8006cc8:	781a      	ldrb	r2, [r3, #0]
  pbuf_free_ooseq_pending = 1;
 8006cca:	2101      	movs	r1, #1
 8006ccc:	7019      	strb	r1, [r3, #0]
  if (!queued) {
 8006cce:	b102      	cbz	r2, 8006cd2 <pbuf_pool_is_empty+0xe>
 8006cd0:	bd08      	pop	{r3, pc}
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8006cd2:	4611      	mov	r1, r2
 8006cd4:	4805      	ldr	r0, [pc, #20]	; (8006cec <pbuf_pool_is_empty+0x28>)
 8006cd6:	f7fe fd95 	bl	8005804 <tcpip_callback_with_block>
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	d0f8      	beq.n	8006cd0 <pbuf_pool_is_empty+0xc>
 8006cde:	2200      	movs	r2, #0
 8006ce0:	4b01      	ldr	r3, [pc, #4]	; (8006ce8 <pbuf_pool_is_empty+0x24>)
 8006ce2:	701a      	strb	r2, [r3, #0]
}
 8006ce4:	e7f4      	b.n	8006cd0 <pbuf_pool_is_empty+0xc>
 8006ce6:	bf00      	nop
 8006ce8:	20007b24 	.word	0x20007b24
 8006cec:	08006d1d 	.word	0x08006d1d

08006cf0 <pbuf_free_ooseq>:
{
 8006cf0:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	4b07      	ldr	r3, [pc, #28]	; (8006d14 <pbuf_free_ooseq+0x24>)
 8006cf6:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006cf8:	4b07      	ldr	r3, [pc, #28]	; (8006d18 <pbuf_free_ooseq+0x28>)
 8006cfa:	681c      	ldr	r4, [r3, #0]
 8006cfc:	b144      	cbz	r4, 8006d10 <pbuf_free_ooseq+0x20>
    if (NULL != pcb->ooseq) {
 8006cfe:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006d00:	b908      	cbnz	r0, 8006d06 <pbuf_free_ooseq+0x16>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006d02:	68e4      	ldr	r4, [r4, #12]
 8006d04:	e7fa      	b.n	8006cfc <pbuf_free_ooseq+0xc>
      tcp_segs_free(pcb->ooseq);
 8006d06:	f000 fa79 	bl	80071fc <tcp_segs_free>
      pcb->ooseq = NULL;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	6763      	str	r3, [r4, #116]	; 0x74
      return;
 8006d0e:	bd10      	pop	{r4, pc}
 8006d10:	bd10      	pop	{r4, pc}
 8006d12:	bf00      	nop
 8006d14:	20007b24 	.word	0x20007b24
 8006d18:	20007b2c 	.word	0x20007b2c

08006d1c <pbuf_free_ooseq_callback>:
{
 8006d1c:	b508      	push	{r3, lr}
  pbuf_free_ooseq();
 8006d1e:	f7ff ffe7 	bl	8006cf0 <pbuf_free_ooseq>
 8006d22:	bd08      	pop	{r3, pc}

08006d24 <pbuf_alloced_custom>:
{
 8006d24:	b470      	push	{r4, r5, r6}
 8006d26:	9c03      	ldr	r4, [sp, #12]
  switch (l) {
 8006d28:	2804      	cmp	r0, #4
 8006d2a:	d827      	bhi.n	8006d7c <pbuf_alloced_custom+0x58>
 8006d2c:	e8df f000 	tbb	[pc, r0]
 8006d30:	07050b03 	.word	0x07050b03
 8006d34:	09          	.byte	0x09
 8006d35:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8006d36:	2036      	movs	r0, #54	; 0x36
 8006d38:	e006      	b.n	8006d48 <pbuf_alloced_custom+0x24>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8006d3a:	200e      	movs	r0, #14
    break;
 8006d3c:	e004      	b.n	8006d48 <pbuf_alloced_custom+0x24>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8006d3e:	2000      	movs	r0, #0
    break;
 8006d40:	e002      	b.n	8006d48 <pbuf_alloced_custom+0x24>
    offset = 0;
 8006d42:	2000      	movs	r0, #0
    break;
 8006d44:	e000      	b.n	8006d48 <pbuf_alloced_custom+0x24>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8006d46:	2022      	movs	r0, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006d48:	3003      	adds	r0, #3
 8006d4a:	f020 0003 	bic.w	r0, r0, #3
 8006d4e:	180e      	adds	r6, r1, r0
 8006d50:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8006d54:	42ae      	cmp	r6, r5
 8006d56:	d813      	bhi.n	8006d80 <pbuf_alloced_custom+0x5c>
  p->pbuf.next = NULL;
 8006d58:	2500      	movs	r5, #0
 8006d5a:	601d      	str	r5, [r3, #0]
  if (payload_mem != NULL) {
 8006d5c:	b15c      	cbz	r4, 8006d76 <pbuf_alloced_custom+0x52>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006d5e:	4420      	add	r0, r4
 8006d60:	6058      	str	r0, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8006d62:	2002      	movs	r0, #2
 8006d64:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8006d66:	8119      	strh	r1, [r3, #8]
 8006d68:	8159      	strh	r1, [r3, #10]
  p->pbuf.type = type;
 8006d6a:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8006d70:	4618      	mov	r0, r3
}
 8006d72:	bc70      	pop	{r4, r5, r6}
 8006d74:	4770      	bx	lr
    p->pbuf.payload = NULL;
 8006d76:	2000      	movs	r0, #0
 8006d78:	6058      	str	r0, [r3, #4]
 8006d7a:	e7f2      	b.n	8006d62 <pbuf_alloced_custom+0x3e>
    return NULL;
 8006d7c:	2000      	movs	r0, #0
 8006d7e:	e7f8      	b.n	8006d72 <pbuf_alloced_custom+0x4e>
    return NULL;
 8006d80:	2000      	movs	r0, #0
 8006d82:	e7f6      	b.n	8006d72 <pbuf_alloced_custom+0x4e>

08006d84 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8006d84:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 0);
 8006d86:	2200      	movs	r2, #0
 8006d88:	f7ff ff58 	bl	8006c3c <pbuf_header_impl>
}
 8006d8c:	bd08      	pop	{r3, pc}

08006d8e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006d8e:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 1);
 8006d90:	2201      	movs	r2, #1
 8006d92:	f7ff ff53 	bl	8006c3c <pbuf_header_impl>
}
 8006d96:	bd08      	pop	{r3, pc}

08006d98 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006d98:	b538      	push	{r3, r4, r5, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006d9a:	b340      	cbz	r0, 8006dee <pbuf_free+0x56>
 8006d9c:	4601      	mov	r1, r0
 8006d9e:	2400      	movs	r4, #0
 8006da0:	e005      	b.n	8006dae <pbuf_free+0x16>
      type = p->type;
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006da2:	690b      	ldr	r3, [r1, #16]
        pc->custom_free_function(p);
 8006da4:	4608      	mov	r0, r1
 8006da6:	4798      	blx	r3
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
        }
      }
      count++;
 8006da8:	3401      	adds	r4, #1
 8006daa:	b2e4      	uxtb	r4, r4
      /* proceed to next pbuf */
      p = q;
 8006dac:	4629      	mov	r1, r5
  while (p != NULL) {
 8006dae:	b1f9      	cbz	r1, 8006df0 <pbuf_free+0x58>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006db0:	89cb      	ldrh	r3, [r1, #14]
    ref = --(p->ref);
 8006db2:	3b01      	subs	r3, #1
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	81cb      	strh	r3, [r1, #14]
    if (ref == 0) {
 8006db8:	b9bb      	cbnz	r3, 8006dea <pbuf_free+0x52>
      q = p->next;
 8006dba:	680d      	ldr	r5, [r1, #0]
      type = p->type;
 8006dbc:	7b0b      	ldrb	r3, [r1, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006dbe:	7b4a      	ldrb	r2, [r1, #13]
 8006dc0:	f012 0f02 	tst.w	r2, #2
 8006dc4:	d1ed      	bne.n	8006da2 <pbuf_free+0xa>
        if (type == PBUF_POOL) {
 8006dc6:	2b03      	cmp	r3, #3
 8006dc8:	d007      	beq.n	8006dda <pbuf_free+0x42>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d907      	bls.n	8006de2 <pbuf_free+0x4a>
          mem_free(p);
 8006dd2:	4608      	mov	r0, r1
 8006dd4:	f7ff fd10 	bl	80067f8 <mem_free>
 8006dd8:	e7e6      	b.n	8006da8 <pbuf_free+0x10>
          memp_free(MEMP_PBUF_POOL, p);
 8006dda:	200c      	movs	r0, #12
 8006ddc:	f7ff fe5a 	bl	8006a94 <memp_free>
 8006de0:	e7e2      	b.n	8006da8 <pbuf_free+0x10>
          memp_free(MEMP_PBUF, p);
 8006de2:	200b      	movs	r0, #11
 8006de4:	f7ff fe56 	bl	8006a94 <memp_free>
 8006de8:	e7de      	b.n	8006da8 <pbuf_free+0x10>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8006dea:	2100      	movs	r1, #0
 8006dec:	e7df      	b.n	8006dae <pbuf_free+0x16>
    return 0;
 8006dee:	2400      	movs	r4, #0
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8006df0:	4620      	mov	r0, r4
 8006df2:	bd38      	pop	{r3, r4, r5, pc}

08006df4 <pbuf_alloc>:
{
 8006df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (layer) {
 8006df8:	2804      	cmp	r0, #4
 8006dfa:	f200 808b 	bhi.w	8006f14 <pbuf_alloc+0x120>
 8006dfe:	e8df f000 	tbb	[pc, r0]
 8006e02:	0b03      	.short	0x0b03
 8006e04:	0705      	.short	0x0705
 8006e06:	09          	.byte	0x09
 8006e07:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8006e08:	2436      	movs	r4, #54	; 0x36
 8006e0a:	e006      	b.n	8006e1a <pbuf_alloc+0x26>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8006e0c:	240e      	movs	r4, #14
    break;
 8006e0e:	e004      	b.n	8006e1a <pbuf_alloc+0x26>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8006e10:	2400      	movs	r4, #0
    break;
 8006e12:	e002      	b.n	8006e1a <pbuf_alloc+0x26>
    offset = 0;
 8006e14:	2400      	movs	r4, #0
    break;
 8006e16:	e000      	b.n	8006e1a <pbuf_alloc+0x26>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8006e18:	2422      	movs	r4, #34	; 0x22
 8006e1a:	4616      	mov	r6, r2
 8006e1c:	460d      	mov	r5, r1
  switch (type) {
 8006e1e:	2a03      	cmp	r2, #3
 8006e20:	d87a      	bhi.n	8006f18 <pbuf_alloc+0x124>
 8006e22:	e8df f002 	tbb	[pc, r2]
 8006e26:	6a48      	.short	0x6a48
 8006e28:	026a      	.short	0x026a
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006e2a:	200c      	movs	r0, #12
 8006e2c:	f7ff fe24 	bl	8006a78 <memp_malloc>
    if (p == NULL) {
 8006e30:	4607      	mov	r7, r0
 8006e32:	2800      	cmp	r0, #0
 8006e34:	d035      	beq.n	8006ea2 <pbuf_alloc+0xae>
    p->type = type;
 8006e36:	7306      	strb	r6, [r0, #12]
    p->next = NULL;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8006e3c:	f104 0310 	add.w	r3, r4, #16
 8006e40:	4403      	add	r3, r0
 8006e42:	3303      	adds	r3, #3
 8006e44:	f023 0303 	bic.w	r3, r3, #3
 8006e48:	6043      	str	r3, [r0, #4]
    p->tot_len = length;
 8006e4a:	8105      	strh	r5, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8006e4c:	1ce1      	adds	r1, r4, #3
 8006e4e:	f021 0103 	bic.w	r1, r1, #3
 8006e52:	f5c1 7114 	rsb	r1, r1, #592	; 0x250
 8006e56:	42a9      	cmp	r1, r5
 8006e58:	bf28      	it	cs
 8006e5a:	4629      	movcs	r1, r5
 8006e5c:	b289      	uxth	r1, r1
 8006e5e:	8141      	strh	r1, [r0, #10]
    p->ref = 1;
 8006e60:	2301      	movs	r3, #1
 8006e62:	81c3      	strh	r3, [r0, #14]
    rem_len = length - p->len;
 8006e64:	1a6d      	subs	r5, r5, r1
    r = p;
 8006e66:	4680      	mov	r8, r0
    while (rem_len > 0) {
 8006e68:	2d00      	cmp	r5, #0
 8006e6a:	dd3f      	ble.n	8006eec <pbuf_alloc+0xf8>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006e6c:	200c      	movs	r0, #12
 8006e6e:	f7ff fe03 	bl	8006a78 <memp_malloc>
      if (q == NULL) {
 8006e72:	4604      	mov	r4, r0
 8006e74:	b1c0      	cbz	r0, 8006ea8 <pbuf_alloc+0xb4>
      q->type = type;
 8006e76:	7306      	strb	r6, [r0, #12]
      q->flags = 0;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 8006e7c:	6003      	str	r3, [r0, #0]
      r->next = q;
 8006e7e:	f8c8 0000 	str.w	r0, [r8]
      q->tot_len = (u16_t)rem_len;
 8006e82:	b2ab      	uxth	r3, r5
 8006e84:	8103      	strh	r3, [r0, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8006e86:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006e8a:	bf28      	it	cs
 8006e8c:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8006e90:	8143      	strh	r3, [r0, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8006e92:	f100 0210 	add.w	r2, r0, #16
 8006e96:	6042      	str	r2, [r0, #4]
      q->ref = 1;
 8006e98:	2201      	movs	r2, #1
 8006e9a:	81c2      	strh	r2, [r0, #14]
      rem_len -= q->len;
 8006e9c:	1aed      	subs	r5, r5, r3
      r = q;
 8006e9e:	4680      	mov	r8, r0
 8006ea0:	e7e2      	b.n	8006e68 <pbuf_alloc+0x74>
      PBUF_POOL_IS_EMPTY();
 8006ea2:	f7ff ff0f 	bl	8006cc4 <pbuf_pool_is_empty>
      return NULL;
 8006ea6:	e025      	b.n	8006ef4 <pbuf_alloc+0x100>
        PBUF_POOL_IS_EMPTY();
 8006ea8:	f7ff ff0c 	bl	8006cc4 <pbuf_pool_is_empty>
        pbuf_free(p);
 8006eac:	4638      	mov	r0, r7
 8006eae:	f7ff ff73 	bl	8006d98 <pbuf_free>
        return NULL;
 8006eb2:	4627      	mov	r7, r4
 8006eb4:	e01e      	b.n	8006ef4 <pbuf_alloc+0x100>
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006eb6:	f104 0013 	add.w	r0, r4, #19
 8006eba:	f020 0003 	bic.w	r0, r0, #3
 8006ebe:	b283      	uxth	r3, r0
 8006ec0:	1cc8      	adds	r0, r1, #3
 8006ec2:	b280      	uxth	r0, r0
 8006ec4:	f020 0003 	bic.w	r0, r0, #3
 8006ec8:	4418      	add	r0, r3
 8006eca:	b280      	uxth	r0, r0
 8006ecc:	f7ff fd34 	bl	8006938 <mem_malloc>
    if (p == NULL) {
 8006ed0:	4607      	mov	r7, r0
 8006ed2:	b178      	cbz	r0, 8006ef4 <pbuf_alloc+0x100>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8006ed4:	f104 0310 	add.w	r3, r4, #16
 8006ed8:	4403      	add	r3, r0
 8006eda:	3303      	adds	r3, #3
 8006edc:	f023 0303 	bic.w	r3, r3, #3
 8006ee0:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 8006ee2:	8105      	strh	r5, [r0, #8]
 8006ee4:	8145      	strh	r5, [r0, #10]
    p->next = NULL;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	6003      	str	r3, [r0, #0]
    p->type = type;
 8006eea:	7306      	strb	r6, [r0, #12]
  p->ref = 1;
 8006eec:	2301      	movs	r3, #1
 8006eee:	81fb      	strh	r3, [r7, #14]
  p->flags = 0;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	737b      	strb	r3, [r7, #13]
}
 8006ef4:	4638      	mov	r0, r7
 8006ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006efa:	200b      	movs	r0, #11
 8006efc:	f7ff fdbc 	bl	8006a78 <memp_malloc>
    if (p == NULL) {
 8006f00:	4607      	mov	r7, r0
 8006f02:	2800      	cmp	r0, #0
 8006f04:	d0f6      	beq.n	8006ef4 <pbuf_alloc+0x100>
    p->payload = NULL;
 8006f06:	2300      	movs	r3, #0
 8006f08:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 8006f0a:	8105      	strh	r5, [r0, #8]
 8006f0c:	8145      	strh	r5, [r0, #10]
    p->next = NULL;
 8006f0e:	6003      	str	r3, [r0, #0]
    p->type = type;
 8006f10:	7306      	strb	r6, [r0, #12]
    break;
 8006f12:	e7eb      	b.n	8006eec <pbuf_alloc+0xf8>
    return NULL;
 8006f14:	2700      	movs	r7, #0
 8006f16:	e7ed      	b.n	8006ef4 <pbuf_alloc+0x100>
    return NULL;
 8006f18:	2700      	movs	r7, #0
 8006f1a:	e7eb      	b.n	8006ef4 <pbuf_alloc+0x100>

08006f1c <pbuf_realloc>:
{
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	4604      	mov	r4, r0
  if (new_len >= p->tot_len) {
 8006f20:	8900      	ldrh	r0, [r0, #8]
 8006f22:	4288      	cmp	r0, r1
 8006f24:	d91b      	bls.n	8006f5e <pbuf_realloc+0x42>
 8006f26:	460d      	mov	r5, r1
 8006f28:	e006      	b.n	8006f38 <pbuf_realloc+0x1c>
    rem_len -= q->len;
 8006f2a:	1aeb      	subs	r3, r5, r3
 8006f2c:	b29d      	uxth	r5, r3
    q->tot_len += (u16_t)grow;
 8006f2e:	1a0b      	subs	r3, r1, r0
 8006f30:	8922      	ldrh	r2, [r4, #8]
 8006f32:	4413      	add	r3, r2
 8006f34:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8006f36:	6824      	ldr	r4, [r4, #0]
  while (rem_len > q->len) {
 8006f38:	8963      	ldrh	r3, [r4, #10]
 8006f3a:	429d      	cmp	r5, r3
 8006f3c:	d8f5      	bhi.n	8006f2a <pbuf_realloc+0xe>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8006f3e:	7b22      	ldrb	r2, [r4, #12]
 8006f40:	b92a      	cbnz	r2, 8006f4e <pbuf_realloc+0x32>
 8006f42:	429d      	cmp	r5, r3
 8006f44:	d003      	beq.n	8006f4e <pbuf_realloc+0x32>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006f46:	7b63      	ldrb	r3, [r4, #13]
 8006f48:	f013 0f02 	tst.w	r3, #2
 8006f4c:	d008      	beq.n	8006f60 <pbuf_realloc+0x44>
  q->len = rem_len;
 8006f4e:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8006f50:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8006f52:	6820      	ldr	r0, [r4, #0]
 8006f54:	b108      	cbz	r0, 8006f5a <pbuf_realloc+0x3e>
    pbuf_free(q->next);
 8006f56:	f7ff ff1f 	bl	8006d98 <pbuf_free>
  q->next = NULL;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	6023      	str	r3, [r4, #0]
 8006f5e:	bd38      	pop	{r3, r4, r5, pc}
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8006f60:	6863      	ldr	r3, [r4, #4]
 8006f62:	1b1b      	subs	r3, r3, r4
 8006f64:	fa15 f183 	uxtah	r1, r5, r3
 8006f68:	b289      	uxth	r1, r1
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f7ff fc6e 	bl	800684c <mem_trim>
 8006f70:	4604      	mov	r4, r0
 8006f72:	e7ec      	b.n	8006f4e <pbuf_realloc+0x32>

08006f74 <pbuf_clen>:
u8_t
pbuf_clen(struct pbuf *p)
{
  u8_t len;

  len = 0;
 8006f74:	2300      	movs	r3, #0
  while (p != NULL) {
 8006f76:	e002      	b.n	8006f7e <pbuf_clen+0xa>
    ++len;
 8006f78:	3301      	adds	r3, #1
 8006f7a:	b2db      	uxtb	r3, r3
    p = p->next;
 8006f7c:	6800      	ldr	r0, [r0, #0]
  while (p != NULL) {
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	d1fa      	bne.n	8006f78 <pbuf_clen+0x4>
  }
  return len;
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	4770      	bx	lr

08006f86 <pbuf_ref>:
void
pbuf_ref(struct pbuf *p)
{
  SYS_ARCH_DECL_PROTECT(old_level);
  /* pbuf given? */
  if (p != NULL) {
 8006f86:	b110      	cbz	r0, 8006f8e <pbuf_ref+0x8>
    SYS_ARCH_PROTECT(old_level);
    ++(p->ref);
 8006f88:	89c3      	ldrh	r3, [r0, #14]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	81c3      	strh	r3, [r0, #14]
 8006f8e:	4770      	bx	lr

08006f90 <pbuf_cat>:
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006f90:	b198      	cbz	r0, 8006fba <pbuf_cat+0x2a>
 8006f92:	4603      	mov	r3, r0
 8006f94:	b109      	cbz	r1, 8006f9a <pbuf_cat+0xa>
{
 8006f96:	b410      	push	{r4}
 8006f98:	e005      	b.n	8006fa6 <pbuf_cat+0x16>
 8006f9a:	4770      	bx	lr
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8006f9c:	890a      	ldrh	r2, [r1, #8]
 8006f9e:	891c      	ldrh	r4, [r3, #8]
 8006fa0:	4422      	add	r2, r4
 8006fa2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	6818      	ldr	r0, [r3, #0]
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	d1f7      	bne.n	8006f9c <pbuf_cat+0xc>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006fac:	891a      	ldrh	r2, [r3, #8]
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8006fae:	8908      	ldrh	r0, [r1, #8]
 8006fb0:	4402      	add	r2, r0
 8006fb2:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006fb4:	6019      	str	r1, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006fb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006fbc:	b510      	push	{r4, lr}
 8006fbe:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 8006fc0:	f7ff ffe6 	bl	8006f90 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	f7ff ffde 	bl	8006f86 <pbuf_ref>
 8006fca:	bd10      	pop	{r4, pc}

08006fcc <pbuf_copy>:

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (void*)p_to, (void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	d052      	beq.n	8007076 <pbuf_copy+0xaa>
{
 8006fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fd4:	460d      	mov	r5, r1
 8006fd6:	4607      	mov	r7, r0
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006fd8:	2900      	cmp	r1, #0
 8006fda:	d04f      	beq.n	800707c <pbuf_copy+0xb0>
 8006fdc:	8902      	ldrh	r2, [r0, #8]
 8006fde:	890b      	ldrh	r3, [r1, #8]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d34f      	bcc.n	8007084 <pbuf_copy+0xb8>
 8006fe4:	f04f 0800 	mov.w	r8, #0
 8006fe8:	4646      	mov	r6, r8
 8006fea:	e010      	b.n	800700e <pbuf_copy+0x42>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006fec:	1b9b      	subs	r3, r3, r6
 8006fee:	b29c      	uxth	r4, r3
 8006ff0:	e015      	b.n	800701e <pbuf_copy+0x52>
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 8006ff2:	429e      	cmp	r6, r3
 8006ff4:	d027      	beq.n	8007046 <pbuf_copy+0x7a>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006ff6:	b11d      	cbz	r5, 8007000 <pbuf_copy+0x34>
 8006ff8:	896a      	ldrh	r2, [r5, #10]
 8006ffa:	892b      	ldrh	r3, [r5, #8]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d029      	beq.n	8007054 <pbuf_copy+0x88>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007000:	b11f      	cbz	r7, 800700a <pbuf_copy+0x3e>
 8007002:	897a      	ldrh	r2, [r7, #10]
 8007004:	893b      	ldrh	r3, [r7, #8]
 8007006:	429a      	cmp	r2, r3
 8007008:	d02b      	beq.n	8007062 <pbuf_copy+0x96>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800700a:	2d00      	cmp	r5, #0
 800700c:	d030      	beq.n	8007070 <pbuf_copy+0xa4>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800700e:	897b      	ldrh	r3, [r7, #10]
 8007010:	1b99      	subs	r1, r3, r6
 8007012:	896c      	ldrh	r4, [r5, #10]
 8007014:	eba4 0208 	sub.w	r2, r4, r8
 8007018:	4291      	cmp	r1, r2
 800701a:	dbe7      	blt.n	8006fec <pbuf_copy+0x20>
      len = p_from->len - offset_from;
 800701c:	b294      	uxth	r4, r2
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	6869      	ldr	r1, [r5, #4]
 8007022:	4622      	mov	r2, r4
 8007024:	4441      	add	r1, r8
 8007026:	4430      	add	r0, r6
 8007028:	f004 fe29 	bl	800bc7e <memcpy>
    offset_to += len;
 800702c:	4426      	add	r6, r4
 800702e:	b2b6      	uxth	r6, r6
    offset_from += len;
 8007030:	4444      	add	r4, r8
 8007032:	fa1f f884 	uxth.w	r8, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007036:	897b      	ldrh	r3, [r7, #10]
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007038:	896a      	ldrh	r2, [r5, #10]
    if (offset_from >= p_from->len) {
 800703a:	4590      	cmp	r8, r2
 800703c:	d3d9      	bcc.n	8006ff2 <pbuf_copy+0x26>
      p_from = p_from->next;
 800703e:	682d      	ldr	r5, [r5, #0]
      offset_from = 0;
 8007040:	f04f 0800 	mov.w	r8, #0
 8007044:	e7d5      	b.n	8006ff2 <pbuf_copy+0x26>
      p_to = p_to->next;
 8007046:	683f      	ldr	r7, [r7, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8007048:	b10f      	cbz	r7, 800704e <pbuf_copy+0x82>
      offset_to = 0;
 800704a:	2600      	movs	r6, #0
 800704c:	e7d3      	b.n	8006ff6 <pbuf_copy+0x2a>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800704e:	b9ed      	cbnz	r5, 800708c <pbuf_copy+0xc0>
      offset_to = 0;
 8007050:	2600      	movs	r6, #0
 8007052:	e7d0      	b.n	8006ff6 <pbuf_copy+0x2a>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007054:	682b      	ldr	r3, [r5, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d0d2      	beq.n	8007000 <pbuf_copy+0x34>
 800705a:	f06f 0005 	mvn.w	r0, #5
 800705e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d0d0      	beq.n	800700a <pbuf_copy+0x3e>
 8007068:	f06f 0005 	mvn.w	r0, #5
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 800706c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ERR_OK;
 8007070:	2000      	movs	r0, #0
 8007072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007076:	f06f 000e 	mvn.w	r0, #14
 800707a:	4770      	bx	lr
 800707c:	f06f 000e 	mvn.w	r0, #14
 8007080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007084:	f06f 000e 	mvn.w	r0, #14
 8007088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800708c:	f06f 000e 	mvn.w	r0, #14
 8007090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007094 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007098:	b328      	cbz	r0, 80070e6 <pbuf_copy_partial+0x52>
 800709a:	460f      	mov	r7, r1
 800709c:	4690      	mov	r8, r2
 800709e:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80070a0:	b329      	cbz	r1, 80070ee <pbuf_copy_partial+0x5a>
 80070a2:	2600      	movs	r6, #0
 80070a4:	e013      	b.n	80070ce <pbuf_copy_partial+0x3a>
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 80070a6:	896a      	ldrh	r2, [r5, #10]
 80070a8:	1ad2      	subs	r2, r2, r3
 80070aa:	b294      	uxth	r4, r2
      if (buf_copy_len > len)
 80070ac:	45a0      	cmp	r8, r4
 80070ae:	d200      	bcs.n	80070b2 <pbuf_copy_partial+0x1e>
          buf_copy_len = len;
 80070b0:	4644      	mov	r4, r8
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80070b2:	6869      	ldr	r1, [r5, #4]
 80070b4:	4622      	mov	r2, r4
 80070b6:	4419      	add	r1, r3
 80070b8:	19b8      	adds	r0, r7, r6
 80070ba:	f004 fde0 	bl	800bc7e <memcpy>
      copied_total += buf_copy_len;
 80070be:	4426      	add	r6, r4
 80070c0:	b2b6      	uxth	r6, r6
      left += buf_copy_len;
      len -= buf_copy_len;
 80070c2:	eba8 0404 	sub.w	r4, r8, r4
 80070c6:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 80070ca:	2300      	movs	r3, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80070cc:	682d      	ldr	r5, [r5, #0]
 80070ce:	f1b8 0f00 	cmp.w	r8, #0
 80070d2:	d009      	beq.n	80070e8 <pbuf_copy_partial+0x54>
 80070d4:	b145      	cbz	r5, 80070e8 <pbuf_copy_partial+0x54>
    if ((offset != 0) && (offset >= p->len)) {
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d0e5      	beq.n	80070a6 <pbuf_copy_partial+0x12>
 80070da:	8969      	ldrh	r1, [r5, #10]
 80070dc:	428b      	cmp	r3, r1
 80070de:	d3e2      	bcc.n	80070a6 <pbuf_copy_partial+0x12>
      offset -= p->len;
 80070e0:	1a5b      	subs	r3, r3, r1
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	e7f2      	b.n	80070cc <pbuf_copy_partial+0x38>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80070e6:	2600      	movs	r6, #0
    }
  }
  return copied_total;
}
 80070e8:	4630      	mov	r0, r6
 80070ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80070ee:	2600      	movs	r6, #0
 80070f0:	e7fa      	b.n	80070e8 <pbuf_copy_partial+0x54>
	...

080070f4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80070f4:	b410      	push	{r4}
  u8_t i;
  u16_t n = 0;
 80070f6:	2400      	movs	r4, #0
 80070f8:	e009      	b.n	800710e <tcp_new_port+0x1a>
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80070fa:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80070fe:	4b14      	ldr	r3, [pc, #80]	; (8007150 <tcp_new_port+0x5c>)
 8007100:	801a      	strh	r2, [r3, #0]
 8007102:	e00c      	b.n	800711e <tcp_new_port+0x2a>
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8007104:	3401      	adds	r4, #1
 8007106:	b2a4      	uxth	r4, r4
 8007108:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 800710c:	d21e      	bcs.n	800714c <tcp_new_port+0x58>
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800710e:	4a10      	ldr	r2, [pc, #64]	; (8007150 <tcp_new_port+0x5c>)
 8007110:	8813      	ldrh	r3, [r2, #0]
 8007112:	1c59      	adds	r1, r3, #1
 8007114:	8011      	strh	r1, [r2, #0]
 8007116:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800711a:	4293      	cmp	r3, r2
 800711c:	d0ed      	beq.n	80070fa <tcp_new_port+0x6>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800711e:	2000      	movs	r0, #0
 8007120:	2803      	cmp	r0, #3
 8007122:	d80e      	bhi.n	8007142 <tcp_new_port+0x4e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007124:	4b0b      	ldr	r3, [pc, #44]	; (8007154 <tcp_new_port+0x60>)
 8007126:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	b133      	cbz	r3, 800713c <tcp_new_port+0x48>
      if (pcb->local_port == tcp_port) {
 800712e:	8b59      	ldrh	r1, [r3, #26]
 8007130:	4a07      	ldr	r2, [pc, #28]	; (8007150 <tcp_new_port+0x5c>)
 8007132:	8812      	ldrh	r2, [r2, #0]
 8007134:	4291      	cmp	r1, r2
 8007136:	d0e5      	beq.n	8007104 <tcp_new_port+0x10>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	e7f7      	b.n	800712c <tcp_new_port+0x38>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800713c:	3001      	adds	r0, #1
 800713e:	b2c0      	uxtb	r0, r0
 8007140:	e7ee      	b.n	8007120 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8007142:	4b03      	ldr	r3, [pc, #12]	; (8007150 <tcp_new_port+0x5c>)
 8007144:	8818      	ldrh	r0, [r3, #0]
}
 8007146:	f85d 4b04 	ldr.w	r4, [sp], #4
 800714a:	4770      	bx	lr
          return 0;
 800714c:	2000      	movs	r0, #0
 800714e:	e7fa      	b.n	8007146 <tcp_new_port+0x52>
 8007150:	2000003c 	.word	0x2000003c
 8007154:	0800d1ac 	.word	0x0800d1ac

08007158 <tcp_init>:
{
 8007158:	4770      	bx	lr

0800715a <tcp_update_rcv_ann_wnd>:
{
 800715a:	b430      	push	{r4, r5}
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800715c:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800715e:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
 8007160:	192a      	adds	r2, r5, r4
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007162:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8007164:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8007166:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800716a:	d901      	bls.n	8007170 <tcp_update_rcv_ann_wnd+0x16>
 800716c:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8007170:	440b      	add	r3, r1
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	2b00      	cmp	r3, #0
 8007176:	db03      	blt.n	8007180 <tcp_update_rcv_ann_wnd+0x26>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007178:	85c4      	strh	r4, [r0, #46]	; 0x2e
    return new_right_edge - pcb->rcv_ann_right_edge;
 800717a:	1a50      	subs	r0, r2, r1
}
 800717c:	bc30      	pop	{r4, r5}
 800717e:	4770      	bx	lr
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007180:	1a6b      	subs	r3, r5, r1
 8007182:	2b00      	cmp	r3, #0
 8007184:	dd03      	ble.n	800718e <tcp_update_rcv_ann_wnd+0x34>
      pcb->rcv_ann_wnd = 0;
 8007186:	2200      	movs	r2, #0
 8007188:	85c2      	strh	r2, [r0, #46]	; 0x2e
    return 0;
 800718a:	4610      	mov	r0, r2
 800718c:	e7f6      	b.n	800717c <tcp_update_rcv_ann_wnd+0x22>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800718e:	1b49      	subs	r1, r1, r5
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007190:	85c1      	strh	r1, [r0, #46]	; 0x2e
    return 0;
 8007192:	2000      	movs	r0, #0
 8007194:	e7f2      	b.n	800717c <tcp_update_rcv_ann_wnd+0x22>

08007196 <tcp_recved>:
{
 8007196:	b510      	push	{r4, lr}
 8007198:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800719a:	7e02      	ldrb	r2, [r0, #24]
  pcb->rcv_wnd += len;
 800719c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800719e:	4419      	add	r1, r3
 80071a0:	b289      	uxth	r1, r1
 80071a2:	8581      	strh	r1, [r0, #44]	; 0x2c
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80071a4:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 80071a8:	d909      	bls.n	80071be <tcp_recved+0x28>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80071aa:	f44f 6306 	mov.w	r3, #2144	; 0x860
 80071ae:	8583      	strh	r3, [r0, #44]	; 0x2c
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80071b0:	4620      	mov	r0, r4
 80071b2:	f7ff ffd2 	bl	800715a <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80071b6:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 80071ba:	da0a      	bge.n	80071d2 <tcp_recved+0x3c>
 80071bc:	bd10      	pop	{r4, pc}
  } else if (pcb->rcv_wnd == 0) {
 80071be:	2900      	cmp	r1, #0
 80071c0:	d1f6      	bne.n	80071b0 <tcp_recved+0x1a>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 80071c2:	2a07      	cmp	r2, #7
 80071c4:	d001      	beq.n	80071ca <tcp_recved+0x34>
 80071c6:	2a09      	cmp	r2, #9
 80071c8:	d1f2      	bne.n	80071b0 <tcp_recved+0x1a>
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80071ca:	f44f 6306 	mov.w	r3, #2144	; 0x860
 80071ce:	85a3      	strh	r3, [r4, #44]	; 0x2c
 80071d0:	e7ee      	b.n	80071b0 <tcp_recved+0x1a>
    tcp_ack_now(pcb);
 80071d2:	7fa3      	ldrb	r3, [r4, #30]
 80071d4:	f043 0302 	orr.w	r3, r3, #2
 80071d8:	77a3      	strb	r3, [r4, #30]
    tcp_output(pcb);
 80071da:	4620      	mov	r0, r4
 80071dc:	f002 fb6e 	bl	80098bc <tcp_output>
}
 80071e0:	e7ec      	b.n	80071bc <tcp_recved+0x26>

080071e2 <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 80071e2:	b150      	cbz	r0, 80071fa <tcp_seg_free+0x18>
{
 80071e4:	b510      	push	{r4, lr}
 80071e6:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 80071e8:	6840      	ldr	r0, [r0, #4]
 80071ea:	b108      	cbz	r0, 80071f0 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 80071ec:	f7ff fdd4 	bl	8006d98 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80071f0:	4621      	mov	r1, r4
 80071f2:	2003      	movs	r0, #3
 80071f4:	f7ff fc4e 	bl	8006a94 <memp_free>
 80071f8:	bd10      	pop	{r4, pc}
 80071fa:	4770      	bx	lr

080071fc <tcp_segs_free>:
  while (seg != NULL) {
 80071fc:	b138      	cbz	r0, 800720e <tcp_segs_free+0x12>
{
 80071fe:	b510      	push	{r4, lr}
    struct tcp_seg *next = seg->next;
 8007200:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8007202:	f7ff ffee 	bl	80071e2 <tcp_seg_free>
    seg = next;
 8007206:	4620      	mov	r0, r4
  while (seg != NULL) {
 8007208:	2c00      	cmp	r4, #0
 800720a:	d1f9      	bne.n	8007200 <tcp_segs_free+0x4>
}
 800720c:	bd10      	pop	{r4, pc}
 800720e:	4770      	bx	lr

08007210 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007210:	b538      	push	{r3, r4, r5, lr}
 8007212:	4605      	mov	r5, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007214:	2003      	movs	r0, #3
 8007216:	f7ff fc2f 	bl	8006a78 <memp_malloc>
  if (cseg == NULL) {
 800721a:	4604      	mov	r4, r0
 800721c:	b150      	cbz	r0, 8007234 <tcp_seg_copy+0x24>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800721e:	6828      	ldr	r0, [r5, #0]
 8007220:	6869      	ldr	r1, [r5, #4]
 8007222:	68aa      	ldr	r2, [r5, #8]
 8007224:	68eb      	ldr	r3, [r5, #12]
 8007226:	6020      	str	r0, [r4, #0]
 8007228:	6061      	str	r1, [r4, #4]
 800722a:	60a2      	str	r2, [r4, #8]
 800722c:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 800722e:	6860      	ldr	r0, [r4, #4]
 8007230:	f7ff fea9 	bl	8006f86 <pbuf_ref>
  return cseg;
}
 8007234:	4620      	mov	r0, r4
 8007236:	bd38      	pop	{r3, r4, r5, pc}

08007238 <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->callback_arg = arg;
 8007238:	6101      	str	r1, [r0, #16]
 800723a:	4770      	bx	lr

0800723c <tcp_recv>:
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
  pcb->recv = recv;
 800723c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 8007240:	4770      	bx	lr

08007242 <tcp_sent>:
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
  pcb->sent = sent;
 8007242:	67c1      	str	r1, [r0, #124]	; 0x7c
 8007244:	4770      	bx	lr

08007246 <tcp_err>:
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
  pcb->errf = err;
 8007246:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 800724a:	4770      	bx	lr

0800724c <tcp_accept>:
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->accept = accept;
 800724c:	6141      	str	r1, [r0, #20]
 800724e:	4770      	bx	lr

08007250 <tcp_poll>:
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8007250:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8007254:	f880 2020 	strb.w	r2, [r0, #32]
 8007258:	4770      	bx	lr

0800725a <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800725a:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 800725c:	7e03      	ldrb	r3, [r0, #24]
 800725e:	b1e3      	cbz	r3, 800729a <tcp_pcb_purge+0x40>
 8007260:	2b0a      	cmp	r3, #10
 8007262:	d01a      	beq.n	800729a <tcp_pcb_purge+0x40>
     pcb->state != TIME_WAIT &&
 8007264:	2b01      	cmp	r3, #1
 8007266:	d018      	beq.n	800729a <tcp_pcb_purge+0x40>
 8007268:	4604      	mov	r4, r0
      }
    }
#endif /* TCP_LISTEN_BACKLOG */


    if (pcb->refused_data != NULL) {
 800726a:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800726c:	b118      	cbz	r0, 8007276 <tcp_pcb_purge+0x1c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800726e:	f7ff fd93 	bl	8006d98 <pbuf_free>
      pcb->refused_data = NULL;
 8007272:	2300      	movs	r3, #0
 8007274:	67a3      	str	r3, [r4, #120]	; 0x78
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8007276:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8007278:	f7ff ffc0 	bl	80071fc <tcp_segs_free>
    pcb->ooseq = NULL;
 800727c:	2500      	movs	r5, #0
 800727e:	6765      	str	r5, [r4, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007280:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007284:	86a3      	strh	r3, [r4, #52]	; 0x34

    tcp_segs_free(pcb->unsent);
 8007286:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007288:	f7ff ffb8 	bl	80071fc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800728c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800728e:	f7ff ffb5 	bl	80071fc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007292:	66e5      	str	r5, [r4, #108]	; 0x6c
 8007294:	6725      	str	r5, [r4, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007296:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
 800729a:	bd38      	pop	{r3, r4, r5, pc}

0800729c <tcp_slowtmr>:
{
 800729c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a0:	b082      	sub	sp, #8
  ++tcp_ticks;
 80072a2:	4aa9      	ldr	r2, [pc, #676]	; (8007548 <tcp_slowtmr+0x2ac>)
 80072a4:	6813      	ldr	r3, [r2, #0]
 80072a6:	3301      	adds	r3, #1
 80072a8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80072aa:	4aa8      	ldr	r2, [pc, #672]	; (800754c <tcp_slowtmr+0x2b0>)
 80072ac:	7813      	ldrb	r3, [r2, #0]
 80072ae:	3301      	adds	r3, #1
 80072b0:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 80072b2:	4ba7      	ldr	r3, [pc, #668]	; (8007550 <tcp_slowtmr+0x2b4>)
 80072b4:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 80072b6:	2600      	movs	r6, #0
  while (pcb != NULL) {
 80072b8:	e000      	b.n	80072bc <tcp_slowtmr+0x20>
      pcb = pcb->next;
 80072ba:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 80072bc:	2c00      	cmp	r4, #0
 80072be:	f000 813f 	beq.w	8007540 <tcp_slowtmr+0x2a4>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80072c2:	7e21      	ldrb	r1, [r4, #24]
    if (pcb->last_timer == tcp_timer_ctr) {
 80072c4:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 80072c8:	4ba0      	ldr	r3, [pc, #640]	; (800754c <tcp_slowtmr+0x2b0>)
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d0f4      	beq.n	80072ba <tcp_slowtmr+0x1e>
    pcb->last_timer = tcp_timer_ctr;
 80072d0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
 80072d4:	2902      	cmp	r1, #2
 80072d6:	d016      	beq.n	8007306 <tcp_slowtmr+0x6a>
    else if (pcb->nrtx == TCP_MAXRTX) {
 80072d8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80072dc:	2b0c      	cmp	r3, #12
 80072de:	d05e      	beq.n	800739e <tcp_slowtmr+0x102>
      if (pcb->persist_backoff > 0) {
 80072e0:	f894 5095 	ldrb.w	r5, [r4, #149]	; 0x95
 80072e4:	b335      	cbz	r5, 8007334 <tcp_slowtmr+0x98>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80072e6:	3d01      	subs	r5, #1
 80072e8:	4b9a      	ldr	r3, [pc, #616]	; (8007554 <tcp_slowtmr+0x2b8>)
 80072ea:	5d5a      	ldrb	r2, [r3, r5]
        if (pcb->persist_cnt < backoff_cnt) {
 80072ec:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d902      	bls.n	80072fa <tcp_slowtmr+0x5e>
          pcb->persist_cnt++;
 80072f4:	3301      	adds	r3, #1
 80072f6:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 80072fa:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 80072fe:	429a      	cmp	r2, r3
 8007300:	d907      	bls.n	8007312 <tcp_slowtmr+0x76>
    pcb_remove = 0;
 8007302:	2500      	movs	r5, #0
 8007304:	e04c      	b.n	80073a0 <tcp_slowtmr+0x104>
    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
 8007306:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800730a:	2b06      	cmp	r3, #6
 800730c:	d1e4      	bne.n	80072d8 <tcp_slowtmr+0x3c>
      ++pcb_remove;
 800730e:	2501      	movs	r5, #1
 8007310:	e046      	b.n	80073a0 <tcp_slowtmr+0x104>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8007312:	4620      	mov	r0, r4
 8007314:	f002 fcaa 	bl	8009c6c <tcp_zero_window_probe>
 8007318:	2800      	cmp	r0, #0
 800731a:	d14e      	bne.n	80073ba <tcp_slowtmr+0x11e>
            pcb->persist_cnt = 0;
 800731c:	2300      	movs	r3, #0
 800731e:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007322:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8007326:	2b06      	cmp	r3, #6
 8007328:	d849      	bhi.n	80073be <tcp_slowtmr+0x122>
              pcb->persist_backoff++;
 800732a:	3301      	adds	r3, #1
 800732c:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
    pcb_remove = 0;
 8007330:	2500      	movs	r5, #0
 8007332:	e035      	b.n	80073a0 <tcp_slowtmr+0x104>
        if (pcb->rtime >= 0) {
 8007334:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8007338:	2a00      	cmp	r2, #0
 800733a:	db01      	blt.n	8007340 <tcp_slowtmr+0xa4>
          ++pcb->rtime;
 800733c:	3201      	adds	r2, #1
 800733e:	86a2      	strh	r2, [r4, #52]	; 0x34
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8007340:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8007342:	b36a      	cbz	r2, 80073a0 <tcp_slowtmr+0x104>
 8007344:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
 8007348:	f9b4 2044 	ldrsh.w	r2, [r4, #68]	; 0x44
 800734c:	4290      	cmp	r0, r2
 800734e:	db27      	blt.n	80073a0 <tcp_slowtmr+0x104>
          if (pcb->state != SYN_SENT) {
 8007350:	2902      	cmp	r1, #2
 8007352:	d00b      	beq.n	800736c <tcp_slowtmr+0xd0>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
 8007354:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 8007358:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 800735c:	eb02 02e1 	add.w	r2, r2, r1, asr #3
 8007360:	497d      	ldr	r1, [pc, #500]	; (8007558 <tcp_slowtmr+0x2bc>)
 8007362:	5ccb      	ldrb	r3, [r1, r3]
 8007364:	fa02 f303 	lsl.w	r3, r2, r3
 8007368:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
          pcb->rtime = 0;
 800736c:	2300      	movs	r3, #0
 800736e:	86a3      	strh	r3, [r4, #52]	; 0x34
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007370:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8007374:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 8007378:	4293      	cmp	r3, r2
 800737a:	bf28      	it	cs
 800737c:	4613      	movcs	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 800737e:	085b      	lsrs	r3, r3, #1
 8007380:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007384:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8007386:	004a      	lsls	r2, r1, #1
 8007388:	b292      	uxth	r2, r2
 800738a:	4293      	cmp	r3, r2
 800738c:	d201      	bcs.n	8007392 <tcp_slowtmr+0xf6>
            pcb->ssthresh = (pcb->mss << 1);
 800738e:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
          pcb->cwnd = pcb->mss;
 8007392:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
          tcp_rexmit_rto(pcb);
 8007396:	4620      	mov	r0, r4
 8007398:	f002 fbce 	bl	8009b38 <tcp_rexmit_rto>
 800739c:	e000      	b.n	80073a0 <tcp_slowtmr+0x104>
      ++pcb_remove;
 800739e:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 80073a0:	7e23      	ldrb	r3, [r4, #24]
 80073a2:	2b06      	cmp	r3, #6
 80073a4:	d00d      	beq.n	80073c2 <tcp_slowtmr+0x126>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80073a6:	7a22      	ldrb	r2, [r4, #8]
 80073a8:	f012 0f08 	tst.w	r2, #8
 80073ac:	d043      	beq.n	8007436 <tcp_slowtmr+0x19a>
 80073ae:	2b04      	cmp	r3, #4
 80073b0:	d014      	beq.n	80073dc <tcp_slowtmr+0x140>
       ((pcb->state == ESTABLISHED) ||
 80073b2:	2b07      	cmp	r3, #7
 80073b4:	d012      	beq.n	80073dc <tcp_slowtmr+0x140>
    pcb_reset = 0;
 80073b6:	2700      	movs	r7, #0
 80073b8:	e03e      	b.n	8007438 <tcp_slowtmr+0x19c>
    pcb_remove = 0;
 80073ba:	2500      	movs	r5, #0
 80073bc:	e7f0      	b.n	80073a0 <tcp_slowtmr+0x104>
 80073be:	2500      	movs	r5, #0
 80073c0:	e7ee      	b.n	80073a0 <tcp_slowtmr+0x104>
      if (pcb->flags & TF_RXCLOSED) {
 80073c2:	7fa2      	ldrb	r2, [r4, #30]
 80073c4:	f012 0f10 	tst.w	r2, #16
 80073c8:	d0ed      	beq.n	80073a6 <tcp_slowtmr+0x10a>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80073ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80073cc:	4a5e      	ldr	r2, [pc, #376]	; (8007548 <tcp_slowtmr+0x2ac>)
 80073ce:	6812      	ldr	r2, [r2, #0]
 80073d0:	1a52      	subs	r2, r2, r1
 80073d2:	2a28      	cmp	r2, #40	; 0x28
 80073d4:	d9e7      	bls.n	80073a6 <tcp_slowtmr+0x10a>
          ++pcb_remove;
 80073d6:	3501      	adds	r5, #1
 80073d8:	b2ed      	uxtb	r5, r5
 80073da:	e7e4      	b.n	80073a6 <tcp_slowtmr+0x10a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80073dc:	4b5a      	ldr	r3, [pc, #360]	; (8007548 <tcp_slowtmr+0x2ac>)
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073e2:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80073e4:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80073e8:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
 80073ec:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80073f0:	485a      	ldr	r0, [pc, #360]	; (800755c <tcp_slowtmr+0x2c0>)
 80073f2:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80073f6:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 80073fa:	d903      	bls.n	8007404 <tcp_slowtmr+0x168>
        ++pcb_remove;
 80073fc:	3501      	adds	r5, #1
 80073fe:	b2ed      	uxtb	r5, r5
        ++pcb_reset;
 8007400:	2701      	movs	r7, #1
 8007402:	e019      	b.n	8007438 <tcp_slowtmr+0x19c>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007404:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8007408:	4855      	ldr	r0, [pc, #340]	; (8007560 <tcp_slowtmr+0x2c4>)
 800740a:	fb00 1303 	mla	r3, r0, r3, r1
                / TCP_SLOW_INTERVAL)
 800740e:	4953      	ldr	r1, [pc, #332]	; (800755c <tcp_slowtmr+0x2c0>)
 8007410:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007414:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8007418:	d801      	bhi.n	800741e <tcp_slowtmr+0x182>
    pcb_reset = 0;
 800741a:	2700      	movs	r7, #0
 800741c:	e00c      	b.n	8007438 <tcp_slowtmr+0x19c>
        err = tcp_keepalive(pcb);
 800741e:	4620      	mov	r0, r4
 8007420:	f002 fbf8 	bl	8009c14 <tcp_keepalive>
        if (err == ERR_OK) {
 8007424:	2800      	cmp	r0, #0
 8007426:	d139      	bne.n	800749c <tcp_slowtmr+0x200>
          pcb->keep_cnt_sent++;
 8007428:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800742c:	3301      	adds	r3, #1
 800742e:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 8007432:	2700      	movs	r7, #0
 8007434:	e000      	b.n	8007438 <tcp_slowtmr+0x19c>
 8007436:	2700      	movs	r7, #0
    if (pcb->ooseq != NULL &&
 8007438:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800743a:	b150      	cbz	r0, 8007452 <tcp_slowtmr+0x1b6>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800743c:	4b42      	ldr	r3, [pc, #264]	; (8007548 <tcp_slowtmr+0x2ac>)
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007442:	1ad2      	subs	r2, r2, r3
 8007444:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
 8007448:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800744c:	0059      	lsls	r1, r3, #1
    if (pcb->ooseq != NULL &&
 800744e:	428a      	cmp	r2, r1
 8007450:	d226      	bcs.n	80074a0 <tcp_slowtmr+0x204>
    if (pcb->state == SYN_RCVD) {
 8007452:	7e23      	ldrb	r3, [r4, #24]
 8007454:	2b03      	cmp	r3, #3
 8007456:	d028      	beq.n	80074aa <tcp_slowtmr+0x20e>
    if (pcb->state == LAST_ACK) {
 8007458:	2b09      	cmp	r3, #9
 800745a:	d02f      	beq.n	80074bc <tcp_slowtmr+0x220>
    if (pcb_remove) {
 800745c:	2d00      	cmp	r5, #0
 800745e:	d136      	bne.n	80074ce <tcp_slowtmr+0x232>
      pcb = pcb->next;
 8007460:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 8007462:	7fe3      	ldrb	r3, [r4, #31]
 8007464:	3301      	adds	r3, #1
 8007466:	b2db      	uxtb	r3, r3
 8007468:	77e3      	strb	r3, [r4, #31]
      if (prev->polltmr >= prev->pollinterval) {
 800746a:	f894 2020 	ldrb.w	r2, [r4, #32]
 800746e:	4293      	cmp	r3, r2
 8007470:	d363      	bcc.n	800753a <tcp_slowtmr+0x29e>
        prev->polltmr = 0;
 8007472:	2300      	movs	r3, #0
 8007474:	77e3      	strb	r3, [r4, #31]
        tcp_active_pcbs_changed = 0;
 8007476:	4a3b      	ldr	r2, [pc, #236]	; (8007564 <tcp_slowtmr+0x2c8>)
 8007478:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 800747a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800747e:	2b00      	cmp	r3, #0
 8007480:	d053      	beq.n	800752a <tcp_slowtmr+0x28e>
 8007482:	4621      	mov	r1, r4
 8007484:	6920      	ldr	r0, [r4, #16]
 8007486:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8007488:	4b36      	ldr	r3, [pc, #216]	; (8007564 <tcp_slowtmr+0x2c8>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	f47f af10 	bne.w	80072b2 <tcp_slowtmr+0x16>
        if (err == ERR_OK) {
 8007492:	2800      	cmp	r0, #0
 8007494:	d04b      	beq.n	800752e <tcp_slowtmr+0x292>
      prev = pcb;
 8007496:	4626      	mov	r6, r4
      pcb = pcb->next;
 8007498:	462c      	mov	r4, r5
 800749a:	e70f      	b.n	80072bc <tcp_slowtmr+0x20>
    pcb_reset = 0;
 800749c:	2700      	movs	r7, #0
 800749e:	e7cb      	b.n	8007438 <tcp_slowtmr+0x19c>
      tcp_segs_free(pcb->ooseq);
 80074a0:	f7ff feac 	bl	80071fc <tcp_segs_free>
      pcb->ooseq = NULL;
 80074a4:	2300      	movs	r3, #0
 80074a6:	6763      	str	r3, [r4, #116]	; 0x74
 80074a8:	e7d3      	b.n	8007452 <tcp_slowtmr+0x1b6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80074aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80074ac:	4a26      	ldr	r2, [pc, #152]	; (8007548 <tcp_slowtmr+0x2ac>)
 80074ae:	6812      	ldr	r2, [r2, #0]
 80074b0:	1a52      	subs	r2, r2, r1
 80074b2:	2a28      	cmp	r2, #40	; 0x28
 80074b4:	d9d0      	bls.n	8007458 <tcp_slowtmr+0x1bc>
        ++pcb_remove;
 80074b6:	3501      	adds	r5, #1
 80074b8:	b2ed      	uxtb	r5, r5
 80074ba:	e7cd      	b.n	8007458 <tcp_slowtmr+0x1bc>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80074bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80074be:	4b22      	ldr	r3, [pc, #136]	; (8007548 <tcp_slowtmr+0x2ac>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	1a9b      	subs	r3, r3, r2
 80074c4:	2bf0      	cmp	r3, #240	; 0xf0
 80074c6:	d9c9      	bls.n	800745c <tcp_slowtmr+0x1c0>
        ++pcb_remove;
 80074c8:	3501      	adds	r5, #1
 80074ca:	b2ed      	uxtb	r5, r5
 80074cc:	e7c6      	b.n	800745c <tcp_slowtmr+0x1c0>
      tcp_pcb_purge(pcb);
 80074ce:	4620      	mov	r0, r4
 80074d0:	f7ff fec3 	bl	800725a <tcp_pcb_purge>
      if (prev != NULL) {
 80074d4:	b1d6      	cbz	r6, 800750c <tcp_slowtmr+0x270>
        prev->next = pcb->next;
 80074d6:	68e3      	ldr	r3, [r4, #12]
 80074d8:	60f3      	str	r3, [r6, #12]
      if (pcb_reset) {
 80074da:	b9df      	cbnz	r7, 8007514 <tcp_slowtmr+0x278>
      err_fn = pcb->errf;
 80074dc:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      err_arg = pcb->callback_arg;
 80074e0:	f8d4 8010 	ldr.w	r8, [r4, #16]
      pcb = pcb->next;
 80074e4:	68e7      	ldr	r7, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 80074e6:	4621      	mov	r1, r4
 80074e8:	2001      	movs	r0, #1
 80074ea:	f7ff fad3 	bl	8006a94 <memp_free>
      tcp_active_pcbs_changed = 0;
 80074ee:	2200      	movs	r2, #0
 80074f0:	4b1c      	ldr	r3, [pc, #112]	; (8007564 <tcp_slowtmr+0x2c8>)
 80074f2:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(err_fn, err_arg, ERR_ABRT);
 80074f4:	b11d      	cbz	r5, 80074fe <tcp_slowtmr+0x262>
 80074f6:	f06f 010b 	mvn.w	r1, #11
 80074fa:	4640      	mov	r0, r8
 80074fc:	47a8      	blx	r5
      if (tcp_active_pcbs_changed) {
 80074fe:	4b19      	ldr	r3, [pc, #100]	; (8007564 <tcp_slowtmr+0x2c8>)
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	f47f aed5 	bne.w	80072b2 <tcp_slowtmr+0x16>
      pcb = pcb->next;
 8007508:	463c      	mov	r4, r7
 800750a:	e6d7      	b.n	80072bc <tcp_slowtmr+0x20>
        tcp_active_pcbs = pcb->next;
 800750c:	68e2      	ldr	r2, [r4, #12]
 800750e:	4b10      	ldr	r3, [pc, #64]	; (8007550 <tcp_slowtmr+0x2b4>)
 8007510:	601a      	str	r2, [r3, #0]
 8007512:	e7e2      	b.n	80074da <tcp_slowtmr+0x23e>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007514:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007516:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8007518:	8ba3      	ldrh	r3, [r4, #28]
 800751a:	9301      	str	r3, [sp, #4]
 800751c:	8b63      	ldrh	r3, [r4, #26]
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	1d23      	adds	r3, r4, #4
 8007522:	4622      	mov	r2, r4
 8007524:	f002 fac4 	bl	8009ab0 <tcp_rst>
 8007528:	e7d8      	b.n	80074dc <tcp_slowtmr+0x240>
        TCP_EVENT_POLL(prev, err);
 800752a:	2000      	movs	r0, #0
 800752c:	e7ac      	b.n	8007488 <tcp_slowtmr+0x1ec>
          tcp_output(prev);
 800752e:	4620      	mov	r0, r4
 8007530:	f002 f9c4 	bl	80098bc <tcp_output>
      prev = pcb;
 8007534:	4626      	mov	r6, r4
      pcb = pcb->next;
 8007536:	462c      	mov	r4, r5
 8007538:	e6c0      	b.n	80072bc <tcp_slowtmr+0x20>
      prev = pcb;
 800753a:	4626      	mov	r6, r4
      pcb = pcb->next;
 800753c:	462c      	mov	r4, r5
 800753e:	e6bd      	b.n	80072bc <tcp_slowtmr+0x20>
  pcb = tcp_tw_pcbs;
 8007540:	4b09      	ldr	r3, [pc, #36]	; (8007568 <tcp_slowtmr+0x2cc>)
 8007542:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 8007544:	e016      	b.n	8007574 <tcp_slowtmr+0x2d8>
 8007546:	bf00      	nop
 8007548:	20007b30 	.word	0x20007b30
 800754c:	20003ec6 	.word	0x20003ec6
 8007550:	20007b2c 	.word	0x20007b2c
 8007554:	0800d1bc 	.word	0x0800d1bc
 8007558:	0800d19c 	.word	0x0800d19c
 800755c:	10624dd3 	.word	0x10624dd3
 8007560:	000124f8 	.word	0x000124f8
 8007564:	20007b28 	.word	0x20007b28
 8007568:	20007b3c 	.word	0x20007b3c
      ++pcb_remove;
 800756c:	2301      	movs	r3, #1
    if (pcb_remove) {
 800756e:	b953      	cbnz	r3, 8007586 <tcp_slowtmr+0x2ea>
      prev = pcb;
 8007570:	462c      	mov	r4, r5
      pcb = pcb->next;
 8007572:	68ed      	ldr	r5, [r5, #12]
  while (pcb != NULL) {
 8007574:	b1c5      	cbz	r5, 80075a8 <tcp_slowtmr+0x30c>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007576:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8007578:	4b0d      	ldr	r3, [pc, #52]	; (80075b0 <tcp_slowtmr+0x314>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	1a9b      	subs	r3, r3, r2
 800757e:	2bf0      	cmp	r3, #240	; 0xf0
 8007580:	d8f4      	bhi.n	800756c <tcp_slowtmr+0x2d0>
    pcb_remove = 0;
 8007582:	2300      	movs	r3, #0
 8007584:	e7f3      	b.n	800756e <tcp_slowtmr+0x2d2>
      tcp_pcb_purge(pcb);
 8007586:	4628      	mov	r0, r5
 8007588:	f7ff fe67 	bl	800725a <tcp_pcb_purge>
      if (prev != NULL) {
 800758c:	b144      	cbz	r4, 80075a0 <tcp_slowtmr+0x304>
        prev->next = pcb->next;
 800758e:	68eb      	ldr	r3, [r5, #12]
 8007590:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8007592:	68ee      	ldr	r6, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8007594:	4629      	mov	r1, r5
 8007596:	2001      	movs	r0, #1
 8007598:	f7ff fa7c 	bl	8006a94 <memp_free>
      pcb = pcb->next;
 800759c:	4635      	mov	r5, r6
 800759e:	e7e9      	b.n	8007574 <tcp_slowtmr+0x2d8>
        tcp_tw_pcbs = pcb->next;
 80075a0:	68ea      	ldr	r2, [r5, #12]
 80075a2:	4b04      	ldr	r3, [pc, #16]	; (80075b4 <tcp_slowtmr+0x318>)
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	e7f4      	b.n	8007592 <tcp_slowtmr+0x2f6>
}
 80075a8:	b002      	add	sp, #8
 80075aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075ae:	bf00      	nop
 80075b0:	20007b30 	.word	0x20007b30
 80075b4:	20007b3c 	.word	0x20007b3c

080075b8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80075b8:	b510      	push	{r4, lr}
 80075ba:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 80075bc:	6803      	ldr	r3, [r0, #0]
 80075be:	428b      	cmp	r3, r1
 80075c0:	d005      	beq.n	80075ce <tcp_pcb_remove+0x16>
 80075c2:	b14b      	cbz	r3, 80075d8 <tcp_pcb_remove+0x20>
 80075c4:	68da      	ldr	r2, [r3, #12]
 80075c6:	4294      	cmp	r4, r2
 80075c8:	d004      	beq.n	80075d4 <tcp_pcb_remove+0x1c>
 80075ca:	4613      	mov	r3, r2
 80075cc:	e7f9      	b.n	80075c2 <tcp_pcb_remove+0xa>
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	6003      	str	r3, [r0, #0]
 80075d2:	e001      	b.n	80075d8 <tcp_pcb_remove+0x20>
 80075d4:	68e2      	ldr	r2, [r4, #12]
 80075d6:	60da      	str	r2, [r3, #12]
 80075d8:	2300      	movs	r3, #0
 80075da:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 80075dc:	4620      	mov	r0, r4
 80075de:	f7ff fe3c 	bl	800725a <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 80075e2:	7e23      	ldrb	r3, [r4, #24]
 80075e4:	2b0a      	cmp	r3, #10
 80075e6:	d005      	beq.n	80075f4 <tcp_pcb_remove+0x3c>
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d003      	beq.n	80075f4 <tcp_pcb_remove+0x3c>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 80075ec:	7fa3      	ldrb	r3, [r4, #30]
     pcb->state != LISTEN &&
 80075ee:	f013 0f01 	tst.w	r3, #1
 80075f2:	d103      	bne.n	80075fc <tcp_pcb_remove+0x44>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80075f4:	2300      	movs	r3, #0
 80075f6:	7623      	strb	r3, [r4, #24]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80075f8:	8363      	strh	r3, [r4, #26]
 80075fa:	bd10      	pop	{r4, pc}
    pcb->flags |= TF_ACK_NOW;
 80075fc:	f043 0302 	orr.w	r3, r3, #2
 8007600:	77a3      	strb	r3, [r4, #30]
    tcp_output(pcb);
 8007602:	4620      	mov	r0, r4
 8007604:	f002 f95a 	bl	80098bc <tcp_output>
 8007608:	e7f4      	b.n	80075f4 <tcp_pcb_remove+0x3c>
	...

0800760c <tcp_close_shutdown>:
{
 800760c:	b530      	push	{r4, r5, lr}
 800760e:	b083      	sub	sp, #12
 8007610:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007612:	b121      	cbz	r1, 800761e <tcp_close_shutdown+0x12>
 8007614:	7e03      	ldrb	r3, [r0, #24]
 8007616:	2b04      	cmp	r3, #4
 8007618:	d00b      	beq.n	8007632 <tcp_close_shutdown+0x26>
 800761a:	2b07      	cmp	r3, #7
 800761c:	d009      	beq.n	8007632 <tcp_close_shutdown+0x26>
  switch (pcb->state) {
 800761e:	7e23      	ldrb	r3, [r4, #24]
 8007620:	2b07      	cmp	r3, #7
 8007622:	f200 809d 	bhi.w	8007760 <tcp_close_shutdown+0x154>
 8007626:	e8df f003 	tbb	[pc, r3]
 800762a:	6848      	.short	0x6848
 800762c:	9b898073 	.word	0x9b898073
 8007630:	929b      	.short	0x929b
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007632:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8007634:	b1b3      	cbz	r3, 8007664 <tcp_close_shutdown+0x58>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007636:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007638:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800763a:	8ba3      	ldrh	r3, [r4, #28]
 800763c:	9301      	str	r3, [sp, #4]
 800763e:	8b63      	ldrh	r3, [r4, #26]
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	1d23      	adds	r3, r4, #4
 8007644:	4622      	mov	r2, r4
 8007646:	f002 fa33 	bl	8009ab0 <tcp_rst>
      tcp_pcb_purge(pcb);
 800764a:	4620      	mov	r0, r4
 800764c:	f7ff fe05 	bl	800725a <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007650:	4b47      	ldr	r3, [pc, #284]	; (8007770 <tcp_close_shutdown+0x164>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	429c      	cmp	r4, r3
 8007656:	d00a      	beq.n	800766e <tcp_close_shutdown+0x62>
 8007658:	b17b      	cbz	r3, 800767a <tcp_close_shutdown+0x6e>
 800765a:	68da      	ldr	r2, [r3, #12]
 800765c:	4294      	cmp	r4, r2
 800765e:	d00a      	beq.n	8007676 <tcp_close_shutdown+0x6a>
 8007660:	4613      	mov	r3, r2
 8007662:	e7f9      	b.n	8007658 <tcp_close_shutdown+0x4c>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007664:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8007666:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800766a:	d1e4      	bne.n	8007636 <tcp_close_shutdown+0x2a>
 800766c:	e7d7      	b.n	800761e <tcp_close_shutdown+0x12>
      TCP_RMV_ACTIVE(pcb);
 800766e:	68da      	ldr	r2, [r3, #12]
 8007670:	4b3f      	ldr	r3, [pc, #252]	; (8007770 <tcp_close_shutdown+0x164>)
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	e001      	b.n	800767a <tcp_close_shutdown+0x6e>
 8007676:	68e2      	ldr	r2, [r4, #12]
 8007678:	60da      	str	r2, [r3, #12]
 800767a:	2300      	movs	r3, #0
 800767c:	60e3      	str	r3, [r4, #12]
 800767e:	2201      	movs	r2, #1
 8007680:	4b3c      	ldr	r3, [pc, #240]	; (8007774 <tcp_close_shutdown+0x168>)
 8007682:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8007684:	7e23      	ldrb	r3, [r4, #24]
 8007686:	2b04      	cmp	r3, #4
 8007688:	d009      	beq.n	800769e <tcp_close_shutdown+0x92>
        if (tcp_input_pcb == pcb) {
 800768a:	4b3b      	ldr	r3, [pc, #236]	; (8007778 <tcp_close_shutdown+0x16c>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	429c      	cmp	r4, r3
 8007690:	d00f      	beq.n	80076b2 <tcp_close_shutdown+0xa6>
          memp_free(MEMP_TCP_PCB, pcb);
 8007692:	4621      	mov	r1, r4
 8007694:	2001      	movs	r0, #1
 8007696:	f7ff f9fd 	bl	8006a94 <memp_free>
      return ERR_OK;
 800769a:	2500      	movs	r5, #0
 800769c:	e02a      	b.n	80076f4 <tcp_close_shutdown+0xe8>
        pcb->state = TIME_WAIT;
 800769e:	230a      	movs	r3, #10
 80076a0:	7623      	strb	r3, [r4, #24]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80076a2:	4b36      	ldr	r3, [pc, #216]	; (800777c <tcp_close_shutdown+0x170>)
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	60e2      	str	r2, [r4, #12]
 80076a8:	601c      	str	r4, [r3, #0]
 80076aa:	f7fe ffb1 	bl	8006610 <tcp_timer_needed>
      return ERR_OK;
 80076ae:	2500      	movs	r5, #0
 80076b0:	e020      	b.n	80076f4 <tcp_close_shutdown+0xe8>
          tcp_trigger_input_pcb_close();
 80076b2:	f001 fd57 	bl	8009164 <tcp_trigger_input_pcb_close>
      return ERR_OK;
 80076b6:	2500      	movs	r5, #0
 80076b8:	e01c      	b.n	80076f4 <tcp_close_shutdown+0xe8>
    if (pcb->local_port != 0) {
 80076ba:	8b63      	ldrh	r3, [r4, #26]
 80076bc:	b18b      	cbz	r3, 80076e2 <tcp_close_shutdown+0xd6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80076be:	4b30      	ldr	r3, [pc, #192]	; (8007780 <tcp_close_shutdown+0x174>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	429c      	cmp	r4, r3
 80076c4:	d005      	beq.n	80076d2 <tcp_close_shutdown+0xc6>
 80076c6:	b153      	cbz	r3, 80076de <tcp_close_shutdown+0xd2>
 80076c8:	68da      	ldr	r2, [r3, #12]
 80076ca:	4294      	cmp	r4, r2
 80076cc:	d005      	beq.n	80076da <tcp_close_shutdown+0xce>
 80076ce:	4613      	mov	r3, r2
 80076d0:	e7f9      	b.n	80076c6 <tcp_close_shutdown+0xba>
 80076d2:	68da      	ldr	r2, [r3, #12]
 80076d4:	4b2a      	ldr	r3, [pc, #168]	; (8007780 <tcp_close_shutdown+0x174>)
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	e001      	b.n	80076de <tcp_close_shutdown+0xd2>
 80076da:	68e2      	ldr	r2, [r4, #12]
 80076dc:	60da      	str	r2, [r3, #12]
 80076de:	2300      	movs	r3, #0
 80076e0:	60e3      	str	r3, [r4, #12]
    memp_free(MEMP_TCP_PCB, pcb);
 80076e2:	4621      	mov	r1, r4
 80076e4:	2001      	movs	r0, #1
 80076e6:	f7ff f9d5 	bl	8006a94 <memp_free>
    err = ERR_OK;
 80076ea:	2400      	movs	r4, #0
    pcb = NULL;
 80076ec:	4625      	mov	r5, r4
  if (pcb != NULL && err == ERR_OK) {
 80076ee:	b10c      	cbz	r4, 80076f4 <tcp_close_shutdown+0xe8>
 80076f0:	2d00      	cmp	r5, #0
 80076f2:	d038      	beq.n	8007766 <tcp_close_shutdown+0x15a>
}
 80076f4:	4628      	mov	r0, r5
 80076f6:	b003      	add	sp, #12
 80076f8:	bd30      	pop	{r4, r5, pc}
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80076fa:	4621      	mov	r1, r4
 80076fc:	4821      	ldr	r0, [pc, #132]	; (8007784 <tcp_close_shutdown+0x178>)
 80076fe:	f7ff ff5b 	bl	80075b8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007702:	4621      	mov	r1, r4
 8007704:	2002      	movs	r0, #2
 8007706:	f7ff f9c5 	bl	8006a94 <memp_free>
    err = ERR_OK;
 800770a:	2400      	movs	r4, #0
    pcb = NULL;
 800770c:	4625      	mov	r5, r4
    break;
 800770e:	e7ee      	b.n	80076ee <tcp_close_shutdown+0xe2>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8007710:	4621      	mov	r1, r4
 8007712:	4817      	ldr	r0, [pc, #92]	; (8007770 <tcp_close_shutdown+0x164>)
 8007714:	f7ff ff50 	bl	80075b8 <tcp_pcb_remove>
 8007718:	2001      	movs	r0, #1
 800771a:	4b16      	ldr	r3, [pc, #88]	; (8007774 <tcp_close_shutdown+0x168>)
 800771c:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800771e:	4621      	mov	r1, r4
 8007720:	f7ff f9b8 	bl	8006a94 <memp_free>
    err = ERR_OK;
 8007724:	2400      	movs	r4, #0
    pcb = NULL;
 8007726:	4625      	mov	r5, r4
    break;
 8007728:	e7e1      	b.n	80076ee <tcp_close_shutdown+0xe2>
    err = tcp_send_fin(pcb);
 800772a:	4620      	mov	r0, r4
 800772c:	f002 f86b 	bl	8009806 <tcp_send_fin>
    if (err == ERR_OK) {
 8007730:	4605      	mov	r5, r0
 8007732:	2800      	cmp	r0, #0
 8007734:	d1db      	bne.n	80076ee <tcp_close_shutdown+0xe2>
      pcb->state = FIN_WAIT_1;
 8007736:	2305      	movs	r3, #5
 8007738:	7623      	strb	r3, [r4, #24]
 800773a:	e7d8      	b.n	80076ee <tcp_close_shutdown+0xe2>
    err = tcp_send_fin(pcb);
 800773c:	4620      	mov	r0, r4
 800773e:	f002 f862 	bl	8009806 <tcp_send_fin>
    if (err == ERR_OK) {
 8007742:	4605      	mov	r5, r0
 8007744:	2800      	cmp	r0, #0
 8007746:	d1d2      	bne.n	80076ee <tcp_close_shutdown+0xe2>
      pcb->state = FIN_WAIT_1;
 8007748:	2305      	movs	r3, #5
 800774a:	7623      	strb	r3, [r4, #24]
 800774c:	e7cf      	b.n	80076ee <tcp_close_shutdown+0xe2>
    err = tcp_send_fin(pcb);
 800774e:	4620      	mov	r0, r4
 8007750:	f002 f859 	bl	8009806 <tcp_send_fin>
    if (err == ERR_OK) {
 8007754:	4605      	mov	r5, r0
 8007756:	2800      	cmp	r0, #0
 8007758:	d1c9      	bne.n	80076ee <tcp_close_shutdown+0xe2>
      pcb->state = LAST_ACK;
 800775a:	2309      	movs	r3, #9
 800775c:	7623      	strb	r3, [r4, #24]
 800775e:	e7c6      	b.n	80076ee <tcp_close_shutdown+0xe2>
    err = ERR_OK;
 8007760:	2500      	movs	r5, #0
    pcb = NULL;
 8007762:	462c      	mov	r4, r5
 8007764:	e7c3      	b.n	80076ee <tcp_close_shutdown+0xe2>
    tcp_output(pcb);
 8007766:	4620      	mov	r0, r4
 8007768:	f002 f8a8 	bl	80098bc <tcp_output>
 800776c:	e7c2      	b.n	80076f4 <tcp_close_shutdown+0xe8>
 800776e:	bf00      	nop
 8007770:	20007b2c 	.word	0x20007b2c
 8007774:	20007b28 	.word	0x20007b28
 8007778:	20007b40 	.word	0x20007b40
 800777c:	20007b3c 	.word	0x20007b3c
 8007780:	20007b38 	.word	0x20007b38
 8007784:	20007b34 	.word	0x20007b34

08007788 <tcp_close>:
{
 8007788:	b508      	push	{r3, lr}
  if (pcb->state != LISTEN) {
 800778a:	7e03      	ldrb	r3, [r0, #24]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d003      	beq.n	8007798 <tcp_close+0x10>
    pcb->flags |= TF_RXCLOSED;
 8007790:	7f83      	ldrb	r3, [r0, #30]
 8007792:	f043 0310 	orr.w	r3, r3, #16
 8007796:	7783      	strb	r3, [r0, #30]
  return tcp_close_shutdown(pcb, 1);
 8007798:	2101      	movs	r1, #1
 800779a:	f7ff ff37 	bl	800760c <tcp_close_shutdown>
}
 800779e:	bd08      	pop	{r3, pc}

080077a0 <tcp_recv_null>:
{
 80077a0:	b510      	push	{r4, lr}
 80077a2:	4608      	mov	r0, r1
  if (p != NULL) {
 80077a4:	b142      	cbz	r2, 80077b8 <tcp_recv_null+0x18>
 80077a6:	4614      	mov	r4, r2
    tcp_recved(pcb, p->tot_len);
 80077a8:	8911      	ldrh	r1, [r2, #8]
 80077aa:	f7ff fcf4 	bl	8007196 <tcp_recved>
    pbuf_free(p);
 80077ae:	4620      	mov	r0, r4
 80077b0:	f7ff faf2 	bl	8006d98 <pbuf_free>
  return ERR_OK;
 80077b4:	2000      	movs	r0, #0
 80077b6:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 80077b8:	b10b      	cbz	r3, 80077be <tcp_recv_null+0x1e>
  return ERR_OK;
 80077ba:	2000      	movs	r0, #0
}
 80077bc:	bd10      	pop	{r4, pc}
    return tcp_close(pcb);
 80077be:	f7ff ffe3 	bl	8007788 <tcp_close>
 80077c2:	bd10      	pop	{r4, pc}

080077c4 <tcp_process_refused_data>:
{
 80077c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077c6:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 80077c8:	6f86      	ldr	r6, [r0, #120]	; 0x78
 80077ca:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 80077cc:	2300      	movs	r3, #0
 80077ce:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80077d0:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
 80077d4:	b1dd      	cbz	r5, 800780e <tcp_process_refused_data+0x4a>
 80077d6:	4632      	mov	r2, r6
 80077d8:	4601      	mov	r1, r0
 80077da:	6900      	ldr	r0, [r0, #16]
 80077dc:	47a8      	blx	r5
 80077de:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 80077e0:	b9fd      	cbnz	r5, 8007822 <tcp_process_refused_data+0x5e>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 80077e2:	f017 0f20 	tst.w	r7, #32
 80077e6:	d022      	beq.n	800782e <tcp_process_refused_data+0x6a>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80077e8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80077ea:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80077ee:	d001      	beq.n	80077f4 <tcp_process_refused_data+0x30>
          pcb->rcv_wnd++;
 80077f0:	3301      	adds	r3, #1
 80077f2:	85a3      	strh	r3, [r4, #44]	; 0x2c
        TCP_EVENT_CLOSED(pcb, err);
 80077f4:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 80077f8:	b18e      	cbz	r6, 800781e <tcp_process_refused_data+0x5a>
 80077fa:	2300      	movs	r3, #0
 80077fc:	461a      	mov	r2, r3
 80077fe:	4621      	mov	r1, r4
 8007800:	6920      	ldr	r0, [r4, #16]
 8007802:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8007804:	f110 0f0c 	cmn.w	r0, #12
 8007808:	d111      	bne.n	800782e <tcp_process_refused_data+0x6a>
          return ERR_ABRT;
 800780a:	4605      	mov	r5, r0
 800780c:	e00f      	b.n	800782e <tcp_process_refused_data+0x6a>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800780e:	2300      	movs	r3, #0
 8007810:	4632      	mov	r2, r6
 8007812:	4601      	mov	r1, r0
 8007814:	4618      	mov	r0, r3
 8007816:	f7ff ffc3 	bl	80077a0 <tcp_recv_null>
 800781a:	4605      	mov	r5, r0
 800781c:	e7e0      	b.n	80077e0 <tcp_process_refused_data+0x1c>
        TCP_EVENT_CLOSED(pcb, err);
 800781e:	4628      	mov	r0, r5
 8007820:	e7f0      	b.n	8007804 <tcp_process_refused_data+0x40>
    } else if (err == ERR_ABRT) {
 8007822:	f115 0f0c 	cmn.w	r5, #12
 8007826:	d002      	beq.n	800782e <tcp_process_refused_data+0x6a>
      pcb->refused_data = refused_data;
 8007828:	67a6      	str	r6, [r4, #120]	; 0x78
      return ERR_INPROGRESS;
 800782a:	f06f 0504 	mvn.w	r5, #4
}
 800782e:	4628      	mov	r0, r5
 8007830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007834 <tcp_fasttmr>:
{
 8007834:	b570      	push	{r4, r5, r6, lr}
  ++tcp_timer_ctr;
 8007836:	4a18      	ldr	r2, [pc, #96]	; (8007898 <tcp_fasttmr+0x64>)
 8007838:	7813      	ldrb	r3, [r2, #0]
 800783a:	3301      	adds	r3, #1
 800783c:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 800783e:	4b17      	ldr	r3, [pc, #92]	; (800789c <tcp_fasttmr+0x68>)
 8007840:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 8007842:	e00c      	b.n	800785e <tcp_fasttmr+0x2a>
        tcp_ack_now(pcb);
 8007844:	f043 0302 	orr.w	r3, r3, #2
 8007848:	77a3      	strb	r3, [r4, #30]
        tcp_output(pcb);
 800784a:	4620      	mov	r0, r4
 800784c:	f002 f836 	bl	80098bc <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8007850:	7fa3      	ldrb	r3, [r4, #30]
 8007852:	f023 0303 	bic.w	r3, r3, #3
 8007856:	77a3      	strb	r3, [r4, #30]
 8007858:	e00e      	b.n	8007878 <tcp_fasttmr+0x44>
      pcb = pcb->next;
 800785a:	68e5      	ldr	r5, [r4, #12]
{
 800785c:	462c      	mov	r4, r5
  while (pcb != NULL) {
 800785e:	b1cc      	cbz	r4, 8007894 <tcp_fasttmr+0x60>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007860:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 8007864:	4b0c      	ldr	r3, [pc, #48]	; (8007898 <tcp_fasttmr+0x64>)
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	429a      	cmp	r2, r3
 800786a:	d0f6      	beq.n	800785a <tcp_fasttmr+0x26>
      pcb->last_timer = tcp_timer_ctr;
 800786c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
      if (pcb->flags & TF_ACK_DELAY) {
 8007870:	7fa3      	ldrb	r3, [r4, #30]
 8007872:	f013 0f01 	tst.w	r3, #1
 8007876:	d1e5      	bne.n	8007844 <tcp_fasttmr+0x10>
      next = pcb->next;
 8007878:	68e5      	ldr	r5, [r4, #12]
      if (pcb->refused_data != NULL) {
 800787a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800787c:	2b00      	cmp	r3, #0
 800787e:	d0ed      	beq.n	800785c <tcp_fasttmr+0x28>
        tcp_active_pcbs_changed = 0;
 8007880:	4e07      	ldr	r6, [pc, #28]	; (80078a0 <tcp_fasttmr+0x6c>)
 8007882:	2300      	movs	r3, #0
 8007884:	7033      	strb	r3, [r6, #0]
        tcp_process_refused_data(pcb);
 8007886:	4620      	mov	r0, r4
 8007888:	f7ff ff9c 	bl	80077c4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800788c:	7833      	ldrb	r3, [r6, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d0e4      	beq.n	800785c <tcp_fasttmr+0x28>
 8007892:	e7d4      	b.n	800783e <tcp_fasttmr+0xa>
}
 8007894:	bd70      	pop	{r4, r5, r6, pc}
 8007896:	bf00      	nop
 8007898:	20003ec6 	.word	0x20003ec6
 800789c:	20007b2c 	.word	0x20007b2c
 80078a0:	20007b28 	.word	0x20007b28

080078a4 <tcp_tmr>:
{
 80078a4:	b508      	push	{r3, lr}
  tcp_fasttmr();
 80078a6:	f7ff ffc5 	bl	8007834 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 80078aa:	4a06      	ldr	r2, [pc, #24]	; (80078c4 <tcp_tmr+0x20>)
 80078ac:	7813      	ldrb	r3, [r2, #0]
 80078ae:	3301      	adds	r3, #1
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	7013      	strb	r3, [r2, #0]
 80078b4:	f013 0f01 	tst.w	r3, #1
 80078b8:	d100      	bne.n	80078bc <tcp_tmr+0x18>
 80078ba:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 80078bc:	f7ff fcee 	bl	800729c <tcp_slowtmr>
}
 80078c0:	e7fb      	b.n	80078ba <tcp_tmr+0x16>
 80078c2:	bf00      	nop
 80078c4:	20003ec5 	.word	0x20003ec5

080078c8 <tcp_shutdown>:
  if (pcb->state == LISTEN) {
 80078c8:	7e03      	ldrb	r3, [r0, #24]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d020      	beq.n	8007910 <tcp_shutdown+0x48>
{
 80078ce:	b570      	push	{r4, r5, r6, lr}
 80078d0:	4616      	mov	r6, r2
 80078d2:	460d      	mov	r5, r1
 80078d4:	4604      	mov	r4, r0
  if (shut_rx) {
 80078d6:	b151      	cbz	r1, 80078ee <tcp_shutdown+0x26>
    pcb->flags |= TF_RXCLOSED;
 80078d8:	7f83      	ldrb	r3, [r0, #30]
 80078da:	f043 0310 	orr.w	r3, r3, #16
 80078de:	7783      	strb	r3, [r0, #30]
    if (shut_tx) {
 80078e0:	b992      	cbnz	r2, 8007908 <tcp_shutdown+0x40>
    if (pcb->refused_data != NULL) {
 80078e2:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80078e4:	b118      	cbz	r0, 80078ee <tcp_shutdown+0x26>
      pbuf_free(pcb->refused_data);
 80078e6:	f7ff fa57 	bl	8006d98 <pbuf_free>
      pcb->refused_data = NULL;
 80078ea:	2300      	movs	r3, #0
 80078ec:	67a3      	str	r3, [r4, #120]	; 0x78
  if (shut_tx) {
 80078ee:	b196      	cbz	r6, 8007916 <tcp_shutdown+0x4e>
    switch (pcb->state) {
 80078f0:	7e23      	ldrb	r3, [r4, #24]
 80078f2:	2b03      	cmp	r3, #3
 80078f4:	d311      	bcc.n	800791a <tcp_shutdown+0x52>
 80078f6:	2b04      	cmp	r3, #4
 80078f8:	d901      	bls.n	80078fe <tcp_shutdown+0x36>
 80078fa:	2b07      	cmp	r3, #7
 80078fc:	d10d      	bne.n	800791a <tcp_shutdown+0x52>
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80078fe:	b2e9      	uxtb	r1, r5
 8007900:	4620      	mov	r0, r4
 8007902:	f7ff fe83 	bl	800760c <tcp_close_shutdown>
 8007906:	bd70      	pop	{r4, r5, r6, pc}
      return tcp_close_shutdown(pcb, 1);
 8007908:	2101      	movs	r1, #1
 800790a:	f7ff fe7f 	bl	800760c <tcp_close_shutdown>
 800790e:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_CONN;
 8007910:	f06f 000a 	mvn.w	r0, #10
 8007914:	4770      	bx	lr
  return ERR_OK;
 8007916:	2000      	movs	r0, #0
 8007918:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_CONN;
 800791a:	f06f 000a 	mvn.w	r0, #10
}
 800791e:	bd70      	pop	{r4, r5, r6, pc}

08007920 <tcp_abandon>:
{
 8007920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007924:	b082      	sub	sp, #8
 8007926:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007928:	7e03      	ldrb	r3, [r0, #24]
  if (pcb->state == TIME_WAIT) {
 800792a:	2b0a      	cmp	r3, #10
 800792c:	d014      	beq.n	8007958 <tcp_abandon+0x38>
 800792e:	460d      	mov	r5, r1
    seqno = pcb->snd_nxt;
 8007930:	f8d0 8050 	ldr.w	r8, [r0, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 8007934:	f8d0 9028 	ldr.w	r9, [r0, #40]	; 0x28
    errf = pcb->errf;
 8007938:	f8d0 608c 	ldr.w	r6, [r0, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 800793c:	6907      	ldr	r7, [r0, #16]
    if ((pcb->state == CLOSED) && (pcb->local_port != 0)) {
 800793e:	b9f3      	cbnz	r3, 800797e <tcp_abandon+0x5e>
 8007940:	8b43      	ldrh	r3, [r0, #26]
 8007942:	b1e3      	cbz	r3, 800797e <tcp_abandon+0x5e>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8007944:	4b24      	ldr	r3, [pc, #144]	; (80079d8 <tcp_abandon+0xb8>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4298      	cmp	r0, r3
 800794a:	d00e      	beq.n	800796a <tcp_abandon+0x4a>
 800794c:	b19b      	cbz	r3, 8007976 <tcp_abandon+0x56>
 800794e:	68da      	ldr	r2, [r3, #12]
 8007950:	4294      	cmp	r4, r2
 8007952:	d00e      	beq.n	8007972 <tcp_abandon+0x52>
 8007954:	4613      	mov	r3, r2
 8007956:	e7f9      	b.n	800794c <tcp_abandon+0x2c>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007958:	4601      	mov	r1, r0
 800795a:	4820      	ldr	r0, [pc, #128]	; (80079dc <tcp_abandon+0xbc>)
 800795c:	f7ff fe2c 	bl	80075b8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8007960:	4621      	mov	r1, r4
 8007962:	2001      	movs	r0, #1
 8007964:	f7ff f896 	bl	8006a94 <memp_free>
 8007968:	e028      	b.n	80079bc <tcp_abandon+0x9c>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800796a:	68da      	ldr	r2, [r3, #12]
 800796c:	4b1a      	ldr	r3, [pc, #104]	; (80079d8 <tcp_abandon+0xb8>)
 800796e:	601a      	str	r2, [r3, #0]
 8007970:	e001      	b.n	8007976 <tcp_abandon+0x56>
 8007972:	68e2      	ldr	r2, [r4, #12]
 8007974:	60da      	str	r2, [r3, #12]
 8007976:	2500      	movs	r5, #0
 8007978:	60e5      	str	r5, [r4, #12]
    u16_t local_port = 0;
 800797a:	46aa      	mov	sl, r5
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800797c:	e008      	b.n	8007990 <tcp_abandon+0x70>
      local_port = pcb->local_port;
 800797e:	f8b4 a01a 	ldrh.w	sl, [r4, #26]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007982:	4621      	mov	r1, r4
 8007984:	4816      	ldr	r0, [pc, #88]	; (80079e0 <tcp_abandon+0xc0>)
 8007986:	f7ff fe17 	bl	80075b8 <tcp_pcb_remove>
 800798a:	2201      	movs	r2, #1
 800798c:	4b15      	ldr	r3, [pc, #84]	; (80079e4 <tcp_abandon+0xc4>)
 800798e:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8007990:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007992:	b108      	cbz	r0, 8007998 <tcp_abandon+0x78>
      tcp_segs_free(pcb->unacked);
 8007994:	f7ff fc32 	bl	80071fc <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8007998:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800799a:	b108      	cbz	r0, 80079a0 <tcp_abandon+0x80>
      tcp_segs_free(pcb->unsent);
 800799c:	f7ff fc2e 	bl	80071fc <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80079a0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80079a2:	b108      	cbz	r0, 80079a8 <tcp_abandon+0x88>
      tcp_segs_free(pcb->ooseq);
 80079a4:	f7ff fc2a 	bl	80071fc <tcp_segs_free>
    if (send_rst) {
 80079a8:	b95d      	cbnz	r5, 80079c2 <tcp_abandon+0xa2>
    memp_free(MEMP_TCP_PCB, pcb);
 80079aa:	4621      	mov	r1, r4
 80079ac:	2001      	movs	r0, #1
 80079ae:	f7ff f871 	bl	8006a94 <memp_free>
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
 80079b2:	b11e      	cbz	r6, 80079bc <tcp_abandon+0x9c>
 80079b4:	f06f 010b 	mvn.w	r1, #11
 80079b8:	4638      	mov	r0, r7
 80079ba:	47b0      	blx	r6
}
 80079bc:	b002      	add	sp, #8
 80079be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80079c2:	8ba3      	ldrh	r3, [r4, #28]
 80079c4:	9301      	str	r3, [sp, #4]
 80079c6:	f8cd a000 	str.w	sl, [sp]
 80079ca:	1d23      	adds	r3, r4, #4
 80079cc:	4622      	mov	r2, r4
 80079ce:	4649      	mov	r1, r9
 80079d0:	4640      	mov	r0, r8
 80079d2:	f002 f86d 	bl	8009ab0 <tcp_rst>
 80079d6:	e7e8      	b.n	80079aa <tcp_abandon+0x8a>
 80079d8:	20007b38 	.word	0x20007b38
 80079dc:	20007b3c 	.word	0x20007b3c
 80079e0:	20007b2c 	.word	0x20007b2c
 80079e4:	20007b28 	.word	0x20007b28

080079e8 <tcp_abort>:
{
 80079e8:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 80079ea:	2101      	movs	r1, #1
 80079ec:	f7ff ff98 	bl	8007920 <tcp_abandon>
 80079f0:	bd08      	pop	{r3, pc}
	...

080079f4 <tcp_kill_timewait>:
{
 80079f4:	b510      	push	{r4, lr}
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80079f6:	4b0a      	ldr	r3, [pc, #40]	; (8007a20 <tcp_kill_timewait+0x2c>)
 80079f8:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 80079fa:	2400      	movs	r4, #0
  inactive = NULL;
 80079fc:	4620      	mov	r0, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80079fe:	e000      	b.n	8007a02 <tcp_kill_timewait+0xe>
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	b143      	cbz	r3, 8007a16 <tcp_kill_timewait+0x22>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007a04:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007a06:	4a07      	ldr	r2, [pc, #28]	; (8007a24 <tcp_kill_timewait+0x30>)
 8007a08:	6812      	ldr	r2, [r2, #0]
 8007a0a:	1a52      	subs	r2, r2, r1
 8007a0c:	4294      	cmp	r4, r2
 8007a0e:	d8f7      	bhi.n	8007a00 <tcp_kill_timewait+0xc>
      inactivity = tcp_ticks - pcb->tmr;
 8007a10:	4614      	mov	r4, r2
      inactive = pcb;
 8007a12:	4618      	mov	r0, r3
 8007a14:	e7f4      	b.n	8007a00 <tcp_kill_timewait+0xc>
  if (inactive != NULL) {
 8007a16:	b108      	cbz	r0, 8007a1c <tcp_kill_timewait+0x28>
    tcp_abort(inactive);
 8007a18:	f7ff ffe6 	bl	80079e8 <tcp_abort>
 8007a1c:	bd10      	pop	{r4, pc}
 8007a1e:	bf00      	nop
 8007a20:	20007b3c 	.word	0x20007b3c
 8007a24:	20007b30 	.word	0x20007b30

08007a28 <tcp_kill_prio>:
{
 8007a28:	b570      	push	{r4, r5, r6, lr}
 8007a2a:	4602      	mov	r2, r0
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007a2c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007a30:	d000      	beq.n	8007a34 <tcp_kill_prio+0xc>
 8007a32:	227f      	movs	r2, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a34:	4b0b      	ldr	r3, [pc, #44]	; (8007a64 <tcp_kill_prio+0x3c>)
 8007a36:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8007a38:	2400      	movs	r4, #0
  inactive = NULL;
 8007a3a:	4620      	mov	r0, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a3c:	b91b      	cbnz	r3, 8007a46 <tcp_kill_prio+0x1e>
  if (inactive != NULL) {
 8007a3e:	b108      	cbz	r0, 8007a44 <tcp_kill_prio+0x1c>
    tcp_abort(inactive);
 8007a40:	f7ff ffd2 	bl	80079e8 <tcp_abort>
 8007a44:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->prio <= mprio &&
 8007a46:	7e5d      	ldrb	r5, [r3, #25]
 8007a48:	42aa      	cmp	r2, r5
 8007a4a:	d308      	bcc.n	8007a5e <tcp_kill_prio+0x36>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007a4c:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8007a4e:	4906      	ldr	r1, [pc, #24]	; (8007a68 <tcp_kill_prio+0x40>)
 8007a50:	6809      	ldr	r1, [r1, #0]
 8007a52:	1b89      	subs	r1, r1, r6
    if (pcb->prio <= mprio &&
 8007a54:	428c      	cmp	r4, r1
 8007a56:	d802      	bhi.n	8007a5e <tcp_kill_prio+0x36>
      mprio = pcb->prio;
 8007a58:	462a      	mov	r2, r5
      inactivity = tcp_ticks - pcb->tmr;
 8007a5a:	460c      	mov	r4, r1
      inactive = pcb;
 8007a5c:	4618      	mov	r0, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	e7ec      	b.n	8007a3c <tcp_kill_prio+0x14>
 8007a62:	bf00      	nop
 8007a64:	20007b2c 	.word	0x20007b2c
 8007a68:	20007b30 	.word	0x20007b30

08007a6c <tcp_netif_ipv4_addr_changed_pcblist>:

#if LWIP_IPV4
/** Helper function for tcp_netif_ipv4_addr_changed() that iterates a pcb list */
static void
tcp_netif_ipv4_addr_changed_pcblist(const ip4_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8007a6c:	b538      	push	{r3, r4, r5, lr}
 8007a6e:	4604      	mov	r4, r0
 8007a70:	4608      	mov	r0, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 8007a72:	e003      	b.n	8007a7c <tcp_netif_ipv4_addr_changed_pcblist+0x10>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007a74:	68c5      	ldr	r5, [r0, #12]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007a76:	f7ff ffb7 	bl	80079e8 <tcp_abort>
      pcb = next;
 8007a7a:	4628      	mov	r0, r5
  while (pcb != NULL) {
 8007a7c:	b128      	cbz	r0, 8007a8a <tcp_netif_ipv4_addr_changed_pcblist+0x1e>
    if (!IP_IS_V6_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), old_addr)
 8007a7e:	6802      	ldr	r2, [r0, #0]
 8007a80:	6823      	ldr	r3, [r4, #0]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d0f6      	beq.n	8007a74 <tcp_netif_ipv4_addr_changed_pcblist+0x8>
    } else {
      pcb = pcb->next;
 8007a86:	68c0      	ldr	r0, [r0, #12]
 8007a88:	e7f8      	b.n	8007a7c <tcp_netif_ipv4_addr_changed_pcblist+0x10>
    }
  }
}
 8007a8a:	bd38      	pop	{r3, r4, r5, pc}

08007a8c <tcp_kill_state>:
{
 8007a8c:	b538      	push	{r3, r4, r5, lr}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a8e:	4b0c      	ldr	r3, [pc, #48]	; (8007ac0 <tcp_kill_state+0x34>)
 8007a90:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8007a92:	2100      	movs	r1, #0
  inactive = NULL;
 8007a94:	460d      	mov	r5, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a96:	e000      	b.n	8007a9a <tcp_kill_state+0xe>
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	b15b      	cbz	r3, 8007ab4 <tcp_kill_state+0x28>
    if (pcb->state == state) {
 8007a9c:	7e1a      	ldrb	r2, [r3, #24]
 8007a9e:	4290      	cmp	r0, r2
 8007aa0:	d1fa      	bne.n	8007a98 <tcp_kill_state+0xc>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007aa2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007aa4:	4a07      	ldr	r2, [pc, #28]	; (8007ac4 <tcp_kill_state+0x38>)
 8007aa6:	6812      	ldr	r2, [r2, #0]
 8007aa8:	1b12      	subs	r2, r2, r4
 8007aaa:	4291      	cmp	r1, r2
 8007aac:	d8f4      	bhi.n	8007a98 <tcp_kill_state+0xc>
        inactivity = tcp_ticks - pcb->tmr;
 8007aae:	4611      	mov	r1, r2
        inactive = pcb;
 8007ab0:	461d      	mov	r5, r3
 8007ab2:	e7f1      	b.n	8007a98 <tcp_kill_state+0xc>
  if (inactive != NULL) {
 8007ab4:	b11d      	cbz	r5, 8007abe <tcp_kill_state+0x32>
    tcp_abandon(inactive, 0);
 8007ab6:	2100      	movs	r1, #0
 8007ab8:	4628      	mov	r0, r5
 8007aba:	f7ff ff31 	bl	8007920 <tcp_abandon>
 8007abe:	bd38      	pop	{r3, r4, r5, pc}
 8007ac0:	20007b2c 	.word	0x20007b2c
 8007ac4:	20007b30 	.word	0x20007b30

08007ac8 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8007ac8:	4b03      	ldr	r3, [pc, #12]	; (8007ad8 <tcp_next_iss+0x10>)
 8007aca:	6818      	ldr	r0, [r3, #0]
 8007acc:	4a03      	ldr	r2, [pc, #12]	; (8007adc <tcp_next_iss+0x14>)
 8007ace:	6812      	ldr	r2, [r2, #0]
 8007ad0:	4410      	add	r0, r2
 8007ad2:	6018      	str	r0, [r3, #0]
}
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	20000038 	.word	0x20000038
 8007adc:	20007b30 	.word	0x20007b30

08007ae0 <tcp_alloc>:
{
 8007ae0:	b538      	push	{r3, r4, r5, lr}
 8007ae2:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007ae4:	2001      	movs	r0, #1
 8007ae6:	f7fe ffc7 	bl	8006a78 <memp_malloc>
  if (pcb == NULL) {
 8007aea:	4604      	mov	r4, r0
 8007aec:	2800      	cmp	r0, #0
 8007aee:	d03d      	beq.n	8007b6c <tcp_alloc+0x8c>
  if (pcb != NULL) {
 8007af0:	2c00      	cmp	r4, #0
 8007af2:	d039      	beq.n	8007b68 <tcp_alloc+0x88>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007af4:	2298      	movs	r2, #152	; 0x98
 8007af6:	2100      	movs	r1, #0
 8007af8:	4620      	mov	r0, r4
 8007afa:	f004 f8cb 	bl	800bc94 <memset>
    pcb->prio = prio;
 8007afe:	7665      	strb	r5, [r4, #25]
    pcb->snd_buf = TCP_SND_BUF;
 8007b00:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8007b04:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    pcb->snd_queuelen = 0;
 8007b08:	2500      	movs	r5, #0
 8007b0a:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007b0e:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8007b12:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8007b14:	85a3      	strh	r3, [r4, #44]	; 0x2c
    pcb->tos = 0;
 8007b16:	7265      	strb	r5, [r4, #9]
    pcb->ttl = TCP_TTL;
 8007b18:	23ff      	movs	r3, #255	; 0xff
 8007b1a:	72a3      	strb	r3, [r4, #10]
    pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
 8007b1c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8007b20:	86e3      	strh	r3, [r4, #54]	; 0x36
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007b22:	2306      	movs	r3, #6
 8007b24:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    pcb->sa = 0;
 8007b28:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007b2c:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    pcb->rtime = -1;
 8007b30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007b34:	86a3      	strh	r3, [r4, #52]	; 0x34
    pcb->cwnd = 1;
 8007b36:	2301      	movs	r3, #1
 8007b38:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    iss = tcp_next_iss();
 8007b3c:	f7ff ffc4 	bl	8007ac8 <tcp_next_iss>
    pcb->snd_wl2 = iss;
 8007b40:	65a0      	str	r0, [r4, #88]	; 0x58
    pcb->snd_nxt = iss;
 8007b42:	6520      	str	r0, [r4, #80]	; 0x50
    pcb->lastack = iss;
 8007b44:	64a0      	str	r0, [r4, #72]	; 0x48
    pcb->snd_lbb = iss;
 8007b46:	65e0      	str	r0, [r4, #92]	; 0x5c
    pcb->tmr = tcp_ticks;
 8007b48:	4b19      	ldr	r3, [pc, #100]	; (8007bb0 <tcp_alloc+0xd0>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6263      	str	r3, [r4, #36]	; 0x24
    pcb->last_timer = tcp_timer_ctr;
 8007b4e:	4b19      	ldr	r3, [pc, #100]	; (8007bb4 <tcp_alloc+0xd4>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    pcb->polltmr = 0;
 8007b56:	77e5      	strb	r5, [r4, #31]
    pcb->recv = tcp_recv_null;
 8007b58:	4b17      	ldr	r3, [pc, #92]	; (8007bb8 <tcp_alloc+0xd8>)
 8007b5a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007b5e:	4b17      	ldr	r3, [pc, #92]	; (8007bbc <tcp_alloc+0xdc>)
 8007b60:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    pcb->keep_cnt_sent = 0;
 8007b64:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
}
 8007b68:	4620      	mov	r0, r4
 8007b6a:	bd38      	pop	{r3, r4, r5, pc}
    tcp_kill_timewait();
 8007b6c:	f7ff ff42 	bl	80079f4 <tcp_kill_timewait>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b70:	2001      	movs	r0, #1
 8007b72:	f7fe ff81 	bl	8006a78 <memp_malloc>
    if (pcb == NULL) {
 8007b76:	4604      	mov	r4, r0
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	d1b9      	bne.n	8007af0 <tcp_alloc+0x10>
      tcp_kill_state(LAST_ACK);
 8007b7c:	2009      	movs	r0, #9
 8007b7e:	f7ff ff85 	bl	8007a8c <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b82:	2001      	movs	r0, #1
 8007b84:	f7fe ff78 	bl	8006a78 <memp_malloc>
      if (pcb == NULL) {
 8007b88:	4604      	mov	r4, r0
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	d1b0      	bne.n	8007af0 <tcp_alloc+0x10>
        tcp_kill_state(CLOSING);
 8007b8e:	2008      	movs	r0, #8
 8007b90:	f7ff ff7c 	bl	8007a8c <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b94:	2001      	movs	r0, #1
 8007b96:	f7fe ff6f 	bl	8006a78 <memp_malloc>
        if (pcb == NULL) {
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	d1a7      	bne.n	8007af0 <tcp_alloc+0x10>
          tcp_kill_prio(prio);
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	f7ff ff41 	bl	8007a28 <tcp_kill_prio>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007ba6:	2001      	movs	r0, #1
 8007ba8:	f7fe ff66 	bl	8006a78 <memp_malloc>
 8007bac:	4604      	mov	r4, r0
 8007bae:	e79f      	b.n	8007af0 <tcp_alloc+0x10>
 8007bb0:	20007b30 	.word	0x20007b30
 8007bb4:	20003ec6 	.word	0x20003ec6
 8007bb8:	080077a1 	.word	0x080077a1
 8007bbc:	006ddd00 	.word	0x006ddd00

08007bc0 <tcp_new>:
{
 8007bc0:	b508      	push	{r3, lr}
  return tcp_alloc(TCP_PRIO_NORMAL);
 8007bc2:	2040      	movs	r0, #64	; 0x40
 8007bc4:	f7ff ff8c 	bl	8007ae0 <tcp_alloc>
}
 8007bc8:	bd08      	pop	{r3, pc}

08007bca <tcp_eff_send_mss_impl>:
{
 8007bca:	b510      	push	{r4, lr}
 8007bcc:	4604      	mov	r4, r0
  outif = ip_route(isipv6, src, dest);
 8007bce:	4608      	mov	r0, r1
 8007bd0:	f7fd ff84 	bl	8005adc <ip4_route>
    if (outif == NULL) {
 8007bd4:	b138      	cbz	r0, 8007be6 <tcp_eff_send_mss_impl+0x1c>
    mtu = outif->mtu;
 8007bd6:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
  if (mtu != 0) {
 8007bd8:	b13b      	cbz	r3, 8007bea <tcp_eff_send_mss_impl+0x20>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8007bda:	3b28      	subs	r3, #40	; 0x28
 8007bdc:	b298      	uxth	r0, r3
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007bde:	42a0      	cmp	r0, r4
 8007be0:	bf28      	it	cs
 8007be2:	4620      	movcs	r0, r4
 8007be4:	bd10      	pop	{r4, pc}
      return sendmss;
 8007be6:	4620      	mov	r0, r4
 8007be8:	bd10      	pop	{r4, pc}
 8007bea:	4620      	mov	r0, r4
}
 8007bec:	bd10      	pop	{r4, pc}
	...

08007bf0 <tcp_connect>:
{
 8007bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	d066      	beq.n	8007cc4 <tcp_connect+0xd4>
 8007bf6:	4604      	mov	r4, r0
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8007bf8:	7e00      	ldrb	r0, [r0, #24]
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	d165      	bne.n	8007cca <tcp_connect+0xda>
  if (ipaddr != NULL) {
 8007bfe:	2900      	cmp	r1, #0
 8007c00:	d066      	beq.n	8007cd0 <tcp_connect+0xe0>
 8007c02:	461e      	mov	r6, r3
    ip_addr_set(&pcb->remote_ip, ipaddr);
 8007c04:	680b      	ldr	r3, [r1, #0]
 8007c06:	6063      	str	r3, [r4, #4]
  pcb->remote_port = port;
 8007c08:	83a2      	strh	r2, [r4, #28]
  if (ip_addr_isany(&pcb->local_ip)) {
 8007c0a:	b10c      	cbz	r4, 8007c10 <tcp_connect+0x20>
 8007c0c:	6823      	ldr	r3, [r4, #0]
 8007c0e:	b963      	cbnz	r3, 8007c2a <tcp_connect+0x3a>
    ip_route_get_local_ip(PCB_ISIPV6(pcb), &pcb->local_ip, &pcb->remote_ip, netif, local_ip);
 8007c10:	1d20      	adds	r0, r4, #4
 8007c12:	f7fd ff63 	bl	8005adc <ip4_route>
 8007c16:	4602      	mov	r2, r0
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	d03d      	beq.n	8007c98 <tcp_connect+0xa8>
 8007c1c:	1d03      	adds	r3, r0, #4
    if ((netif == NULL) || (local_ip == NULL)) {
 8007c1e:	2a00      	cmp	r2, #0
 8007c20:	d059      	beq.n	8007cd6 <tcp_connect+0xe6>
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d05a      	beq.n	8007cdc <tcp_connect+0xec>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6023      	str	r3, [r4, #0]
  old_local_port = pcb->local_port;
 8007c2a:	8b67      	ldrh	r7, [r4, #26]
  if (pcb->local_port == 0) {
 8007c2c:	b927      	cbnz	r7, 8007c38 <tcp_connect+0x48>
    pcb->local_port = tcp_new_port();
 8007c2e:	f7ff fa61 	bl	80070f4 <tcp_new_port>
 8007c32:	8360      	strh	r0, [r4, #26]
    if (pcb->local_port == 0) {
 8007c34:	2800      	cmp	r0, #0
 8007c36:	d054      	beq.n	8007ce2 <tcp_connect+0xf2>
  iss = tcp_next_iss();
 8007c38:	f7ff ff46 	bl	8007ac8 <tcp_next_iss>
  pcb->rcv_nxt = 0;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	62a3      	str	r3, [r4, #40]	; 0x28
  pcb->snd_nxt = iss;
 8007c40:	6520      	str	r0, [r4, #80]	; 0x50
  pcb->lastack = iss - 1;
 8007c42:	3801      	subs	r0, #1
 8007c44:	64a0      	str	r0, [r4, #72]	; 0x48
  pcb->snd_lbb = iss - 1;
 8007c46:	65e0      	str	r0, [r4, #92]	; 0x5c
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007c48:	f44f 6506 	mov.w	r5, #2144	; 0x860
 8007c4c:	85e5      	strh	r5, [r4, #46]	; 0x2e
 8007c4e:	85a5      	strh	r5, [r4, #44]	; 0x2c
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007c50:	6323      	str	r3, [r4, #48]	; 0x30
  pcb->snd_wnd = TCP_WND;
 8007c52:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
 8007c56:	f44f 7006 	mov.w	r0, #536	; 0x218
 8007c5a:	86e0      	strh	r0, [r4, #54]	; 0x36
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip, PCB_ISIPV6(pcb));
 8007c5c:	1d21      	adds	r1, r4, #4
 8007c5e:	f7ff ffb4 	bl	8007bca <tcp_eff_send_mss_impl>
 8007c62:	86e0      	strh	r0, [r4, #54]	; 0x36
  pcb->cwnd = 1;
 8007c64:	2301      	movs	r3, #1
 8007c66:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  pcb->ssthresh = TCP_WND;
 8007c6a:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  pcb->connected = connected;
 8007c6e:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8007c72:	2102      	movs	r1, #2
 8007c74:	4620      	mov	r0, r4
 8007c76:	f001 fd5a 	bl	800972e <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 8007c7a:	4605      	mov	r5, r0
 8007c7c:	bb00      	cbnz	r0, 8007cc0 <tcp_connect+0xd0>
    pcb->state = SYN_SENT;
 8007c7e:	2302      	movs	r3, #2
 8007c80:	7623      	strb	r3, [r4, #24]
    if (old_local_port != 0) {
 8007c82:	b18f      	cbz	r7, 8007ca8 <tcp_connect+0xb8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8007c84:	4b18      	ldr	r3, [pc, #96]	; (8007ce8 <tcp_connect+0xf8>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	429c      	cmp	r4, r3
 8007c8a:	d007      	beq.n	8007c9c <tcp_connect+0xac>
 8007c8c:	b163      	cbz	r3, 8007ca8 <tcp_connect+0xb8>
 8007c8e:	68da      	ldr	r2, [r3, #12]
 8007c90:	4294      	cmp	r4, r2
 8007c92:	d007      	beq.n	8007ca4 <tcp_connect+0xb4>
 8007c94:	4613      	mov	r3, r2
 8007c96:	e7f9      	b.n	8007c8c <tcp_connect+0x9c>
    ip_route_get_local_ip(PCB_ISIPV6(pcb), &pcb->local_ip, &pcb->remote_ip, netif, local_ip);
 8007c98:	2300      	movs	r3, #0
 8007c9a:	e7c0      	b.n	8007c1e <tcp_connect+0x2e>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8007c9c:	68da      	ldr	r2, [r3, #12]
 8007c9e:	4b12      	ldr	r3, [pc, #72]	; (8007ce8 <tcp_connect+0xf8>)
 8007ca0:	601a      	str	r2, [r3, #0]
 8007ca2:	e001      	b.n	8007ca8 <tcp_connect+0xb8>
 8007ca4:	68e2      	ldr	r2, [r4, #12]
 8007ca6:	60da      	str	r2, [r3, #12]
    TCP_REG_ACTIVE(pcb);
 8007ca8:	4b10      	ldr	r3, [pc, #64]	; (8007cec <tcp_connect+0xfc>)
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	60e2      	str	r2, [r4, #12]
 8007cae:	601c      	str	r4, [r3, #0]
 8007cb0:	f7fe fcae 	bl	8006610 <tcp_timer_needed>
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	4b0e      	ldr	r3, [pc, #56]	; (8007cf0 <tcp_connect+0x100>)
 8007cb8:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 8007cba:	4620      	mov	r0, r4
 8007cbc:	f001 fdfe 	bl	80098bc <tcp_output>
}
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 8007cc4:	f06f 0505 	mvn.w	r5, #5
 8007cc8:	e7fa      	b.n	8007cc0 <tcp_connect+0xd0>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8007cca:	f06f 0509 	mvn.w	r5, #9
 8007cce:	e7f7      	b.n	8007cc0 <tcp_connect+0xd0>
    return ERR_VAL;
 8007cd0:	f06f 0505 	mvn.w	r5, #5
 8007cd4:	e7f4      	b.n	8007cc0 <tcp_connect+0xd0>
      return ERR_RTE;
 8007cd6:	f06f 0503 	mvn.w	r5, #3
 8007cda:	e7f1      	b.n	8007cc0 <tcp_connect+0xd0>
 8007cdc:	f06f 0503 	mvn.w	r5, #3
 8007ce0:	e7ee      	b.n	8007cc0 <tcp_connect+0xd0>
      return ERR_BUF;
 8007ce2:	f06f 0501 	mvn.w	r5, #1
 8007ce6:	e7eb      	b.n	8007cc0 <tcp_connect+0xd0>
 8007ce8:	20007b38 	.word	0x20007b38
 8007cec:	20007b2c 	.word	0x20007b2c
 8007cf0:	20007b28 	.word	0x20007b28

08007cf4 <tcp_netif_ipv4_addr_changed>:
 *
 * @param old_addr IPv4 address of the netif before change
 * @param new_addr IPv4 address of the netif after change or NULL if netif has been removed
 */
void tcp_netif_ipv4_addr_changed(const ip4_addr_t* old_addr, const ip4_addr_t* new_addr)
{
 8007cf4:	b538      	push	{r3, r4, r5, lr}
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb, *next;

  tcp_netif_ipv4_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007cfa:	4b0f      	ldr	r3, [pc, #60]	; (8007d38 <tcp_netif_ipv4_addr_changed+0x44>)
 8007cfc:	6819      	ldr	r1, [r3, #0]
 8007cfe:	f7ff feb5 	bl	8007a6c <tcp_netif_ipv4_addr_changed_pcblist>
  tcp_netif_ipv4_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007d02:	4b0e      	ldr	r3, [pc, #56]	; (8007d3c <tcp_netif_ipv4_addr_changed+0x48>)
 8007d04:	6819      	ldr	r1, [r3, #0]
 8007d06:	4620      	mov	r0, r4
 8007d08:	f7ff feb0 	bl	8007a6c <tcp_netif_ipv4_addr_changed_pcblist>

  if (!ip4_addr_isany(new_addr)) {
 8007d0c:	b195      	cbz	r5, 8007d34 <tcp_netif_ipv4_addr_changed+0x40>
 8007d0e:	682b      	ldr	r3, [r5, #0]
 8007d10:	b183      	cbz	r3, 8007d34 <tcp_netif_ipv4_addr_changed+0x40>
    /* PCB bound to current local interface address? */
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8007d12:	4b0b      	ldr	r3, [pc, #44]	; (8007d40 <tcp_netif_ipv4_addr_changed+0x4c>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	e000      	b.n	8007d1a <tcp_netif_ipv4_addr_changed+0x26>
{
 8007d18:	460b      	mov	r3, r1
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8007d1a:	b15b      	cbz	r3, 8007d34 <tcp_netif_ipv4_addr_changed+0x40>
      next = lpcb->next;
 8007d1c:	68d9      	ldr	r1, [r3, #12]
      /* Is this an IPv4 pcb? */
      if (!IP_IS_V6_VAL(lpcb->local_ip)) {
        /* PCB bound to current local interface address? */
        if ((!(ip4_addr_isany(ip_2_ip4(&lpcb->local_ip)))) &&
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d0fa      	beq.n	8007d18 <tcp_netif_ipv4_addr_changed+0x24>
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	2a00      	cmp	r2, #0
 8007d26:	d0f7      	beq.n	8007d18 <tcp_netif_ipv4_addr_changed+0x24>
            (ip4_addr_cmp(ip_2_ip4(&lpcb->local_ip), old_addr))) {
 8007d28:	6820      	ldr	r0, [r4, #0]
        if ((!(ip4_addr_isany(ip_2_ip4(&lpcb->local_ip)))) &&
 8007d2a:	4282      	cmp	r2, r0
 8007d2c:	d1f4      	bne.n	8007d18 <tcp_netif_ipv4_addr_changed+0x24>
          /* The PCB is listening to the old ipaddr and
           * is set to listen to the new one instead */
              ip_addr_copy_from_ip4(lpcb->local_ip, *new_addr);
 8007d2e:	682a      	ldr	r2, [r5, #0]
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	e7f1      	b.n	8007d18 <tcp_netif_ipv4_addr_changed+0x24>
 8007d34:	bd38      	pop	{r3, r4, r5, pc}
 8007d36:	bf00      	nop
 8007d38:	20007b2c 	.word	0x20007b2c
 8007d3c:	20007b38 	.word	0x20007b38
 8007d40:	20007b34 	.word	0x20007b34

08007d44 <tcp_getoptbyte>:
}

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8007d44:	4b0e      	ldr	r3, [pc, #56]	; (8007d80 <tcp_getoptbyte+0x3c>)
 8007d46:	6819      	ldr	r1, [r3, #0]
 8007d48:	b189      	cbz	r1, 8007d6e <tcp_getoptbyte+0x2a>
 8007d4a:	4b0e      	ldr	r3, [pc, #56]	; (8007d84 <tcp_getoptbyte+0x40>)
 8007d4c:	881b      	ldrh	r3, [r3, #0]
 8007d4e:	4a0e      	ldr	r2, [pc, #56]	; (8007d88 <tcp_getoptbyte+0x44>)
 8007d50:	8812      	ldrh	r2, [r2, #0]
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d30b      	bcc.n	8007d6e <tcp_getoptbyte+0x2a>
{
 8007d56:	b410      	push	{r4}
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[tcp_optidx++];
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8007d58:	1c5c      	adds	r4, r3, #1
 8007d5a:	480a      	ldr	r0, [pc, #40]	; (8007d84 <tcp_getoptbyte+0x40>)
 8007d5c:	8004      	strh	r4, [r0, #0]
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	b2d2      	uxtb	r2, r2
 8007d62:	1a9b      	subs	r3, r3, r2
 8007d64:	b2db      	uxtb	r3, r3
    return tcphdr_opt2[idx];
 8007d66:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 8007d68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d6c:	4770      	bx	lr
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8007d6e:	4b07      	ldr	r3, [pc, #28]	; (8007d8c <tcp_getoptbyte+0x48>)
 8007d70:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 8007d72:	4904      	ldr	r1, [pc, #16]	; (8007d84 <tcp_getoptbyte+0x40>)
 8007d74:	880a      	ldrh	r2, [r1, #0]
 8007d76:	1c50      	adds	r0, r2, #1
 8007d78:	8008      	strh	r0, [r1, #0]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	7d18      	ldrb	r0, [r3, #20]
 8007d7e:	4770      	bx	lr
 8007d80:	20003ef8 	.word	0x20003ef8
 8007d84:	20003eec 	.word	0x20003eec
 8007d88:	20003ef4 	.word	0x20003ef4
 8007d8c:	20003ef0 	.word	0x20003ef0

08007d90 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8007d90:	b570      	push	{r4, r5, r6, lr}
 8007d92:	4605      	mov	r5, r0
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (TCPH_HDRLEN(tcphdr) > 0x5) {
 8007d94:	4b23      	ldr	r3, [pc, #140]	; (8007e24 <tcp_parseopt+0x94>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	8998      	ldrh	r0, [r3, #12]
 8007d9a:	f7fd fdaa 	bl	80058f2 <lwip_ntohs>
 8007d9e:	f3c0 300f 	ubfx	r0, r0, #12, #16
 8007da2:	2805      	cmp	r0, #5
 8007da4:	d800      	bhi.n	8007da8 <tcp_parseopt+0x18>
 8007da6:	bd70      	pop	{r4, r5, r6, pc}
    u16_t max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
 8007da8:	4b1e      	ldr	r3, [pc, #120]	; (8007e24 <tcp_parseopt+0x94>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	8998      	ldrh	r0, [r3, #12]
 8007dae:	f7fd fda0 	bl	80058f2 <lwip_ntohs>
 8007db2:	0b04      	lsrs	r4, r0, #12
 8007db4:	3c05      	subs	r4, #5
 8007db6:	b2a4      	uxth	r4, r4
 8007db8:	00a4      	lsls	r4, r4, #2
 8007dba:	b2a4      	uxth	r4, r4
    for (tcp_optidx = 0; tcp_optidx < max_c; ) {
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	4b1a      	ldr	r3, [pc, #104]	; (8007e28 <tcp_parseopt+0x98>)
 8007dc0:	801a      	strh	r2, [r3, #0]
 8007dc2:	4b19      	ldr	r3, [pc, #100]	; (8007e28 <tcp_parseopt+0x98>)
 8007dc4:	881b      	ldrh	r3, [r3, #0]
 8007dc6:	429c      	cmp	r4, r3
 8007dc8:	d9ed      	bls.n	8007da6 <tcp_parseopt+0x16>
      u8_t opt = tcp_getoptbyte();
 8007dca:	f7ff ffbb 	bl	8007d44 <tcp_getoptbyte>
      switch (opt) {
 8007dce:	2801      	cmp	r0, #1
 8007dd0:	d0f7      	beq.n	8007dc2 <tcp_parseopt+0x32>
 8007dd2:	2800      	cmp	r0, #0
 8007dd4:	d0e7      	beq.n	8007da6 <tcp_parseopt+0x16>
 8007dd6:	2802      	cmp	r0, #2
 8007dd8:	d11a      	bne.n	8007e10 <tcp_parseopt+0x80>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > max_c) {
 8007dda:	f7ff ffb3 	bl	8007d44 <tcp_getoptbyte>
 8007dde:	2804      	cmp	r0, #4
 8007de0:	d1e1      	bne.n	8007da6 <tcp_parseopt+0x16>
 8007de2:	4b11      	ldr	r3, [pc, #68]	; (8007e28 <tcp_parseopt+0x98>)
 8007de4:	881b      	ldrh	r3, [r3, #0]
 8007de6:	3302      	adds	r3, #2
 8007de8:	42a3      	cmp	r3, r4
 8007dea:	dcdc      	bgt.n	8007da6 <tcp_parseopt+0x16>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8007dec:	f7ff ffaa 	bl	8007d44 <tcp_getoptbyte>
 8007df0:	b280      	uxth	r0, r0
 8007df2:	0200      	lsls	r0, r0, #8
 8007df4:	b286      	uxth	r6, r0
        mss |= tcp_getoptbyte();
 8007df6:	f7ff ffa5 	bl	8007d44 <tcp_getoptbyte>
 8007dfa:	b280      	uxth	r0, r0
 8007dfc:	4330      	orrs	r0, r6
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8007dfe:	1e43      	subs	r3, r0, #1
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007e06:	d301      	bcc.n	8007e0c <tcp_parseopt+0x7c>
 8007e08:	f44f 7006 	mov.w	r0, #536	; 0x218
 8007e0c:	86e8      	strh	r0, [r5, #54]	; 0x36
        break;
 8007e0e:	e7d8      	b.n	8007dc2 <tcp_parseopt+0x32>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8007e10:	f7ff ff98 	bl	8007d44 <tcp_getoptbyte>
        if (data < 2) {
 8007e14:	2801      	cmp	r0, #1
 8007e16:	d9c6      	bls.n	8007da6 <tcp_parseopt+0x16>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8007e18:	4b03      	ldr	r3, [pc, #12]	; (8007e28 <tcp_parseopt+0x98>)
 8007e1a:	881a      	ldrh	r2, [r3, #0]
 8007e1c:	4410      	add	r0, r2
 8007e1e:	3802      	subs	r0, #2
 8007e20:	8018      	strh	r0, [r3, #0]
 8007e22:	e7ce      	b.n	8007dc2 <tcp_parseopt+0x32>
 8007e24:	20003ef0 	.word	0x20003ef0
 8007e28:	20003eec 	.word	0x20003eec

08007e2c <tcp_timewait_input>:
  if (flags & TCP_RST) {
 8007e2c:	4b1d      	ldr	r3, [pc, #116]	; (8007ea4 <tcp_timewait_input+0x78>)
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	f013 0f04 	tst.w	r3, #4
 8007e34:	d132      	bne.n	8007e9c <tcp_timewait_input+0x70>
{
 8007e36:	b510      	push	{r4, lr}
 8007e38:	b082      	sub	sp, #8
  if (flags & TCP_SYN) {
 8007e3a:	f013 0f02 	tst.w	r3, #2
 8007e3e:	d01d      	beq.n	8007e7c <tcp_timewait_input+0x50>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007e40:	4b19      	ldr	r3, [pc, #100]	; (8007ea8 <tcp_timewait_input+0x7c>)
 8007e42:	6819      	ldr	r1, [r3, #0]
 8007e44:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007e46:	1aca      	subs	r2, r1, r3
 8007e48:	2a00      	cmp	r2, #0
 8007e4a:	db1d      	blt.n	8007e88 <tcp_timewait_input+0x5c>
 8007e4c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8007e4e:	4413      	add	r3, r2
 8007e50:	1acb      	subs	r3, r1, r3
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	dc18      	bgt.n	8007e88 <tcp_timewait_input+0x5c>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007e56:	4b15      	ldr	r3, [pc, #84]	; (8007eac <tcp_timewait_input+0x80>)
 8007e58:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e5a:	4a15      	ldr	r2, [pc, #84]	; (8007eb0 <tcp_timewait_input+0x84>)
 8007e5c:	4815      	ldr	r0, [pc, #84]	; (8007eb4 <tcp_timewait_input+0x88>)
 8007e5e:	8800      	ldrh	r0, [r0, #0]
 8007e60:	881c      	ldrh	r4, [r3, #0]
 8007e62:	9401      	str	r4, [sp, #4]
 8007e64:	885b      	ldrh	r3, [r3, #2]
 8007e66:	9300      	str	r3, [sp, #0]
 8007e68:	4613      	mov	r3, r2
 8007e6a:	3204      	adds	r2, #4
 8007e6c:	4401      	add	r1, r0
 8007e6e:	4812      	ldr	r0, [pc, #72]	; (8007eb8 <tcp_timewait_input+0x8c>)
 8007e70:	6800      	ldr	r0, [r0, #0]
 8007e72:	f001 fe1d 	bl	8009ab0 <tcp_rst>
      return ERR_OK;
 8007e76:	2000      	movs	r0, #0
}
 8007e78:	b002      	add	sp, #8
 8007e7a:	bd10      	pop	{r4, pc}
  } else if (flags & TCP_FIN) {
 8007e7c:	f013 0f01 	tst.w	r3, #1
 8007e80:	d002      	beq.n	8007e88 <tcp_timewait_input+0x5c>
    pcb->tmr = tcp_ticks;
 8007e82:	4b0e      	ldr	r3, [pc, #56]	; (8007ebc <tcp_timewait_input+0x90>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	6243      	str	r3, [r0, #36]	; 0x24
  if ((tcplen > 0)) {
 8007e88:	4b0a      	ldr	r3, [pc, #40]	; (8007eb4 <tcp_timewait_input+0x88>)
 8007e8a:	881b      	ldrh	r3, [r3, #0]
 8007e8c:	b143      	cbz	r3, 8007ea0 <tcp_timewait_input+0x74>
    pcb->flags |= TF_ACK_NOW;
 8007e8e:	7f83      	ldrb	r3, [r0, #30]
 8007e90:	f043 0302 	orr.w	r3, r3, #2
 8007e94:	7783      	strb	r3, [r0, #30]
    return tcp_output(pcb);
 8007e96:	f001 fd11 	bl	80098bc <tcp_output>
 8007e9a:	e7ed      	b.n	8007e78 <tcp_timewait_input+0x4c>
    return ERR_OK;
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	4770      	bx	lr
  return ERR_OK;
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	e7e9      	b.n	8007e78 <tcp_timewait_input+0x4c>
 8007ea4:	20003ecc 	.word	0x20003ecc
 8007ea8:	20003ee8 	.word	0x20003ee8
 8007eac:	20003ef0 	.word	0x20003ef0
 8007eb0:	20004068 	.word	0x20004068
 8007eb4:	20003efc 	.word	0x20003efc
 8007eb8:	20003ec8 	.word	0x20003ec8
 8007ebc:	20007b30 	.word	0x20007b30

08007ec0 <tcp_listen_input>:
{
 8007ec0:	b570      	push	{r4, r5, r6, lr}
 8007ec2:	b082      	sub	sp, #8
  if (flags & TCP_RST) {
 8007ec4:	4b39      	ldr	r3, [pc, #228]	; (8007fac <tcp_listen_input+0xec>)
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	f013 0f04 	tst.w	r3, #4
 8007ecc:	d167      	bne.n	8007f9e <tcp_listen_input+0xde>
 8007ece:	4605      	mov	r5, r0
  if (flags & TCP_ACK) {
 8007ed0:	f013 0f10 	tst.w	r3, #16
 8007ed4:	d104      	bne.n	8007ee0 <tcp_listen_input+0x20>
  } else if (flags & TCP_SYN) {
 8007ed6:	f013 0f02 	tst.w	r3, #2
 8007eda:	d115      	bne.n	8007f08 <tcp_listen_input+0x48>
  return ERR_OK;
 8007edc:	2500      	movs	r5, #0
 8007ede:	e05f      	b.n	8007fa0 <tcp_listen_input+0xe0>
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007ee0:	4b33      	ldr	r3, [pc, #204]	; (8007fb0 <tcp_listen_input+0xf0>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ee4:	4a33      	ldr	r2, [pc, #204]	; (8007fb4 <tcp_listen_input+0xf4>)
 8007ee6:	4934      	ldr	r1, [pc, #208]	; (8007fb8 <tcp_listen_input+0xf8>)
 8007ee8:	880c      	ldrh	r4, [r1, #0]
 8007eea:	4934      	ldr	r1, [pc, #208]	; (8007fbc <tcp_listen_input+0xfc>)
 8007eec:	6809      	ldr	r1, [r1, #0]
 8007eee:	4834      	ldr	r0, [pc, #208]	; (8007fc0 <tcp_listen_input+0x100>)
 8007ef0:	6800      	ldr	r0, [r0, #0]
 8007ef2:	881d      	ldrh	r5, [r3, #0]
 8007ef4:	9501      	str	r5, [sp, #4]
 8007ef6:	885b      	ldrh	r3, [r3, #2]
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	4613      	mov	r3, r2
 8007efc:	3204      	adds	r2, #4
 8007efe:	4421      	add	r1, r4
 8007f00:	f001 fdd6 	bl	8009ab0 <tcp_rst>
  return ERR_OK;
 8007f04:	2500      	movs	r5, #0
 8007f06:	e04b      	b.n	8007fa0 <tcp_listen_input+0xe0>
    npcb = tcp_alloc(pcb->prio);
 8007f08:	7e40      	ldrb	r0, [r0, #25]
 8007f0a:	f7ff fde9 	bl	8007ae0 <tcp_alloc>
    if (npcb == NULL) {
 8007f0e:	4604      	mov	r4, r0
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d048      	beq.n	8007fa6 <tcp_listen_input+0xe6>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007f14:	4b2b      	ldr	r3, [pc, #172]	; (8007fc4 <tcp_listen_input+0x104>)
 8007f16:	695a      	ldr	r2, [r3, #20]
 8007f18:	6002      	str	r2, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8007f1e:	8b6b      	ldrh	r3, [r5, #26]
 8007f20:	8343      	strh	r3, [r0, #26]
    npcb->remote_port = tcphdr->src;
 8007f22:	4e23      	ldr	r6, [pc, #140]	; (8007fb0 <tcp_listen_input+0xf0>)
 8007f24:	6833      	ldr	r3, [r6, #0]
 8007f26:	881b      	ldrh	r3, [r3, #0]
 8007f28:	8383      	strh	r3, [r0, #28]
    npcb->state = SYN_RCVD;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	7603      	strb	r3, [r0, #24]
    npcb->rcv_nxt = seqno + 1;
 8007f2e:	4b23      	ldr	r3, [pc, #140]	; (8007fbc <tcp_listen_input+0xfc>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	1c5a      	adds	r2, r3, #1
 8007f34:	6282      	str	r2, [r0, #40]	; 0x28
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007f36:	6302      	str	r2, [r0, #48]	; 0x30
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	6543      	str	r3, [r0, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007f3c:	692b      	ldr	r3, [r5, #16]
 8007f3e:	6103      	str	r3, [r0, #16]
    npcb->accept = pcb->accept;
 8007f40:	696b      	ldr	r3, [r5, #20]
 8007f42:	6143      	str	r3, [r0, #20]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007f44:	7a2b      	ldrb	r3, [r5, #8]
 8007f46:	f003 030c 	and.w	r3, r3, #12
 8007f4a:	7203      	strb	r3, [r0, #8]
    TCP_REG_ACTIVE(npcb);
 8007f4c:	4b1e      	ldr	r3, [pc, #120]	; (8007fc8 <tcp_listen_input+0x108>)
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	60c2      	str	r2, [r0, #12]
 8007f52:	6018      	str	r0, [r3, #0]
 8007f54:	f7fe fb5c 	bl	8006610 <tcp_timer_needed>
 8007f58:	2201      	movs	r2, #1
 8007f5a:	4b1c      	ldr	r3, [pc, #112]	; (8007fcc <tcp_listen_input+0x10c>)
 8007f5c:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007f5e:	4620      	mov	r0, r4
 8007f60:	f7ff ff16 	bl	8007d90 <tcp_parseopt>
    npcb->snd_wnd = SND_WND_SCALE(npcb, tcphdr->wnd);
 8007f64:	6833      	ldr	r3, [r6, #0]
 8007f66:	89db      	ldrh	r3, [r3, #14]
 8007f68:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007f6c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    npcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(npcb);
 8007f70:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip,
 8007f74:	1d21      	adds	r1, r4, #4
 8007f76:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8007f78:	f7ff fe27 	bl	8007bca <tcp_eff_send_mss_impl>
 8007f7c:	86e0      	strh	r0, [r4, #54]	; 0x36
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007f7e:	2112      	movs	r1, #18
 8007f80:	4620      	mov	r0, r4
 8007f82:	f001 fbd4 	bl	800972e <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8007f86:	4605      	mov	r5, r0
 8007f88:	b920      	cbnz	r0, 8007f94 <tcp_listen_input+0xd4>
    return tcp_output(npcb);
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f001 fc96 	bl	80098bc <tcp_output>
 8007f90:	4605      	mov	r5, r0
 8007f92:	e005      	b.n	8007fa0 <tcp_listen_input+0xe0>
      tcp_abandon(npcb, 0);
 8007f94:	2100      	movs	r1, #0
 8007f96:	4620      	mov	r0, r4
 8007f98:	f7ff fcc2 	bl	8007920 <tcp_abandon>
      return rc;
 8007f9c:	e000      	b.n	8007fa0 <tcp_listen_input+0xe0>
    return ERR_OK;
 8007f9e:	2500      	movs	r5, #0
}
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	b002      	add	sp, #8
 8007fa4:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_MEM;
 8007fa6:	f04f 35ff 	mov.w	r5, #4294967295
 8007faa:	e7f9      	b.n	8007fa0 <tcp_listen_input+0xe0>
 8007fac:	20003ecc 	.word	0x20003ecc
 8007fb0:	20003ef0 	.word	0x20003ef0
 8007fb4:	20004068 	.word	0x20004068
 8007fb8:	20003efc 	.word	0x20003efc
 8007fbc:	20003ee8 	.word	0x20003ee8
 8007fc0:	20003ec8 	.word	0x20003ec8
 8007fc4:	20004058 	.word	0x20004058
 8007fc8:	20007b2c 	.word	0x20007b2c
 8007fcc:	20007b28 	.word	0x20007b28

08007fd0 <tcp_oos_insert_segment>:
{
 8007fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd2:	4605      	mov	r5, r0
 8007fd4:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007fd6:	68c3      	ldr	r3, [r0, #12]
 8007fd8:	8998      	ldrh	r0, [r3, #12]
 8007fda:	f7fd fc8a 	bl	80058f2 <lwip_ntohs>
 8007fde:	f010 0f01 	tst.w	r0, #1
 8007fe2:	d009      	beq.n	8007ff8 <tcp_oos_insert_segment+0x28>
    tcp_segs_free(next);
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	f7ff f909 	bl	80071fc <tcp_segs_free>
    next = NULL;
 8007fea:	2400      	movs	r4, #0
 8007fec:	e02e      	b.n	800804c <tcp_oos_insert_segment+0x7c>
      next = next->next;
 8007fee:	6826      	ldr	r6, [r4, #0]
      tcp_seg_free(old_seg);
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	f7ff f8f6 	bl	80071e2 <tcp_seg_free>
      next = next->next;
 8007ff6:	4634      	mov	r4, r6
    while (next &&
 8007ff8:	b1c4      	cbz	r4, 800802c <tcp_oos_insert_segment+0x5c>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8007ffa:	892b      	ldrh	r3, [r5, #8]
 8007ffc:	4a14      	ldr	r2, [pc, #80]	; (8008050 <tcp_oos_insert_segment+0x80>)
 8007ffe:	6812      	ldr	r2, [r2, #0]
 8008000:	4413      	add	r3, r2
 8008002:	68e1      	ldr	r1, [r4, #12]
 8008004:	684a      	ldr	r2, [r1, #4]
 8008006:	8920      	ldrh	r0, [r4, #8]
 8008008:	4402      	add	r2, r0
 800800a:	1a9b      	subs	r3, r3, r2
    while (next &&
 800800c:	2b00      	cmp	r3, #0
 800800e:	db0d      	blt.n	800802c <tcp_oos_insert_segment+0x5c>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008010:	8988      	ldrh	r0, [r1, #12]
 8008012:	f7fd fc6e 	bl	80058f2 <lwip_ntohs>
 8008016:	f010 0f01 	tst.w	r0, #1
 800801a:	d0e8      	beq.n	8007fee <tcp_oos_insert_segment+0x1e>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800801c:	68ef      	ldr	r7, [r5, #12]
 800801e:	89be      	ldrh	r6, [r7, #12]
 8008020:	2001      	movs	r0, #1
 8008022:	f7fd fc61 	bl	80058e8 <lwip_htons>
 8008026:	4330      	orrs	r0, r6
 8008028:	81b8      	strh	r0, [r7, #12]
 800802a:	e7e0      	b.n	8007fee <tcp_oos_insert_segment+0x1e>
    if (next &&
 800802c:	b174      	cbz	r4, 800804c <tcp_oos_insert_segment+0x7c>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800802e:	892b      	ldrh	r3, [r5, #8]
 8008030:	4a07      	ldr	r2, [pc, #28]	; (8008050 <tcp_oos_insert_segment+0x80>)
 8008032:	6811      	ldr	r1, [r2, #0]
 8008034:	440b      	add	r3, r1
 8008036:	68e2      	ldr	r2, [r4, #12]
 8008038:	6852      	ldr	r2, [r2, #4]
 800803a:	1a9b      	subs	r3, r3, r2
    if (next &&
 800803c:	2b00      	cmp	r3, #0
 800803e:	dd05      	ble.n	800804c <tcp_oos_insert_segment+0x7c>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008040:	1a52      	subs	r2, r2, r1
 8008042:	b291      	uxth	r1, r2
 8008044:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008046:	6868      	ldr	r0, [r5, #4]
 8008048:	f7fe ff68 	bl	8006f1c <pbuf_realloc>
  cseg->next = next;
 800804c:	602c      	str	r4, [r5, #0]
 800804e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008050:	20003ee8 	.word	0x20003ee8

08008054 <tcp_receive>:
{
 8008054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008058:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800805a:	7e00      	ldrb	r0, [r0, #24]
  if (flags & TCP_ACK) {
 800805c:	4bb3      	ldr	r3, [pc, #716]	; (800832c <tcp_receive+0x2d8>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	f013 0f10 	tst.w	r3, #16
 8008064:	f000 8174 	beq.w	8008350 <tcp_receive+0x2fc>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008068:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800806c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800806e:	18af      	adds	r7, r5, r2
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008070:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8008072:	4baf      	ldr	r3, [pc, #700]	; (8008330 <tcp_receive+0x2dc>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	1ace      	subs	r6, r1, r3
 8008078:	2e00      	cmp	r6, #0
 800807a:	db23      	blt.n	80080c4 <tcp_receive+0x70>
 800807c:	4299      	cmp	r1, r3
 800807e:	d016      	beq.n	80080ae <tcp_receive+0x5a>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008080:	49ac      	ldr	r1, [pc, #688]	; (8008334 <tcp_receive+0x2e0>)
 8008082:	6809      	ldr	r1, [r1, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008084:	428a      	cmp	r2, r1
 8008086:	d018      	beq.n	80080ba <tcp_receive+0x66>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008088:	4baa      	ldr	r3, [pc, #680]	; (8008334 <tcp_receive+0x2e0>)
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800808e:	1ad1      	subs	r1, r2, r3
 8008090:	2900      	cmp	r1, #0
 8008092:	dd3a      	ble.n	800810a <tcp_receive+0xb6>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8008094:	2901      	cmp	r1, #1
 8008096:	d403      	bmi.n	80080a0 <tcp_receive+0x4c>
 8008098:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800809a:	1a51      	subs	r1, r2, r1
 800809c:	2900      	cmp	r1, #0
 800809e:	dd75      	ble.n	800818c <tcp_receive+0x138>
      pcb->acked = 0;
 80080a0:	2300      	movs	r3, #0
 80080a2:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      tcp_send_empty_ack(pcb);
 80080a6:	4620      	mov	r0, r4
 80080a8:	f001 fbcf 	bl	800984a <tcp_send_empty_ack>
 80080ac:	e129      	b.n	8008302 <tcp_receive+0x2ae>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80080ae:	49a1      	ldr	r1, [pc, #644]	; (8008334 <tcp_receive+0x2e0>)
 80080b0:	6809      	ldr	r1, [r1, #0]
 80080b2:	1a51      	subs	r1, r2, r1
 80080b4:	2900      	cmp	r1, #0
 80080b6:	dae3      	bge.n	8008080 <tcp_receive+0x2c>
 80080b8:	e004      	b.n	80080c4 <tcp_receive+0x70>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80080ba:	4a9f      	ldr	r2, [pc, #636]	; (8008338 <tcp_receive+0x2e4>)
 80080bc:	6812      	ldr	r2, [r2, #0]
 80080be:	89d2      	ldrh	r2, [r2, #14]
 80080c0:	4295      	cmp	r5, r2
 80080c2:	d2e1      	bcs.n	8008088 <tcp_receive+0x34>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80080c4:	4a9c      	ldr	r2, [pc, #624]	; (8008338 <tcp_receive+0x2e4>)
 80080c6:	6812      	ldr	r2, [r2, #0]
 80080c8:	89d2      	ldrh	r2, [r2, #14]
 80080ca:	b291      	uxth	r1, r2
 80080cc:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80080d0:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 80080d4:	42a9      	cmp	r1, r5
 80080d6:	d901      	bls.n	80080dc <tcp_receive+0x88>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80080d8:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
 80080dc:	6563      	str	r3, [r4, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80080de:	4b95      	ldr	r3, [pc, #596]	; (8008334 <tcp_receive+0x2e0>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	65a3      	str	r3, [r4, #88]	; 0x58
      if (pcb->snd_wnd == 0) {
 80080e4:	b949      	cbnz	r1, 80080fa <tcp_receive+0xa6>
        if (pcb->persist_backoff == 0) {
 80080e6:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1cc      	bne.n	8008088 <tcp_receive+0x34>
          pcb->persist_cnt = 0;
 80080ee:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
 80080f2:	2301      	movs	r3, #1
 80080f4:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 80080f8:	e7c6      	b.n	8008088 <tcp_receive+0x34>
      } else if (pcb->persist_backoff > 0) {
 80080fa:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d0c2      	beq.n	8008088 <tcp_receive+0x34>
          pcb->persist_backoff = 0;
 8008102:	2300      	movs	r3, #0
 8008104:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8008108:	e7be      	b.n	8008088 <tcp_receive+0x34>
      pcb->acked = 0;
 800810a:	2100      	movs	r1, #0
 800810c:	f8a4 1064 	strh.w	r1, [r4, #100]	; 0x64
      if (tcplen == 0) {
 8008110:	498a      	ldr	r1, [pc, #552]	; (800833c <tcp_receive+0x2e8>)
 8008112:	8809      	ldrh	r1, [r1, #0]
 8008114:	bb79      	cbnz	r1, 8008176 <tcp_receive+0x122>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008116:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008118:	f8b4 0060 	ldrh.w	r0, [r4, #96]	; 0x60
 800811c:	4401      	add	r1, r0
 800811e:	428f      	cmp	r7, r1
 8008120:	d001      	beq.n	8008126 <tcp_receive+0xd2>
  int found_dupack = 0;
 8008122:	2300      	movs	r3, #0
 8008124:	e028      	b.n	8008178 <tcp_receive+0x124>
          if (pcb->rtime >= 0) {
 8008126:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 800812a:	2900      	cmp	r1, #0
 800812c:	db2a      	blt.n	8008184 <tcp_receive+0x130>
            if (pcb->lastack == ackno) {
 800812e:	429a      	cmp	r2, r3
 8008130:	d001      	beq.n	8008136 <tcp_receive+0xe2>
  int found_dupack = 0;
 8008132:	2300      	movs	r3, #0
 8008134:	e020      	b.n	8008178 <tcp_receive+0x124>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008136:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 800813a:	1c53      	adds	r3, r2, #1
 800813c:	b2db      	uxtb	r3, r3
 800813e:	429a      	cmp	r2, r3
 8008140:	d201      	bcs.n	8008146 <tcp_receive+0xf2>
                ++pcb->dupacks;
 8008142:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
              if (pcb->dupacks > 3) {
 8008146:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 800814a:	2b03      	cmp	r3, #3
 800814c:	d90a      	bls.n	8008164 <tcp_receive+0x110>
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800814e:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 8008152:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8008154:	4413      	add	r3, r2
 8008156:	b29b      	uxth	r3, r3
 8008158:	429a      	cmp	r2, r3
 800815a:	d215      	bcs.n	8008188 <tcp_receive+0x134>
                  pcb->cwnd += pcb->mss;
 800815c:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
              found_dupack = 1;
 8008160:	2301      	movs	r3, #1
 8008162:	e009      	b.n	8008178 <tcp_receive+0x124>
              } else if (pcb->dupacks == 3) {
 8008164:	2b03      	cmp	r3, #3
 8008166:	d001      	beq.n	800816c <tcp_receive+0x118>
              found_dupack = 1;
 8008168:	2301      	movs	r3, #1
 800816a:	e005      	b.n	8008178 <tcp_receive+0x124>
                tcp_rexmit_fast(pcb);
 800816c:	4620      	mov	r0, r4
 800816e:	f001 fd23 	bl	8009bb8 <tcp_rexmit_fast>
              found_dupack = 1;
 8008172:	2301      	movs	r3, #1
 8008174:	e000      	b.n	8008178 <tcp_receive+0x124>
  int found_dupack = 0;
 8008176:	2300      	movs	r3, #0
      if (!found_dupack) {
 8008178:	2b00      	cmp	r3, #0
 800817a:	f040 80c2 	bne.w	8008302 <tcp_receive+0x2ae>
        pcb->dupacks = 0;
 800817e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 8008182:	e0be      	b.n	8008302 <tcp_receive+0x2ae>
  int found_dupack = 0;
 8008184:	2300      	movs	r3, #0
 8008186:	e7f7      	b.n	8008178 <tcp_receive+0x124>
              found_dupack = 1;
 8008188:	2301      	movs	r3, #1
 800818a:	e7f5      	b.n	8008178 <tcp_receive+0x124>
      if (pcb->flags & TF_INFR) {
 800818c:	7fa1      	ldrb	r1, [r4, #30]
 800818e:	f011 0f04 	tst.w	r1, #4
 8008192:	d006      	beq.n	80081a2 <tcp_receive+0x14e>
        pcb->flags &= ~TF_INFR;
 8008194:	f021 0104 	bic.w	r1, r1, #4
 8008198:	77a1      	strb	r1, [r4, #30]
        pcb->cwnd = pcb->ssthresh;
 800819a:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 800819e:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
      pcb->nrtx = 0;
 80081a2:	2500      	movs	r5, #0
 80081a4:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80081a8:	f9b4 6040 	ldrsh.w	r6, [r4, #64]	; 0x40
 80081ac:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
 80081b0:	eb01 01e6 	add.w	r1, r1, r6, asr #3
 80081b4:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
      pcb->acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      pcb->snd_buf += pcb->acked;
 80081c0:	f8b4 1066 	ldrh.w	r1, [r4, #102]	; 0x66
 80081c4:	440b      	add	r3, r1
 80081c6:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
      pcb->dupacks = 0;
 80081ca:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
      pcb->lastack = ackno;
 80081ce:	64a2      	str	r2, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
 80081d0:	2803      	cmp	r0, #3
 80081d2:	d945      	bls.n	8008260 <tcp_receive+0x20c>
        if (pcb->cwnd < pcb->ssthresh) {
 80081d4:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80081d8:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 80081dc:	429a      	cmp	r2, r3
 80081de:	d207      	bcs.n	80081f0 <tcp_receive+0x19c>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80081e0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80081e2:	4413      	add	r3, r2
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d23a      	bcs.n	8008260 <tcp_receive+0x20c>
            pcb->cwnd += pcb->mss;
 80081ea:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 80081ee:	e037      	b.n	8008260 <tcp_receive+0x20c>
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80081f0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80081f2:	fb03 f303 	mul.w	r3, r3, r3
 80081f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80081fa:	fa12 f383 	uxtah	r3, r2, r3
 80081fe:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 8008200:	429a      	cmp	r2, r3
 8008202:	d22d      	bcs.n	8008260 <tcp_receive+0x20c>
            pcb->cwnd = new_cwnd;
 8008204:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 8008208:	e02a      	b.n	8008260 <tcp_receive+0x20c>
        if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
 800820a:	68eb      	ldr	r3, [r5, #12]
 800820c:	8998      	ldrh	r0, [r3, #12]
 800820e:	f7fd fb70 	bl	80058f2 <lwip_ntohs>
 8008212:	f010 0f01 	tst.w	r0, #1
 8008216:	d017      	beq.n	8008248 <tcp_receive+0x1f4>
          pcb->acked--;
 8008218:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800821c:	3b01      	subs	r3, #1
 800821e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 8008222:	e011      	b.n	8008248 <tcp_receive+0x1f4>
             TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
 8008224:	2300      	movs	r3, #0
 8008226:	4433      	add	r3, r6
 8008228:	441d      	add	r5, r3
 800822a:	4b42      	ldr	r3, [pc, #264]	; (8008334 <tcp_receive+0x2e0>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	1aed      	subs	r5, r5, r3
      while (pcb->unacked != NULL &&
 8008230:	2d00      	cmp	r5, #0
 8008232:	dc27      	bgt.n	8008284 <tcp_receive+0x230>
        next = pcb->unacked;
 8008234:	6f25      	ldr	r5, [r4, #112]	; 0x70
        pcb->unacked = pcb->unacked->next;
 8008236:	682b      	ldr	r3, [r5, #0]
 8008238:	6723      	str	r3, [r4, #112]	; 0x70
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800823a:	6868      	ldr	r0, [r5, #4]
 800823c:	f7fe fe9a 	bl	8006f74 <pbuf_clen>
        if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
 8008240:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1e0      	bne.n	800820a <tcp_receive+0x1b6>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8008248:	6868      	ldr	r0, [r5, #4]
 800824a:	f7fe fe93 	bl	8006f74 <pbuf_clen>
 800824e:	b280      	uxth	r0, r0
 8008250:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8008254:	1a18      	subs	r0, r3, r0
 8008256:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
        tcp_seg_free(next);
 800825a:	4628      	mov	r0, r5
 800825c:	f7fe ffc1 	bl	80071e2 <tcp_seg_free>
      while (pcb->unacked != NULL &&
 8008260:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008262:	b17b      	cbz	r3, 8008284 <tcp_receive+0x230>
             TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	6858      	ldr	r0, [r3, #4]
 8008268:	f7fd fb53 	bl	8005912 <lwip_ntohl>
 800826c:	4605      	mov	r5, r0
 800826e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008270:	891e      	ldrh	r6, [r3, #8]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	8998      	ldrh	r0, [r3, #12]
 8008276:	f7fd fb3c 	bl	80058f2 <lwip_ntohs>
 800827a:	f010 0f03 	tst.w	r0, #3
 800827e:	d0d1      	beq.n	8008224 <tcp_receive+0x1d0>
 8008280:	2301      	movs	r3, #1
 8008282:	e7d0      	b.n	8008226 <tcp_receive+0x1d2>
      if (pcb->unacked == NULL) {
 8008284:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008286:	b123      	cbz	r3, 8008292 <tcp_receive+0x23e>
        pcb->rtime = 0;
 8008288:	2300      	movs	r3, #0
 800828a:	86a3      	strh	r3, [r4, #52]	; 0x34
      pcb->polltmr = 0;
 800828c:	2300      	movs	r3, #0
 800828e:	77e3      	strb	r3, [r4, #31]
 8008290:	e037      	b.n	8008302 <tcp_receive+0x2ae>
        pcb->rtime = -1;
 8008292:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008296:	86a3      	strh	r3, [r4, #52]	; 0x34
 8008298:	e7f8      	b.n	800828c <tcp_receive+0x238>
        pcb->unsent_oversize = 0;
 800829a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800829e:	e01d      	b.n	80082dc <tcp_receive+0x288>
      if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
 80082a0:	68eb      	ldr	r3, [r5, #12]
 80082a2:	8998      	ldrh	r0, [r3, #12]
 80082a4:	f7fd fb25 	bl	80058f2 <lwip_ntohs>
 80082a8:	f010 0f01 	tst.w	r0, #1
 80082ac:	d01d      	beq.n	80082ea <tcp_receive+0x296>
        pcb->acked--;
 80082ae:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 80082b2:	3b01      	subs	r3, #1
 80082b4:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 80082b8:	e017      	b.n	80082ea <tcp_receive+0x296>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) +
 80082ba:	2300      	movs	r3, #0
 80082bc:	443b      	add	r3, r7
 80082be:	441e      	add	r6, r3
 80082c0:	1bad      	subs	r5, r5, r6
    while (pcb->unsent != NULL &&
 80082c2:	2d00      	cmp	r5, #0
 80082c4:	db3c      	blt.n	8008340 <tcp_receive+0x2ec>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) +
 80082c6:	4b1b      	ldr	r3, [pc, #108]	; (8008334 <tcp_receive+0x2e0>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80082cc:	1a9b      	subs	r3, r3, r2
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	dc36      	bgt.n	8008340 <tcp_receive+0x2ec>
      next = pcb->unsent;
 80082d2:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
      pcb->unsent = pcb->unsent->next;
 80082d4:	682b      	ldr	r3, [r5, #0]
 80082d6:	66e3      	str	r3, [r4, #108]	; 0x6c
      if (pcb->unsent == NULL) {
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d0de      	beq.n	800829a <tcp_receive+0x246>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80082dc:	6868      	ldr	r0, [r5, #4]
 80082de:	f7fe fe49 	bl	8006f74 <pbuf_clen>
      if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
 80082e2:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1da      	bne.n	80082a0 <tcp_receive+0x24c>
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80082ea:	6868      	ldr	r0, [r5, #4]
 80082ec:	f7fe fe42 	bl	8006f74 <pbuf_clen>
 80082f0:	b280      	uxth	r0, r0
 80082f2:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 80082f6:	1a18      	subs	r0, r3, r0
 80082f8:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      tcp_seg_free(next);
 80082fc:	4628      	mov	r0, r5
 80082fe:	f7fe ff70 	bl	80071e2 <tcp_seg_free>
    while (pcb->unsent != NULL &&
 8008302:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008304:	b1e3      	cbz	r3, 8008340 <tcp_receive+0x2ec>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) +
 8008306:	4a0b      	ldr	r2, [pc, #44]	; (8008334 <tcp_receive+0x2e0>)
 8008308:	6815      	ldr	r5, [r2, #0]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	6858      	ldr	r0, [r3, #4]
 800830e:	f7fd fb00 	bl	8005912 <lwip_ntohl>
 8008312:	4606      	mov	r6, r0
 8008314:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008316:	891f      	ldrh	r7, [r3, #8]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	8998      	ldrh	r0, [r3, #12]
 800831c:	f7fd fae9 	bl	80058f2 <lwip_ntohs>
 8008320:	f010 0f03 	tst.w	r0, #3
 8008324:	d0c9      	beq.n	80082ba <tcp_receive+0x266>
 8008326:	2301      	movs	r3, #1
 8008328:	e7c8      	b.n	80082bc <tcp_receive+0x268>
 800832a:	bf00      	nop
 800832c:	20003ecc 	.word	0x20003ecc
 8008330:	20003ee8 	.word	0x20003ee8
 8008334:	20003ec8 	.word	0x20003ec8
 8008338:	20003ef0 	.word	0x20003ef0
 800833c:	20003efc 	.word	0x20003efc
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008340:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008342:	b12b      	cbz	r3, 8008350 <tcp_receive+0x2fc>
 8008344:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008346:	4992      	ldr	r1, [pc, #584]	; (8008590 <tcp_receive+0x53c>)
 8008348:	6809      	ldr	r1, [r1, #0]
 800834a:	1a52      	subs	r2, r2, r1
 800834c:	2a00      	cmp	r2, #0
 800834e:	db27      	blt.n	80083a0 <tcp_receive+0x34c>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008350:	4b90      	ldr	r3, [pc, #576]	; (8008594 <tcp_receive+0x540>)
 8008352:	881b      	ldrh	r3, [r3, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	f000 82a9 	beq.w	80088ac <tcp_receive+0x858>
 800835a:	7e22      	ldrb	r2, [r4, #24]
 800835c:	2a06      	cmp	r2, #6
 800835e:	f200 82a5 	bhi.w	80088ac <tcp_receive+0x858>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008362:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008364:	4a8c      	ldr	r2, [pc, #560]	; (8008598 <tcp_receive+0x544>)
 8008366:	6812      	ldr	r2, [r2, #0]
 8008368:	1a8d      	subs	r5, r1, r2
 800836a:	2d01      	cmp	r5, #1
 800836c:	d404      	bmi.n	8008378 <tcp_receive+0x324>
 800836e:	4413      	add	r3, r2
 8008370:	1acb      	subs	r3, r1, r3
 8008372:	3301      	adds	r3, #1
 8008374:	2b00      	cmp	r3, #0
 8008376:	dd36      	ble.n	80083e6 <tcp_receive+0x392>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008378:	1a52      	subs	r2, r2, r1
 800837a:	2a00      	cmp	r2, #0
 800837c:	db5c      	blt.n	8008438 <tcp_receive+0x3e4>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800837e:	4b86      	ldr	r3, [pc, #536]	; (8008598 <tcp_receive+0x544>)
 8008380:	6819      	ldr	r1, [r3, #0]
 8008382:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008384:	1a8b      	subs	r3, r1, r2
 8008386:	2b00      	cmp	r3, #0
 8008388:	db05      	blt.n	8008396 <tcp_receive+0x342>
 800838a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800838c:	4413      	add	r3, r2
 800838e:	1acb      	subs	r3, r1, r3
 8008390:	3301      	adds	r3, #1
 8008392:	2b00      	cmp	r3, #0
 8008394:	dd55      	ble.n	8008442 <tcp_receive+0x3ee>
      tcp_send_empty_ack(pcb);
 8008396:	4620      	mov	r0, r4
 8008398:	f001 fa57 	bl	800984a <tcp_send_empty_ack>
 800839c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80083a0:	4a7e      	ldr	r2, [pc, #504]	; (800859c <tcp_receive+0x548>)
 80083a2:	6812      	ldr	r2, [r2, #0]
 80083a4:	1ad2      	subs	r2, r2, r3
 80083a6:	b292      	uxth	r2, r2
      m = m - (pcb->sa >> 3);
 80083a8:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 80083ac:	eba2 02e1 	sub.w	r2, r2, r1, asr #3
 80083b0:	b292      	uxth	r2, r2
 80083b2:	b213      	sxth	r3, r2
      pcb->sa += m;
 80083b4:	4411      	add	r1, r2
 80083b6:	b209      	sxth	r1, r1
 80083b8:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
      if (m < 0) {
 80083bc:	2b00      	cmp	r3, #0
 80083be:	db0f      	blt.n	80083e0 <tcp_receive+0x38c>
      m = m - (pcb->sv >> 2);
 80083c0:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 80083c4:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
      pcb->sv += m;
 80083c8:	fa12 f383 	uxtah	r3, r2, r3
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80083d2:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 80083d6:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
      pcb->rttest = 0;
 80083da:	2300      	movs	r3, #0
 80083dc:	63a3      	str	r3, [r4, #56]	; 0x38
 80083de:	e7b7      	b.n	8008350 <tcp_receive+0x2fc>
        m = -m;
 80083e0:	4253      	negs	r3, r2
 80083e2:	b21b      	sxth	r3, r3
 80083e4:	e7ec      	b.n	80083c0 <tcp_receive+0x36c>
      off = pcb->rcv_nxt - seqno;
 80083e6:	462b      	mov	r3, r5
      p = inseg.p;
 80083e8:	4a6d      	ldr	r2, [pc, #436]	; (80085a0 <tcp_receive+0x54c>)
 80083ea:	6850      	ldr	r0, [r2, #4]
      if (inseg.p->len < off) {
 80083ec:	8942      	ldrh	r2, [r0, #10]
 80083ee:	4295      	cmp	r5, r2
 80083f0:	dd1d      	ble.n	800842e <tcp_receive+0x3da>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80083f2:	8901      	ldrh	r1, [r0, #8]
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80083f4:	b2ad      	uxth	r5, r5
 80083f6:	1b4d      	subs	r5, r1, r5
 80083f8:	b2a9      	uxth	r1, r5
        while (p->len < off) {
 80083fa:	e004      	b.n	8008406 <tcp_receive+0x3b2>
          off -= p->len;
 80083fc:	1a9b      	subs	r3, r3, r2
          p->tot_len = new_tot_len;
 80083fe:	8101      	strh	r1, [r0, #8]
          p->len = 0;
 8008400:	2200      	movs	r2, #0
 8008402:	8142      	strh	r2, [r0, #10]
          p = p->next;
 8008404:	6800      	ldr	r0, [r0, #0]
        while (p->len < off) {
 8008406:	8942      	ldrh	r2, [r0, #10]
 8008408:	4293      	cmp	r3, r2
 800840a:	dcf7      	bgt.n	80083fc <tcp_receive+0x3a8>
        if (pbuf_header(p, (s16_t)-off)) {
 800840c:	425b      	negs	r3, r3
 800840e:	b219      	sxth	r1, r3
 8008410:	f7fe fcb8 	bl	8006d84 <pbuf_header>
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8008414:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008416:	4860      	ldr	r0, [pc, #384]	; (8008598 <tcp_receive+0x544>)
 8008418:	6803      	ldr	r3, [r0, #0]
 800841a:	1a9b      	subs	r3, r3, r2
 800841c:	4960      	ldr	r1, [pc, #384]	; (80085a0 <tcp_receive+0x54c>)
 800841e:	890d      	ldrh	r5, [r1, #8]
 8008420:	fa15 f383 	uxtah	r3, r5, r3
 8008424:	810b      	strh	r3, [r1, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008426:	68cb      	ldr	r3, [r1, #12]
 8008428:	6002      	str	r2, [r0, #0]
 800842a:	605a      	str	r2, [r3, #4]
 800842c:	e7a7      	b.n	800837e <tcp_receive+0x32a>
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800842e:	4269      	negs	r1, r5
 8008430:	b209      	sxth	r1, r1
 8008432:	f7fe fca7 	bl	8006d84 <pbuf_header>
 8008436:	e7ed      	b.n	8008414 <tcp_receive+0x3c0>
        tcp_ack_now(pcb);
 8008438:	7fa3      	ldrb	r3, [r4, #30]
 800843a:	f043 0302 	orr.w	r3, r3, #2
 800843e:	77a3      	strb	r3, [r4, #30]
 8008440:	e79d      	b.n	800837e <tcp_receive+0x32a>
      if (pcb->rcv_nxt == seqno) {
 8008442:	4291      	cmp	r1, r2
 8008444:	d008      	beq.n	8008458 <tcp_receive+0x404>
        tcp_send_empty_ack(pcb);
 8008446:	4620      	mov	r0, r4
 8008448:	f001 f9ff 	bl	800984a <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 800844c:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800844e:	2d00      	cmp	r5, #0
 8008450:	f000 815c 	beq.w	800870c <tcp_receive+0x6b8>
 8008454:	2600      	movs	r6, #0
 8008456:	e17e      	b.n	8008756 <tcp_receive+0x702>
        tcplen = TCP_TCPLEN(&inseg);
 8008458:	4b51      	ldr	r3, [pc, #324]	; (80085a0 <tcp_receive+0x54c>)
 800845a:	891d      	ldrh	r5, [r3, #8]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	8998      	ldrh	r0, [r3, #12]
 8008460:	f7fd fa47 	bl	80058f2 <lwip_ntohs>
 8008464:	f010 0f03 	tst.w	r0, #3
 8008468:	d015      	beq.n	8008496 <tcp_receive+0x442>
 800846a:	2301      	movs	r3, #1
 800846c:	442b      	add	r3, r5
 800846e:	b29b      	uxth	r3, r3
 8008470:	4a48      	ldr	r2, [pc, #288]	; (8008594 <tcp_receive+0x540>)
 8008472:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
 8008474:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8008476:	4293      	cmp	r3, r2
 8008478:	d80f      	bhi.n	800849a <tcp_receive+0x446>
        if (pcb->ooseq != NULL) {
 800847a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800847c:	2b00      	cmp	r3, #0
 800847e:	f000 80bc 	beq.w	80085fa <tcp_receive+0x5a6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008482:	4b47      	ldr	r3, [pc, #284]	; (80085a0 <tcp_receive+0x54c>)
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	8998      	ldrh	r0, [r3, #12]
 8008488:	f7fd fa33 	bl	80058f2 <lwip_ntohs>
 800848c:	f010 0f01 	tst.w	r0, #1
 8008490:	d13c      	bne.n	800850c <tcp_receive+0x4b8>
            next = pcb->ooseq;
 8008492:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 8008494:	e04b      	b.n	800852e <tcp_receive+0x4da>
        tcplen = TCP_TCPLEN(&inseg);
 8008496:	2300      	movs	r3, #0
 8008498:	e7e8      	b.n	800846c <tcp_receive+0x418>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800849a:	4b41      	ldr	r3, [pc, #260]	; (80085a0 <tcp_receive+0x54c>)
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	8998      	ldrh	r0, [r3, #12]
 80084a0:	f7fd fa27 	bl	80058f2 <lwip_ntohs>
 80084a4:	f010 0f01 	tst.w	r0, #1
 80084a8:	d11f      	bne.n	80084ea <tcp_receive+0x496>
          inseg.len = (u16_t)pcb->rcv_wnd;
 80084aa:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80084ac:	4b3c      	ldr	r3, [pc, #240]	; (80085a0 <tcp_receive+0x54c>)
 80084ae:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	8998      	ldrh	r0, [r3, #12]
 80084b4:	f7fd fa1d 	bl	80058f2 <lwip_ntohs>
 80084b8:	f010 0f02 	tst.w	r0, #2
 80084bc:	d003      	beq.n	80084c6 <tcp_receive+0x472>
            inseg.len -= 1;
 80084be:	4a38      	ldr	r2, [pc, #224]	; (80085a0 <tcp_receive+0x54c>)
 80084c0:	8913      	ldrh	r3, [r2, #8]
 80084c2:	3b01      	subs	r3, #1
 80084c4:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
 80084c6:	4d36      	ldr	r5, [pc, #216]	; (80085a0 <tcp_receive+0x54c>)
 80084c8:	8929      	ldrh	r1, [r5, #8]
 80084ca:	6868      	ldr	r0, [r5, #4]
 80084cc:	f7fe fd26 	bl	8006f1c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80084d0:	892e      	ldrh	r6, [r5, #8]
 80084d2:	68eb      	ldr	r3, [r5, #12]
 80084d4:	8998      	ldrh	r0, [r3, #12]
 80084d6:	f7fd fa0c 	bl	80058f2 <lwip_ntohs>
 80084da:	f010 0f03 	tst.w	r0, #3
 80084de:	d013      	beq.n	8008508 <tcp_receive+0x4b4>
 80084e0:	2301      	movs	r3, #1
 80084e2:	4433      	add	r3, r6
 80084e4:	4a2b      	ldr	r2, [pc, #172]	; (8008594 <tcp_receive+0x540>)
 80084e6:	8013      	strh	r3, [r2, #0]
 80084e8:	e7c7      	b.n	800847a <tcp_receive+0x426>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80084ea:	4b2d      	ldr	r3, [pc, #180]	; (80085a0 <tcp_receive+0x54c>)
 80084ec:	68de      	ldr	r6, [r3, #12]
 80084ee:	89b0      	ldrh	r0, [r6, #12]
 80084f0:	f420 557c 	bic.w	r5, r0, #16128	; 0x3f00
 80084f4:	b2ad      	uxth	r5, r5
 80084f6:	f7fd f9fc 	bl	80058f2 <lwip_ntohs>
 80084fa:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 80084fe:	f7fd f9f3 	bl	80058e8 <lwip_htons>
 8008502:	4328      	orrs	r0, r5
 8008504:	81b0      	strh	r0, [r6, #12]
 8008506:	e7d0      	b.n	80084aa <tcp_receive+0x456>
          tcplen = TCP_TCPLEN(&inseg);
 8008508:	2300      	movs	r3, #0
 800850a:	e7ea      	b.n	80084e2 <tcp_receive+0x48e>
            while (pcb->ooseq != NULL) {
 800850c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800850e:	2800      	cmp	r0, #0
 8008510:	d073      	beq.n	80085fa <tcp_receive+0x5a6>
              pcb->ooseq = pcb->ooseq->next;
 8008512:	6803      	ldr	r3, [r0, #0]
 8008514:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8008516:	f7fe fe64 	bl	80071e2 <tcp_seg_free>
 800851a:	e7f7      	b.n	800850c <tcp_receive+0x4b8>
                tcplen = TCP_TCPLEN(&inseg);
 800851c:	2300      	movs	r3, #0
 800851e:	443b      	add	r3, r7
 8008520:	4a1c      	ldr	r2, [pc, #112]	; (8008594 <tcp_receive+0x540>)
 8008522:	8013      	strh	r3, [r2, #0]
              next = next->next;
 8008524:	682e      	ldr	r6, [r5, #0]
              tcp_seg_free(prev);
 8008526:	4628      	mov	r0, r5
 8008528:	f7fe fe5b 	bl	80071e2 <tcp_seg_free>
              next = next->next;
 800852c:	4635      	mov	r5, r6
            while (next &&
 800852e:	2d00      	cmp	r5, #0
 8008530:	d038      	beq.n	80085a4 <tcp_receive+0x550>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008532:	4b18      	ldr	r3, [pc, #96]	; (8008594 <tcp_receive+0x540>)
 8008534:	881b      	ldrh	r3, [r3, #0]
 8008536:	4a18      	ldr	r2, [pc, #96]	; (8008598 <tcp_receive+0x544>)
 8008538:	6812      	ldr	r2, [r2, #0]
 800853a:	4413      	add	r3, r2
 800853c:	68e9      	ldr	r1, [r5, #12]
 800853e:	684a      	ldr	r2, [r1, #4]
 8008540:	8928      	ldrh	r0, [r5, #8]
 8008542:	4402      	add	r2, r0
 8008544:	1a9b      	subs	r3, r3, r2
            while (next &&
 8008546:	2b00      	cmp	r3, #0
 8008548:	db2c      	blt.n	80085a4 <tcp_receive+0x550>
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
 800854a:	8988      	ldrh	r0, [r1, #12]
 800854c:	f7fd f9d1 	bl	80058f2 <lwip_ntohs>
 8008550:	f010 0f01 	tst.w	r0, #1
 8008554:	d0e6      	beq.n	8008524 <tcp_receive+0x4d0>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008556:	4b12      	ldr	r3, [pc, #72]	; (80085a0 <tcp_receive+0x54c>)
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	8998      	ldrh	r0, [r3, #12]
 800855c:	f7fd f9c9 	bl	80058f2 <lwip_ntohs>
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
 8008560:	f010 0f02 	tst.w	r0, #2
 8008564:	d1de      	bne.n	8008524 <tcp_receive+0x4d0>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008566:	4e0e      	ldr	r6, [pc, #56]	; (80085a0 <tcp_receive+0x54c>)
 8008568:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800856c:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 8008570:	2001      	movs	r0, #1
 8008572:	f7fd f9b9 	bl	80058e8 <lwip_htons>
 8008576:	4338      	orrs	r0, r7
 8008578:	f8a8 000c 	strh.w	r0, [r8, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800857c:	8937      	ldrh	r7, [r6, #8]
 800857e:	68f3      	ldr	r3, [r6, #12]
 8008580:	8998      	ldrh	r0, [r3, #12]
 8008582:	f7fd f9b6 	bl	80058f2 <lwip_ntohs>
 8008586:	f010 0f03 	tst.w	r0, #3
 800858a:	d0c7      	beq.n	800851c <tcp_receive+0x4c8>
 800858c:	2301      	movs	r3, #1
 800858e:	e7c6      	b.n	800851e <tcp_receive+0x4ca>
 8008590:	20003ec8 	.word	0x20003ec8
 8008594:	20003efc 	.word	0x20003efc
 8008598:	20003ee8 	.word	0x20003ee8
 800859c:	20007b30 	.word	0x20007b30
 80085a0:	20003ed0 	.word	0x20003ed0
            if (next &&
 80085a4:	b345      	cbz	r5, 80085f8 <tcp_receive+0x5a4>
                TCP_SEQ_GT(seqno + tcplen,
 80085a6:	4b8d      	ldr	r3, [pc, #564]	; (80087dc <tcp_receive+0x788>)
 80085a8:	6819      	ldr	r1, [r3, #0]
 80085aa:	4b8d      	ldr	r3, [pc, #564]	; (80087e0 <tcp_receive+0x78c>)
 80085ac:	881b      	ldrh	r3, [r3, #0]
 80085ae:	440b      	add	r3, r1
 80085b0:	68ea      	ldr	r2, [r5, #12]
 80085b2:	6852      	ldr	r2, [r2, #4]
 80085b4:	1a9b      	subs	r3, r3, r2
            if (next &&
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	dd1e      	ble.n	80085f8 <tcp_receive+0x5a4>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80085ba:	1a52      	subs	r2, r2, r1
 80085bc:	4b89      	ldr	r3, [pc, #548]	; (80087e4 <tcp_receive+0x790>)
 80085be:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	8998      	ldrh	r0, [r3, #12]
 80085c4:	f7fd f995 	bl	80058f2 <lwip_ntohs>
 80085c8:	f010 0f02 	tst.w	r0, #2
 80085cc:	d003      	beq.n	80085d6 <tcp_receive+0x582>
                inseg.len -= 1;
 80085ce:	4a85      	ldr	r2, [pc, #532]	; (80087e4 <tcp_receive+0x790>)
 80085d0:	8913      	ldrh	r3, [r2, #8]
 80085d2:	3b01      	subs	r3, #1
 80085d4:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
 80085d6:	4e83      	ldr	r6, [pc, #524]	; (80087e4 <tcp_receive+0x790>)
 80085d8:	8931      	ldrh	r1, [r6, #8]
 80085da:	6870      	ldr	r0, [r6, #4]
 80085dc:	f7fe fc9e 	bl	8006f1c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80085e0:	8937      	ldrh	r7, [r6, #8]
 80085e2:	68f3      	ldr	r3, [r6, #12]
 80085e4:	8998      	ldrh	r0, [r3, #12]
 80085e6:	f7fd f984 	bl	80058f2 <lwip_ntohs>
 80085ea:	f010 0f03 	tst.w	r0, #3
 80085ee:	d027      	beq.n	8008640 <tcp_receive+0x5ec>
 80085f0:	2301      	movs	r3, #1
 80085f2:	443b      	add	r3, r7
 80085f4:	4a7a      	ldr	r2, [pc, #488]	; (80087e0 <tcp_receive+0x78c>)
 80085f6:	8013      	strh	r3, [r2, #0]
            pcb->ooseq = next;
 80085f8:	6765      	str	r5, [r4, #116]	; 0x74
        pcb->rcv_nxt = seqno + tcplen;
 80085fa:	4b79      	ldr	r3, [pc, #484]	; (80087e0 <tcp_receive+0x78c>)
 80085fc:	881a      	ldrh	r2, [r3, #0]
 80085fe:	4b77      	ldr	r3, [pc, #476]	; (80087dc <tcp_receive+0x788>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4413      	add	r3, r2
 8008604:	62a3      	str	r3, [r4, #40]	; 0x28
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008606:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
        pcb->rcv_wnd -= tcplen;
 8008608:	1a9b      	subs	r3, r3, r2
 800860a:	85a3      	strh	r3, [r4, #44]	; 0x2c
        tcp_update_rcv_ann_wnd(pcb);
 800860c:	4620      	mov	r0, r4
 800860e:	f7fe fda4 	bl	800715a <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 8008612:	4b74      	ldr	r3, [pc, #464]	; (80087e4 <tcp_receive+0x790>)
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	891a      	ldrh	r2, [r3, #8]
 8008618:	b122      	cbz	r2, 8008624 <tcp_receive+0x5d0>
          recv_data = inseg.p;
 800861a:	4a73      	ldr	r2, [pc, #460]	; (80087e8 <tcp_receive+0x794>)
 800861c:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 800861e:	2200      	movs	r2, #0
 8008620:	4b70      	ldr	r3, [pc, #448]	; (80087e4 <tcp_receive+0x790>)
 8008622:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008624:	4b6f      	ldr	r3, [pc, #444]	; (80087e4 <tcp_receive+0x790>)
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	8998      	ldrh	r0, [r3, #12]
 800862a:	f7fd f962 	bl	80058f2 <lwip_ntohs>
 800862e:	f010 0f01 	tst.w	r0, #1
 8008632:	d023      	beq.n	800867c <tcp_receive+0x628>
          recv_flags |= TF_GOT_FIN;
 8008634:	4a6d      	ldr	r2, [pc, #436]	; (80087ec <tcp_receive+0x798>)
 8008636:	7813      	ldrb	r3, [r2, #0]
 8008638:	f043 0320 	orr.w	r3, r3, #32
 800863c:	7013      	strb	r3, [r2, #0]
 800863e:	e01d      	b.n	800867c <tcp_receive+0x628>
              tcplen = TCP_TCPLEN(&inseg);
 8008640:	2300      	movs	r3, #0
 8008642:	e7d6      	b.n	80085f2 <tcp_receive+0x59e>
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008644:	2300      	movs	r3, #0
 8008646:	e02b      	b.n	80086a0 <tcp_receive+0x64c>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008648:	2300      	movs	r3, #0
 800864a:	e03a      	b.n	80086c2 <tcp_receive+0x66e>
              recv_data = cseg->p;
 800864c:	4b66      	ldr	r3, [pc, #408]	; (80087e8 <tcp_receive+0x794>)
 800864e:	6019      	str	r1, [r3, #0]
            cseg->p = NULL;
 8008650:	2300      	movs	r3, #0
 8008652:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008654:	68eb      	ldr	r3, [r5, #12]
 8008656:	8998      	ldrh	r0, [r3, #12]
 8008658:	f7fd f94b 	bl	80058f2 <lwip_ntohs>
 800865c:	f010 0f01 	tst.w	r0, #1
 8008660:	d007      	beq.n	8008672 <tcp_receive+0x61e>
            recv_flags |= TF_GOT_FIN;
 8008662:	4a62      	ldr	r2, [pc, #392]	; (80087ec <tcp_receive+0x798>)
 8008664:	7813      	ldrb	r3, [r2, #0]
 8008666:	f043 0320 	orr.w	r3, r3, #32
 800866a:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800866c:	7e23      	ldrb	r3, [r4, #24]
 800866e:	2b04      	cmp	r3, #4
 8008670:	d039      	beq.n	80086e6 <tcp_receive+0x692>
          pcb->ooseq = cseg->next;
 8008672:	682b      	ldr	r3, [r5, #0]
 8008674:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 8008676:	4628      	mov	r0, r5
 8008678:	f7fe fdb3 	bl	80071e2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800867c:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800867e:	2d00      	cmp	r5, #0
 8008680:	d034      	beq.n	80086ec <tcp_receive+0x698>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8008682:	68ea      	ldr	r2, [r5, #12]
 8008684:	6853      	ldr	r3, [r2, #4]
 8008686:	6aa1      	ldr	r1, [r4, #40]	; 0x28
        while (pcb->ooseq != NULL &&
 8008688:	428b      	cmp	r3, r1
 800868a:	d12f      	bne.n	80086ec <tcp_receive+0x698>
          seqno = pcb->ooseq->tcphdr->seqno;
 800868c:	4953      	ldr	r1, [pc, #332]	; (80087dc <tcp_receive+0x788>)
 800868e:	600b      	str	r3, [r1, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008690:	892e      	ldrh	r6, [r5, #8]
 8008692:	8990      	ldrh	r0, [r2, #12]
 8008694:	f7fd f92d 	bl	80058f2 <lwip_ntohs>
 8008698:	f010 0f03 	tst.w	r0, #3
 800869c:	d0d2      	beq.n	8008644 <tcp_receive+0x5f0>
 800869e:	2301      	movs	r3, #1
 80086a0:	199a      	adds	r2, r3, r6
 80086a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80086a4:	4413      	add	r3, r2
 80086a6:	62a3      	str	r3, [r4, #40]	; 0x28
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80086a8:	68eb      	ldr	r3, [r5, #12]
 80086aa:	8998      	ldrh	r0, [r3, #12]
 80086ac:	f7fd f921 	bl	80058f2 <lwip_ntohs>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80086b0:	892e      	ldrh	r6, [r5, #8]
 80086b2:	68eb      	ldr	r3, [r5, #12]
 80086b4:	8998      	ldrh	r0, [r3, #12]
 80086b6:	f7fd f91c 	bl	80058f2 <lwip_ntohs>
 80086ba:	f010 0f03 	tst.w	r0, #3
 80086be:	d0c3      	beq.n	8008648 <tcp_receive+0x5f4>
 80086c0:	2301      	movs	r3, #1
 80086c2:	199a      	adds	r2, r3, r6
 80086c4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80086c6:	1a9b      	subs	r3, r3, r2
 80086c8:	85a3      	strh	r3, [r4, #44]	; 0x2c
          tcp_update_rcv_ann_wnd(pcb);
 80086ca:	4620      	mov	r0, r4
 80086cc:	f7fe fd45 	bl	800715a <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 80086d0:	6869      	ldr	r1, [r5, #4]
 80086d2:	890b      	ldrh	r3, [r1, #8]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d0bd      	beq.n	8008654 <tcp_receive+0x600>
            if (recv_data) {
 80086d8:	4b43      	ldr	r3, [pc, #268]	; (80087e8 <tcp_receive+0x794>)
 80086da:	6818      	ldr	r0, [r3, #0]
 80086dc:	2800      	cmp	r0, #0
 80086de:	d0b5      	beq.n	800864c <tcp_receive+0x5f8>
              pbuf_cat(recv_data, cseg->p);
 80086e0:	f7fe fc56 	bl	8006f90 <pbuf_cat>
 80086e4:	e7b4      	b.n	8008650 <tcp_receive+0x5fc>
              pcb->state = CLOSE_WAIT;
 80086e6:	2307      	movs	r3, #7
 80086e8:	7623      	strb	r3, [r4, #24]
 80086ea:	e7c2      	b.n	8008672 <tcp_receive+0x61e>
        tcp_ack(pcb);
 80086ec:	7fa3      	ldrb	r3, [r4, #30]
 80086ee:	f013 0f01 	tst.w	r3, #1
 80086f2:	d006      	beq.n	8008702 <tcp_receive+0x6ae>
 80086f4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80086f8:	f043 0302 	orr.w	r3, r3, #2
 80086fc:	77a3      	strb	r3, [r4, #30]
 80086fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008702:	f043 0301 	orr.w	r3, r3, #1
 8008706:	77a3      	strb	r3, [r4, #30]
 8008708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          pcb->ooseq = tcp_seg_copy(&inseg);
 800870c:	4835      	ldr	r0, [pc, #212]	; (80087e4 <tcp_receive+0x790>)
 800870e:	f7fe fd7f 	bl	8007210 <tcp_seg_copy>
 8008712:	6760      	str	r0, [r4, #116]	; 0x74
 8008714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              if (inseg.len > next->len) {
 8008718:	4b32      	ldr	r3, [pc, #200]	; (80087e4 <tcp_receive+0x790>)
 800871a:	891a      	ldrh	r2, [r3, #8]
 800871c:	892b      	ldrh	r3, [r5, #8]
 800871e:	429a      	cmp	r2, r3
 8008720:	f240 80d4 	bls.w	80088cc <tcp_receive+0x878>
                cseg = tcp_seg_copy(&inseg);
 8008724:	482f      	ldr	r0, [pc, #188]	; (80087e4 <tcp_receive+0x790>)
 8008726:	f7fe fd73 	bl	8007210 <tcp_seg_copy>
                if (cseg != NULL) {
 800872a:	4603      	mov	r3, r0
 800872c:	2800      	cmp	r0, #0
 800872e:	f000 80cd 	beq.w	80088cc <tcp_receive+0x878>
                  if (prev != NULL) {
 8008732:	b136      	cbz	r6, 8008742 <tcp_receive+0x6ee>
                    prev->next = cseg;
 8008734:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 8008736:	4629      	mov	r1, r5
 8008738:	4618      	mov	r0, r3
 800873a:	f7ff fc49 	bl	8007fd0 <tcp_oos_insert_segment>
 800873e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    pcb->ooseq = cseg;
 8008742:	6760      	str	r0, [r4, #116]	; 0x74
 8008744:	e7f7      	b.n	8008736 <tcp_receive+0x6e2>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008746:	1a5a      	subs	r2, r3, r1
 8008748:	2a00      	cmp	r2, #0
 800874a:	db35      	blt.n	80087b8 <tcp_receive+0x764>
              if (next->next == NULL &&
 800874c:	682a      	ldr	r2, [r5, #0]
 800874e:	462e      	mov	r6, r5
 8008750:	2a00      	cmp	r2, #0
 8008752:	d03d      	beq.n	80087d0 <tcp_receive+0x77c>
 8008754:	4615      	mov	r5, r2
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008756:	2d00      	cmp	r5, #0
 8008758:	f000 80a6 	beq.w	80088a8 <tcp_receive+0x854>
            if (seqno == next->tcphdr->seqno) {
 800875c:	68e8      	ldr	r0, [r5, #12]
 800875e:	6841      	ldr	r1, [r0, #4]
 8008760:	4b1e      	ldr	r3, [pc, #120]	; (80087dc <tcp_receive+0x788>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4299      	cmp	r1, r3
 8008766:	d0d7      	beq.n	8008718 <tcp_receive+0x6c4>
              if (prev == NULL) {
 8008768:	2e00      	cmp	r6, #0
 800876a:	d0ec      	beq.n	8008746 <tcp_receive+0x6f2>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800876c:	68f2      	ldr	r2, [r6, #12]
 800876e:	6852      	ldr	r2, [r2, #4]
 8008770:	1a9a      	subs	r2, r3, r2
 8008772:	2a01      	cmp	r2, #1
 8008774:	d4ea      	bmi.n	800874c <tcp_receive+0x6f8>
 8008776:	1a5a      	subs	r2, r3, r1
 8008778:	3201      	adds	r2, #1
 800877a:	2a00      	cmp	r2, #0
 800877c:	dce6      	bgt.n	800874c <tcp_receive+0x6f8>
                  cseg = tcp_seg_copy(&inseg);
 800877e:	4819      	ldr	r0, [pc, #100]	; (80087e4 <tcp_receive+0x790>)
 8008780:	f7fe fd46 	bl	8007210 <tcp_seg_copy>
                  if (cseg != NULL) {
 8008784:	4604      	mov	r4, r0
 8008786:	2800      	cmp	r0, #0
 8008788:	f000 80a0 	beq.w	80088cc <tcp_receive+0x878>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800878c:	68f3      	ldr	r3, [r6, #12]
 800878e:	6859      	ldr	r1, [r3, #4]
 8008790:	8932      	ldrh	r2, [r6, #8]
 8008792:	440a      	add	r2, r1
 8008794:	4b11      	ldr	r3, [pc, #68]	; (80087dc <tcp_receive+0x788>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	1ad2      	subs	r2, r2, r3
 800879a:	2a00      	cmp	r2, #0
 800879c:	dd05      	ble.n	80087aa <tcp_receive+0x756>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800879e:	1a5b      	subs	r3, r3, r1
 80087a0:	b299      	uxth	r1, r3
 80087a2:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 80087a4:	6870      	ldr	r0, [r6, #4]
 80087a6:	f7fe fbb9 	bl	8006f1c <pbuf_realloc>
                    prev->next = cseg;
 80087aa:	6034      	str	r4, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 80087ac:	4629      	mov	r1, r5
 80087ae:	4620      	mov	r0, r4
 80087b0:	f7ff fc0e 	bl	8007fd0 <tcp_oos_insert_segment>
 80087b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                  cseg = tcp_seg_copy(&inseg);
 80087b8:	480a      	ldr	r0, [pc, #40]	; (80087e4 <tcp_receive+0x790>)
 80087ba:	f7fe fd29 	bl	8007210 <tcp_seg_copy>
                  if (cseg != NULL) {
 80087be:	2800      	cmp	r0, #0
 80087c0:	f000 8084 	beq.w	80088cc <tcp_receive+0x878>
                    pcb->ooseq = cseg;
 80087c4:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80087c6:	4629      	mov	r1, r5
 80087c8:	f7ff fc02 	bl	8007fd0 <tcp_oos_insert_segment>
 80087cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80087d0:	1a5b      	subs	r3, r3, r1
              if (next->next == NULL &&
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	dc0c      	bgt.n	80087f0 <tcp_receive+0x79c>
 80087d6:	4615      	mov	r5, r2
 80087d8:	e7bd      	b.n	8008756 <tcp_receive+0x702>
 80087da:	bf00      	nop
 80087dc:	20003ee8 	.word	0x20003ee8
 80087e0:	20003efc 	.word	0x20003efc
 80087e4:	20003ed0 	.word	0x20003ed0
 80087e8:	20003ee0 	.word	0x20003ee0
 80087ec:	20003ee4 	.word	0x20003ee4
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80087f0:	8980      	ldrh	r0, [r0, #12]
 80087f2:	f7fd f87e 	bl	80058f2 <lwip_ntohs>
 80087f6:	f010 0f01 	tst.w	r0, #1
 80087fa:	d167      	bne.n	80088cc <tcp_receive+0x878>
                next->next = tcp_seg_copy(&inseg);
 80087fc:	4834      	ldr	r0, [pc, #208]	; (80088d0 <tcp_receive+0x87c>)
 80087fe:	f7fe fd07 	bl	8007210 <tcp_seg_copy>
 8008802:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 8008804:	2800      	cmp	r0, #0
 8008806:	d061      	beq.n	80088cc <tcp_receive+0x878>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8008808:	68eb      	ldr	r3, [r5, #12]
 800880a:	6859      	ldr	r1, [r3, #4]
 800880c:	892a      	ldrh	r2, [r5, #8]
 800880e:	440a      	add	r2, r1
 8008810:	4b30      	ldr	r3, [pc, #192]	; (80088d4 <tcp_receive+0x880>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	1ad2      	subs	r2, r2, r3
 8008816:	2a00      	cmp	r2, #0
 8008818:	dd05      	ble.n	8008826 <tcp_receive+0x7d2>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800881a:	1a5b      	subs	r3, r3, r1
 800881c:	b299      	uxth	r1, r3
 800881e:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8008820:	6868      	ldr	r0, [r5, #4]
 8008822:	f7fe fb7b 	bl	8006f1c <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8008826:	4b2c      	ldr	r3, [pc, #176]	; (80088d8 <tcp_receive+0x884>)
 8008828:	881b      	ldrh	r3, [r3, #0]
 800882a:	4a2a      	ldr	r2, [pc, #168]	; (80088d4 <tcp_receive+0x880>)
 800882c:	6812      	ldr	r2, [r2, #0]
 800882e:	4413      	add	r3, r2
 8008830:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008832:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8008834:	440a      	add	r2, r1
 8008836:	1a9b      	subs	r3, r3, r2
 8008838:	2b00      	cmp	r3, #0
 800883a:	dd47      	ble.n	80088cc <tcp_receive+0x878>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800883c:	682b      	ldr	r3, [r5, #0]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	8998      	ldrh	r0, [r3, #12]
 8008842:	f7fd f856 	bl	80058f2 <lwip_ntohs>
 8008846:	f010 0f01 	tst.w	r0, #1
 800884a:	d11c      	bne.n	8008886 <tcp_receive+0x832>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800884c:	682a      	ldr	r2, [r5, #0]
 800884e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008850:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8008852:	440b      	add	r3, r1
 8008854:	b29b      	uxth	r3, r3
 8008856:	491f      	ldr	r1, [pc, #124]	; (80088d4 <tcp_receive+0x880>)
 8008858:	6809      	ldr	r1, [r1, #0]
 800885a:	1a5b      	subs	r3, r3, r1
 800885c:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800885e:	682b      	ldr	r3, [r5, #0]
 8008860:	8919      	ldrh	r1, [r3, #8]
 8008862:	6858      	ldr	r0, [r3, #4]
 8008864:	f7fe fb5a 	bl	8006f1c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8008868:	682b      	ldr	r3, [r5, #0]
 800886a:	891c      	ldrh	r4, [r3, #8]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	8998      	ldrh	r0, [r3, #12]
 8008870:	f7fd f83f 	bl	80058f2 <lwip_ntohs>
 8008874:	f010 0f03 	tst.w	r0, #3
 8008878:	d114      	bne.n	80088a4 <tcp_receive+0x850>
 800887a:	2300      	movs	r3, #0
 800887c:	4423      	add	r3, r4
 800887e:	4a16      	ldr	r2, [pc, #88]	; (80088d8 <tcp_receive+0x884>)
 8008880:	8013      	strh	r3, [r2, #0]
 8008882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8008886:	682b      	ldr	r3, [r5, #0]
 8008888:	68df      	ldr	r7, [r3, #12]
 800888a:	89b8      	ldrh	r0, [r7, #12]
 800888c:	f420 567c 	bic.w	r6, r0, #16128	; 0x3f00
 8008890:	b2b6      	uxth	r6, r6
 8008892:	f7fd f82e 	bl	80058f2 <lwip_ntohs>
 8008896:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800889a:	f7fd f825 	bl	80058e8 <lwip_htons>
 800889e:	4330      	orrs	r0, r6
 80088a0:	81b8      	strh	r0, [r7, #12]
 80088a2:	e7d3      	b.n	800884c <tcp_receive+0x7f8>
                    tcplen = TCP_TCPLEN(next->next);
 80088a4:	2301      	movs	r3, #1
 80088a6:	e7e9      	b.n	800887c <tcp_receive+0x828>
 80088a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80088ac:	4b09      	ldr	r3, [pc, #36]	; (80088d4 <tcp_receive+0x880>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80088b2:	1a99      	subs	r1, r3, r2
 80088b4:	2900      	cmp	r1, #0
 80088b6:	db05      	blt.n	80088c4 <tcp_receive+0x870>
 80088b8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80088ba:	440a      	add	r2, r1
 80088bc:	1a9b      	subs	r3, r3, r2
 80088be:	3301      	adds	r3, #1
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	dd03      	ble.n	80088cc <tcp_receive+0x878>
      tcp_ack_now(pcb);
 80088c4:	7fa3      	ldrb	r3, [r4, #30]
 80088c6:	f043 0302 	orr.w	r3, r3, #2
 80088ca:	77a3      	strb	r3, [r4, #30]
 80088cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088d0:	20003ed0 	.word	0x20003ed0
 80088d4:	20003ee8 	.word	0x20003ee8
 80088d8:	20003efc 	.word	0x20003efc

080088dc <tcp_process>:
{
 80088dc:	b530      	push	{r4, r5, lr}
 80088de:	b083      	sub	sp, #12
  if (flags & TCP_RST) {
 80088e0:	4bad      	ldr	r3, [pc, #692]	; (8008b98 <tcp_process+0x2bc>)
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	f013 0f04 	tst.w	r3, #4
 80088e8:	d02c      	beq.n	8008944 <tcp_process+0x68>
    if (pcb->state == SYN_SENT) {
 80088ea:	7e03      	ldrb	r3, [r0, #24]
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d010      	beq.n	8008912 <tcp_process+0x36>
      if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80088f0:	4baa      	ldr	r3, [pc, #680]	; (8008b9c <tcp_process+0x2c0>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80088f6:	1a99      	subs	r1, r3, r2
 80088f8:	2900      	cmp	r1, #0
 80088fa:	db13      	blt.n	8008924 <tcp_process+0x48>
 80088fc:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80088fe:	440a      	add	r2, r1
 8008900:	1a9b      	subs	r3, r3, r2
 8008902:	2b00      	cmp	r3, #0
 8008904:	dd10      	ble.n	8008928 <tcp_process+0x4c>
  u8_t acceptable = 0;
 8008906:	2300      	movs	r3, #0
    if (acceptable) {
 8008908:	b983      	cbnz	r3, 800892c <tcp_process+0x50>
      return ERR_OK;
 800890a:	2500      	movs	r5, #0
}
 800890c:	4628      	mov	r0, r5
 800890e:	b003      	add	sp, #12
 8008910:	bd30      	pop	{r4, r5, pc}
      if (ackno == pcb->snd_nxt) {
 8008912:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8008914:	4ba2      	ldr	r3, [pc, #648]	; (8008ba0 <tcp_process+0x2c4>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	429a      	cmp	r2, r3
 800891a:	d001      	beq.n	8008920 <tcp_process+0x44>
  u8_t acceptable = 0;
 800891c:	2300      	movs	r3, #0
 800891e:	e7f3      	b.n	8008908 <tcp_process+0x2c>
        acceptable = 1;
 8008920:	2301      	movs	r3, #1
 8008922:	e7f1      	b.n	8008908 <tcp_process+0x2c>
  u8_t acceptable = 0;
 8008924:	2300      	movs	r3, #0
 8008926:	e7ef      	b.n	8008908 <tcp_process+0x2c>
        acceptable = 1;
 8008928:	2301      	movs	r3, #1
 800892a:	e7ed      	b.n	8008908 <tcp_process+0x2c>
      recv_flags |= TF_RESET;
 800892c:	4a9d      	ldr	r2, [pc, #628]	; (8008ba4 <tcp_process+0x2c8>)
 800892e:	7813      	ldrb	r3, [r2, #0]
 8008930:	f043 0308 	orr.w	r3, r3, #8
 8008934:	7013      	strb	r3, [r2, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8008936:	7f83      	ldrb	r3, [r0, #30]
 8008938:	f023 0301 	bic.w	r3, r3, #1
 800893c:	7783      	strb	r3, [r0, #30]
      return ERR_RST;
 800893e:	f06f 050c 	mvn.w	r5, #12
 8008942:	e7e3      	b.n	800890c <tcp_process+0x30>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008944:	f013 0f02 	tst.w	r3, #2
 8008948:	d00a      	beq.n	8008960 <tcp_process+0x84>
 800894a:	7e03      	ldrb	r3, [r0, #24]
 800894c:	3b02      	subs	r3, #2
 800894e:	b2db      	uxtb	r3, r3
 8008950:	2b01      	cmp	r3, #1
 8008952:	d905      	bls.n	8008960 <tcp_process+0x84>
    tcp_ack_now(pcb);
 8008954:	7f83      	ldrb	r3, [r0, #30]
 8008956:	f043 0302 	orr.w	r3, r3, #2
 800895a:	7783      	strb	r3, [r0, #30]
    return ERR_OK;
 800895c:	2500      	movs	r5, #0
 800895e:	e7d5      	b.n	800890c <tcp_process+0x30>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008960:	7f83      	ldrb	r3, [r0, #30]
 8008962:	f013 0f10 	tst.w	r3, #16
 8008966:	d102      	bne.n	800896e <tcp_process+0x92>
    pcb->tmr = tcp_ticks;
 8008968:	4b8f      	ldr	r3, [pc, #572]	; (8008ba8 <tcp_process+0x2cc>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	6243      	str	r3, [r0, #36]	; 0x24
 800896e:	4604      	mov	r4, r0
  pcb->keep_cnt_sent = 0;
 8008970:	2300      	movs	r3, #0
 8008972:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
  tcp_parseopt(pcb);
 8008976:	f7ff fa0b 	bl	8007d90 <tcp_parseopt>
  switch (pcb->state) {
 800897a:	7e23      	ldrb	r3, [r4, #24]
 800897c:	3b02      	subs	r3, #2
 800897e:	2b07      	cmp	r3, #7
 8008980:	f200 81dc 	bhi.w	8008d3c <tcp_process+0x460>
 8008984:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008988:	00860008 	.word	0x00860008
 800898c:	011800f6 	.word	0x011800f6
 8008990:	00f60167 	.word	0x00f60167
 8008994:	01c40195 	.word	0x01c40195
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008998:	4b7f      	ldr	r3, [pc, #508]	; (8008b98 <tcp_process+0x2bc>)
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	f003 0312 	and.w	r3, r3, #18
 80089a0:	2b12      	cmp	r3, #18
 80089a2:	d006      	beq.n	80089b2 <tcp_process+0xd6>
    else if (flags & TCP_ACK) {
 80089a4:	4b7c      	ldr	r3, [pc, #496]	; (8008b98 <tcp_process+0x2bc>)
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	f013 0f10 	tst.w	r3, #16
 80089ac:	d15e      	bne.n	8008a6c <tcp_process+0x190>
  return ERR_OK;
 80089ae:	2500      	movs	r5, #0
 80089b0:	e7ac      	b.n	800890c <tcp_process+0x30>
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
 80089b2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	6858      	ldr	r0, [r3, #4]
 80089b8:	f7fc ffab 	bl	8005912 <lwip_ntohl>
 80089bc:	3001      	adds	r0, #1
 80089be:	4b78      	ldr	r3, [pc, #480]	; (8008ba0 <tcp_process+0x2c4>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4298      	cmp	r0, r3
 80089c4:	d1ee      	bne.n	80089a4 <tcp_process+0xc8>
      pcb->snd_buf++;
 80089c6:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
 80089ca:	3201      	adds	r2, #1
 80089cc:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
      pcb->rcv_nxt = seqno + 1;
 80089d0:	4a72      	ldr	r2, [pc, #456]	; (8008b9c <tcp_process+0x2c0>)
 80089d2:	6812      	ldr	r2, [r2, #0]
 80089d4:	1c51      	adds	r1, r2, #1
 80089d6:	62a1      	str	r1, [r4, #40]	; 0x28
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80089d8:	6321      	str	r1, [r4, #48]	; 0x30
      pcb->lastack = ackno;
 80089da:	64a3      	str	r3, [r4, #72]	; 0x48
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80089dc:	4b73      	ldr	r3, [pc, #460]	; (8008bac <tcp_process+0x2d0>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	89db      	ldrh	r3, [r3, #14]
 80089e2:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
      pcb->snd_wnd_max = pcb->snd_wnd;
 80089e6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80089ea:	3a01      	subs	r2, #1
 80089ec:	6562      	str	r2, [r4, #84]	; 0x54
      pcb->state = ESTABLISHED;
 80089ee:	2304      	movs	r3, #4
 80089f0:	7623      	strb	r3, [r4, #24]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip,
 80089f2:	18e1      	adds	r1, r4, r3
 80089f4:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 80089f6:	f7ff f8e8 	bl	8007bca <tcp_eff_send_mss_impl>
 80089fa:	86e0      	strh	r0, [r4, #54]	; 0x36
      pcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(pcb);
 80089fc:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8008a00:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008a04:	0043      	lsls	r3, r0, #1
 8008a06:	f241 121c 	movw	r2, #4380	; 0x111c
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	bf38      	it	cc
 8008a0e:	4613      	movcc	r3, r2
 8008a10:	0080      	lsls	r0, r0, #2
 8008a12:	4283      	cmp	r3, r0
 8008a14:	bf28      	it	cs
 8008a16:	4603      	movcs	r3, r0
 8008a18:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008a1c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
      --pcb->snd_queuelen;
 8008a20:	3b01      	subs	r3, #1
 8008a22:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
      rseg = pcb->unacked;
 8008a26:	6f20      	ldr	r0, [r4, #112]	; 0x70
      pcb->unacked = rseg->next;
 8008a28:	6803      	ldr	r3, [r0, #0]
 8008a2a:	6723      	str	r3, [r4, #112]	; 0x70
      tcp_seg_free(rseg);
 8008a2c:	f7fe fbd9 	bl	80071e2 <tcp_seg_free>
      if (pcb->unacked == NULL) {
 8008a30:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008a32:	b1ab      	cbz	r3, 8008a60 <tcp_process+0x184>
        pcb->rtime = 0;
 8008a34:	2300      	movs	r3, #0
 8008a36:	86a3      	strh	r3, [r4, #52]	; 0x34
        pcb->nrtx = 0;
 8008a38:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008a3c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8008a40:	b193      	cbz	r3, 8008a68 <tcp_process+0x18c>
 8008a42:	2200      	movs	r2, #0
 8008a44:	4621      	mov	r1, r4
 8008a46:	6920      	ldr	r0, [r4, #16]
 8008a48:	4798      	blx	r3
 8008a4a:	4605      	mov	r5, r0
      if (err == ERR_ABRT) {
 8008a4c:	f115 0f0c 	cmn.w	r5, #12
 8008a50:	f43f af5c 	beq.w	800890c <tcp_process+0x30>
      tcp_ack_now(pcb);
 8008a54:	7fa3      	ldrb	r3, [r4, #30]
 8008a56:	f043 0302 	orr.w	r3, r3, #2
 8008a5a:	77a3      	strb	r3, [r4, #30]
  return ERR_OK;
 8008a5c:	2500      	movs	r5, #0
      tcp_ack_now(pcb);
 8008a5e:	e755      	b.n	800890c <tcp_process+0x30>
        pcb->rtime = -1;
 8008a60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008a64:	86a3      	strh	r3, [r4, #52]	; 0x34
 8008a66:	e7e9      	b.n	8008a3c <tcp_process+0x160>
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008a68:	2500      	movs	r5, #0
 8008a6a:	e7ef      	b.n	8008a4c <tcp_process+0x170>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008a6c:	4b4f      	ldr	r3, [pc, #316]	; (8008bac <tcp_process+0x2d0>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a70:	4a4f      	ldr	r2, [pc, #316]	; (8008bb0 <tcp_process+0x2d4>)
 8008a72:	4950      	ldr	r1, [pc, #320]	; (8008bb4 <tcp_process+0x2d8>)
 8008a74:	880c      	ldrh	r4, [r1, #0]
 8008a76:	4949      	ldr	r1, [pc, #292]	; (8008b9c <tcp_process+0x2c0>)
 8008a78:	6809      	ldr	r1, [r1, #0]
 8008a7a:	4849      	ldr	r0, [pc, #292]	; (8008ba0 <tcp_process+0x2c4>)
 8008a7c:	6800      	ldr	r0, [r0, #0]
 8008a7e:	881d      	ldrh	r5, [r3, #0]
 8008a80:	9501      	str	r5, [sp, #4]
 8008a82:	885b      	ldrh	r3, [r3, #2]
 8008a84:	9300      	str	r3, [sp, #0]
 8008a86:	4613      	mov	r3, r2
 8008a88:	3204      	adds	r2, #4
 8008a8a:	4421      	add	r1, r4
 8008a8c:	f001 f810 	bl	8009ab0 <tcp_rst>
  return ERR_OK;
 8008a90:	2500      	movs	r5, #0
 8008a92:	e73b      	b.n	800890c <tcp_process+0x30>
    if (flags & TCP_ACK) {
 8008a94:	4b40      	ldr	r3, [pc, #256]	; (8008b98 <tcp_process+0x2bc>)
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	f013 0f10 	tst.w	r3, #16
 8008a9c:	d059      	beq.n	8008b52 <tcp_process+0x276>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8008a9e:	4b40      	ldr	r3, [pc, #256]	; (8008ba0 <tcp_process+0x2c4>)
 8008aa0:	6818      	ldr	r0, [r3, #0]
 8008aa2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008aa4:	1ac3      	subs	r3, r0, r3
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d403      	bmi.n	8008ab2 <tcp_process+0x1d6>
 8008aaa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008aac:	1ac3      	subs	r3, r0, r3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	dd11      	ble.n	8008ad6 <tcp_process+0x1fa>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008ab2:	4b3e      	ldr	r3, [pc, #248]	; (8008bac <tcp_process+0x2d0>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ab6:	4a3e      	ldr	r2, [pc, #248]	; (8008bb0 <tcp_process+0x2d4>)
 8008ab8:	493e      	ldr	r1, [pc, #248]	; (8008bb4 <tcp_process+0x2d8>)
 8008aba:	880c      	ldrh	r4, [r1, #0]
 8008abc:	4937      	ldr	r1, [pc, #220]	; (8008b9c <tcp_process+0x2c0>)
 8008abe:	6809      	ldr	r1, [r1, #0]
 8008ac0:	881d      	ldrh	r5, [r3, #0]
 8008ac2:	9501      	str	r5, [sp, #4]
 8008ac4:	885b      	ldrh	r3, [r3, #2]
 8008ac6:	9300      	str	r3, [sp, #0]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	3204      	adds	r2, #4
 8008acc:	4421      	add	r1, r4
 8008ace:	f000 ffef 	bl	8009ab0 <tcp_rst>
  return ERR_OK;
 8008ad2:	2500      	movs	r5, #0
 8008ad4:	e71a      	b.n	800890c <tcp_process+0x30>
        pcb->state = ESTABLISHED;
 8008ad6:	2304      	movs	r3, #4
 8008ad8:	7623      	strb	r3, [r4, #24]
        LWIP_ASSERT("pcb->accept != NULL", pcb->accept != NULL);
 8008ada:	6963      	ldr	r3, [r4, #20]
        TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
 8008adc:	b17b      	cbz	r3, 8008afe <tcp_process+0x222>
 8008ade:	2200      	movs	r2, #0
 8008ae0:	4621      	mov	r1, r4
 8008ae2:	6920      	ldr	r0, [r4, #16]
 8008ae4:	4798      	blx	r3
 8008ae6:	4605      	mov	r5, r0
        if (err != ERR_OK) {
 8008ae8:	b165      	cbz	r5, 8008b04 <tcp_process+0x228>
          if (err != ERR_ABRT) {
 8008aea:	f115 0f0c 	cmn.w	r5, #12
 8008aee:	f43f af0d 	beq.w	800890c <tcp_process+0x30>
            tcp_abort(pcb);
 8008af2:	4620      	mov	r0, r4
 8008af4:	f7fe ff78 	bl	80079e8 <tcp_abort>
          return ERR_ABRT;
 8008af8:	f06f 050b 	mvn.w	r5, #11
 8008afc:	e706      	b.n	800890c <tcp_process+0x30>
        TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
 8008afe:	f06f 050e 	mvn.w	r5, #14
 8008b02:	e7f1      	b.n	8008ae8 <tcp_process+0x20c>
        tcp_receive(pcb);
 8008b04:	4620      	mov	r0, r4
 8008b06:	f7ff faa5 	bl	8008054 <tcp_receive>
        pcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(pcb);
 8008b0a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8008b0e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
        if (pcb->acked != 0) {
 8008b12:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8008b16:	b113      	cbz	r3, 8008b1e <tcp_process+0x242>
          pcb->acked--;
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008b1e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8008b20:	0053      	lsls	r3, r2, #1
 8008b22:	f241 111c 	movw	r1, #4380	; 0x111c
 8008b26:	428b      	cmp	r3, r1
 8008b28:	bf38      	it	cc
 8008b2a:	460b      	movcc	r3, r1
 8008b2c:	0092      	lsls	r2, r2, #2
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	bf28      	it	cs
 8008b32:	4613      	movcs	r3, r2
 8008b34:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
        if (recv_flags & TF_GOT_FIN) {
 8008b38:	4b1a      	ldr	r3, [pc, #104]	; (8008ba4 <tcp_process+0x2c8>)
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	f013 0f20 	tst.w	r3, #32
 8008b40:	f43f aee4 	beq.w	800890c <tcp_process+0x30>
          tcp_ack_now(pcb);
 8008b44:	7fa3      	ldrb	r3, [r4, #30]
 8008b46:	f043 0302 	orr.w	r3, r3, #2
 8008b4a:	77a3      	strb	r3, [r4, #30]
          pcb->state = CLOSE_WAIT;
 8008b4c:	2307      	movs	r3, #7
 8008b4e:	7623      	strb	r3, [r4, #24]
 8008b50:	e6dc      	b.n	800890c <tcp_process+0x30>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008b52:	f013 0f02 	tst.w	r3, #2
 8008b56:	f000 80f3 	beq.w	8008d40 <tcp_process+0x464>
 8008b5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	4a0f      	ldr	r2, [pc, #60]	; (8008b9c <tcp_process+0x2c0>)
 8008b60:	6812      	ldr	r2, [r2, #0]
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d001      	beq.n	8008b6a <tcp_process+0x28e>
  return ERR_OK;
 8008b66:	2500      	movs	r5, #0
 8008b68:	e6d0      	b.n	800890c <tcp_process+0x30>
      tcp_rexmit(pcb);
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f000 fffc 	bl	8009b68 <tcp_rexmit>
  return ERR_OK;
 8008b70:	2500      	movs	r5, #0
 8008b72:	e6cb      	b.n	800890c <tcp_process+0x30>
    tcp_receive(pcb);
 8008b74:	4620      	mov	r0, r4
 8008b76:	f7ff fa6d 	bl	8008054 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008b7a:	4b0a      	ldr	r3, [pc, #40]	; (8008ba4 <tcp_process+0x2c8>)
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	f013 0f20 	tst.w	r3, #32
 8008b82:	f000 80df 	beq.w	8008d44 <tcp_process+0x468>
      tcp_ack_now(pcb);
 8008b86:	7fa3      	ldrb	r3, [r4, #30]
 8008b88:	f043 0302 	orr.w	r3, r3, #2
 8008b8c:	77a3      	strb	r3, [r4, #30]
      pcb->state = CLOSE_WAIT;
 8008b8e:	2307      	movs	r3, #7
 8008b90:	7623      	strb	r3, [r4, #24]
  return ERR_OK;
 8008b92:	2500      	movs	r5, #0
 8008b94:	e6ba      	b.n	800890c <tcp_process+0x30>
 8008b96:	bf00      	nop
 8008b98:	20003ecc 	.word	0x20003ecc
 8008b9c:	20003ee8 	.word	0x20003ee8
 8008ba0:	20003ec8 	.word	0x20003ec8
 8008ba4:	20003ee4 	.word	0x20003ee4
 8008ba8:	20007b30 	.word	0x20007b30
 8008bac:	20003ef0 	.word	0x20003ef0
 8008bb0:	20004068 	.word	0x20004068
 8008bb4:	20003efc 	.word	0x20003efc
    tcp_receive(pcb);
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f7ff fa4b 	bl	8008054 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8008bbe:	4b65      	ldr	r3, [pc, #404]	; (8008d54 <tcp_process+0x478>)
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	f013 0f20 	tst.w	r3, #32
 8008bc6:	d035      	beq.n	8008c34 <tcp_process+0x358>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 8008bc8:	4b63      	ldr	r3, [pc, #396]	; (8008d58 <tcp_process+0x47c>)
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	f013 0f10 	tst.w	r3, #16
 8008bd0:	d004      	beq.n	8008bdc <tcp_process+0x300>
 8008bd2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8008bd4:	4b61      	ldr	r3, [pc, #388]	; (8008d5c <tcp_process+0x480>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d007      	beq.n	8008bec <tcp_process+0x310>
        tcp_ack_now(pcb);
 8008bdc:	7fa3      	ldrb	r3, [r4, #30]
 8008bde:	f043 0302 	orr.w	r3, r3, #2
 8008be2:	77a3      	strb	r3, [r4, #30]
        pcb->state = CLOSING;
 8008be4:	2308      	movs	r3, #8
 8008be6:	7623      	strb	r3, [r4, #24]
  return ERR_OK;
 8008be8:	2500      	movs	r5, #0
 8008bea:	e68f      	b.n	800890c <tcp_process+0x30>
        tcp_ack_now(pcb);
 8008bec:	7fa3      	ldrb	r3, [r4, #30]
 8008bee:	f043 0302 	orr.w	r3, r3, #2
 8008bf2:	77a3      	strb	r3, [r4, #30]
        tcp_pcb_purge(pcb);
 8008bf4:	4620      	mov	r0, r4
 8008bf6:	f7fe fb30 	bl	800725a <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008bfa:	4b59      	ldr	r3, [pc, #356]	; (8008d60 <tcp_process+0x484>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	429c      	cmp	r4, r3
 8008c00:	d005      	beq.n	8008c0e <tcp_process+0x332>
 8008c02:	b153      	cbz	r3, 8008c1a <tcp_process+0x33e>
 8008c04:	68da      	ldr	r2, [r3, #12]
 8008c06:	4294      	cmp	r4, r2
 8008c08:	d005      	beq.n	8008c16 <tcp_process+0x33a>
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	e7f9      	b.n	8008c02 <tcp_process+0x326>
 8008c0e:	68da      	ldr	r2, [r3, #12]
 8008c10:	4b53      	ldr	r3, [pc, #332]	; (8008d60 <tcp_process+0x484>)
 8008c12:	601a      	str	r2, [r3, #0]
 8008c14:	e001      	b.n	8008c1a <tcp_process+0x33e>
 8008c16:	68e2      	ldr	r2, [r4, #12]
 8008c18:	60da      	str	r2, [r3, #12]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	4b51      	ldr	r3, [pc, #324]	; (8008d64 <tcp_process+0x488>)
 8008c1e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008c20:	230a      	movs	r3, #10
 8008c22:	7623      	strb	r3, [r4, #24]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008c24:	4b50      	ldr	r3, [pc, #320]	; (8008d68 <tcp_process+0x48c>)
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	60e2      	str	r2, [r4, #12]
 8008c2a:	601c      	str	r4, [r3, #0]
 8008c2c:	f7fd fcf0 	bl	8006610 <tcp_timer_needed>
  return ERR_OK;
 8008c30:	2500      	movs	r5, #0
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008c32:	e66b      	b.n	800890c <tcp_process+0x30>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 8008c34:	4b48      	ldr	r3, [pc, #288]	; (8008d58 <tcp_process+0x47c>)
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	f013 0f10 	tst.w	r3, #16
 8008c3c:	f000 8084 	beq.w	8008d48 <tcp_process+0x46c>
 8008c40:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8008c42:	4b46      	ldr	r3, [pc, #280]	; (8008d5c <tcp_process+0x480>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d001      	beq.n	8008c4e <tcp_process+0x372>
  return ERR_OK;
 8008c4a:	2500      	movs	r5, #0
 8008c4c:	e65e      	b.n	800890c <tcp_process+0x30>
      pcb->state = FIN_WAIT_2;
 8008c4e:	2306      	movs	r3, #6
 8008c50:	7623      	strb	r3, [r4, #24]
  return ERR_OK;
 8008c52:	2500      	movs	r5, #0
 8008c54:	e65a      	b.n	800890c <tcp_process+0x30>
    tcp_receive(pcb);
 8008c56:	4620      	mov	r0, r4
 8008c58:	f7ff f9fc 	bl	8008054 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8008c5c:	4b3d      	ldr	r3, [pc, #244]	; (8008d54 <tcp_process+0x478>)
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	f013 0f20 	tst.w	r3, #32
 8008c64:	d101      	bne.n	8008c6a <tcp_process+0x38e>
  return ERR_OK;
 8008c66:	2500      	movs	r5, #0
 8008c68:	e650      	b.n	800890c <tcp_process+0x30>
      tcp_ack_now(pcb);
 8008c6a:	7fa3      	ldrb	r3, [r4, #30]
 8008c6c:	f043 0302 	orr.w	r3, r3, #2
 8008c70:	77a3      	strb	r3, [r4, #30]
      tcp_pcb_purge(pcb);
 8008c72:	4620      	mov	r0, r4
 8008c74:	f7fe faf1 	bl	800725a <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008c78:	4b39      	ldr	r3, [pc, #228]	; (8008d60 <tcp_process+0x484>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	429c      	cmp	r4, r3
 8008c7e:	d005      	beq.n	8008c8c <tcp_process+0x3b0>
 8008c80:	b153      	cbz	r3, 8008c98 <tcp_process+0x3bc>
 8008c82:	68da      	ldr	r2, [r3, #12]
 8008c84:	4294      	cmp	r4, r2
 8008c86:	d005      	beq.n	8008c94 <tcp_process+0x3b8>
 8008c88:	4613      	mov	r3, r2
 8008c8a:	e7f9      	b.n	8008c80 <tcp_process+0x3a4>
 8008c8c:	68da      	ldr	r2, [r3, #12]
 8008c8e:	4b34      	ldr	r3, [pc, #208]	; (8008d60 <tcp_process+0x484>)
 8008c90:	601a      	str	r2, [r3, #0]
 8008c92:	e001      	b.n	8008c98 <tcp_process+0x3bc>
 8008c94:	68e2      	ldr	r2, [r4, #12]
 8008c96:	60da      	str	r2, [r3, #12]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	4b32      	ldr	r3, [pc, #200]	; (8008d64 <tcp_process+0x488>)
 8008c9c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8008c9e:	230a      	movs	r3, #10
 8008ca0:	7623      	strb	r3, [r4, #24]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8008ca2:	4b31      	ldr	r3, [pc, #196]	; (8008d68 <tcp_process+0x48c>)
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	60e2      	str	r2, [r4, #12]
 8008ca8:	601c      	str	r4, [r3, #0]
 8008caa:	f7fd fcb1 	bl	8006610 <tcp_timer_needed>
  return ERR_OK;
 8008cae:	2500      	movs	r5, #0
 8008cb0:	e62c      	b.n	800890c <tcp_process+0x30>
    tcp_receive(pcb);
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f7ff f9ce 	bl	8008054 <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
 8008cb8:	4b27      	ldr	r3, [pc, #156]	; (8008d58 <tcp_process+0x47c>)
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	f013 0f10 	tst.w	r3, #16
 8008cc0:	d044      	beq.n	8008d4c <tcp_process+0x470>
 8008cc2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8008cc4:	4b25      	ldr	r3, [pc, #148]	; (8008d5c <tcp_process+0x480>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d001      	beq.n	8008cd0 <tcp_process+0x3f4>
  return ERR_OK;
 8008ccc:	2500      	movs	r5, #0
 8008cce:	e61d      	b.n	800890c <tcp_process+0x30>
      tcp_pcb_purge(pcb);
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	f7fe fac2 	bl	800725a <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008cd6:	4b22      	ldr	r3, [pc, #136]	; (8008d60 <tcp_process+0x484>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	429c      	cmp	r4, r3
 8008cdc:	d005      	beq.n	8008cea <tcp_process+0x40e>
 8008cde:	b153      	cbz	r3, 8008cf6 <tcp_process+0x41a>
 8008ce0:	68da      	ldr	r2, [r3, #12]
 8008ce2:	4294      	cmp	r4, r2
 8008ce4:	d005      	beq.n	8008cf2 <tcp_process+0x416>
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	e7f9      	b.n	8008cde <tcp_process+0x402>
 8008cea:	68da      	ldr	r2, [r3, #12]
 8008cec:	4b1c      	ldr	r3, [pc, #112]	; (8008d60 <tcp_process+0x484>)
 8008cee:	601a      	str	r2, [r3, #0]
 8008cf0:	e001      	b.n	8008cf6 <tcp_process+0x41a>
 8008cf2:	68e2      	ldr	r2, [r4, #12]
 8008cf4:	60da      	str	r2, [r3, #12]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	4b1a      	ldr	r3, [pc, #104]	; (8008d64 <tcp_process+0x488>)
 8008cfa:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8008cfc:	230a      	movs	r3, #10
 8008cfe:	7623      	strb	r3, [r4, #24]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8008d00:	4b19      	ldr	r3, [pc, #100]	; (8008d68 <tcp_process+0x48c>)
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	60e2      	str	r2, [r4, #12]
 8008d06:	601c      	str	r4, [r3, #0]
 8008d08:	f7fd fc82 	bl	8006610 <tcp_timer_needed>
  return ERR_OK;
 8008d0c:	2500      	movs	r5, #0
 8008d0e:	e5fd      	b.n	800890c <tcp_process+0x30>
    tcp_receive(pcb);
 8008d10:	4620      	mov	r0, r4
 8008d12:	f7ff f99f 	bl	8008054 <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
 8008d16:	4b10      	ldr	r3, [pc, #64]	; (8008d58 <tcp_process+0x47c>)
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	f013 0f10 	tst.w	r3, #16
 8008d1e:	d017      	beq.n	8008d50 <tcp_process+0x474>
 8008d20:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8008d22:	4b0e      	ldr	r3, [pc, #56]	; (8008d5c <tcp_process+0x480>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d001      	beq.n	8008d2e <tcp_process+0x452>
  return ERR_OK;
 8008d2a:	2500      	movs	r5, #0
 8008d2c:	e5ee      	b.n	800890c <tcp_process+0x30>
      recv_flags |= TF_CLOSED;
 8008d2e:	4a09      	ldr	r2, [pc, #36]	; (8008d54 <tcp_process+0x478>)
 8008d30:	7813      	ldrb	r3, [r2, #0]
 8008d32:	f043 0310 	orr.w	r3, r3, #16
 8008d36:	7013      	strb	r3, [r2, #0]
  return ERR_OK;
 8008d38:	2500      	movs	r5, #0
 8008d3a:	e5e7      	b.n	800890c <tcp_process+0x30>
 8008d3c:	2500      	movs	r5, #0
 8008d3e:	e5e5      	b.n	800890c <tcp_process+0x30>
 8008d40:	2500      	movs	r5, #0
 8008d42:	e5e3      	b.n	800890c <tcp_process+0x30>
 8008d44:	2500      	movs	r5, #0
 8008d46:	e5e1      	b.n	800890c <tcp_process+0x30>
 8008d48:	2500      	movs	r5, #0
 8008d4a:	e5df      	b.n	800890c <tcp_process+0x30>
 8008d4c:	2500      	movs	r5, #0
 8008d4e:	e5dd      	b.n	800890c <tcp_process+0x30>
 8008d50:	2500      	movs	r5, #0
 8008d52:	e5db      	b.n	800890c <tcp_process+0x30>
 8008d54:	20003ee4 	.word	0x20003ee4
 8008d58:	20003ecc 	.word	0x20003ecc
 8008d5c:	20003ec8 	.word	0x20003ec8
 8008d60:	20007b2c 	.word	0x20007b2c
 8008d64:	20007b28 	.word	0x20007b28
 8008d68:	20007b3c 	.word	0x20007b3c

08008d6c <tcp_input>:
{
 8008d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	4605      	mov	r5, r0
  tcphdr = (struct tcp_hdr *)p->payload;
 8008d72:	6842      	ldr	r2, [r0, #4]
 8008d74:	4b9c      	ldr	r3, [pc, #624]	; (8008fe8 <tcp_input+0x27c>)
 8008d76:	601a      	str	r2, [r3, #0]
  if (p->len < sizeof(struct tcp_hdr)) {
 8008d78:	8943      	ldrh	r3, [r0, #10]
 8008d7a:	2b13      	cmp	r3, #19
 8008d7c:	d921      	bls.n	8008dc2 <tcp_input+0x56>
      (!ip_current_is_v6() && ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif())) ||
 8008d7e:	4b9b      	ldr	r3, [pc, #620]	; (8008fec <tcp_input+0x280>)
 8008d80:	6819      	ldr	r1, [r3, #0]
 8008d82:	6958      	ldr	r0, [r3, #20]
 8008d84:	f7fd f835 	bl	8005df2 <ip4_addr_isbroadcast_u32>
  if (
 8008d88:	b9d8      	cbnz	r0, 8008dc2 <tcp_input+0x56>
       ip_addr_ismulticast(ip_current_dest_addr())) {
 8008d8a:	4b98      	ldr	r3, [pc, #608]	; (8008fec <tcp_input+0x280>)
 8008d8c:	695b      	ldr	r3, [r3, #20]
 8008d8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      (!ip_current_is_v6() && ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif())) ||
 8008d92:	2be0      	cmp	r3, #224	; 0xe0
 8008d94:	d015      	beq.n	8008dc2 <tcp_input+0x56>
  hdrlen = TCPH_HDRLEN(tcphdr);
 8008d96:	4b94      	ldr	r3, [pc, #592]	; (8008fe8 <tcp_input+0x27c>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	8998      	ldrh	r0, [r3, #12]
 8008d9c:	f7fc fda9 	bl	80058f2 <lwip_ntohs>
 8008da0:	f3c0 300f 	ubfx	r0, r0, #12, #16
 8008da4:	b2c3      	uxtb	r3, r0
  tcphdr_opt1len = (hdrlen * 4) - TCP_HLEN;
 8008da6:	1f5c      	subs	r4, r3, #5
 8008da8:	00a4      	lsls	r4, r4, #2
 8008daa:	b2a4      	uxth	r4, r4
 8008dac:	4a90      	ldr	r2, [pc, #576]	; (8008ff0 <tcp_input+0x284>)
 8008dae:	8014      	strh	r4, [r2, #0]
  tcphdr_opt2 = NULL;
 8008db0:	2100      	movs	r1, #0
 8008db2:	4a90      	ldr	r2, [pc, #576]	; (8008ff4 <tcp_input+0x288>)
 8008db4:	6011      	str	r1, [r2, #0]
  if (p->len < hdrlen * 4) {
 8008db6:	896a      	ldrh	r2, [r5, #10]
 8008db8:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 8008dbc:	da25      	bge.n	8008e0a <tcp_input+0x9e>
    if (p->len >= TCP_HLEN) {
 8008dbe:	2a13      	cmp	r2, #19
 8008dc0:	d804      	bhi.n	8008dcc <tcp_input+0x60>
  pbuf_free(p);
 8008dc2:	4628      	mov	r0, r5
 8008dc4:	f7fd ffe8 	bl	8006d98 <pbuf_free>
}
 8008dc8:	b003      	add	sp, #12
 8008dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pbuf_header(p, -TCP_HLEN); /* cannot fail */
 8008dcc:	f06f 0113 	mvn.w	r1, #19
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	f7fd ffd7 	bl	8006d84 <pbuf_header>
      LWIP_ASSERT("tcphdr_opt1len >= p->len", tcphdr_opt1len >= p->len);
 8008dd6:	896b      	ldrh	r3, [r5, #10]
      tcphdr_opt1len = p->len;
 8008dd8:	4a85      	ldr	r2, [pc, #532]	; (8008ff0 <tcp_input+0x284>)
 8008dda:	8013      	strh	r3, [r2, #0]
      if (optlen > tcphdr_opt1len) {
 8008ddc:	429c      	cmp	r4, r3
 8008dde:	d91b      	bls.n	8008e18 <tcp_input+0xac>
        u8_t phret = pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8008de0:	425b      	negs	r3, r3
 8008de2:	b219      	sxth	r1, r3
 8008de4:	4628      	mov	r0, r5
 8008de6:	f7fd ffcd 	bl	8006d84 <pbuf_header>
        tcphdr_opt2 = (u8_t*)p->next->payload;
 8008dea:	6828      	ldr	r0, [r5, #0]
 8008dec:	6842      	ldr	r2, [r0, #4]
 8008dee:	4b81      	ldr	r3, [pc, #516]	; (8008ff4 <tcp_input+0x288>)
 8008df0:	601a      	str	r2, [r3, #0]
        opt2len = optlen - tcphdr_opt1len;
 8008df2:	4b7f      	ldr	r3, [pc, #508]	; (8008ff0 <tcp_input+0x284>)
 8008df4:	881b      	ldrh	r3, [r3, #0]
 8008df6:	1ae4      	subs	r4, r4, r3
 8008df8:	b2a4      	uxth	r4, r4
        phret = pbuf_header(p->next, -opt2len);
 8008dfa:	4261      	negs	r1, r4
 8008dfc:	b209      	sxth	r1, r1
 8008dfe:	f7fd ffc1 	bl	8006d84 <pbuf_header>
        p->tot_len -= opt2len;
 8008e02:	892b      	ldrh	r3, [r5, #8]
 8008e04:	1b1c      	subs	r4, r3, r4
 8008e06:	812c      	strh	r4, [r5, #8]
 8008e08:	e006      	b.n	8008e18 <tcp_input+0xac>
    pbuf_header(p, -(hdrlen * 4)); /* cannot fail */
 8008e0a:	ebc0 3080 	rsb	r0, r0, r0, lsl #14
 8008e0e:	0081      	lsls	r1, r0, #2
 8008e10:	b209      	sxth	r1, r1
 8008e12:	4628      	mov	r0, r5
 8008e14:	f7fd ffb6 	bl	8006d84 <pbuf_header>
  tcphdr->src = ntohs(tcphdr->src);
 8008e18:	4c73      	ldr	r4, [pc, #460]	; (8008fe8 <tcp_input+0x27c>)
 8008e1a:	6826      	ldr	r6, [r4, #0]
 8008e1c:	8830      	ldrh	r0, [r6, #0]
 8008e1e:	f7fc fd68 	bl	80058f2 <lwip_ntohs>
 8008e22:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = ntohs(tcphdr->dest);
 8008e24:	6826      	ldr	r6, [r4, #0]
 8008e26:	8870      	ldrh	r0, [r6, #2]
 8008e28:	f7fc fd63 	bl	80058f2 <lwip_ntohs>
 8008e2c:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
 8008e2e:	6826      	ldr	r6, [r4, #0]
 8008e30:	6870      	ldr	r0, [r6, #4]
 8008e32:	f7fc fd6e 	bl	8005912 <lwip_ntohl>
 8008e36:	6070      	str	r0, [r6, #4]
 8008e38:	4b6f      	ldr	r3, [pc, #444]	; (8008ff8 <tcp_input+0x28c>)
 8008e3a:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
 8008e3c:	6826      	ldr	r6, [r4, #0]
 8008e3e:	68b0      	ldr	r0, [r6, #8]
 8008e40:	f7fc fd67 	bl	8005912 <lwip_ntohl>
 8008e44:	60b0      	str	r0, [r6, #8]
 8008e46:	4b6d      	ldr	r3, [pc, #436]	; (8008ffc <tcp_input+0x290>)
 8008e48:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = ntohs(tcphdr->wnd);
 8008e4a:	6826      	ldr	r6, [r4, #0]
 8008e4c:	89f0      	ldrh	r0, [r6, #14]
 8008e4e:	f7fc fd50 	bl	80058f2 <lwip_ntohs>
 8008e52:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 8008e54:	6823      	ldr	r3, [r4, #0]
 8008e56:	8998      	ldrh	r0, [r3, #12]
 8008e58:	f7fc fd4b 	bl	80058f2 <lwip_ntohs>
 8008e5c:	f000 073f 	and.w	r7, r0, #63	; 0x3f
 8008e60:	4b67      	ldr	r3, [pc, #412]	; (8009000 <tcp_input+0x294>)
 8008e62:	701f      	strb	r7, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8008e64:	892b      	ldrh	r3, [r5, #8]
 8008e66:	f017 0203 	ands.w	r2, r7, #3
 8008e6a:	bf18      	it	ne
 8008e6c:	2201      	movne	r2, #1
 8008e6e:	4413      	add	r3, r2
 8008e70:	4a64      	ldr	r2, [pc, #400]	; (8009004 <tcp_input+0x298>)
 8008e72:	8013      	strh	r3, [r2, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e74:	4b64      	ldr	r3, [pc, #400]	; (8009008 <tcp_input+0x29c>)
 8008e76:	6818      	ldr	r0, [r3, #0]
 8008e78:	4604      	mov	r4, r0
  prev = NULL;
 8008e7a:	2600      	movs	r6, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e7c:	e001      	b.n	8008e82 <tcp_input+0x116>
    prev = pcb;
 8008e7e:	4626      	mov	r6, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e80:	68e4      	ldr	r4, [r4, #12]
 8008e82:	b1cc      	cbz	r4, 8008eb8 <tcp_input+0x14c>
    if (pcb->remote_port == tcphdr->src &&
 8008e84:	8ba1      	ldrh	r1, [r4, #28]
 8008e86:	4b58      	ldr	r3, [pc, #352]	; (8008fe8 <tcp_input+0x27c>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	881a      	ldrh	r2, [r3, #0]
 8008e8c:	4291      	cmp	r1, r2
 8008e8e:	d1f6      	bne.n	8008e7e <tcp_input+0x112>
        pcb->local_port == tcphdr->dest &&
 8008e90:	8b62      	ldrh	r2, [r4, #26]
 8008e92:	885b      	ldrh	r3, [r3, #2]
    if (pcb->remote_port == tcphdr->src &&
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d1f2      	bne.n	8008e7e <tcp_input+0x112>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008e98:	6862      	ldr	r2, [r4, #4]
 8008e9a:	4b54      	ldr	r3, [pc, #336]	; (8008fec <tcp_input+0x280>)
 8008e9c:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d1ed      	bne.n	8008e7e <tcp_input+0x112>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008ea2:	6822      	ldr	r2, [r4, #0]
 8008ea4:	4b51      	ldr	r3, [pc, #324]	; (8008fec <tcp_input+0x280>)
 8008ea6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d1e8      	bne.n	8008e7e <tcp_input+0x112>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008eac:	68e3      	ldr	r3, [r4, #12]
      if (prev != NULL) {
 8008eae:	b11e      	cbz	r6, 8008eb8 <tcp_input+0x14c>
        prev->next = pcb->next;
 8008eb0:	60f3      	str	r3, [r6, #12]
        pcb->next = tcp_active_pcbs;
 8008eb2:	60e0      	str	r0, [r4, #12]
        tcp_active_pcbs = pcb;
 8008eb4:	4b54      	ldr	r3, [pc, #336]	; (8009008 <tcp_input+0x29c>)
 8008eb6:	601c      	str	r4, [r3, #0]
  if (pcb == NULL) {
 8008eb8:	2c00      	cmp	r4, #0
 8008eba:	d050      	beq.n	8008f5e <tcp_input+0x1f2>
  if (pcb != NULL) {
 8008ebc:	2c00      	cmp	r4, #0
 8008ebe:	f000 8120 	beq.w	8009102 <tcp_input+0x396>
    inseg.next = NULL;
 8008ec2:	4b52      	ldr	r3, [pc, #328]	; (800900c <tcp_input+0x2a0>)
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008ec8:	8929      	ldrh	r1, [r5, #8]
 8008eca:	8119      	strh	r1, [r3, #8]
    inseg.p = p;
 8008ecc:	605d      	str	r5, [r3, #4]
    inseg.tcphdr = tcphdr;
 8008ece:	4946      	ldr	r1, [pc, #280]	; (8008fe8 <tcp_input+0x27c>)
 8008ed0:	6809      	ldr	r1, [r1, #0]
 8008ed2:	60d9      	str	r1, [r3, #12]
    recv_data = NULL;
 8008ed4:	4b4e      	ldr	r3, [pc, #312]	; (8009010 <tcp_input+0x2a4>)
 8008ed6:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008ed8:	4b4e      	ldr	r3, [pc, #312]	; (8009014 <tcp_input+0x2a8>)
 8008eda:	701a      	strb	r2, [r3, #0]
    if (flags & TCP_PSH) {
 8008edc:	f017 0f08 	tst.w	r7, #8
 8008ee0:	d003      	beq.n	8008eea <tcp_input+0x17e>
      p->flags |= PBUF_FLAG_PUSH;
 8008ee2:	7b6b      	ldrb	r3, [r5, #13]
 8008ee4:	f043 0301 	orr.w	r3, r3, #1
 8008ee8:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 8008eea:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008eec:	b153      	cbz	r3, 8008f04 <tcp_input+0x198>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f7fe fc68 	bl	80077c4 <tcp_process_refused_data>
 8008ef4:	f110 0f0c 	cmn.w	r0, #12
 8008ef8:	d021      	beq.n	8008f3e <tcp_input+0x1d2>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008efa:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008efc:	b113      	cbz	r3, 8008f04 <tcp_input+0x198>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008efe:	4b41      	ldr	r3, [pc, #260]	; (8009004 <tcp_input+0x298>)
 8008f00:	881b      	ldrh	r3, [r3, #0]
 8008f02:	b9e3      	cbnz	r3, 8008f3e <tcp_input+0x1d2>
    tcp_input_pcb = pcb;
 8008f04:	4b44      	ldr	r3, [pc, #272]	; (8009018 <tcp_input+0x2ac>)
 8008f06:	601c      	str	r4, [r3, #0]
    err = tcp_process(pcb);
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f7ff fce7 	bl	80088dc <tcp_process>
    if (err != ERR_ABRT) {
 8008f0e:	f110 0f0c 	cmn.w	r0, #12
 8008f12:	d014      	beq.n	8008f3e <tcp_input+0x1d2>
      if (recv_flags & TF_RESET) {
 8008f14:	4b3f      	ldr	r3, [pc, #252]	; (8009014 <tcp_input+0x2a8>)
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	f013 0f08 	tst.w	r3, #8
 8008f1c:	f000 8082 	beq.w	8009024 <tcp_input+0x2b8>
        TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
 8008f20:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008f24:	b11b      	cbz	r3, 8008f2e <tcp_input+0x1c2>
 8008f26:	f06f 010c 	mvn.w	r1, #12
 8008f2a:	6920      	ldr	r0, [r4, #16]
 8008f2c:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008f2e:	4621      	mov	r1, r4
 8008f30:	4835      	ldr	r0, [pc, #212]	; (8009008 <tcp_input+0x29c>)
 8008f32:	f7fe fb41 	bl	80075b8 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8008f36:	4621      	mov	r1, r4
 8008f38:	2001      	movs	r0, #1
 8008f3a:	f7fd fdab 	bl	8006a94 <memp_free>
    tcp_input_pcb = NULL;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	4a35      	ldr	r2, [pc, #212]	; (8009018 <tcp_input+0x2ac>)
 8008f42:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
 8008f44:	4a32      	ldr	r2, [pc, #200]	; (8009010 <tcp_input+0x2a4>)
 8008f46:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL)
 8008f48:	4b30      	ldr	r3, [pc, #192]	; (800900c <tcp_input+0x2a0>)
 8008f4a:	6858      	ldr	r0, [r3, #4]
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	f43f af3b 	beq.w	8008dc8 <tcp_input+0x5c>
      pbuf_free(inseg.p);
 8008f52:	f7fd ff21 	bl	8006d98 <pbuf_free>
      inseg.p = NULL;
 8008f56:	2200      	movs	r2, #0
 8008f58:	4b2c      	ldr	r3, [pc, #176]	; (800900c <tcp_input+0x2a0>)
 8008f5a:	605a      	str	r2, [r3, #4]
 8008f5c:	e734      	b.n	8008dc8 <tcp_input+0x5c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f5e:	4b2f      	ldr	r3, [pc, #188]	; (800901c <tcp_input+0x2b0>)
 8008f60:	681c      	ldr	r4, [r3, #0]
 8008f62:	e000      	b.n	8008f66 <tcp_input+0x1fa>
 8008f64:	68e4      	ldr	r4, [r4, #12]
 8008f66:	b1d4      	cbz	r4, 8008f9e <tcp_input+0x232>
      if (pcb->remote_port == tcphdr->src &&
 8008f68:	8ba1      	ldrh	r1, [r4, #28]
 8008f6a:	4b1f      	ldr	r3, [pc, #124]	; (8008fe8 <tcp_input+0x27c>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	881a      	ldrh	r2, [r3, #0]
 8008f70:	4291      	cmp	r1, r2
 8008f72:	d1f7      	bne.n	8008f64 <tcp_input+0x1f8>
          pcb->local_port == tcphdr->dest &&
 8008f74:	8b62      	ldrh	r2, [r4, #26]
 8008f76:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d1f3      	bne.n	8008f64 <tcp_input+0x1f8>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008f7c:	6862      	ldr	r2, [r4, #4]
 8008f7e:	4b1b      	ldr	r3, [pc, #108]	; (8008fec <tcp_input+0x280>)
 8008f80:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d1ee      	bne.n	8008f64 <tcp_input+0x1f8>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008f86:	6822      	ldr	r2, [r4, #0]
 8008f88:	4b18      	ldr	r3, [pc, #96]	; (8008fec <tcp_input+0x280>)
 8008f8a:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d1e9      	bne.n	8008f64 <tcp_input+0x1f8>
        tcp_timewait_input(pcb);
 8008f90:	4620      	mov	r0, r4
 8008f92:	f7fe ff4b 	bl	8007e2c <tcp_timewait_input>
        pbuf_free(p);
 8008f96:	4628      	mov	r0, r5
 8008f98:	f7fd fefe 	bl	8006d98 <pbuf_free>
        return;
 8008f9c:	e714      	b.n	8008dc8 <tcp_input+0x5c>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008f9e:	4b20      	ldr	r3, [pc, #128]	; (8009020 <tcp_input+0x2b4>)
 8008fa0:	681e      	ldr	r6, [r3, #0]
 8008fa2:	4630      	mov	r0, r6
    prev = NULL;
 8008fa4:	4621      	mov	r1, r4
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008fa6:	e001      	b.n	8008fac <tcp_input+0x240>
      prev = (struct tcp_pcb *)lpcb;
 8008fa8:	4601      	mov	r1, r0
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008faa:	68c0      	ldr	r0, [r0, #12]
 8008fac:	b168      	cbz	r0, 8008fca <tcp_input+0x25e>
      if (lpcb->local_port == tcphdr->dest) {
 8008fae:	8b42      	ldrh	r2, [r0, #26]
 8008fb0:	4b0d      	ldr	r3, [pc, #52]	; (8008fe8 <tcp_input+0x27c>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	885b      	ldrh	r3, [r3, #2]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d1f6      	bne.n	8008fa8 <tcp_input+0x23c>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008fba:	6803      	ldr	r3, [r0, #0]
 8008fbc:	4a0b      	ldr	r2, [pc, #44]	; (8008fec <tcp_input+0x280>)
 8008fbe:	6952      	ldr	r2, [r2, #20]
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d002      	beq.n	8008fca <tcp_input+0x25e>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008fc4:	b108      	cbz	r0, 8008fca <tcp_input+0x25e>
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d1ee      	bne.n	8008fa8 <tcp_input+0x23c>
    if (lpcb != NULL) {
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	f43f af76 	beq.w	8008ebc <tcp_input+0x150>
      if (prev != NULL) {
 8008fd0:	b121      	cbz	r1, 8008fdc <tcp_input+0x270>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008fd2:	68c3      	ldr	r3, [r0, #12]
 8008fd4:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008fd6:	60c6      	str	r6, [r0, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008fd8:	4b11      	ldr	r3, [pc, #68]	; (8009020 <tcp_input+0x2b4>)
 8008fda:	6018      	str	r0, [r3, #0]
      tcp_listen_input(lpcb);
 8008fdc:	f7fe ff70 	bl	8007ec0 <tcp_listen_input>
      pbuf_free(p);
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	f7fd fed9 	bl	8006d98 <pbuf_free>
      return;
 8008fe6:	e6ef      	b.n	8008dc8 <tcp_input+0x5c>
 8008fe8:	20003ef0 	.word	0x20003ef0
 8008fec:	20004058 	.word	0x20004058
 8008ff0:	20003ef4 	.word	0x20003ef4
 8008ff4:	20003ef8 	.word	0x20003ef8
 8008ff8:	20003ee8 	.word	0x20003ee8
 8008ffc:	20003ec8 	.word	0x20003ec8
 8009000:	20003ecc 	.word	0x20003ecc
 8009004:	20003efc 	.word	0x20003efc
 8009008:	20007b2c 	.word	0x20007b2c
 800900c:	20003ed0 	.word	0x20003ed0
 8009010:	20003ee0 	.word	0x20003ee0
 8009014:	20003ee4 	.word	0x20003ee4
 8009018:	20007b40 	.word	0x20007b40
 800901c:	20007b3c 	.word	0x20007b3c
 8009020:	20007b34 	.word	0x20007b34
        if (pcb->acked > 0) {
 8009024:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 8009028:	b13a      	cbz	r2, 800903a <tcp_input+0x2ce>
            TCP_EVENT_SENT(pcb, (u16_t)acked, err);
 800902a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800902c:	b1f3      	cbz	r3, 800906c <tcp_input+0x300>
 800902e:	4621      	mov	r1, r4
 8009030:	6920      	ldr	r0, [r4, #16]
 8009032:	4798      	blx	r3
            if (err == ERR_ABRT) {
 8009034:	f110 0f0c 	cmn.w	r0, #12
 8009038:	d081      	beq.n	8008f3e <tcp_input+0x1d2>
        if (recv_flags & TF_CLOSED) {
 800903a:	4b41      	ldr	r3, [pc, #260]	; (8009140 <tcp_input+0x3d4>)
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	f013 0f10 	tst.w	r3, #16
 8009042:	d015      	beq.n	8009070 <tcp_input+0x304>
          if (!(pcb->flags & TF_RXCLOSED)) {
 8009044:	7fa3      	ldrb	r3, [r4, #30]
 8009046:	f013 0f10 	tst.w	r3, #16
 800904a:	d106      	bne.n	800905a <tcp_input+0x2ee>
            TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
 800904c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009050:	b11b      	cbz	r3, 800905a <tcp_input+0x2ee>
 8009052:	f06f 010d 	mvn.w	r1, #13
 8009056:	6920      	ldr	r0, [r4, #16]
 8009058:	4798      	blx	r3
          tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800905a:	4621      	mov	r1, r4
 800905c:	4839      	ldr	r0, [pc, #228]	; (8009144 <tcp_input+0x3d8>)
 800905e:	f7fe faab 	bl	80075b8 <tcp_pcb_remove>
          memp_free(MEMP_TCP_PCB, pcb);
 8009062:	4621      	mov	r1, r4
 8009064:	2001      	movs	r0, #1
 8009066:	f7fd fd15 	bl	8006a94 <memp_free>
          goto aborted;
 800906a:	e768      	b.n	8008f3e <tcp_input+0x1d2>
            TCP_EVENT_SENT(pcb, (u16_t)acked, err);
 800906c:	2000      	movs	r0, #0
 800906e:	e7e1      	b.n	8009034 <tcp_input+0x2c8>
        if (recv_data != NULL) {
 8009070:	4b35      	ldr	r3, [pc, #212]	; (8009148 <tcp_input+0x3dc>)
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	b192      	cbz	r2, 800909c <tcp_input+0x330>
          if (pcb->flags & TF_RXCLOSED) {
 8009076:	7fa3      	ldrb	r3, [r4, #30]
 8009078:	f013 0f10 	tst.w	r3, #16
 800907c:	d120      	bne.n	80090c0 <tcp_input+0x354>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800907e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8009082:	b325      	cbz	r5, 80090ce <tcp_input+0x362>
 8009084:	2300      	movs	r3, #0
 8009086:	4621      	mov	r1, r4
 8009088:	6920      	ldr	r0, [r4, #16]
 800908a:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 800908c:	f110 0f0c 	cmn.w	r0, #12
 8009090:	f43f af55 	beq.w	8008f3e <tcp_input+0x1d2>
          if (err != ERR_OK) {
 8009094:	b110      	cbz	r0, 800909c <tcp_input+0x330>
            pcb->refused_data = recv_data;
 8009096:	4b2c      	ldr	r3, [pc, #176]	; (8009148 <tcp_input+0x3dc>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	67a3      	str	r3, [r4, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 800909c:	4b28      	ldr	r3, [pc, #160]	; (8009140 <tcp_input+0x3d4>)
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	f013 0f20 	tst.w	r3, #32
 80090a4:	d005      	beq.n	80090b2 <tcp_input+0x346>
          if (pcb->refused_data != NULL) {
 80090a6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80090a8:	b1bb      	cbz	r3, 80090da <tcp_input+0x36e>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80090aa:	7b5a      	ldrb	r2, [r3, #13]
 80090ac:	f042 0220 	orr.w	r2, r2, #32
 80090b0:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 80090b2:	2200      	movs	r2, #0
 80090b4:	4b25      	ldr	r3, [pc, #148]	; (800914c <tcp_input+0x3e0>)
 80090b6:	601a      	str	r2, [r3, #0]
        tcp_output(pcb);
 80090b8:	4620      	mov	r0, r4
 80090ba:	f000 fbff 	bl	80098bc <tcp_output>
 80090be:	e73e      	b.n	8008f3e <tcp_input+0x1d2>
            pbuf_free(recv_data);
 80090c0:	4610      	mov	r0, r2
 80090c2:	f7fd fe69 	bl	8006d98 <pbuf_free>
            tcp_abort(pcb);
 80090c6:	4620      	mov	r0, r4
 80090c8:	f7fe fc8e 	bl	80079e8 <tcp_abort>
            goto aborted;
 80090cc:	e737      	b.n	8008f3e <tcp_input+0x1d2>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80090ce:	2300      	movs	r3, #0
 80090d0:	4621      	mov	r1, r4
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fe fb64 	bl	80077a0 <tcp_recv_null>
 80090d8:	e7d8      	b.n	800908c <tcp_input+0x320>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80090da:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80090dc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80090e0:	d001      	beq.n	80090e6 <tcp_input+0x37a>
              pcb->rcv_wnd++;
 80090e2:	3301      	adds	r3, #1
 80090e4:	85a3      	strh	r3, [r4, #44]	; 0x2c
            TCP_EVENT_CLOSED(pcb, err);
 80090e6:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80090ea:	b145      	cbz	r5, 80090fe <tcp_input+0x392>
 80090ec:	2300      	movs	r3, #0
 80090ee:	461a      	mov	r2, r3
 80090f0:	4621      	mov	r1, r4
 80090f2:	6920      	ldr	r0, [r4, #16]
 80090f4:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 80090f6:	f110 0f0c 	cmn.w	r0, #12
 80090fa:	d1da      	bne.n	80090b2 <tcp_input+0x346>
 80090fc:	e71f      	b.n	8008f3e <tcp_input+0x1d2>
            TCP_EVENT_CLOSED(pcb, err);
 80090fe:	2000      	movs	r0, #0
 8009100:	e7f9      	b.n	80090f6 <tcp_input+0x38a>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009102:	4b13      	ldr	r3, [pc, #76]	; (8009150 <tcp_input+0x3e4>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	8998      	ldrh	r0, [r3, #12]
 8009108:	f7fc fbf3 	bl	80058f2 <lwip_ntohs>
 800910c:	f010 0f04 	tst.w	r0, #4
 8009110:	d003      	beq.n	800911a <tcp_input+0x3ae>
    pbuf_free(p);
 8009112:	4628      	mov	r0, r5
 8009114:	f7fd fe40 	bl	8006d98 <pbuf_free>
 8009118:	e656      	b.n	8008dc8 <tcp_input+0x5c>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800911a:	4b0d      	ldr	r3, [pc, #52]	; (8009150 <tcp_input+0x3e4>)
 800911c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800911e:	4a0d      	ldr	r2, [pc, #52]	; (8009154 <tcp_input+0x3e8>)
 8009120:	490d      	ldr	r1, [pc, #52]	; (8009158 <tcp_input+0x3ec>)
 8009122:	880c      	ldrh	r4, [r1, #0]
 8009124:	490d      	ldr	r1, [pc, #52]	; (800915c <tcp_input+0x3f0>)
 8009126:	6809      	ldr	r1, [r1, #0]
 8009128:	480d      	ldr	r0, [pc, #52]	; (8009160 <tcp_input+0x3f4>)
 800912a:	6800      	ldr	r0, [r0, #0]
 800912c:	881e      	ldrh	r6, [r3, #0]
 800912e:	9601      	str	r6, [sp, #4]
 8009130:	885b      	ldrh	r3, [r3, #2]
 8009132:	9300      	str	r3, [sp, #0]
 8009134:	4613      	mov	r3, r2
 8009136:	3204      	adds	r2, #4
 8009138:	4421      	add	r1, r4
 800913a:	f000 fcb9 	bl	8009ab0 <tcp_rst>
 800913e:	e7e8      	b.n	8009112 <tcp_input+0x3a6>
 8009140:	20003ee4 	.word	0x20003ee4
 8009144:	20007b2c 	.word	0x20007b2c
 8009148:	20003ee0 	.word	0x20003ee0
 800914c:	20007b40 	.word	0x20007b40
 8009150:	20003ef0 	.word	0x20003ef0
 8009154:	20004068 	.word	0x20004068
 8009158:	20003efc 	.word	0x20003efc
 800915c:	20003ee8 	.word	0x20003ee8
 8009160:	20003ec8 	.word	0x20003ec8

08009164 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8009164:	4a02      	ldr	r2, [pc, #8]	; (8009170 <tcp_trigger_input_pcb_close+0xc>)
 8009166:	7813      	ldrb	r3, [r2, #0]
 8009168:	f043 0310 	orr.w	r3, r3, #16
 800916c:	7013      	strb	r3, [r2, #0]
 800916e:	4770      	bx	lr
 8009170:	20003ee4 	.word	0x20003ee4

08009174 <tcp_write_checks>:
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8009174:	7e03      	ldrb	r3, [r0, #24]
 8009176:	2b04      	cmp	r3, #4
 8009178:	d005      	beq.n	8009186 <tcp_write_checks+0x12>
 800917a:	2b07      	cmp	r3, #7
 800917c:	d003      	beq.n	8009186 <tcp_write_checks+0x12>
      (pcb->state != CLOSE_WAIT) &&
 800917e:	2b02      	cmp	r3, #2
 8009180:	d001      	beq.n	8009186 <tcp_write_checks+0x12>
      (pcb->state != SYN_SENT) &&
 8009182:	2b03      	cmp	r3, #3
 8009184:	d118      	bne.n	80091b8 <tcp_write_checks+0x44>
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  } else if (len == 0) {
 8009186:	b1d1      	cbz	r1, 80091be <tcp_write_checks+0x4a>
    return ERR_OK;
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8009188:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
 800918c:	4299      	cmp	r1, r3
 800918e:	d805      	bhi.n	800919c <tcp_write_checks+0x28>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8009190:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8009194:	2b08      	cmp	r3, #8
 8009196:	d808      	bhi.n	80091aa <tcp_write_checks+0x36>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8009198:	2000      	movs	r0, #0
}
 800919a:	4770      	bx	lr
    pcb->flags |= TF_NAGLEMEMERR;
 800919c:	7f83      	ldrb	r3, [r0, #30]
 800919e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80091a2:	7783      	strb	r3, [r0, #30]
    return ERR_MEM;
 80091a4:	f04f 30ff 	mov.w	r0, #4294967295
 80091a8:	4770      	bx	lr
    pcb->flags |= TF_NAGLEMEMERR;
 80091aa:	7f83      	ldrb	r3, [r0, #30]
 80091ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80091b0:	7783      	strb	r3, [r0, #30]
    return ERR_MEM;
 80091b2:	f04f 30ff 	mov.w	r0, #4294967295
 80091b6:	4770      	bx	lr
    return ERR_CONN;
 80091b8:	f06f 000a 	mvn.w	r0, #10
 80091bc:	4770      	bx	lr
    return ERR_OK;
 80091be:	2000      	movs	r0, #0
 80091c0:	4770      	bx	lr

080091c2 <tcp_pbuf_prealloc>:
{
 80091c2:	b538      	push	{r3, r4, r5, lr}
 80091c4:	460c      	mov	r4, r1
 80091c6:	461d      	mov	r5, r3
 80091c8:	f89d 3018 	ldrb.w	r3, [sp, #24]
  if (length < max_length) {
 80091cc:	4291      	cmp	r1, r2
 80091ce:	d215      	bcs.n	80091fc <tcp_pbuf_prealloc+0x3a>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80091d0:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80091d4:	f011 0f02 	tst.w	r1, #2
 80091d8:	d108      	bne.n	80091ec <tcp_pbuf_prealloc+0x2a>
        (!(pcb->flags & TF_NODELAY) &&
 80091da:	9904      	ldr	r1, [sp, #16]
 80091dc:	7f89      	ldrb	r1, [r1, #30]
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80091de:	f011 0f40 	tst.w	r1, #64	; 0x40
 80091e2:	d11d      	bne.n	8009220 <tcp_pbuf_prealloc+0x5e>
        (!(pcb->flags & TF_NODELAY) &&
 80091e4:	b113      	cbz	r3, 80091ec <tcp_pbuf_prealloc+0x2a>
          pcb->unsent != NULL ||
 80091e6:	9b04      	ldr	r3, [sp, #16]
 80091e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80091ea:	b19b      	cbz	r3, 8009214 <tcp_pbuf_prealloc+0x52>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80091ec:	f204 211b 	addw	r1, r4, #539	; 0x21b
 80091f0:	f021 0103 	bic.w	r1, r1, #3
 80091f4:	428a      	cmp	r2, r1
 80091f6:	bf28      	it	cs
 80091f8:	460a      	movcs	r2, r1
 80091fa:	b291      	uxth	r1, r2
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80091fc:	2200      	movs	r2, #0
 80091fe:	f7fd fdf9 	bl	8006df4 <pbuf_alloc>
  if (p == NULL) {
 8009202:	4603      	mov	r3, r0
 8009204:	b120      	cbz	r0, 8009210 <tcp_pbuf_prealloc+0x4e>
  *oversize = p->len - length;
 8009206:	8942      	ldrh	r2, [r0, #10]
 8009208:	1b12      	subs	r2, r2, r4
 800920a:	802a      	strh	r2, [r5, #0]
  p->len = p->tot_len = length;
 800920c:	8104      	strh	r4, [r0, #8]
 800920e:	8144      	strh	r4, [r0, #10]
}
 8009210:	4618      	mov	r0, r3
 8009212:	bd38      	pop	{r3, r4, r5, pc}
          pcb->unacked != NULL))) {
 8009214:	9b04      	ldr	r3, [sp, #16]
 8009216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8009218:	2b00      	cmp	r3, #0
 800921a:	d1e7      	bne.n	80091ec <tcp_pbuf_prealloc+0x2a>
  u16_t alloc = length;
 800921c:	4621      	mov	r1, r4
 800921e:	e7ed      	b.n	80091fc <tcp_pbuf_prealloc+0x3a>
 8009220:	4621      	mov	r1, r4
 8009222:	e7eb      	b.n	80091fc <tcp_pbuf_prealloc+0x3a>

08009224 <tcp_create_segment>:
{
 8009224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009228:	4680      	mov	r8, r0
 800922a:	460f      	mov	r7, r1
 800922c:	4615      	mov	r5, r2
 800922e:	4699      	mov	r9, r3
 8009230:	f89d a020 	ldrb.w	sl, [sp, #32]
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009234:	f01a 0f01 	tst.w	sl, #1
 8009238:	d036      	beq.n	80092a8 <tcp_create_segment+0x84>
 800923a:	2604      	movs	r6, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800923c:	2003      	movs	r0, #3
 800923e:	f7fd fc1b 	bl	8006a78 <memp_malloc>
 8009242:	4604      	mov	r4, r0
 8009244:	b390      	cbz	r0, 80092ac <tcp_create_segment+0x88>
  seg->flags = optflags;
 8009246:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800924a:	2300      	movs	r3, #0
 800924c:	6003      	str	r3, [r0, #0]
  seg->p = p;
 800924e:	6047      	str	r7, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009250:	893b      	ldrh	r3, [r7, #8]
  seg->len = p->tot_len - optlen;
 8009252:	1b9b      	subs	r3, r3, r6
 8009254:	8103      	strh	r3, [r0, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 8009256:	2114      	movs	r1, #20
 8009258:	4638      	mov	r0, r7
 800925a:	f7fd fd93 	bl	8006d84 <pbuf_header>
 800925e:	bb48      	cbnz	r0, 80092b4 <tcp_create_segment+0x90>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009260:	6863      	ldr	r3, [r4, #4]
 8009262:	685f      	ldr	r7, [r3, #4]
 8009264:	60e7      	str	r7, [r4, #12]
  seg->tcphdr->src = htons(pcb->local_port);
 8009266:	f8b8 001a 	ldrh.w	r0, [r8, #26]
 800926a:	f7fc fb3d 	bl	80058e8 <lwip_htons>
 800926e:	8038      	strh	r0, [r7, #0]
  seg->tcphdr->dest = htons(pcb->remote_port);
 8009270:	68e7      	ldr	r7, [r4, #12]
 8009272:	f8b8 001c 	ldrh.w	r0, [r8, #28]
 8009276:	f7fc fb37 	bl	80058e8 <lwip_htons>
 800927a:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = htonl(seqno);
 800927c:	68e7      	ldr	r7, [r4, #12]
 800927e:	4648      	mov	r0, r9
 8009280:	f7fc fb3b 	bl	80058fa <lwip_htonl>
 8009284:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8009286:	68e7      	ldr	r7, [r4, #12]
 8009288:	08b0      	lsrs	r0, r6, #2
 800928a:	3005      	adds	r0, #5
 800928c:	ea45 3000 	orr.w	r0, r5, r0, lsl #12
 8009290:	b200      	sxth	r0, r0
 8009292:	b280      	uxth	r0, r0
 8009294:	f7fc fb28 	bl	80058e8 <lwip_htons>
 8009298:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 800929a:	68e3      	ldr	r3, [r4, #12]
 800929c:	2200      	movs	r2, #0
 800929e:	749a      	strb	r2, [r3, #18]
 80092a0:	74da      	strb	r2, [r3, #19]
}
 80092a2:	4620      	mov	r0, r4
 80092a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80092a8:	2600      	movs	r6, #0
 80092aa:	e7c7      	b.n	800923c <tcp_create_segment+0x18>
    pbuf_free(p);
 80092ac:	4638      	mov	r0, r7
 80092ae:	f7fd fd73 	bl	8006d98 <pbuf_free>
    return NULL;
 80092b2:	e7f6      	b.n	80092a2 <tcp_create_segment+0x7e>
    tcp_seg_free(seg);
 80092b4:	4620      	mov	r0, r4
 80092b6:	f7fd ff94 	bl	80071e2 <tcp_seg_free>
    return NULL;
 80092ba:	2400      	movs	r4, #0
 80092bc:	e7f1      	b.n	80092a2 <tcp_create_segment+0x7e>

080092be <tcp_output_alloc_header>:
{
 80092be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092c2:	4606      	mov	r6, r0
 80092c4:	460c      	mov	r4, r1
 80092c6:	4698      	mov	r8, r3
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80092c8:	4411      	add	r1, r2
 80092ca:	b289      	uxth	r1, r1
 80092cc:	3114      	adds	r1, #20
 80092ce:	2200      	movs	r2, #0
 80092d0:	b289      	uxth	r1, r1
 80092d2:	2001      	movs	r0, #1
 80092d4:	f7fd fd8e 	bl	8006df4 <pbuf_alloc>
  if (p != NULL) {
 80092d8:	4607      	mov	r7, r0
 80092da:	b320      	cbz	r0, 8009326 <tcp_output_alloc_header+0x68>
    tcphdr = (struct tcp_hdr *)p->payload;
 80092dc:	6845      	ldr	r5, [r0, #4]
    tcphdr->src = htons(pcb->local_port);
 80092de:	8b70      	ldrh	r0, [r6, #26]
 80092e0:	f7fc fb02 	bl	80058e8 <lwip_htons>
 80092e4:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = htons(pcb->remote_port);
 80092e6:	8bb0      	ldrh	r0, [r6, #28]
 80092e8:	f7fc fafe 	bl	80058e8 <lwip_htons>
 80092ec:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
 80092ee:	f8c5 8004 	str.w	r8, [r5, #4]
    tcphdr->ackno = htonl(pcb->rcv_nxt);
 80092f2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 80092f4:	f7fc fb01 	bl	80058fa <lwip_htonl>
 80092f8:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 80092fa:	08a0      	lsrs	r0, r4, #2
 80092fc:	3005      	adds	r0, #5
 80092fe:	0300      	lsls	r0, r0, #12
 8009300:	b280      	uxth	r0, r0
 8009302:	f040 0010 	orr.w	r0, r0, #16
 8009306:	f7fc faef 	bl	80058e8 <lwip_htons>
 800930a:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800930c:	8df0      	ldrh	r0, [r6, #46]	; 0x2e
 800930e:	f7fc faeb 	bl	80058e8 <lwip_htons>
 8009312:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 8009314:	2300      	movs	r3, #0
 8009316:	742b      	strb	r3, [r5, #16]
 8009318:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 800931a:	74ab      	strb	r3, [r5, #18]
 800931c:	74eb      	strb	r3, [r5, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800931e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8009320:	8df2      	ldrh	r2, [r6, #46]	; 0x2e
 8009322:	4413      	add	r3, r2
 8009324:	6333      	str	r3, [r6, #48]	; 0x30
}
 8009326:	4638      	mov	r0, r7
 8009328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800932c <tcp_output_segment>:
 * @param seg the tcp_seg to send
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb)
{
 800932c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800932e:	b085      	sub	sp, #20
 8009330:	4605      	mov	r5, r0
 8009332:	460c      	mov	r4, r1
  /** @bug Exclude retransmitted segments from this count. */
  MIB2_STATS_INC(mib2.tcpoutsegs);

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = htonl(pcb->rcv_nxt);
 8009334:	68c6      	ldr	r6, [r0, #12]
 8009336:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8009338:	f7fc fadf 	bl	80058fa <lwip_htonl>
 800933c:	60b0      	str	r0, [r6, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800933e:	68ee      	ldr	r6, [r5, #12]
 8009340:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8009342:	f7fc fad1 	bl	80058e8 <lwip_htons>
 8009346:	81f0      	strh	r0, [r6, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009348:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800934a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 800934c:	4413      	add	r3, r2
 800934e:	6323      	str	r3, [r4, #48]	; 0x30

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009350:	68ee      	ldr	r6, [r5, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8009352:	7aab      	ldrb	r3, [r5, #10]
 8009354:	f013 0f01 	tst.w	r3, #1
 8009358:	d136      	bne.n	80093c8 <tcp_output_segment+0x9c>
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime == -1) {
 800935a:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 800935e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009362:	d03c      	beq.n	80093de <tcp_output_segment+0xb2>
    pcb->rtime = 0;
  }

  netif = ip_route(PCB_ISIPV6(pcb), &pcb->local_ip, &pcb->remote_ip);
 8009364:	1d27      	adds	r7, r4, #4
 8009366:	4638      	mov	r0, r7
 8009368:	f7fc fbb8 	bl	8005adc <ip4_route>
  if (netif == NULL) {
 800936c:	4606      	mov	r6, r0
 800936e:	2800      	cmp	r0, #0
 8009370:	d041      	beq.n	80093f6 <tcp_output_segment+0xca>
    return ERR_RTE;
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8009372:	b10c      	cbz	r4, 8009378 <tcp_output_segment+0x4c>
 8009374:	6823      	ldr	r3, [r4, #0]
 8009376:	b923      	cbnz	r3, 8009382 <tcp_output_segment+0x56>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(PCB_ISIPV6(pcb), netif,
      &pcb->remote_ip);
    if (local_ip == NULL) {
 8009378:	f116 0f04 	cmn.w	r6, #4
 800937c:	d03e      	beq.n	80093fc <tcp_output_segment+0xd0>
      return ERR_RTE;
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800937e:	6873      	ldr	r3, [r6, #4]
 8009380:	6023      	str	r3, [r4, #0]
  }

  if (pcb->rttest == 0) {
 8009382:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009384:	2b00      	cmp	r3, #0
 8009386:	d02d      	beq.n	80093e4 <tcp_output_segment+0xb8>
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          htonl(seg->tcphdr->seqno), htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009388:	68eb      	ldr	r3, [r5, #12]
 800938a:	686a      	ldr	r2, [r5, #4]
 800938c:	6851      	ldr	r1, [r2, #4]
 800938e:	1a5b      	subs	r3, r3, r1
 8009390:	b29b      	uxth	r3, r3

  seg->p->len -= len;
 8009392:	8951      	ldrh	r1, [r2, #10]
 8009394:	1ac9      	subs	r1, r1, r3
 8009396:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
 8009398:	6869      	ldr	r1, [r5, #4]
 800939a:	890a      	ldrh	r2, [r1, #8]
 800939c:	1ad3      	subs	r3, r2, r3
 800939e:	810b      	strh	r3, [r1, #8]

  seg->p->payload = seg->tcphdr;
 80093a0:	686b      	ldr	r3, [r5, #4]
 80093a2:	68ea      	ldr	r2, [r5, #12]
 80093a4:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80093a6:	68eb      	ldr	r3, [r5, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	741a      	strb	r2, [r3, #16]
 80093ac:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(PCB_ISIPV6(pcb), seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80093ae:	6868      	ldr	r0, [r5, #4]
 80093b0:	7aa3      	ldrb	r3, [r4, #10]
 80093b2:	7a62      	ldrb	r2, [r4, #9]
 80093b4:	9602      	str	r6, [sp, #8]
 80093b6:	2106      	movs	r1, #6
 80093b8:	9101      	str	r1, [sp, #4]
 80093ba:	9200      	str	r2, [sp, #0]
 80093bc:	463a      	mov	r2, r7
 80093be:	4621      	mov	r1, r4
 80093c0:	f7fc fd02 	bl	8005dc8 <ip4_output_if>
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
}
 80093c4:	b005      	add	sp, #20
 80093c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip, PCB_ISIPV6(pcb));
 80093c8:	1d21      	adds	r1, r4, #4
 80093ca:	f44f 7006 	mov.w	r0, #536	; 0x218
 80093ce:	f7fe fbfc 	bl	8007bca <tcp_eff_send_mss_impl>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80093d2:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 80093d6:	f7fc fa90 	bl	80058fa <lwip_htonl>
 80093da:	6170      	str	r0, [r6, #20]
 80093dc:	e7bd      	b.n	800935a <tcp_output_segment+0x2e>
    pcb->rtime = 0;
 80093de:	2300      	movs	r3, #0
 80093e0:	86a3      	strh	r3, [r4, #52]	; 0x34
 80093e2:	e7bf      	b.n	8009364 <tcp_output_segment+0x38>
    pcb->rttest = tcp_ticks;
 80093e4:	4b07      	ldr	r3, [pc, #28]	; (8009404 <tcp_output_segment+0xd8>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	63a3      	str	r3, [r4, #56]	; 0x38
    pcb->rtseq = ntohl(seg->tcphdr->seqno);
 80093ea:	68eb      	ldr	r3, [r5, #12]
 80093ec:	6858      	ldr	r0, [r3, #4]
 80093ee:	f7fc fa90 	bl	8005912 <lwip_ntohl>
 80093f2:	63e0      	str	r0, [r4, #60]	; 0x3c
 80093f4:	e7c8      	b.n	8009388 <tcp_output_segment+0x5c>
    return ERR_RTE;
 80093f6:	f06f 0003 	mvn.w	r0, #3
 80093fa:	e7e3      	b.n	80093c4 <tcp_output_segment+0x98>
      return ERR_RTE;
 80093fc:	f06f 0003 	mvn.w	r0, #3
 8009400:	e7e0      	b.n	80093c4 <tcp_output_segment+0x98>
 8009402:	bf00      	nop
 8009404:	20007b30 	.word	0x20007b30

08009408 <tcp_write>:
{
 8009408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800940c:	b08f      	sub	sp, #60	; 0x3c
  u16_t oversize = 0;
 800940e:	2400      	movs	r4, #0
 8009410:	f8ad 4036 	strh.w	r4, [sp, #54]	; 0x36
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8009414:	f8b0 4062 	ldrh.w	r4, [r0, #98]	; 0x62
 8009418:	8ec5      	ldrh	r5, [r0, #54]	; 0x36
 800941a:	9504      	str	r5, [sp, #16]
 800941c:	0864      	lsrs	r4, r4, #1
 800941e:	42ac      	cmp	r4, r5
 8009420:	bf28      	it	cs
 8009422:	462c      	movcs	r4, r5
  mss_local = mss_local ? mss_local : pcb->mss;
 8009424:	b104      	cbz	r4, 8009428 <tcp_write+0x20>
 8009426:	9404      	str	r4, [sp, #16]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8009428:	2900      	cmp	r1, #0
 800942a:	f000 817c 	beq.w	8009726 <tcp_write+0x31e>
 800942e:	469b      	mov	fp, r3
 8009430:	4692      	mov	sl, r2
 8009432:	9106      	str	r1, [sp, #24]
 8009434:	4681      	mov	r9, r0
  err = tcp_write_checks(pcb, len);
 8009436:	4611      	mov	r1, r2
 8009438:	f7ff fe9c 	bl	8009174 <tcp_write_checks>
  if (err != ERR_OK) {
 800943c:	9009      	str	r0, [sp, #36]	; 0x24
 800943e:	2800      	cmp	r0, #0
 8009440:	f040 8108 	bne.w	8009654 <tcp_write+0x24c>
  queuelen = pcb->snd_queuelen;
 8009444:	f8b9 6068 	ldrh.w	r6, [r9, #104]	; 0x68
  if (pcb->unsent != NULL) {
 8009448:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800944c:	9308      	str	r3, [sp, #32]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d06a      	beq.n	8009528 <tcp_write+0x120>
 8009452:	9b08      	ldr	r3, [sp, #32]
 8009454:	e000      	b.n	8009458 <tcp_write+0x50>
         last_unsent = last_unsent->next);
 8009456:	463b      	mov	r3, r7
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009458:	681f      	ldr	r7, [r3, #0]
 800945a:	2f00      	cmp	r7, #0
 800945c:	d1fb      	bne.n	8009456 <tcp_write+0x4e>
 800945e:	9308      	str	r3, [sp, #32]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8009460:	7a9b      	ldrb	r3, [r3, #10]
 8009462:	f013 0f01 	tst.w	r3, #1
 8009466:	d042      	beq.n	80094ee <tcp_write+0xe6>
 8009468:	2204      	movs	r2, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800946a:	9d08      	ldr	r5, [sp, #32]
 800946c:	892b      	ldrh	r3, [r5, #8]
    space = mss_local - (last_unsent->len + unsent_optlen);
 800946e:	441a      	add	r2, r3
 8009470:	b292      	uxth	r2, r2
 8009472:	9904      	ldr	r1, [sp, #16]
 8009474:	1a8a      	subs	r2, r1, r2
 8009476:	b292      	uxth	r2, r2
    oversize = pcb->unsent_oversize;
 8009478:	f8b9 106a 	ldrh.w	r1, [r9, #106]	; 0x6a
 800947c:	910a      	str	r1, [sp, #40]	; 0x28
 800947e:	f8ad 1036 	strh.w	r1, [sp, #54]	; 0x36
    if (oversize > 0) {
 8009482:	460c      	mov	r4, r1
 8009484:	2900      	cmp	r1, #0
 8009486:	d034      	beq.n	80094f2 <tcp_write+0xea>
      oversize_used = oversize < len ? oversize : len;
 8009488:	4551      	cmp	r1, sl
 800948a:	bf28      	it	cs
 800948c:	4651      	movcs	r1, sl
      oversize -= oversize_used;
 800948e:	1a60      	subs	r0, r4, r1
 8009490:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
      space -= oversize_used;
 8009494:	1a52      	subs	r2, r2, r1
 8009496:	b292      	uxth	r2, r2
      pos += oversize_used;
 8009498:	910a      	str	r1, [sp, #40]	; 0x28
      seg = last_unsent;
 800949a:	46a8      	mov	r8, r5
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800949c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800949e:	4550      	cmp	r0, sl
 80094a0:	d249      	bcs.n	8009536 <tcp_write+0x12e>
 80094a2:	2a00      	cmp	r2, #0
 80094a4:	d054      	beq.n	8009550 <tcp_write+0x148>
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d056      	beq.n	8009558 <tcp_write+0x150>
      u16_t seglen = space < len - pos ? space : len - pos;
 80094aa:	ebaa 0500 	sub.w	r5, sl, r0
 80094ae:	4295      	cmp	r5, r2
 80094b0:	bfa8      	it	ge
 80094b2:	4615      	movge	r5, r2
 80094b4:	b2ac      	uxth	r4, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80094b6:	f01b 0f01 	tst.w	fp, #1
 80094ba:	d01c      	beq.n	80094f6 <tcp_write+0xee>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80094bc:	2301      	movs	r3, #1
 80094be:	9302      	str	r3, [sp, #8]
 80094c0:	f8cd b004 	str.w	fp, [sp, #4]
 80094c4:	f8cd 9000 	str.w	r9, [sp]
 80094c8:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 80094cc:	4621      	mov	r1, r4
 80094ce:	2004      	movs	r0, #4
 80094d0:	f7ff fe77 	bl	80091c2 <tcp_pbuf_prealloc>
 80094d4:	4686      	mov	lr, r0
 80094d6:	900b      	str	r0, [sp, #44]	; 0x2c
 80094d8:	2800      	cmp	r0, #0
 80094da:	f000 80a9 	beq.w	8009630 <tcp_write+0x228>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80094de:	4622      	mov	r2, r4
 80094e0:	9906      	ldr	r1, [sp, #24]
 80094e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094e4:	4419      	add	r1, r3
 80094e6:	6840      	ldr	r0, [r0, #4]
 80094e8:	f002 fbc9 	bl	800bc7e <memcpy>
 80094ec:	e010      	b.n	8009510 <tcp_write+0x108>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 80094ee:	2200      	movs	r2, #0
 80094f0:	e7bb      	b.n	800946a <tcp_write+0x62>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80094f2:	46b8      	mov	r8, r7
 80094f4:	e7d2      	b.n	800949c <tcp_write+0x94>
        if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80094f6:	2201      	movs	r2, #1
 80094f8:	4621      	mov	r1, r4
 80094fa:	2004      	movs	r0, #4
 80094fc:	f7fd fc7a 	bl	8006df4 <pbuf_alloc>
 8009500:	900b      	str	r0, [sp, #44]	; 0x2c
 8009502:	2800      	cmp	r0, #0
 8009504:	f000 8094 	beq.w	8009630 <tcp_write+0x228>
        ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8009508:	9b06      	ldr	r3, [sp, #24]
 800950a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800950c:	4413      	add	r3, r2
 800950e:	6043      	str	r3, [r0, #4]
      pos += seglen;
 8009510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009512:	441c      	add	r4, r3
 8009514:	b2a4      	uxth	r4, r4
      queuelen += pbuf_clen(concat_p);
 8009516:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009518:	f7fd fd2c 	bl	8006f74 <pbuf_clen>
 800951c:	fa16 f680 	uxtah	r6, r6, r0
 8009520:	b2b6      	uxth	r6, r6
      seg = last_unsent;
 8009522:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009526:	e009      	b.n	800953c <tcp_write+0x134>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8009528:	f8dd 8020 	ldr.w	r8, [sp, #32]
  u16_t oversize_used = 0;
 800952c:	2300      	movs	r3, #0
 800952e:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t pos = 0; /* position in 'arg' data */
 8009530:	461c      	mov	r4, r3
  struct pbuf *concat_p = NULL;
 8009532:	930b      	str	r3, [sp, #44]	; 0x2c
 8009534:	e002      	b.n	800953c <tcp_write+0x134>
 8009536:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009538:	2300      	movs	r3, #0
 800953a:	930b      	str	r3, [sp, #44]	; 0x2c
      queue = seg;
 800953c:	2700      	movs	r7, #0
 800953e:	9705      	str	r7, [sp, #20]
 8009540:	4643      	mov	r3, r8
 8009542:	464a      	mov	r2, r9
 8009544:	46b9      	mov	r9, r7
 8009546:	46d8      	mov	r8, fp
 8009548:	f8dd b010 	ldr.w	fp, [sp, #16]
 800954c:	4617      	mov	r7, r2
 800954e:	e03b      	b.n	80095c8 <tcp_write+0x1c0>
 8009550:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  struct pbuf *concat_p = NULL;
 8009552:	2300      	movs	r3, #0
 8009554:	930b      	str	r3, [sp, #44]	; 0x2c
 8009556:	e7f1      	b.n	800953c <tcp_write+0x134>
 8009558:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800955a:	2300      	movs	r3, #0
 800955c:	930b      	str	r3, [sp, #44]	; 0x2c
 800955e:	e7ed      	b.n	800953c <tcp_write+0x134>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8009560:	2201      	movs	r2, #1
 8009562:	4629      	mov	r1, r5
 8009564:	2000      	movs	r0, #0
 8009566:	f7fd fc45 	bl	8006df4 <pbuf_alloc>
 800956a:	9007      	str	r0, [sp, #28]
 800956c:	2800      	cmp	r0, #0
 800956e:	f000 80d2 	beq.w	8009716 <tcp_write+0x30e>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8009572:	9b06      	ldr	r3, [sp, #24]
 8009574:	4423      	add	r3, r4
 8009576:	6043      	str	r3, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009578:	2200      	movs	r2, #0
 800957a:	4611      	mov	r1, r2
 800957c:	4610      	mov	r0, r2
 800957e:	f7fd fc39 	bl	8006df4 <pbuf_alloc>
 8009582:	9004      	str	r0, [sp, #16]
 8009584:	2800      	cmp	r0, #0
 8009586:	d044      	beq.n	8009612 <tcp_write+0x20a>
      pbuf_cat(p/*header*/, p2/*data*/);
 8009588:	9907      	ldr	r1, [sp, #28]
 800958a:	9804      	ldr	r0, [sp, #16]
 800958c:	f7fd fd00 	bl	8006f90 <pbuf_cat>
    queuelen += pbuf_clen(p);
 8009590:	9804      	ldr	r0, [sp, #16]
 8009592:	f7fd fcef 	bl	8006f74 <pbuf_clen>
 8009596:	fa16 f680 	uxtah	r6, r6, r0
 800959a:	b2b6      	uxth	r6, r6
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800959c:	2e09      	cmp	r6, #9
 800959e:	d83f      	bhi.n	8009620 <tcp_write+0x218>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80095a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095a2:	2200      	movs	r2, #0
 80095a4:	9200      	str	r2, [sp, #0]
 80095a6:	4423      	add	r3, r4
 80095a8:	9904      	ldr	r1, [sp, #16]
 80095aa:	4638      	mov	r0, r7
 80095ac:	f7ff fe3a 	bl	8009224 <tcp_create_segment>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2800      	cmp	r0, #0
 80095b4:	f000 80b3 	beq.w	800971e <tcp_write+0x316>
    if (queue == NULL) {
 80095b8:	f1b9 0f00 	cmp.w	r9, #0
 80095bc:	d04e      	beq.n	800965c <tcp_write+0x254>
      prev_seg->next = seg;
 80095be:	9a05      	ldr	r2, [sp, #20]
 80095c0:	6010      	str	r0, [r2, #0]
    pos += seglen;
 80095c2:	442c      	add	r4, r5
 80095c4:	b2a4      	uxth	r4, r4
    prev_seg = seg;
 80095c6:	9305      	str	r3, [sp, #20]
  while (pos < len) {
 80095c8:	4554      	cmp	r4, sl
 80095ca:	d249      	bcs.n	8009660 <tcp_write+0x258>
    u16_t left = len - pos;
 80095cc:	ebaa 0504 	sub.w	r5, sl, r4
 80095d0:	b2ad      	uxth	r5, r5
    u16_t seglen = left > max_len ? max_len : left;
 80095d2:	455d      	cmp	r5, fp
 80095d4:	bf28      	it	cs
 80095d6:	465d      	movcs	r5, fp
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80095d8:	f018 0f01 	tst.w	r8, #1
 80095dc:	d0c0      	beq.n	8009560 <tcp_write+0x158>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80095de:	fab9 f389 	clz	r3, r9
 80095e2:	095b      	lsrs	r3, r3, #5
 80095e4:	9302      	str	r3, [sp, #8]
 80095e6:	f8cd 8004 	str.w	r8, [sp, #4]
 80095ea:	9700      	str	r7, [sp, #0]
 80095ec:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 80095f0:	465a      	mov	r2, fp
 80095f2:	4629      	mov	r1, r5
 80095f4:	2000      	movs	r0, #0
 80095f6:	f7ff fde4 	bl	80091c2 <tcp_pbuf_prealloc>
 80095fa:	4686      	mov	lr, r0
 80095fc:	9004      	str	r0, [sp, #16]
 80095fe:	2800      	cmp	r0, #0
 8009600:	f000 8085 	beq.w	800970e <tcp_write+0x306>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8009604:	462a      	mov	r2, r5
 8009606:	9b06      	ldr	r3, [sp, #24]
 8009608:	1919      	adds	r1, r3, r4
 800960a:	6840      	ldr	r0, [r0, #4]
 800960c:	f002 fb37 	bl	800bc7e <memcpy>
 8009610:	e7be      	b.n	8009590 <tcp_write+0x188>
 8009612:	463b      	mov	r3, r7
 8009614:	464f      	mov	r7, r9
 8009616:	4699      	mov	r9, r3
        pbuf_free(p2);
 8009618:	9807      	ldr	r0, [sp, #28]
 800961a:	f7fd fbbd 	bl	8006d98 <pbuf_free>
        goto memerr;
 800961e:	e007      	b.n	8009630 <tcp_write+0x228>
 8009620:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009624:	463b      	mov	r3, r7
 8009626:	464f      	mov	r7, r9
 8009628:	4699      	mov	r9, r3
      pbuf_free(p);
 800962a:	4640      	mov	r0, r8
 800962c:	f7fd fbb4 	bl	8006d98 <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 8009630:	f899 301e 	ldrb.w	r3, [r9, #30]
 8009634:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009638:	f889 301e 	strb.w	r3, [r9, #30]
  if (concat_p != NULL) {
 800963c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800963e:	b113      	cbz	r3, 8009646 <tcp_write+0x23e>
    pbuf_free(concat_p);
 8009640:	4618      	mov	r0, r3
 8009642:	f7fd fba9 	bl	8006d98 <pbuf_free>
  if (queue != NULL) {
 8009646:	b117      	cbz	r7, 800964e <tcp_write+0x246>
    tcp_segs_free(queue);
 8009648:	4638      	mov	r0, r7
 800964a:	f7fd fdd7 	bl	80071fc <tcp_segs_free>
  return ERR_MEM;
 800964e:	f04f 33ff 	mov.w	r3, #4294967295
 8009652:	9309      	str	r3, [sp, #36]	; 0x24
}
 8009654:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009656:	b00f      	add	sp, #60	; 0x3c
 8009658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      queue = seg;
 800965c:	4681      	mov	r9, r0
 800965e:	e7b0      	b.n	80095c2 <tcp_write+0x1ba>
 8009660:	463a      	mov	r2, r7
 8009662:	464f      	mov	r7, r9
 8009664:	46c3      	mov	fp, r8
 8009666:	4698      	mov	r8, r3
 8009668:	4691      	mov	r9, r2
  if (oversize_used > 0) {
 800966a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800966c:	b1db      	cbz	r3, 80096a6 <tcp_write+0x29e>
    for (p = last_unsent->p; p; p = p->next) {
 800966e:	9a08      	ldr	r2, [sp, #32]
 8009670:	6854      	ldr	r4, [r2, #4]
 8009672:	461d      	mov	r5, r3
 8009674:	e000      	b.n	8009678 <tcp_write+0x270>
 8009676:	6824      	ldr	r4, [r4, #0]
 8009678:	b184      	cbz	r4, 800969c <tcp_write+0x294>
      p->tot_len += oversize_used;
 800967a:	8923      	ldrh	r3, [r4, #8]
 800967c:	442b      	add	r3, r5
 800967e:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 8009680:	6823      	ldr	r3, [r4, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1f7      	bne.n	8009676 <tcp_write+0x26e>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8009686:	6860      	ldr	r0, [r4, #4]
 8009688:	8963      	ldrh	r3, [r4, #10]
 800968a:	462a      	mov	r2, r5
 800968c:	9906      	ldr	r1, [sp, #24]
 800968e:	4418      	add	r0, r3
 8009690:	f002 faf5 	bl	800bc7e <memcpy>
        p->len += oversize_used;
 8009694:	8963      	ldrh	r3, [r4, #10]
 8009696:	442b      	add	r3, r5
 8009698:	8163      	strh	r3, [r4, #10]
 800969a:	e7ec      	b.n	8009676 <tcp_write+0x26e>
    last_unsent->len += oversize_used;
 800969c:	9a08      	ldr	r2, [sp, #32]
 800969e:	8913      	ldrh	r3, [r2, #8]
 80096a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80096a2:	4419      	add	r1, r3
 80096a4:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
 80096a6:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80096aa:	f8a9 306a 	strh.w	r3, [r9, #106]	; 0x6a
  if (concat_p != NULL) {
 80096ae:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80096b0:	b145      	cbz	r5, 80096c4 <tcp_write+0x2bc>
    pbuf_cat(last_unsent->p, concat_p);
 80096b2:	4629      	mov	r1, r5
 80096b4:	9c08      	ldr	r4, [sp, #32]
 80096b6:	6860      	ldr	r0, [r4, #4]
 80096b8:	f7fd fc6a 	bl	8006f90 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80096bc:	892b      	ldrh	r3, [r5, #8]
 80096be:	8922      	ldrh	r2, [r4, #8]
 80096c0:	4413      	add	r3, r2
 80096c2:	8123      	strh	r3, [r4, #8]
  if (last_unsent == NULL) {
 80096c4:	9b08      	ldr	r3, [sp, #32]
 80096c6:	b1fb      	cbz	r3, 8009708 <tcp_write+0x300>
    last_unsent->next = queue;
 80096c8:	9b08      	ldr	r3, [sp, #32]
 80096ca:	601f      	str	r7, [r3, #0]
  pcb->snd_lbb += len;
 80096cc:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 80096d0:	4453      	add	r3, sl
 80096d2:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
  pcb->snd_buf -= len;
 80096d6:	f8b9 3066 	ldrh.w	r3, [r9, #102]	; 0x66
 80096da:	eba3 0a0a 	sub.w	sl, r3, sl
 80096de:	f8a9 a066 	strh.w	sl, [r9, #102]	; 0x66
  pcb->snd_queuelen = queuelen;
 80096e2:	f8a9 6068 	strh.w	r6, [r9, #104]	; 0x68
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 80096e6:	f1b8 0f00 	cmp.w	r8, #0
 80096ea:	d0b3      	beq.n	8009654 <tcp_write+0x24c>
 80096ec:	f8d8 400c 	ldr.w	r4, [r8, #12]
 80096f0:	2c00      	cmp	r4, #0
 80096f2:	d0af      	beq.n	8009654 <tcp_write+0x24c>
 80096f4:	f01b 0f02 	tst.w	fp, #2
 80096f8:	d1ac      	bne.n	8009654 <tcp_write+0x24c>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80096fa:	89a5      	ldrh	r5, [r4, #12]
 80096fc:	2008      	movs	r0, #8
 80096fe:	f7fc f8f3 	bl	80058e8 <lwip_htons>
 8009702:	4328      	orrs	r0, r5
 8009704:	81a0      	strh	r0, [r4, #12]
 8009706:	e7a5      	b.n	8009654 <tcp_write+0x24c>
    pcb->unsent = queue;
 8009708:	f8c9 706c 	str.w	r7, [r9, #108]	; 0x6c
 800970c:	e7de      	b.n	80096cc <tcp_write+0x2c4>
 800970e:	463b      	mov	r3, r7
 8009710:	464f      	mov	r7, r9
 8009712:	4699      	mov	r9, r3
 8009714:	e78c      	b.n	8009630 <tcp_write+0x228>
 8009716:	463b      	mov	r3, r7
 8009718:	464f      	mov	r7, r9
 800971a:	4699      	mov	r9, r3
 800971c:	e788      	b.n	8009630 <tcp_write+0x228>
 800971e:	463b      	mov	r3, r7
 8009720:	464f      	mov	r7, r9
 8009722:	4699      	mov	r9, r3
 8009724:	e784      	b.n	8009630 <tcp_write+0x228>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8009726:	f06f 030e 	mvn.w	r3, #14
 800972a:	9309      	str	r3, [sp, #36]	; 0x24
 800972c:	e792      	b.n	8009654 <tcp_write+0x24c>

0800972e <tcp_enqueue_flags>:
{
 800972e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009730:	b083      	sub	sp, #12
 8009732:	f001 0703 	and.w	r7, r1, #3
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8009736:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 800973a:	2b08      	cmp	r3, #8
 800973c:	d902      	bls.n	8009744 <tcp_enqueue_flags+0x16>
 800973e:	f011 0f01 	tst.w	r1, #1
 8009742:	d01f      	beq.n	8009784 <tcp_enqueue_flags+0x56>
  if (flags & TCP_SYN) {
 8009744:	f011 0f02 	tst.w	r1, #2
 8009748:	d123      	bne.n	8009792 <tcp_enqueue_flags+0x64>
  u8_t optflags = 0;
 800974a:	2600      	movs	r6, #0
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800974c:	b31e      	cbz	r6, 8009796 <tcp_enqueue_flags+0x68>
 800974e:	f04f 0e04 	mov.w	lr, #4
  if (pcb->snd_buf == 0) {
 8009752:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
 8009756:	2b00      	cmp	r3, #0
 8009758:	d052      	beq.n	8009800 <tcp_enqueue_flags+0xd2>
 800975a:	460d      	mov	r5, r1
 800975c:	4604      	mov	r4, r0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800975e:	2200      	movs	r2, #0
 8009760:	4671      	mov	r1, lr
 8009762:	4610      	mov	r0, r2
 8009764:	f7fd fb46 	bl	8006df4 <pbuf_alloc>
 8009768:	4601      	mov	r1, r0
 800976a:	b1b8      	cbz	r0, 800979c <tcp_enqueue_flags+0x6e>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800976c:	9600      	str	r6, [sp, #0]
 800976e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8009770:	462a      	mov	r2, r5
 8009772:	4620      	mov	r0, r4
 8009774:	f7ff fd56 	bl	8009224 <tcp_create_segment>
 8009778:	4601      	mov	r1, r0
 800977a:	b1b0      	cbz	r0, 80097aa <tcp_enqueue_flags+0x7c>
  if (pcb->unsent == NULL) {
 800977c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800977e:	b9e2      	cbnz	r2, 80097ba <tcp_enqueue_flags+0x8c>
    pcb->unsent = seg;
 8009780:	66e0      	str	r0, [r4, #108]	; 0x6c
 8009782:	e01e      	b.n	80097c2 <tcp_enqueue_flags+0x94>
    pcb->flags |= TF_NAGLEMEMERR;
 8009784:	7f83      	ldrb	r3, [r0, #30]
 8009786:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800978a:	7783      	strb	r3, [r0, #30]
    return ERR_MEM;
 800978c:	f04f 30ff 	mov.w	r0, #4294967295
 8009790:	e034      	b.n	80097fc <tcp_enqueue_flags+0xce>
    optflags = TF_SEG_OPTS_MSS;
 8009792:	2601      	movs	r6, #1
 8009794:	e7da      	b.n	800974c <tcp_enqueue_flags+0x1e>
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009796:	f04f 0e00 	mov.w	lr, #0
 800979a:	e7da      	b.n	8009752 <tcp_enqueue_flags+0x24>
    pcb->flags |= TF_NAGLEMEMERR;
 800979c:	7fa3      	ldrb	r3, [r4, #30]
 800979e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80097a2:	77a3      	strb	r3, [r4, #30]
    return ERR_MEM;
 80097a4:	f04f 30ff 	mov.w	r0, #4294967295
 80097a8:	e028      	b.n	80097fc <tcp_enqueue_flags+0xce>
    pcb->flags |= TF_NAGLEMEMERR;
 80097aa:	7fa3      	ldrb	r3, [r4, #30]
 80097ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80097b0:	77a3      	strb	r3, [r4, #30]
    return ERR_MEM;
 80097b2:	f04f 30ff 	mov.w	r0, #4294967295
 80097b6:	e021      	b.n	80097fc <tcp_enqueue_flags+0xce>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80097b8:	461a      	mov	r2, r3
 80097ba:	6813      	ldr	r3, [r2, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1fb      	bne.n	80097b8 <tcp_enqueue_flags+0x8a>
    useg->next = seg;
 80097c0:	6011      	str	r1, [r2, #0]
  pcb->unsent_oversize = 0;
 80097c2:	2300      	movs	r3, #0
 80097c4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80097c8:	b13f      	cbz	r7, 80097da <tcp_enqueue_flags+0xac>
    pcb->snd_lbb++;
 80097ca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80097cc:	3301      	adds	r3, #1
 80097ce:	65e3      	str	r3, [r4, #92]	; 0x5c
    pcb->snd_buf--;
 80097d0:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 80097d4:	3b01      	subs	r3, #1
 80097d6:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
  if (flags & TCP_FIN) {
 80097da:	f015 0f01 	tst.w	r5, #1
 80097de:	d003      	beq.n	80097e8 <tcp_enqueue_flags+0xba>
    pcb->flags |= TF_FIN;
 80097e0:	7fa3      	ldrb	r3, [r4, #30]
 80097e2:	f043 0320 	orr.w	r3, r3, #32
 80097e6:	77a3      	strb	r3, [r4, #30]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80097e8:	6848      	ldr	r0, [r1, #4]
 80097ea:	f7fd fbc3 	bl	8006f74 <pbuf_clen>
 80097ee:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 80097f2:	fa13 f080 	uxtah	r0, r3, r0
 80097f6:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
  return ERR_OK;
 80097fa:	2000      	movs	r0, #0
}
 80097fc:	b003      	add	sp, #12
 80097fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_MEM;
 8009800:	f04f 30ff 	mov.w	r0, #4294967295
 8009804:	e7fa      	b.n	80097fc <tcp_enqueue_flags+0xce>

08009806 <tcp_send_fin>:
{
 8009806:	b570      	push	{r4, r5, r6, lr}
 8009808:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 800980a:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 800980c:	b90c      	cbnz	r4, 8009812 <tcp_send_fin+0xc>
 800980e:	e00a      	b.n	8009826 <tcp_send_fin+0x20>
         last_unsent = last_unsent->next);
 8009810:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009812:	6823      	ldr	r3, [r4, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d1fb      	bne.n	8009810 <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009818:	68e3      	ldr	r3, [r4, #12]
 800981a:	8998      	ldrh	r0, [r3, #12]
 800981c:	f7fc f869 	bl	80058f2 <lwip_ntohs>
 8009820:	f010 0f07 	tst.w	r0, #7
 8009824:	d004      	beq.n	8009830 <tcp_send_fin+0x2a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009826:	2101      	movs	r1, #1
 8009828:	4628      	mov	r0, r5
 800982a:	f7ff ff80 	bl	800972e <tcp_enqueue_flags>
}
 800982e:	bd70      	pop	{r4, r5, r6, pc}
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009830:	68e6      	ldr	r6, [r4, #12]
 8009832:	89b4      	ldrh	r4, [r6, #12]
 8009834:	2001      	movs	r0, #1
 8009836:	f7fc f857 	bl	80058e8 <lwip_htons>
 800983a:	4320      	orrs	r0, r4
 800983c:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
 800983e:	7fab      	ldrb	r3, [r5, #30]
 8009840:	f043 0320 	orr.w	r3, r3, #32
 8009844:	77ab      	strb	r3, [r5, #30]
      return ERR_OK;
 8009846:	2000      	movs	r0, #0
 8009848:	bd70      	pop	{r4, r5, r6, pc}

0800984a <tcp_send_empty_ack>:
{
 800984a:	b570      	push	{r4, r5, r6, lr}
 800984c:	b084      	sub	sp, #16
 800984e:	4604      	mov	r4, r0
  p = tcp_output_alloc_header(pcb, optlen, 0, htonl(pcb->snd_nxt));
 8009850:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8009852:	f7fc f852 	bl	80058fa <lwip_htonl>
 8009856:	4603      	mov	r3, r0
 8009858:	2200      	movs	r2, #0
 800985a:	4611      	mov	r1, r2
 800985c:	4620      	mov	r0, r4
 800985e:	f7ff fd2e 	bl	80092be <tcp_output_alloc_header>
  if (p == NULL) {
 8009862:	b1e0      	cbz	r0, 800989e <tcp_send_empty_ack+0x54>
 8009864:	4606      	mov	r6, r0
  netif = ip_route(PCB_ISIPV6(pcb), &pcb->local_ip, &pcb->remote_ip);
 8009866:	1d25      	adds	r5, r4, #4
 8009868:	4628      	mov	r0, r5
 800986a:	f7fc f937 	bl	8005adc <ip4_route>
  if (netif == NULL) {
 800986e:	b1e8      	cbz	r0, 80098ac <tcp_send_empty_ack+0x62>
    err = ip_output_if(PCB_ISIPV6(pcb), p, &pcb->local_ip, &pcb->remote_ip,
 8009870:	7aa3      	ldrb	r3, [r4, #10]
 8009872:	7a61      	ldrb	r1, [r4, #9]
 8009874:	9002      	str	r0, [sp, #8]
 8009876:	2206      	movs	r2, #6
 8009878:	9201      	str	r2, [sp, #4]
 800987a:	9100      	str	r1, [sp, #0]
 800987c:	462a      	mov	r2, r5
 800987e:	4621      	mov	r1, r4
 8009880:	4630      	mov	r0, r6
 8009882:	f7fc faa1 	bl	8005dc8 <ip4_output_if>
 8009886:	4605      	mov	r5, r0
  pbuf_free(p);
 8009888:	4630      	mov	r0, r6
 800988a:	f7fd fa85 	bl	8006d98 <pbuf_free>
  if (err != ERR_OK) {
 800988e:	b985      	cbnz	r5, 80098b2 <tcp_send_empty_ack+0x68>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009890:	7fa3      	ldrb	r3, [r4, #30]
 8009892:	f023 0303 	bic.w	r3, r3, #3
 8009896:	77a3      	strb	r3, [r4, #30]
}
 8009898:	4628      	mov	r0, r5
 800989a:	b004      	add	sp, #16
 800989c:	bd70      	pop	{r4, r5, r6, pc}
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800989e:	7fa3      	ldrb	r3, [r4, #30]
 80098a0:	f043 0303 	orr.w	r3, r3, #3
 80098a4:	77a3      	strb	r3, [r4, #30]
    return ERR_BUF;
 80098a6:	f06f 0501 	mvn.w	r5, #1
 80098aa:	e7f5      	b.n	8009898 <tcp_send_empty_ack+0x4e>
    err = ERR_RTE;
 80098ac:	f06f 0503 	mvn.w	r5, #3
 80098b0:	e7ea      	b.n	8009888 <tcp_send_empty_ack+0x3e>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80098b2:	7fa3      	ldrb	r3, [r4, #30]
 80098b4:	f043 0303 	orr.w	r3, r3, #3
 80098b8:	77a3      	strb	r3, [r4, #30]
 80098ba:	e7ed      	b.n	8009898 <tcp_send_empty_ack+0x4e>

080098bc <tcp_output>:
{
 80098bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (tcp_input_pcb == pcb) {
 80098c0:	4b7a      	ldr	r3, [pc, #488]	; (8009aac <tcp_output+0x1f0>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4298      	cmp	r0, r3
 80098c6:	f000 80ee 	beq.w	8009aa6 <tcp_output+0x1ea>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80098ca:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80098ce:	f8b0 804c 	ldrh.w	r8, [r0, #76]	; 0x4c
 80098d2:	4543      	cmp	r3, r8
 80098d4:	d200      	bcs.n	80098d8 <tcp_output+0x1c>
 80098d6:	4698      	mov	r8, r3
 80098d8:	4605      	mov	r5, r0
  seg = pcb->unsent;
 80098da:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
  if (pcb->flags & TF_ACK_NOW &&
 80098dc:	7f83      	ldrb	r3, [r0, #30]
 80098de:	f013 0f02 	tst.w	r3, #2
 80098e2:	d00a      	beq.n	80098fa <tcp_output+0x3e>
 80098e4:	b164      	cbz	r4, 8009900 <tcp_output+0x44>
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 80098e6:	68e3      	ldr	r3, [r4, #12]
 80098e8:	6858      	ldr	r0, [r3, #4]
 80098ea:	f7fc f812 	bl	8005912 <lwip_ntohl>
 80098ee:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80098f0:	1ac3      	subs	r3, r0, r3
 80098f2:	8920      	ldrh	r0, [r4, #8]
 80098f4:	4403      	add	r3, r0
     (seg == NULL ||
 80098f6:	4598      	cmp	r8, r3
 80098f8:	d302      	bcc.n	8009900 <tcp_output+0x44>
  useg = pcb->unacked;
 80098fa:	6f2f      	ldr	r7, [r5, #112]	; 0x70
  if (useg != NULL) {
 80098fc:	b937      	cbnz	r7, 800990c <tcp_output+0x50>
 80098fe:	e073      	b.n	80099e8 <tcp_output+0x12c>
     return tcp_send_empty_ack(pcb);
 8009900:	4628      	mov	r0, r5
 8009902:	f7ff ffa2 	bl	800984a <tcp_send_empty_ack>
 8009906:	4603      	mov	r3, r0
 8009908:	e0c7      	b.n	8009a9a <tcp_output+0x1de>
    for (; useg->next != NULL; useg = useg->next);
 800990a:	461f      	mov	r7, r3
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d1fb      	bne.n	800990a <tcp_output+0x4e>
 8009912:	e069      	b.n	80099e8 <tcp_output+0x12c>
    if((tcp_do_output_nagle(pcb) == 0) &&
 8009914:	891a      	ldrh	r2, [r3, #8]
 8009916:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
 8009918:	429a      	cmp	r2, r3
 800991a:	f080 8085 	bcs.w	8009a28 <tcp_output+0x16c>
 800991e:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 8009922:	2b00      	cmp	r3, #0
 8009924:	f000 8082 	beq.w	8009a2c <tcp_output+0x170>
 8009928:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 800992c:	2b08      	cmp	r3, #8
 800992e:	d97f      	bls.n	8009a30 <tcp_output+0x174>
 8009930:	2301      	movs	r3, #1
 8009932:	e002      	b.n	800993a <tcp_output+0x7e>
 8009934:	2301      	movs	r3, #1
 8009936:	e000      	b.n	800993a <tcp_output+0x7e>
 8009938:	2301      	movs	r3, #1
 800993a:	b923      	cbnz	r3, 8009946 <tcp_output+0x8a>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800993c:	7fab      	ldrb	r3, [r5, #30]
    if((tcp_do_output_nagle(pcb) == 0) &&
 800993e:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8009942:	f000 80a3 	beq.w	8009a8c <tcp_output+0x1d0>
    if (pcb->state != SYN_SENT) {
 8009946:	7e2b      	ldrb	r3, [r5, #24]
 8009948:	2b02      	cmp	r3, #2
 800994a:	d009      	beq.n	8009960 <tcp_output+0xa4>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800994c:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8009950:	f8b9 600c 	ldrh.w	r6, [r9, #12]
 8009954:	2010      	movs	r0, #16
 8009956:	f7fb ffc7 	bl	80058e8 <lwip_htons>
 800995a:	4330      	orrs	r0, r6
 800995c:	f8a9 000c 	strh.w	r0, [r9, #12]
    err = tcp_output_segment(seg, pcb);
 8009960:	4629      	mov	r1, r5
 8009962:	4620      	mov	r0, r4
 8009964:	f7ff fce2 	bl	800932c <tcp_output_segment>
    if (err != ERR_OK) {
 8009968:	4603      	mov	r3, r0
 800996a:	2800      	cmp	r0, #0
 800996c:	d162      	bne.n	8009a34 <tcp_output+0x178>
    pcb->unsent = seg->next;
 800996e:	6823      	ldr	r3, [r4, #0]
 8009970:	66eb      	str	r3, [r5, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8009972:	7e2b      	ldrb	r3, [r5, #24]
 8009974:	2b02      	cmp	r3, #2
 8009976:	d003      	beq.n	8009980 <tcp_output+0xc4>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009978:	7fab      	ldrb	r3, [r5, #30]
 800997a:	f023 0303 	bic.w	r3, r3, #3
 800997e:	77ab      	strb	r3, [r5, #30]
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009980:	68e3      	ldr	r3, [r4, #12]
 8009982:	6858      	ldr	r0, [r3, #4]
 8009984:	f7fb ffc5 	bl	8005912 <lwip_ntohl>
 8009988:	4606      	mov	r6, r0
 800998a:	f8b4 9008 	ldrh.w	r9, [r4, #8]
 800998e:	68e3      	ldr	r3, [r4, #12]
 8009990:	8998      	ldrh	r0, [r3, #12]
 8009992:	f7fb ffae 	bl	80058f2 <lwip_ntohs>
 8009996:	f010 0f03 	tst.w	r0, #3
 800999a:	d050      	beq.n	8009a3e <tcp_output+0x182>
 800999c:	2001      	movs	r0, #1
 800999e:	4448      	add	r0, r9
 80099a0:	4430      	add	r0, r6
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80099a2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80099a4:	1a1b      	subs	r3, r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	db4b      	blt.n	8009a42 <tcp_output+0x186>
    if (TCP_TCPLEN(seg) > 0) {
 80099aa:	8926      	ldrh	r6, [r4, #8]
 80099ac:	68e3      	ldr	r3, [r4, #12]
 80099ae:	8998      	ldrh	r0, [r3, #12]
 80099b0:	f7fb ff9f 	bl	80058f2 <lwip_ntohs>
 80099b4:	f010 0f03 	tst.w	r0, #3
 80099b8:	d045      	beq.n	8009a46 <tcp_output+0x18a>
 80099ba:	2301      	movs	r3, #1
 80099bc:	42f3      	cmn	r3, r6
 80099be:	d061      	beq.n	8009a84 <tcp_output+0x1c8>
      seg->next = NULL;
 80099c0:	2300      	movs	r3, #0
 80099c2:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
 80099c4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d03f      	beq.n	8009a4a <tcp_output+0x18e>
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
 80099ca:	68e3      	ldr	r3, [r4, #12]
 80099cc:	6858      	ldr	r0, [r3, #4]
 80099ce:	f7fb ffa0 	bl	8005912 <lwip_ntohl>
 80099d2:	4606      	mov	r6, r0
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	6858      	ldr	r0, [r3, #4]
 80099d8:	f7fb ff9b 	bl	8005912 <lwip_ntohl>
 80099dc:	1a30      	subs	r0, r6, r0
 80099de:	2800      	cmp	r0, #0
 80099e0:	db36      	blt.n	8009a50 <tcp_output+0x194>
          useg->next = seg;
 80099e2:	603c      	str	r4, [r7, #0]
          useg = useg->next;
 80099e4:	4627      	mov	r7, r4
    seg = pcb->unsent;
 80099e6:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  while (seg != NULL &&
 80099e8:	2c00      	cmp	r4, #0
 80099ea:	d04f      	beq.n	8009a8c <tcp_output+0x1d0>
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80099ec:	68e3      	ldr	r3, [r4, #12]
 80099ee:	6858      	ldr	r0, [r3, #4]
 80099f0:	f7fb ff8f 	bl	8005912 <lwip_ntohl>
 80099f4:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80099f6:	1ac0      	subs	r0, r0, r3
 80099f8:	8923      	ldrh	r3, [r4, #8]
 80099fa:	4418      	add	r0, r3
  while (seg != NULL &&
 80099fc:	4580      	cmp	r8, r0
 80099fe:	d345      	bcc.n	8009a8c <tcp_output+0x1d0>
    LWIP_ASSERT("RST not expected here!",
 8009a00:	68e3      	ldr	r3, [r4, #12]
 8009a02:	8998      	ldrh	r0, [r3, #12]
 8009a04:	f7fb ff75 	bl	80058f2 <lwip_ntohs>
    if((tcp_do_output_nagle(pcb) == 0) &&
 8009a08:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d092      	beq.n	8009934 <tcp_output+0x78>
 8009a0e:	7fab      	ldrb	r3, [r5, #30]
 8009a10:	f013 0f44 	tst.w	r3, #68	; 0x44
 8009a14:	d190      	bne.n	8009938 <tcp_output+0x7c>
 8009a16:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d080      	beq.n	800991e <tcp_output+0x62>
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	2a00      	cmp	r2, #0
 8009a20:	f43f af78 	beq.w	8009914 <tcp_output+0x58>
 8009a24:	2301      	movs	r3, #1
 8009a26:	e788      	b.n	800993a <tcp_output+0x7e>
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e786      	b.n	800993a <tcp_output+0x7e>
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e784      	b.n	800993a <tcp_output+0x7e>
 8009a30:	2300      	movs	r3, #0
 8009a32:	e782      	b.n	800993a <tcp_output+0x7e>
      pcb->flags |= TF_NAGLEMEMERR;
 8009a34:	7faa      	ldrb	r2, [r5, #30]
 8009a36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009a3a:	77aa      	strb	r2, [r5, #30]
      return err;
 8009a3c:	e02d      	b.n	8009a9a <tcp_output+0x1de>
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009a3e:	2000      	movs	r0, #0
 8009a40:	e7ad      	b.n	800999e <tcp_output+0xe2>
      pcb->snd_nxt = snd_nxt;
 8009a42:	6528      	str	r0, [r5, #80]	; 0x50
 8009a44:	e7b1      	b.n	80099aa <tcp_output+0xee>
    if (TCP_TCPLEN(seg) > 0) {
 8009a46:	2300      	movs	r3, #0
 8009a48:	e7b8      	b.n	80099bc <tcp_output+0x100>
        pcb->unacked = seg;
 8009a4a:	672c      	str	r4, [r5, #112]	; 0x70
        useg = seg;
 8009a4c:	4627      	mov	r7, r4
 8009a4e:	e7ca      	b.n	80099e6 <tcp_output+0x12a>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009a50:	f105 0970 	add.w	r9, r5, #112	; 0x70
          while (*cur_seg &&
 8009a54:	e001      	b.n	8009a5a <tcp_output+0x19e>
              cur_seg = &((*cur_seg)->next );
 8009a56:	f8d9 9000 	ldr.w	r9, [r9]
          while (*cur_seg &&
 8009a5a:	f8d9 3000 	ldr.w	r3, [r9]
 8009a5e:	b15b      	cbz	r3, 8009a78 <tcp_output+0x1bc>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	6858      	ldr	r0, [r3, #4]
 8009a64:	f7fb ff55 	bl	8005912 <lwip_ntohl>
 8009a68:	4606      	mov	r6, r0
 8009a6a:	68e3      	ldr	r3, [r4, #12]
 8009a6c:	6858      	ldr	r0, [r3, #4]
 8009a6e:	f7fb ff50 	bl	8005912 <lwip_ntohl>
 8009a72:	1a30      	subs	r0, r6, r0
          while (*cur_seg &&
 8009a74:	2800      	cmp	r0, #0
 8009a76:	dbee      	blt.n	8009a56 <tcp_output+0x19a>
          seg->next = (*cur_seg);
 8009a78:	f8d9 3000 	ldr.w	r3, [r9]
 8009a7c:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 8009a7e:	f8c9 4000 	str.w	r4, [r9]
 8009a82:	e7b0      	b.n	80099e6 <tcp_output+0x12a>
      tcp_seg_free(seg);
 8009a84:	4620      	mov	r0, r4
 8009a86:	f7fd fbac 	bl	80071e2 <tcp_seg_free>
 8009a8a:	e7ac      	b.n	80099e6 <tcp_output+0x12a>
  if (pcb->unsent == NULL) {
 8009a8c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8009a8e:	b13b      	cbz	r3, 8009aa0 <tcp_output+0x1e4>
  pcb->flags &= ~TF_NAGLEMEMERR;
 8009a90:	7fab      	ldrb	r3, [r5, #30]
 8009a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a96:	77ab      	strb	r3, [r5, #30]
  return ERR_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pcb->unsent_oversize = 0;
 8009aa0:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
 8009aa4:	e7f4      	b.n	8009a90 <tcp_output+0x1d4>
    return ERR_OK;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	e7f7      	b.n	8009a9a <tcp_output+0x1de>
 8009aaa:	bf00      	nop
 8009aac:	20007b40 	.word	0x20007b40

08009ab0 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8009ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ab4:	b085      	sub	sp, #20
 8009ab6:	4680      	mov	r8, r0
 8009ab8:	460f      	mov	r7, r1
 8009aba:	4691      	mov	r9, r2
 8009abc:	461e      	mov	r6, r3
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8009abe:	2200      	movs	r2, #0
 8009ac0:	2114      	movs	r1, #20
 8009ac2:	2001      	movs	r0, #1
 8009ac4:	f7fd f996 	bl	8006df4 <pbuf_alloc>
  if (p == NULL) {
 8009ac8:	b398      	cbz	r0, 8009b32 <tcp_rst+0x82>
 8009aca:	4605      	mov	r5, r0
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8009acc:	6844      	ldr	r4, [r0, #4]
  tcphdr->src = htons(local_port);
 8009ace:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 8009ad2:	f7fb ff09 	bl	80058e8 <lwip_htons>
 8009ad6:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = htons(remote_port);
 8009ad8:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8009adc:	f7fb ff04 	bl	80058e8 <lwip_htons>
 8009ae0:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = htonl(seqno);
 8009ae2:	4640      	mov	r0, r8
 8009ae4:	f7fb ff09 	bl	80058fa <lwip_htonl>
 8009ae8:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = htonl(ackno);
 8009aea:	4638      	mov	r0, r7
 8009aec:	f7fb ff05 	bl	80058fa <lwip_htonl>
 8009af0:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8009af2:	f245 0014 	movw	r0, #20500	; 0x5014
 8009af6:	f7fb fef7 	bl	80058e8 <lwip_htons>
 8009afa:	81a0      	strh	r0, [r4, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8009afc:	2300      	movs	r3, #0
 8009afe:	2208      	movs	r2, #8
 8009b00:	73a2      	strb	r2, [r4, #14]
 8009b02:	2260      	movs	r2, #96	; 0x60
 8009b04:	73e2      	strb	r2, [r4, #15]
#endif
  tcphdr->chksum = 0;
 8009b06:	7423      	strb	r3, [r4, #16]
 8009b08:	7463      	strb	r3, [r4, #17]
  tcphdr->urgp = 0;
 8009b0a:	74a3      	strb	r3, [r4, #18]
 8009b0c:	74e3      	strb	r3, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(IP_IS_V6(remote_ip), local_ip, remote_ip);
 8009b0e:	4630      	mov	r0, r6
 8009b10:	f7fb ffe4 	bl	8005adc <ip4_route>
  if (netif != NULL) {
 8009b14:	b150      	cbz	r0, 8009b2c <tcp_rst+0x7c>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(IP_IS_V6(remote_ip), p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8009b16:	9002      	str	r0, [sp, #8]
 8009b18:	2306      	movs	r3, #6
 8009b1a:	9301      	str	r3, [sp, #4]
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	9300      	str	r3, [sp, #0]
 8009b20:	23ff      	movs	r3, #255	; 0xff
 8009b22:	4632      	mov	r2, r6
 8009b24:	4649      	mov	r1, r9
 8009b26:	4628      	mov	r0, r5
 8009b28:	f7fc f94e 	bl	8005dc8 <ip4_output_if>
  }
  pbuf_free(p);
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	f7fd f933 	bl	8006d98 <pbuf_free>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8009b32:	b005      	add	sp, #20
 8009b34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08009b38 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8009b38:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8009b3a:	b10a      	cbz	r2, 8009b40 <tcp_rexmit_rto+0x8>
{
 8009b3c:	b508      	push	{r3, lr}
 8009b3e:	e001      	b.n	8009b44 <tcp_rexmit_rto+0xc>
 8009b40:	4770      	bx	lr
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8009b42:	461a      	mov	r2, r3
 8009b44:	6813      	ldr	r3, [r2, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d1fb      	bne.n	8009b42 <tcp_rexmit_rto+0xa>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8009b4a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009b4c:	6013      	str	r3, [r2, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8009b4e:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8009b50:	66c3      	str	r3, [r0, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8009b52:	2200      	movs	r2, #0
 8009b54:	6702      	str	r2, [r0, #112]	; 0x70

  /* increment number of retransmissions */
  ++pcb->nrtx;
 8009b56:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8009b60:	6382      	str	r2, [r0, #56]	; 0x38

  /* Do the actual retransmission */
  tcp_output(pcb);
 8009b62:	f7ff feab 	bl	80098bc <tcp_output>
 8009b66:	bd08      	pop	{r3, pc}

08009b68 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8009b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8009b6a:	6f06      	ldr	r6, [r0, #112]	; 0x70
 8009b6c:	b306      	cbz	r6, 8009bb0 <tcp_rexmit+0x48>
 8009b6e:	4607      	mov	r7, r0
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 8009b70:	6833      	ldr	r3, [r6, #0]
 8009b72:	6703      	str	r3, [r0, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8009b74:	f100 056c 	add.w	r5, r0, #108	; 0x6c
  while (*cur_seg &&
 8009b78:	e000      	b.n	8009b7c <tcp_rexmit+0x14>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8009b7a:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 8009b7c:	682b      	ldr	r3, [r5, #0]
 8009b7e:	b15b      	cbz	r3, 8009b98 <tcp_rexmit+0x30>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	6858      	ldr	r0, [r3, #4]
 8009b84:	f7fb fec5 	bl	8005912 <lwip_ntohl>
 8009b88:	4604      	mov	r4, r0
 8009b8a:	68f3      	ldr	r3, [r6, #12]
 8009b8c:	6858      	ldr	r0, [r3, #4]
 8009b8e:	f7fb fec0 	bl	8005912 <lwip_ntohl>
 8009b92:	1a20      	subs	r0, r4, r0
  while (*cur_seg &&
 8009b94:	2800      	cmp	r0, #0
 8009b96:	dbf0      	blt.n	8009b7a <tcp_rexmit+0x12>
  }
  seg->next = *cur_seg;
 8009b98:	682b      	ldr	r3, [r5, #0]
 8009b9a:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 8009b9c:	602e      	str	r6, [r5, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8009b9e:	6833      	ldr	r3, [r6, #0]
 8009ba0:	b13b      	cbz	r3, 8009bb2 <tcp_rexmit+0x4a>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  ++pcb->nrtx;
 8009ba2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8009bac:	2300      	movs	r3, #0
 8009bae:	63bb      	str	r3, [r7, #56]	; 0x38
 8009bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 8009bb2:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8009bb6:	e7f4      	b.n	8009ba2 <tcp_rexmit+0x3a>

08009bb8 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8009bb8:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8009bba:	b11b      	cbz	r3, 8009bc4 <tcp_rexmit_fast+0xc>
 8009bbc:	7f83      	ldrb	r3, [r0, #30]
 8009bbe:	f013 0f04 	tst.w	r3, #4
 8009bc2:	d000      	beq.n	8009bc6 <tcp_rexmit_fast+0xe>
 8009bc4:	4770      	bx	lr
{
 8009bc6:	b510      	push	{r4, lr}
 8009bc8:	4604      	mov	r4, r0
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8009bca:	f7ff ffcd 	bl	8009b68 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
 8009bce:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 8009bd2:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d918      	bls.n	8009c0c <tcp_rexmit_fast+0x54>
      pcb->ssthresh = pcb->snd_wnd / 2;
 8009bda:	0852      	lsrs	r2, r2, #1
 8009bdc:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
    }

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8009be0:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
 8009be4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009be6:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8009bea:	d202      	bcs.n	8009bf2 <tcp_rexmit_fast+0x3a>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, 2*pcb->mss));
      pcb->ssthresh = 2*pcb->mss;
 8009bec:	005a      	lsls	r2, r3, #1
 8009bee:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8009bf2:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
 8009bf6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009bfa:	fa12 f383 	uxtah	r3, r2, r3
 8009bfe:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    pcb->flags |= TF_INFR;
 8009c02:	7fa3      	ldrb	r3, [r4, #30]
 8009c04:	f043 0304 	orr.w	r3, r3, #4
 8009c08:	77a3      	strb	r3, [r4, #30]
 8009c0a:	bd10      	pop	{r4, pc}
      pcb->ssthresh = pcb->cwnd / 2;
 8009c0c:	085b      	lsrs	r3, r3, #1
 8009c0e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8009c12:	e7e5      	b.n	8009be0 <tcp_rexmit_fast+0x28>

08009c14 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8009c14:	b570      	push	{r4, r5, r6, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
 8009c1a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8009c1c:	3801      	subs	r0, #1
 8009c1e:	f7fb fe6c 	bl	80058fa <lwip_htonl>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2200      	movs	r2, #0
 8009c26:	4611      	mov	r1, r2
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f7ff fb48 	bl	80092be <tcp_output_alloc_header>
  if (p == NULL) {
 8009c2e:	b1d0      	cbz	r0, 8009c66 <tcp_keepalive+0x52>
 8009c30:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(PCB_ISIPV6(pcb), &pcb->local_ip, &pcb->remote_ip);
 8009c32:	1d26      	adds	r6, r4, #4
 8009c34:	4630      	mov	r0, r6
 8009c36:	f7fb ff51 	bl	8005adc <ip4_route>
  if (netif == NULL) {
 8009c3a:	b188      	cbz	r0, 8009c60 <tcp_keepalive+0x4c>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(PCB_ISIPV6(pcb), p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009c3c:	7aa3      	ldrb	r3, [r4, #10]
 8009c3e:	9002      	str	r0, [sp, #8]
 8009c40:	2206      	movs	r2, #6
 8009c42:	9201      	str	r2, [sp, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	9200      	str	r2, [sp, #0]
 8009c48:	4632      	mov	r2, r6
 8009c4a:	4621      	mov	r1, r4
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	f7fc f8bb 	bl	8005dc8 <ip4_output_if>
 8009c52:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8009c54:	4628      	mov	r0, r5
 8009c56:	f7fd f89f 	bl	8006d98 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	b004      	add	sp, #16
 8009c5e:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 8009c60:	f06f 0403 	mvn.w	r4, #3
 8009c64:	e7f6      	b.n	8009c54 <tcp_keepalive+0x40>
    return ERR_MEM;
 8009c66:	f04f 34ff 	mov.w	r4, #4294967295
 8009c6a:	e7f6      	b.n	8009c5a <tcp_keepalive+0x46>

08009c6c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8009c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c70:	b084      	sub	sp, #16
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8009c72:	6f05      	ldr	r5, [r0, #112]	; 0x70

  if (seg == NULL) {
 8009c74:	b175      	cbz	r5, 8009c94 <tcp_zero_window_probe+0x28>
    seg = pcb->unsent;
  }
  if (seg == NULL) {
 8009c76:	2d00      	cmp	r5, #0
 8009c78:	d051      	beq.n	8009d1e <tcp_zero_window_probe+0xb2>
 8009c7a:	4604      	mov	r4, r0
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8009c7c:	68eb      	ldr	r3, [r5, #12]
 8009c7e:	8998      	ldrh	r0, [r3, #12]
 8009c80:	f7fb fe37 	bl	80058f2 <lwip_ntohs>
 8009c84:	f010 0f01 	tst.w	r0, #1
 8009c88:	d006      	beq.n	8009c98 <tcp_zero_window_probe+0x2c>
 8009c8a:	892b      	ldrh	r3, [r5, #8]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d036      	beq.n	8009cfe <tcp_zero_window_probe+0x92>
 8009c90:	2200      	movs	r2, #0
 8009c92:	e002      	b.n	8009c9a <tcp_zero_window_probe+0x2e>
    seg = pcb->unsent;
 8009c94:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 8009c96:	e7ee      	b.n	8009c76 <tcp_zero_window_probe+0xa>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8009c98:	2200      	movs	r2, #0
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8009c9a:	f002 08ff 	and.w	r8, r2, #255	; 0xff

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8009c9e:	68eb      	ldr	r3, [r5, #12]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	f082 0201 	eor.w	r2, r2, #1
 8009ca6:	2100      	movs	r1, #0
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f7ff fb08 	bl	80092be <tcp_output_alloc_header>
  if (p == NULL) {
 8009cae:	4606      	mov	r6, r0
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	d036      	beq.n	8009d22 <tcp_zero_window_probe+0xb6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8009cb4:	6847      	ldr	r7, [r0, #4]

  if (is_fin) {
 8009cb6:	f1b8 0f00 	cmp.w	r8, #0
 8009cba:	d022      	beq.n	8009d02 <tcp_zero_window_probe+0x96>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8009cbc:	89bd      	ldrh	r5, [r7, #12]
 8009cbe:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 8009cc2:	b2ad      	uxth	r5, r5
 8009cc4:	2011      	movs	r0, #17
 8009cc6:	f7fb fe0f 	bl	80058e8 <lwip_htons>
 8009cca:	4328      	orrs	r0, r5
 8009ccc:	81b8      	strh	r0, [r7, #12]
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  netif = ip_route(PCB_ISIPV6(pcb), &pcb->local_ip, &pcb->remote_ip);
 8009cce:	1d25      	adds	r5, r4, #4
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	f7fb ff03 	bl	8005adc <ip4_route>
  if (netif == NULL) {
 8009cd6:	b1f8      	cbz	r0, 8009d18 <tcp_zero_window_probe+0xac>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(PCB_ISIPV6(pcb), p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009cd8:	7aa3      	ldrb	r3, [r4, #10]
 8009cda:	9002      	str	r0, [sp, #8]
 8009cdc:	2206      	movs	r2, #6
 8009cde:	9201      	str	r2, [sp, #4]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	9200      	str	r2, [sp, #0]
 8009ce4:	462a      	mov	r2, r5
 8009ce6:	4621      	mov	r1, r4
 8009ce8:	4630      	mov	r0, r6
 8009cea:	f7fc f86d 	bl	8005dc8 <ip4_output_if>
 8009cee:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8009cf0:	4630      	mov	r0, r6
 8009cf2:	f7fd f851 	bl	8006d98 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	b004      	add	sp, #16
 8009cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8009cfe:	2201      	movs	r2, #1
 8009d00:	e7cb      	b.n	8009c9a <tcp_zero_window_probe+0x2e>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8009d02:	6868      	ldr	r0, [r5, #4]
 8009d04:	8903      	ldrh	r3, [r0, #8]
 8009d06:	892a      	ldrh	r2, [r5, #8]
 8009d08:	1a9b      	subs	r3, r3, r2
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	f107 0114 	add.w	r1, r7, #20
 8009d12:	f7fd f9bf 	bl	8007094 <pbuf_copy_partial>
 8009d16:	e7da      	b.n	8009cce <tcp_zero_window_probe+0x62>
    err = ERR_RTE;
 8009d18:	f06f 0403 	mvn.w	r4, #3
 8009d1c:	e7e8      	b.n	8009cf0 <tcp_zero_window_probe+0x84>
    return ERR_OK;
 8009d1e:	2400      	movs	r4, #0
 8009d20:	e7e9      	b.n	8009cf6 <tcp_zero_window_probe+0x8a>
    return ERR_MEM;
 8009d22:	f04f 34ff 	mov.w	r4, #4294967295
 8009d26:	e7e6      	b.n	8009cf6 <tcp_zero_window_probe+0x8a>

08009d28 <udp_new_port>:
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
  u16_t n = 0;
 8009d28:	2000      	movs	r0, #0
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8009d2a:	4a10      	ldr	r2, [pc, #64]	; (8009d6c <udp_new_port+0x44>)
 8009d2c:	8813      	ldrh	r3, [r2, #0]
 8009d2e:	1c59      	adds	r1, r3, #1
 8009d30:	8011      	strh	r1, [r2, #0]
 8009d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d009      	beq.n	8009d4e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d3a:	4b0d      	ldr	r3, [pc, #52]	; (8009d70 <udp_new_port+0x48>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	b193      	cbz	r3, 8009d66 <udp_new_port+0x3e>
    if (pcb->local_port == udp_port) {
 8009d40:	8a59      	ldrh	r1, [r3, #18]
 8009d42:	4a0a      	ldr	r2, [pc, #40]	; (8009d6c <udp_new_port+0x44>)
 8009d44:	8812      	ldrh	r2, [r2, #0]
 8009d46:	4291      	cmp	r1, r2
 8009d48:	d006      	beq.n	8009d58 <udp_new_port+0x30>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	e7f7      	b.n	8009d3e <udp_new_port+0x16>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8009d4e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8009d52:	4b06      	ldr	r3, [pc, #24]	; (8009d6c <udp_new_port+0x44>)
 8009d54:	801a      	strh	r2, [r3, #0]
 8009d56:	e7f0      	b.n	8009d3a <udp_new_port+0x12>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8009d58:	3001      	adds	r0, #1
 8009d5a:	b280      	uxth	r0, r0
 8009d5c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8009d60:	d3e3      	bcc.n	8009d2a <udp_new_port+0x2>
        return 0;
 8009d62:	2000      	movs	r0, #0
  if (ipcb != NULL) {
    return 0;
  }
  return udp_port;
#endif
}
 8009d64:	4770      	bx	lr
  return udp_port;
 8009d66:	4b01      	ldr	r3, [pc, #4]	; (8009d6c <udp_new_port+0x44>)
 8009d68:	8818      	ldrh	r0, [r3, #0]
 8009d6a:	4770      	bx	lr
 8009d6c:	2000003e 	.word	0x2000003e
 8009d70:	20007b44 	.word	0x20007b44

08009d74 <udp_init>:
{
 8009d74:	4770      	bx	lr
	...

08009d78 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8009d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d7c:	b082      	sub	sp, #8
 8009d7e:	4607      	mov	r7, r0
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8009d80:	8943      	ldrh	r3, [r0, #10]
 8009d82:	2b07      	cmp	r3, #7
 8009d84:	d915      	bls.n	8009db2 <udp_input+0x3a>
 8009d86:	4688      	mov	r8, r1
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 8009d88:	6844      	ldr	r4, [r0, #4]

#if LWIP_IPV4
  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8009d8a:	4b4e      	ldr	r3, [pc, #312]	; (8009ec4 <udp_input+0x14c>)
 8009d8c:	6819      	ldr	r1, [r3, #0]
 8009d8e:	6958      	ldr	r0, [r3, #20]
 8009d90:	f7fc f82f 	bl	8005df2 <ip4_addr_isbroadcast_u32>
 8009d94:	4606      	mov	r6, r0
#endif /* LWIP_IPV4 */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = ntohs(udphdr->src);
 8009d96:	8820      	ldrh	r0, [r4, #0]
 8009d98:	f7fb fdab 	bl	80058f2 <lwip_ntohs>
 8009d9c:	4605      	mov	r5, r0
  dest = ntohs(udphdr->dest);
 8009d9e:	8860      	ldrh	r0, [r4, #2]
 8009da0:	f7fb fda7 	bl	80058f2 <lwip_ntohs>
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009da4:	4b48      	ldr	r3, [pc, #288]	; (8009ec8 <udp_input+0x150>)
 8009da6:	f8d3 e000 	ldr.w	lr, [r3]
 8009daa:	4674      	mov	r4, lr
    uncon_pcb = NULL;
 8009dac:	2100      	movs	r1, #0
    prev = NULL;
 8009dae:	460a      	mov	r2, r1
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009db0:	e02c      	b.n	8009e0c <udp_input+0x94>
    pbuf_free(p);
 8009db2:	f7fc fff1 	bl	8006d98 <pbuf_free>
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8009db6:	b002      	add	sp, #8
 8009db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (
 8009dbc:	b916      	cbnz	r6, 8009dc4 <udp_input+0x4c>
            ((!broadcast && ip_addr_isany(&pcb->local_ip)) ||
 8009dbe:	b19c      	cbz	r4, 8009de8 <udp_input+0x70>
 8009dc0:	6823      	ldr	r3, [r4, #0]
 8009dc2:	b18b      	cbz	r3, 8009de8 <udp_input+0x70>
            ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr()) ||
 8009dc4:	f8d4 c000 	ldr.w	ip, [r4]
 8009dc8:	4b3e      	ldr	r3, [pc, #248]	; (8009ec4 <udp_input+0x14c>)
 8009dca:	695b      	ldr	r3, [r3, #20]
            ((!broadcast && ip_addr_isany(&pcb->local_ip)) ||
 8009dcc:	459c      	cmp	ip, r3
 8009dce:	d00b      	beq.n	8009de8 <udp_input+0x70>
            ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr()) ||
 8009dd0:	b19e      	cbz	r6, 8009dfa <udp_input+0x82>
            (broadcast &&
 8009dd2:	b14c      	cbz	r4, 8009de8 <udp_input+0x70>
             (ip_addr_isany(&pcb->local_ip) ||
 8009dd4:	f1bc 0f00 	cmp.w	ip, #0
 8009dd8:	d006      	beq.n	8009de8 <udp_input+0x70>
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), netif_ip4_netmask(inp))))))
 8009dda:	ea8c 0c03 	eor.w	ip, ip, r3
             (ip_addr_isany(&pcb->local_ip) ||
 8009dde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009de2:	ea1c 0f03 	tst.w	ip, r3
 8009de6:	d10a      	bne.n	8009dfe <udp_input+0x86>
          if ((uncon_pcb == NULL) &&
 8009de8:	b109      	cbz	r1, 8009dee <udp_input+0x76>
          local_match = 1;
 8009dea:	2301      	movs	r3, #1
 8009dec:	e013      	b.n	8009e16 <udp_input+0x9e>
              ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
 8009dee:	7c23      	ldrb	r3, [r4, #16]
          if ((uncon_pcb == NULL) &&
 8009df0:	f013 0f04 	tst.w	r3, #4
 8009df4:	d005      	beq.n	8009e02 <udp_input+0x8a>
          local_match = 1;
 8009df6:	2301      	movs	r3, #1
 8009df8:	e00d      	b.n	8009e16 <udp_input+0x9e>
      local_match = 0;
 8009dfa:	4633      	mov	r3, r6
 8009dfc:	e00b      	b.n	8009e16 <udp_input+0x9e>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	e009      	b.n	8009e16 <udp_input+0x9e>
            uncon_pcb = pcb;
 8009e02:	4621      	mov	r1, r4
          local_match = 1;
 8009e04:	2301      	movs	r3, #1
 8009e06:	e006      	b.n	8009e16 <udp_input+0x9e>
      prev = pcb;
 8009e08:	4622      	mov	r2, r4
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e0a:	68e4      	ldr	r4, [r4, #12]
 8009e0c:	b1bc      	cbz	r4, 8009e3e <udp_input+0xc6>
      if (pcb->local_port == dest) {
 8009e0e:	8a63      	ldrh	r3, [r4, #18]
 8009e10:	4298      	cmp	r0, r3
 8009e12:	d0d3      	beq.n	8009dbc <udp_input+0x44>
      local_match = 0;
 8009e14:	2300      	movs	r3, #0
      if ((local_match != 0) &&
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d0f6      	beq.n	8009e08 <udp_input+0x90>
          (pcb->remote_port == src) && IP_PCB_IPVER_INPUT_MATCH(pcb) &&
 8009e1a:	8aa3      	ldrh	r3, [r4, #20]
 8009e1c:	429d      	cmp	r5, r3
 8009e1e:	d1f3      	bne.n	8009e08 <udp_input+0x90>
            (ip_addr_isany_val(pcb->remote_ip) ||
 8009e20:	6863      	ldr	r3, [r4, #4]
          (pcb->remote_port == src) && IP_PCB_IPVER_INPUT_MATCH(pcb) &&
 8009e22:	b12b      	cbz	r3, 8009e30 <udp_input+0xb8>
              ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8009e24:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8009ec4 <udp_input+0x14c>
 8009e28:	f8dc c010 	ldr.w	ip, [ip, #16]
            (ip_addr_isany_val(pcb->remote_ip) ||
 8009e2c:	4563      	cmp	r3, ip
 8009e2e:	d1eb      	bne.n	8009e08 <udp_input+0x90>
        if (prev != NULL) {
 8009e30:	b12a      	cbz	r2, 8009e3e <udp_input+0xc6>
          prev->next = pcb->next;
 8009e32:	68e3      	ldr	r3, [r4, #12]
 8009e34:	60d3      	str	r3, [r2, #12]
          pcb->next = udp_pcbs;
 8009e36:	f8c4 e00c 	str.w	lr, [r4, #12]
          udp_pcbs = pcb;
 8009e3a:	4b23      	ldr	r3, [pc, #140]	; (8009ec8 <udp_input+0x150>)
 8009e3c:	601c      	str	r4, [r3, #0]
    if (pcb == NULL) {
 8009e3e:	b19c      	cbz	r4, 8009e68 <udp_input+0xf0>
  if (pcb != NULL) {
 8009e40:	b1a4      	cbz	r4, 8009e6c <udp_input+0xf4>
    for_us = 1;
 8009e42:	2301      	movs	r3, #1
  if (for_us) {
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d038      	beq.n	8009eba <udp_input+0x142>
    if (pbuf_header(p, -UDP_HLEN)) {
 8009e48:	f06f 0107 	mvn.w	r1, #7
 8009e4c:	4638      	mov	r0, r7
 8009e4e:	f7fc ff99 	bl	8006d84 <pbuf_header>
 8009e52:	b9a0      	cbnz	r0, 8009e7e <udp_input+0x106>
    if (pcb != NULL) {
 8009e54:	b1dc      	cbz	r4, 8009e8e <udp_input+0x116>
      if (pcb->recv != NULL) {
 8009e56:	69a6      	ldr	r6, [r4, #24]
 8009e58:	b1ae      	cbz	r6, 8009e86 <udp_input+0x10e>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8009e5a:	69e0      	ldr	r0, [r4, #28]
 8009e5c:	9500      	str	r5, [sp, #0]
 8009e5e:	4b1b      	ldr	r3, [pc, #108]	; (8009ecc <udp_input+0x154>)
 8009e60:	463a      	mov	r2, r7
 8009e62:	4621      	mov	r1, r4
 8009e64:	47b0      	blx	r6
 8009e66:	e7a6      	b.n	8009db6 <udp_input+0x3e>
      pcb = uncon_pcb;
 8009e68:	460c      	mov	r4, r1
 8009e6a:	e7e9      	b.n	8009e40 <udp_input+0xc8>
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8009e6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009e70:	4a14      	ldr	r2, [pc, #80]	; (8009ec4 <udp_input+0x14c>)
 8009e72:	6952      	ldr	r2, [r2, #20]
 8009e74:	4293      	cmp	r3, r2
 8009e76:	bf14      	ite	ne
 8009e78:	2300      	movne	r3, #0
 8009e7a:	2301      	moveq	r3, #1
 8009e7c:	e7e2      	b.n	8009e44 <udp_input+0xcc>
      pbuf_free(p);
 8009e7e:	4638      	mov	r0, r7
 8009e80:	f7fc ff8a 	bl	8006d98 <pbuf_free>
      goto end;
 8009e84:	e797      	b.n	8009db6 <udp_input+0x3e>
        pbuf_free(p);
 8009e86:	4638      	mov	r0, r7
 8009e88:	f7fc ff86 	bl	8006d98 <pbuf_free>
        goto end;
 8009e8c:	e793      	b.n	8009db6 <udp_input+0x3e>
      if (
 8009e8e:	b986      	cbnz	r6, 8009eb2 <udp_input+0x13a>
          !broadcast && !ip_addr_ismulticast(ip_current_dest_addr())
 8009e90:	4b0c      	ldr	r3, [pc, #48]	; (8009ec4 <udp_input+0x14c>)
 8009e92:	695b      	ldr	r3, [r3, #20]
 8009e94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e98:	2be0      	cmp	r3, #224	; 0xe0
 8009e9a:	d00a      	beq.n	8009eb2 <udp_input+0x13a>
        pbuf_header_force(p, ip_current_header_tot_len() + UDP_HLEN);
 8009e9c:	4b09      	ldr	r3, [pc, #36]	; (8009ec4 <udp_input+0x14c>)
 8009e9e:	8999      	ldrh	r1, [r3, #12]
 8009ea0:	3108      	adds	r1, #8
 8009ea2:	b209      	sxth	r1, r1
 8009ea4:	4638      	mov	r0, r7
 8009ea6:	f7fc ff72 	bl	8006d8e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8009eaa:	2103      	movs	r1, #3
 8009eac:	4638      	mov	r0, r7
 8009eae:	f7fb fe09 	bl	8005ac4 <icmp_dest_unreach>
      pbuf_free(p);
 8009eb2:	4638      	mov	r0, r7
 8009eb4:	f7fc ff70 	bl	8006d98 <pbuf_free>
 8009eb8:	e77d      	b.n	8009db6 <udp_input+0x3e>
    pbuf_free(p);
 8009eba:	4638      	mov	r0, r7
 8009ebc:	f7fc ff6c 	bl	8006d98 <pbuf_free>
  return;
 8009ec0:	e779      	b.n	8009db6 <udp_input+0x3e>
 8009ec2:	bf00      	nop
 8009ec4:	20004058 	.word	0x20004058
 8009ec8:	20007b44 	.word	0x20007b44
 8009ecc:	20004068 	.word	0x20004068

08009ed0 <udp_bind>:
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  struct udp_pcb *ipcb;
  u8_t rebind;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
 8009ed0:	2800      	cmp	r0, #0
 8009ed2:	d033      	beq.n	8009f3c <udp_bind+0x6c>
{
 8009ed4:	b570      	push	{r4, r5, r6, lr}
 8009ed6:	460d      	mov	r5, r1
 8009ed8:	4604      	mov	r4, r0
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8009eda:	4b22      	ldr	r3, [pc, #136]	; (8009f64 <udp_bind+0x94>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4619      	mov	r1, r3
 8009ee0:	b119      	cbz	r1, 8009eea <udp_bind+0x1a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8009ee2:	42a1      	cmp	r1, r4
 8009ee4:	d013      	beq.n	8009f0e <udp_bind+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8009ee6:	68c9      	ldr	r1, [r1, #12]
 8009ee8:	e7fa      	b.n	8009ee0 <udp_bind+0x10>
  rebind = 0;
 8009eea:	2600      	movs	r6, #0
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 8009eec:	b992      	cbnz	r2, 8009f14 <udp_bind+0x44>
    port = udp_new_port();
 8009eee:	f7ff ff1b 	bl	8009d28 <udp_new_port>
    if (port == 0) {
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	b328      	cbz	r0, 8009f42 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8009ef6:	b1fd      	cbz	r5, 8009f38 <udp_bind+0x68>
 8009ef8:	682b      	ldr	r3, [r5, #0]
 8009efa:	6023      	str	r3, [r4, #0]

  pcb->local_port = port;
 8009efc:	8262      	strh	r2, [r4, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8009efe:	2e00      	cmp	r6, #0
 8009f00:	d12e      	bne.n	8009f60 <udp_bind+0x90>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8009f02:	4b18      	ldr	r3, [pc, #96]	; (8009f64 <udp_bind+0x94>)
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	60e2      	str	r2, [r4, #12]
    udp_pcbs = pcb;
 8009f08:	601c      	str	r4, [r3, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8009f0a:	2000      	movs	r0, #0
 8009f0c:	bd70      	pop	{r4, r5, r6, pc}
      rebind = 1;
 8009f0e:	2601      	movs	r6, #1
 8009f10:	e7ec      	b.n	8009eec <udp_bind+0x1c>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d0ee      	beq.n	8009ef6 <udp_bind+0x26>
      if (pcb != ipcb) {
 8009f18:	42a3      	cmp	r3, r4
 8009f1a:	d0fa      	beq.n	8009f12 <udp_bind+0x42>
          if ((ipcb->local_port == port) && IP_PCB_IPVER_EQ(pcb, ipcb) &&
 8009f1c:	8a59      	ldrh	r1, [r3, #18]
 8009f1e:	428a      	cmp	r2, r1
 8009f20:	d1f7      	bne.n	8009f12 <udp_bind+0x42>
 8009f22:	b18b      	cbz	r3, 8009f48 <udp_bind+0x78>
                (ip_addr_isany(&ipcb->local_ip) ||
 8009f24:	6819      	ldr	r1, [r3, #0]
 8009f26:	b191      	cbz	r1, 8009f4e <udp_bind+0x7e>
 8009f28:	b1a5      	cbz	r5, 8009f54 <udp_bind+0x84>
                 ip_addr_isany(ipaddr) ||
 8009f2a:	6828      	ldr	r0, [r5, #0]
 8009f2c:	b1a8      	cbz	r0, 8009f5a <udp_bind+0x8a>
 8009f2e:	4281      	cmp	r1, r0
 8009f30:	d1ef      	bne.n	8009f12 <udp_bind+0x42>
            return ERR_USE;
 8009f32:	f06f 0007 	mvn.w	r0, #7
 8009f36:	bd70      	pop	{r4, r5, r6, pc}
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8009f38:	2300      	movs	r3, #0
 8009f3a:	e7de      	b.n	8009efa <udp_bind+0x2a>
    return ERR_VAL;
 8009f3c:	f06f 0005 	mvn.w	r0, #5
 8009f40:	4770      	bx	lr
      return ERR_USE;
 8009f42:	f06f 0007 	mvn.w	r0, #7
 8009f46:	bd70      	pop	{r4, r5, r6, pc}
            return ERR_USE;
 8009f48:	f06f 0007 	mvn.w	r0, #7
 8009f4c:	bd70      	pop	{r4, r5, r6, pc}
 8009f4e:	f06f 0007 	mvn.w	r0, #7
 8009f52:	bd70      	pop	{r4, r5, r6, pc}
 8009f54:	f06f 0007 	mvn.w	r0, #7
 8009f58:	bd70      	pop	{r4, r5, r6, pc}
 8009f5a:	f06f 0007 	mvn.w	r0, #7
 8009f5e:	bd70      	pop	{r4, r5, r6, pc}
  return ERR_OK;
 8009f60:	2000      	movs	r0, #0
}
 8009f62:	bd70      	pop	{r4, r5, r6, pc}
 8009f64:	20007b44 	.word	0x20007b44

08009f68 <udp_sendto_if_src>:
{
 8009f68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f6c:	b085      	sub	sp, #20
  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	d043      	beq.n	8009ffa <udp_sendto_if_src+0x92>
 8009f72:	4604      	mov	r4, r0
 8009f74:	4699      	mov	r9, r3
 8009f76:	4690      	mov	r8, r2
 8009f78:	460d      	mov	r5, r1
  if (pcb->local_port == 0) {
 8009f7a:	8a42      	ldrh	r2, [r0, #18]
 8009f7c:	b922      	cbnz	r2, 8009f88 <udp_sendto_if_src+0x20>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8009f7e:	4601      	mov	r1, r0
 8009f80:	f7ff ffa6 	bl	8009ed0 <udp_bind>
    if (err != ERR_OK) {
 8009f84:	4606      	mov	r6, r0
 8009f86:	bba0      	cbnz	r0, 8009ff2 <udp_sendto_if_src+0x8a>
  if (pbuf_header(p, UDP_HLEN)) {
 8009f88:	2108      	movs	r1, #8
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	f7fc fefa 	bl	8006d84 <pbuf_header>
 8009f90:	b160      	cbz	r0, 8009fac <udp_sendto_if_src+0x44>
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8009f92:	2200      	movs	r2, #0
 8009f94:	2108      	movs	r1, #8
 8009f96:	2001      	movs	r0, #1
 8009f98:	f7fc ff2c 	bl	8006df4 <pbuf_alloc>
    if (q == NULL) {
 8009f9c:	4607      	mov	r7, r0
 8009f9e:	b378      	cbz	r0, 800a000 <udp_sendto_if_src+0x98>
    if (p->tot_len != 0) {
 8009fa0:	892b      	ldrh	r3, [r5, #8]
 8009fa2:	b123      	cbz	r3, 8009fae <udp_sendto_if_src+0x46>
      pbuf_chain(q, p);
 8009fa4:	4629      	mov	r1, r5
 8009fa6:	f7fd f809 	bl	8006fbc <pbuf_chain>
 8009faa:	e000      	b.n	8009fae <udp_sendto_if_src+0x46>
    q = p;
 8009fac:	462f      	mov	r7, r5
  udphdr = (struct udp_hdr *)q->payload;
 8009fae:	687e      	ldr	r6, [r7, #4]
  udphdr->src = htons(pcb->local_port);
 8009fb0:	8a60      	ldrh	r0, [r4, #18]
 8009fb2:	f7fb fc99 	bl	80058e8 <lwip_htons>
 8009fb6:	8030      	strh	r0, [r6, #0]
  udphdr->dest = htons(dst_port);
 8009fb8:	4648      	mov	r0, r9
 8009fba:	f7fb fc95 	bl	80058e8 <lwip_htons>
 8009fbe:	8070      	strh	r0, [r6, #2]
  udphdr->chksum = 0x0000;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	71b3      	strb	r3, [r6, #6]
 8009fc4:	71f3      	strb	r3, [r6, #7]
    udphdr->len = htons(q->tot_len);
 8009fc6:	8938      	ldrh	r0, [r7, #8]
 8009fc8:	f7fb fc8e 	bl	80058e8 <lwip_htons>
 8009fcc:	80b0      	strh	r0, [r6, #4]
  ttl = pcb->ttl;
 8009fce:	7aa3      	ldrb	r3, [r4, #10]
  err = ip_output_if_src(PCB_ISIPV6(pcb), q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8009fd0:	7a62      	ldrb	r2, [r4, #9]
 8009fd2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009fd4:	9102      	str	r1, [sp, #8]
 8009fd6:	2111      	movs	r1, #17
 8009fd8:	9101      	str	r1, [sp, #4]
 8009fda:	9200      	str	r2, [sp, #0]
 8009fdc:	4642      	mov	r2, r8
 8009fde:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009fe0:	4638      	mov	r0, r7
 8009fe2:	f7fb fe95 	bl	8005d10 <ip4_output_if_src>
 8009fe6:	4606      	mov	r6, r0
  if (q != p) {
 8009fe8:	42af      	cmp	r7, r5
 8009fea:	d002      	beq.n	8009ff2 <udp_sendto_if_src+0x8a>
    pbuf_free(q);
 8009fec:	4638      	mov	r0, r7
 8009fee:	f7fc fed3 	bl	8006d98 <pbuf_free>
}
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	b005      	add	sp, #20
 8009ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return ERR_VAL;
 8009ffa:	f06f 0605 	mvn.w	r6, #5
 8009ffe:	e7f8      	b.n	8009ff2 <udp_sendto_if_src+0x8a>
      return ERR_MEM;
 800a000:	f04f 36ff 	mov.w	r6, #4294967295
 800a004:	e7f5      	b.n	8009ff2 <udp_sendto_if_src+0x8a>

0800a006 <udp_sendto_if>:
{
 800a006:	b570      	push	{r4, r5, r6, lr}
 800a008:	b082      	sub	sp, #8
 800a00a:	9d06      	ldr	r5, [sp, #24]
  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800a00c:	b180      	cbz	r0, 800a030 <udp_sendto_if+0x2a>
 800a00e:	4604      	mov	r4, r0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 800a010:	b108      	cbz	r0, 800a016 <udp_sendto_if+0x10>
 800a012:	6800      	ldr	r0, [r0, #0]
 800a014:	b938      	cbnz	r0, 800a026 <udp_sendto_if+0x20>
    src_ip = netif_ip_addr4(netif);
 800a016:	1d2e      	adds	r6, r5, #4
 800a018:	4620      	mov	r0, r4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800a01a:	9601      	str	r6, [sp, #4]
 800a01c:	9500      	str	r5, [sp, #0]
 800a01e:	f7ff ffa3 	bl	8009f68 <udp_sendto_if_src>
}
 800a022:	b002      	add	sp, #8
 800a024:	bd70      	pop	{r4, r5, r6, pc}
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800a026:	686e      	ldr	r6, [r5, #4]
 800a028:	42b0      	cmp	r0, r6
 800a02a:	d104      	bne.n	800a036 <udp_sendto_if+0x30>
    src_ip = &pcb->local_ip;
 800a02c:	4626      	mov	r6, r4
 800a02e:	e7f3      	b.n	800a018 <udp_sendto_if+0x12>
    return ERR_VAL;
 800a030:	f06f 0005 	mvn.w	r0, #5
 800a034:	e7f5      	b.n	800a022 <udp_sendto_if+0x1c>
      return ERR_VAL;
 800a036:	f06f 0005 	mvn.w	r0, #5
 800a03a:	e7f2      	b.n	800a022 <udp_sendto_if+0x1c>

0800a03c <udp_sendto>:
  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800a03c:	b190      	cbz	r0, 800a064 <udp_sendto+0x28>
{
 800a03e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a040:	b083      	sub	sp, #12
 800a042:	4605      	mov	r5, r0
 800a044:	461f      	mov	r7, r3
 800a046:	4614      	mov	r4, r2
 800a048:	460e      	mov	r6, r1
  netif = ip_route(PCB_ISIPV6(pcb), &pcb->local_ip, dst_ip_route);
 800a04a:	4610      	mov	r0, r2
 800a04c:	f7fb fd46 	bl	8005adc <ip4_route>
  if (netif == NULL) {
 800a050:	b158      	cbz	r0, 800a06a <udp_sendto+0x2e>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800a052:	9000      	str	r0, [sp, #0]
 800a054:	463b      	mov	r3, r7
 800a056:	4622      	mov	r2, r4
 800a058:	4631      	mov	r1, r6
 800a05a:	4628      	mov	r0, r5
 800a05c:	f7ff ffd3 	bl	800a006 <udp_sendto_if>
}
 800a060:	b003      	add	sp, #12
 800a062:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_VAL;
 800a064:	f06f 0005 	mvn.w	r0, #5
 800a068:	4770      	bx	lr
    return ERR_RTE;
 800a06a:	f06f 0003 	mvn.w	r0, #3
 800a06e:	e7f7      	b.n	800a060 <udp_sendto+0x24>

0800a070 <udp_send>:
{
 800a070:	b508      	push	{r3, lr}
 800a072:	4602      	mov	r2, r0
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800a074:	8a83      	ldrh	r3, [r0, #20]
 800a076:	3204      	adds	r2, #4
 800a078:	f7ff ffe0 	bl	800a03c <udp_sendto>
}
 800a07c:	bd08      	pop	{r3, pc}
	...

0800a080 <udp_connect>:
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
 800a080:	b320      	cbz	r0, 800a0cc <udp_connect+0x4c>
{
 800a082:	b570      	push	{r4, r5, r6, lr}
 800a084:	4604      	mov	r4, r0
 800a086:	4616      	mov	r6, r2
 800a088:	460d      	mov	r5, r1
    return ERR_VAL;
  }

  if (pcb->local_port == 0) {
 800a08a:	8a42      	ldrh	r2, [r0, #18]
 800a08c:	b17a      	cbz	r2, 800a0ae <udp_connect+0x2e>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800a08e:	b1ad      	cbz	r5, 800a0bc <udp_connect+0x3c>
 800a090:	682b      	ldr	r3, [r5, #0]
 800a092:	6063      	str	r3, [r4, #4]
  pcb->remote_port = port;
 800a094:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800a096:	7c23      	ldrb	r3, [r4, #16]
 800a098:	f043 0304 	orr.w	r3, r3, #4
 800a09c:	7423      	strb	r3, [r4, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a09e:	4b0e      	ldr	r3, [pc, #56]	; (800a0d8 <udp_connect+0x58>)
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	b163      	cbz	r3, 800a0c0 <udp_connect+0x40>
    if (pcb == ipcb) {
 800a0a6:	42a3      	cmp	r3, r4
 800a0a8:	d014      	beq.n	800a0d4 <udp_connect+0x54>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	e7fa      	b.n	800a0a4 <udp_connect+0x24>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800a0ae:	4601      	mov	r1, r0
 800a0b0:	f7ff ff0e 	bl	8009ed0 <udp_bind>
    if (err != ERR_OK) {
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	2800      	cmp	r0, #0
 800a0b8:	d0e9      	beq.n	800a08e <udp_connect+0xe>
 800a0ba:	e005      	b.n	800a0c8 <udp_connect+0x48>
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800a0bc:	2300      	movs	r3, #0
 800a0be:	e7e8      	b.n	800a092 <udp_connect+0x12>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800a0c0:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 800a0c2:	4b05      	ldr	r3, [pc, #20]	; (800a0d8 <udp_connect+0x58>)
 800a0c4:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800a0c6:	2300      	movs	r3, #0
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 800a0cc:	f06f 0305 	mvn.w	r3, #5
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	4770      	bx	lr
      return ERR_OK;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	e7f7      	b.n	800a0c8 <udp_connect+0x48>
 800a0d8:	20007b44 	.word	0x20007b44

0800a0dc <udp_disconnect>:
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
  /* reset remote address association */
  ip_addr_set_any(PCB_ISIPV6(pcb), &pcb->remote_ip);
 800a0dc:	2300      	movs	r3, #0
 800a0de:	6043      	str	r3, [r0, #4]
  pcb->remote_port = 0;
 800a0e0:	8283      	strh	r3, [r0, #20]
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
 800a0e2:	7c03      	ldrb	r3, [r0, #16]
 800a0e4:	f023 0304 	bic.w	r3, r3, #4
 800a0e8:	7403      	strb	r3, [r0, #16]
 800a0ea:	4770      	bx	lr

0800a0ec <udp_recv>:
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800a0ec:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 800a0ee:	61c2      	str	r2, [r0, #28]
 800a0f0:	4770      	bx	lr
	...

0800a0f4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800a0f4:	b508      	push	{r3, lr}
 800a0f6:	4601      	mov	r1, r0
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800a0f8:	4b0b      	ldr	r3, [pc, #44]	; (800a128 <udp_remove+0x34>)
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	4282      	cmp	r2, r0
 800a0fe:	d109      	bne.n	800a114 <udp_remove+0x20>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800a100:	68d2      	ldr	r2, [r2, #12]
 800a102:	601a      	str	r2, [r3, #0]
 800a104:	e001      	b.n	800a10a <udp_remove+0x16>
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800a106:	68cb      	ldr	r3, [r1, #12]
 800a108:	60d3      	str	r3, [r2, #12]
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800a10a:	2000      	movs	r0, #0
 800a10c:	f7fc fcc2 	bl	8006a94 <memp_free>
 800a110:	bd08      	pop	{r3, pc}
 800a112:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800a114:	2a00      	cmp	r2, #0
 800a116:	d0f8      	beq.n	800a10a <udp_remove+0x16>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800a118:	68d3      	ldr	r3, [r2, #12]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d0f9      	beq.n	800a112 <udp_remove+0x1e>
 800a11e:	4299      	cmp	r1, r3
 800a120:	d0f1      	beq.n	800a106 <udp_remove+0x12>
 800a122:	461a      	mov	r2, r3
 800a124:	e7f6      	b.n	800a114 <udp_remove+0x20>
 800a126:	bf00      	nop
 800a128:	20007b44 	.word	0x20007b44

0800a12c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800a12c:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800a12e:	2000      	movs	r0, #0
 800a130:	f7fc fca2 	bl	8006a78 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800a134:	4604      	mov	r4, r0
 800a136:	b128      	cbz	r0, 800a144 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800a138:	2220      	movs	r2, #32
 800a13a:	2100      	movs	r1, #0
 800a13c:	f001 fdaa 	bl	800bc94 <memset>
    pcb->ttl = UDP_TTL;
 800a140:	23ff      	movs	r3, #255	; 0xff
 800a142:	72a3      	strb	r3, [r4, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    pcb->mcast_ttl = UDP_TTL;
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800a144:	4620      	mov	r0, r4
 800a146:	bd10      	pop	{r4, pc}

0800a148 <udp_netif_ipv4_addr_changed>:
 */
void udp_netif_ipv4_addr_changed(const ip4_addr_t* old_addr, const ip4_addr_t* new_addr)
{
  struct udp_pcb* upcb;

  if (!ip4_addr_isany(new_addr)) {
 800a148:	b1a9      	cbz	r1, 800a176 <udp_netif_ipv4_addr_changed+0x2e>
{
 800a14a:	b410      	push	{r4}
 800a14c:	460c      	mov	r4, r1
  if (!ip4_addr_isany(new_addr)) {
 800a14e:	680b      	ldr	r3, [r1, #0]
 800a150:	b17b      	cbz	r3, 800a172 <udp_netif_ipv4_addr_changed+0x2a>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a152:	4b09      	ldr	r3, [pc, #36]	; (800a178 <udp_netif_ipv4_addr_changed+0x30>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	e000      	b.n	800a15a <udp_netif_ipv4_addr_changed+0x12>
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	b153      	cbz	r3, 800a172 <udp_netif_ipv4_addr_changed+0x2a>
      /* Is this an IPv4 pcb? */
      if (!IP_IS_V6_VAL(upcb->local_ip)) {
        /* PCB bound to current local interface address? */
        if (!ip4_addr_isany(ip_2_ip4(&upcb->local_ip)) &&
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d0fb      	beq.n	800a158 <udp_netif_ipv4_addr_changed+0x10>
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	2a00      	cmp	r2, #0
 800a164:	d0f8      	beq.n	800a158 <udp_netif_ipv4_addr_changed+0x10>
            ip4_addr_cmp(ip_2_ip4(&upcb->local_ip), old_addr)) {
 800a166:	6801      	ldr	r1, [r0, #0]
        if (!ip4_addr_isany(ip_2_ip4(&upcb->local_ip)) &&
 800a168:	428a      	cmp	r2, r1
 800a16a:	d1f5      	bne.n	800a158 <udp_netif_ipv4_addr_changed+0x10>
          /* The PCB is bound to the old ipaddr and
            * is set to bound to the new one instead */
          ip_addr_copy_from_ip4(upcb->local_ip, *new_addr);
 800a16c:	6822      	ldr	r2, [r4, #0]
 800a16e:	601a      	str	r2, [r3, #0]
 800a170:	e7f2      	b.n	800a158 <udp_netif_ipv4_addr_changed+0x10>
        }
      }
    }
  }
}
 800a172:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a176:	4770      	bx	lr
 800a178:	20007b44 	.word	0x20007b44

0800a17c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800a17c:	b510      	push	{r4, lr}
 800a17e:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800a180:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800a184:	00d3      	lsls	r3, r2, #3
 800a186:	4a09      	ldr	r2, [pc, #36]	; (800a1ac <etharp_free_entry+0x30>)
 800a188:	58d0      	ldr	r0, [r2, r3]
 800a18a:	b138      	cbz	r0, 800a19c <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800a18c:	f7fc fe04 	bl	8006d98 <pbuf_free>
    arp_table[i].q = NULL;
 800a190:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800a194:	00d3      	lsls	r3, r2, #3
 800a196:	2100      	movs	r1, #0
 800a198:	4a04      	ldr	r2, [pc, #16]	; (800a1ac <etharp_free_entry+0x30>)
 800a19a:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800a19c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800a1a0:	00e2      	lsls	r2, r4, #3
 800a1a2:	4b02      	ldr	r3, [pc, #8]	; (800a1ac <etharp_free_entry+0x30>)
 800a1a4:	4413      	add	r3, r2
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	751a      	strb	r2, [r3, #20]
 800a1aa:	bd10      	pop	{r4, pc}
 800a1ac:	20003f00 	.word	0x20003f00

0800a1b0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800a1b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800a1b4:	f04f 0e00 	mov.w	lr, #0
 800a1b8:	46f3      	mov	fp, lr
 800a1ba:	46f1      	mov	r9, lr
  s8_t old_queue = ARP_TABLE_SIZE;
 800a1bc:	f04f 0c0a 	mov.w	ip, #10
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a1c0:	4673      	mov	r3, lr
  s8_t empty = ARP_TABLE_SIZE;
 800a1c2:	4667      	mov	r7, ip
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800a1c4:	46e0      	mov	r8, ip
 800a1c6:	46e2      	mov	sl, ip
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a1c8:	e003      	b.n	800a1d2 <etharp_find_entry+0x22>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800a1ca:	b96c      	cbnz	r4, 800a1e8 <etharp_find_entry+0x38>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800a1cc:	b25f      	sxtb	r7, r3
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	2b09      	cmp	r3, #9
 800a1d4:	d845      	bhi.n	800a262 <etharp_find_entry+0xb2>
    u8_t state = arp_table[i].state;
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800a1dc:	00e5      	lsls	r5, r4, #3
 800a1de:	4c41      	ldr	r4, [pc, #260]	; (800a2e4 <etharp_find_entry+0x134>)
 800a1e0:	442c      	add	r4, r5
 800a1e2:	7d24      	ldrb	r4, [r4, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800a1e4:	2f0a      	cmp	r7, #10
 800a1e6:	d0f0      	beq.n	800a1ca <etharp_find_entry+0x1a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800a1e8:	2c00      	cmp	r4, #0
 800a1ea:	d0f0      	beq.n	800a1ce <etharp_find_entry+0x1e>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800a1ec:	b140      	cbz	r0, 800a200 <etharp_find_entry+0x50>
 800a1ee:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 800a1f2:	00ee      	lsls	r6, r5, #3
 800a1f4:	4d3b      	ldr	r5, [pc, #236]	; (800a2e4 <etharp_find_entry+0x134>)
 800a1f6:	4435      	add	r5, r6
 800a1f8:	686d      	ldr	r5, [r5, #4]
 800a1fa:	6806      	ldr	r6, [r0, #0]
 800a1fc:	42ae      	cmp	r6, r5
 800a1fe:	d00f      	beq.n	800a220 <etharp_find_entry+0x70>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800a200:	2c01      	cmp	r4, #1
 800a202:	d010      	beq.n	800a226 <etharp_find_entry+0x76>
            old_pending = i;
            age_pending = arp_table[i].ctime;
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800a204:	2c01      	cmp	r4, #1
 800a206:	d9e2      	bls.n	800a1ce <etharp_find_entry+0x1e>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800a208:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800a20c:	00d4      	lsls	r4, r2, #3
 800a20e:	4a35      	ldr	r2, [pc, #212]	; (800a2e4 <etharp_find_entry+0x134>)
 800a210:	4422      	add	r2, r4
 800a212:	8a52      	ldrh	r2, [r2, #18]
 800a214:	4596      	cmp	lr, r2
 800a216:	d8da      	bhi.n	800a1ce <etharp_find_entry+0x1e>
            old_stable = i;
 800a218:	fa4f f883 	sxtb.w	r8, r3
            age_stable = arp_table[i].ctime;
 800a21c:	4696      	mov	lr, r2
 800a21e:	e7d6      	b.n	800a1ce <etharp_find_entry+0x1e>
        return i;
 800a220:	b258      	sxtb	r0, r3
 800a222:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (arp_table[i].q != NULL) {
 800a226:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 800a22a:	00ec      	lsls	r4, r5, #3
 800a22c:	4d2d      	ldr	r5, [pc, #180]	; (800a2e4 <etharp_find_entry+0x134>)
 800a22e:	592c      	ldr	r4, [r5, r4]
 800a230:	b15c      	cbz	r4, 800a24a <etharp_find_entry+0x9a>
          if (arp_table[i].ctime >= age_queue) {
 800a232:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800a236:	00d4      	lsls	r4, r2, #3
 800a238:	462a      	mov	r2, r5
 800a23a:	4422      	add	r2, r4
 800a23c:	8a52      	ldrh	r2, [r2, #18]
 800a23e:	4591      	cmp	r9, r2
 800a240:	d8c5      	bhi.n	800a1ce <etharp_find_entry+0x1e>
            old_queue = i;
 800a242:	fa4f fc83 	sxtb.w	ip, r3
            age_queue = arp_table[i].ctime;
 800a246:	4691      	mov	r9, r2
 800a248:	e7c1      	b.n	800a1ce <etharp_find_entry+0x1e>
          if (arp_table[i].ctime >= age_pending) {
 800a24a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800a24e:	00d4      	lsls	r4, r2, #3
 800a250:	4a24      	ldr	r2, [pc, #144]	; (800a2e4 <etharp_find_entry+0x134>)
 800a252:	4422      	add	r2, r4
 800a254:	8a52      	ldrh	r2, [r2, #18]
 800a256:	4593      	cmp	fp, r2
 800a258:	d8b9      	bhi.n	800a1ce <etharp_find_entry+0x1e>
            old_pending = i;
 800a25a:	fa4f fa83 	sxtb.w	sl, r3
            age_pending = arp_table[i].ctime;
 800a25e:	4693      	mov	fp, r2
 800a260:	e7b5      	b.n	800a1ce <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800a262:	f011 0f02 	tst.w	r1, #2
 800a266:	d134      	bne.n	800a2d2 <etharp_find_entry+0x122>
 800a268:	2f0a      	cmp	r7, #10
 800a26a:	d016      	beq.n	800a29a <etharp_find_entry+0xea>
 800a26c:	4604      	mov	r4, r0
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800a26e:	2f09      	cmp	r7, #9
 800a270:	dc1a      	bgt.n	800a2a8 <etharp_find_entry+0xf8>
    i = empty;
 800a272:	b2ff      	uxtb	r7, r7
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800a274:	463b      	mov	r3, r7
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800a276:	b134      	cbz	r4, 800a286 <etharp_find_entry+0xd6>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800a278:	6820      	ldr	r0, [r4, #0]
 800a27a:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 800a27e:	00d1      	lsls	r1, r2, #3
 800a280:	4a18      	ldr	r2, [pc, #96]	; (800a2e4 <etharp_find_entry+0x134>)
 800a282:	440a      	add	r2, r1
 800a284:	6050      	str	r0, [r2, #4]
  }
  arp_table[i].ctime = 0;
 800a286:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a28a:	00da      	lsls	r2, r3, #3
 800a28c:	4b15      	ldr	r3, [pc, #84]	; (800a2e4 <etharp_find_entry+0x134>)
 800a28e:	4413      	add	r3, r2
 800a290:	2200      	movs	r2, #0
 800a292:	825a      	strh	r2, [r3, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800a294:	b278      	sxtb	r0, r7
 800a296:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800a29a:	f011 0f01 	tst.w	r1, #1
 800a29e:	d1e5      	bne.n	800a26c <etharp_find_entry+0xbc>
    return (s8_t)ERR_MEM;
 800a2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (old_stable < ARP_TABLE_SIZE) {
 800a2a8:	f1b8 0f09 	cmp.w	r8, #9
 800a2ac:	dc05      	bgt.n	800a2ba <etharp_find_entry+0x10a>
      i = old_stable;
 800a2ae:	fa5f f788 	uxtb.w	r7, r8
    etharp_free_entry(i);
 800a2b2:	4638      	mov	r0, r7
 800a2b4:	f7ff ff62 	bl	800a17c <etharp_free_entry>
 800a2b8:	e7dc      	b.n	800a274 <etharp_find_entry+0xc4>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800a2ba:	f1ba 0f09 	cmp.w	sl, #9
 800a2be:	dc02      	bgt.n	800a2c6 <etharp_find_entry+0x116>
      i = old_pending;
 800a2c0:	fa5f f78a 	uxtb.w	r7, sl
 800a2c4:	e7f5      	b.n	800a2b2 <etharp_find_entry+0x102>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800a2c6:	f1bc 0f09 	cmp.w	ip, #9
 800a2ca:	dc06      	bgt.n	800a2da <etharp_find_entry+0x12a>
      i = old_queue;
 800a2cc:	fa5f f78c 	uxtb.w	r7, ip
 800a2d0:	e7ef      	b.n	800a2b2 <etharp_find_entry+0x102>
    return (s8_t)ERR_MEM;
 800a2d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return (s8_t)ERR_MEM;
 800a2da:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a2de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e2:	bf00      	nop
 800a2e4:	20003f00 	.word	0x20003f00

0800a2e8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800a2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2ec:	4606      	mov	r6, r0
 800a2ee:	460f      	mov	r7, r1
 800a2f0:	4690      	mov	r8, r2
 800a2f2:	469a      	mov	sl, r3
 800a2f4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
#endif /* LWIP_AUTOIP */

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_RAW_TX, SIZEOF_ETHARP_PACKET_TX, PBUF_RAM);
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	212a      	movs	r1, #42	; 0x2a
 800a2fc:	2003      	movs	r0, #3
 800a2fe:	f7fc fd79 	bl	8006df4 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800a302:	2800      	cmp	r0, #0
 800a304:	d03e      	beq.n	800a384 <etharp_raw+0x9c>
 800a306:	4605      	mov	r5, r0
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= SIZEOF_ETHARP_PACKET_TX));

  ethhdr = (struct eth_hdr *)p->payload;
 800a308:	6844      	ldr	r4, [r0, #4]
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
#else /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = htons(opcode);
 800a30a:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 800a30e:	f7fb faeb 	bl	80058e8 <lwip_htons>
 800a312:	82a0      	strh	r0, [r4, #20]
   * 'sender IP address' MUST be sent using link-layer broadcast instead of
   * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
  ethdst_hwaddr = ip4_addr_islinklocal(ipsrc_addr) ? (const u8_t*)(ethbroadcast.addr) : ethdst_addr->addr;
#endif /* LWIP_AUTOIP */
  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800a314:	f8da 3000 	ldr.w	r3, [sl]
 800a318:	f8c4 3016 	str.w	r3, [r4, #22]
 800a31c:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800a320:	8363      	strh	r3, [r4, #26]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800a322:	f8d9 3000 	ldr.w	r3, [r9]
 800a326:	6223      	str	r3, [r4, #32]
 800a328:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 800a32c:	84a3      	strh	r3, [r4, #36]	; 0x24
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800a32e:	9b08      	ldr	r3, [sp, #32]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	61e3      	str	r3, [r4, #28]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800a334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800a33c:	2200      	movs	r2, #0
 800a33e:	73a2      	strb	r2, [r4, #14]
 800a340:	2301      	movs	r3, #1
 800a342:	73e3      	strb	r3, [r4, #15]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800a344:	2308      	movs	r3, #8
 800a346:	7423      	strb	r3, [r4, #16]
 800a348:	7462      	strb	r2, [r4, #17]
  /* set hwlen and protolen */
  hdr->hwlen = ETHARP_HWADDR_LEN;
 800a34a:	2206      	movs	r2, #6
 800a34c:	74a2      	strb	r2, [r4, #18]
  hdr->protolen = sizeof(ip4_addr_t);
 800a34e:	2204      	movs	r2, #4
 800a350:	74e2      	strb	r2, [r4, #19]
  if (!LWIP_HOOK_VLAN_SET(netif, ethhdr, vlanhdr)) {
    /* packet shall not contain VLAN header, so hide it and set correct ethertype */
    pbuf_header(p, -SIZEOF_VLAN_HDR);
    ethhdr = (struct eth_hdr *)p->payload;
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
    ethhdr->type = PP_HTONS(ETHTYPE_ARP);
 800a352:	7323      	strb	r3, [r4, #12]
 800a354:	2306      	movs	r3, #6
 800a356:	7363      	strb	r3, [r4, #13]

  /* Write the Ethernet MAC-Addresses */
#if LWIP_AUTOIP
  ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
 800a358:	f8d8 3000 	ldr.w	r3, [r8]
 800a35c:	6023      	str	r3, [r4, #0]
 800a35e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800a362:	80a3      	strh	r3, [r4, #4]
#endif /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	f8c4 3006 	str.w	r3, [r4, #6]
 800a36a:	88bb      	ldrh	r3, [r7, #4]
 800a36c:	8163      	strh	r3, [r4, #10]

  /* send ARP query */
  result = netif->linkoutput(netif, p);
 800a36e:	69b3      	ldr	r3, [r6, #24]
 800a370:	4629      	mov	r1, r5
 800a372:	4630      	mov	r0, r6
 800a374:	4798      	blx	r3
 800a376:	4604      	mov	r4, r0
  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800a378:	4628      	mov	r0, r5
 800a37a:	f7fc fd0d 	bl	8006d98 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
}
 800a37e:	4620      	mov	r0, r4
 800a380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 800a384:	f04f 34ff 	mov.w	r4, #4294967295
 800a388:	e7f9      	b.n	800a37e <etharp_raw+0x96>
	...

0800a38c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800a38c:	b530      	push	{r4, r5, lr}
 800a38e:	b085      	sub	sp, #20
 800a390:	4603      	mov	r3, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a392:	f100 0429 	add.w	r4, r0, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800a396:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a398:	2501      	movs	r5, #1
 800a39a:	9503      	str	r5, [sp, #12]
 800a39c:	9102      	str	r1, [sp, #8]
 800a39e:	4904      	ldr	r1, [pc, #16]	; (800a3b0 <etharp_request_dst+0x24>)
 800a3a0:	9101      	str	r1, [sp, #4]
 800a3a2:	9300      	str	r3, [sp, #0]
 800a3a4:	4623      	mov	r3, r4
 800a3a6:	4621      	mov	r1, r4
 800a3a8:	f7ff ff9e 	bl	800a2e8 <etharp_raw>
                    ipaddr, ARP_REQUEST);
}
 800a3ac:	b005      	add	sp, #20
 800a3ae:	bd30      	pop	{r4, r5, pc}
 800a3b0:	0800d1cc 	.word	0x0800d1cc

0800a3b4 <etharp_send_ip>:
{
 800a3b4:	b538      	push	{r3, r4, r5, lr}
  struct eth_hdr *ethhdr = (struct eth_hdr *)p->payload;
 800a3b6:	684c      	ldr	r4, [r1, #4]
    ethhdr->type = PP_HTONS(ETHTYPE_IP);
 800a3b8:	2508      	movs	r5, #8
 800a3ba:	7325      	strb	r5, [r4, #12]
 800a3bc:	2500      	movs	r5, #0
 800a3be:	7365      	strb	r5, [r4, #13]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800a3c0:	681d      	ldr	r5, [r3, #0]
 800a3c2:	6025      	str	r5, [r4, #0]
 800a3c4:	889b      	ldrh	r3, [r3, #4]
 800a3c6:	80a3      	strh	r3, [r4, #4]
  ETHADDR16_COPY(&ethhdr->src, src);
 800a3c8:	6813      	ldr	r3, [r2, #0]
 800a3ca:	f8c4 3006 	str.w	r3, [r4, #6]
 800a3ce:	8893      	ldrh	r3, [r2, #4]
 800a3d0:	8163      	strh	r3, [r4, #10]
  return netif->linkoutput(netif, p);
 800a3d2:	6983      	ldr	r3, [r0, #24]
 800a3d4:	4798      	blx	r3
}
 800a3d6:	bd38      	pop	{r3, r4, r5, pc}

0800a3d8 <etharp_update_arp_entry>:
  if (ip4_addr_isany(ipaddr) ||
 800a3d8:	2900      	cmp	r1, #0
 800a3da:	d039      	beq.n	800a450 <etharp_update_arp_entry+0x78>
{
 800a3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3de:	4604      	mov	r4, r0
 800a3e0:	460f      	mov	r7, r1
  if (ip4_addr_isany(ipaddr) ||
 800a3e2:	6808      	ldr	r0, [r1, #0]
 800a3e4:	2800      	cmp	r0, #0
 800a3e6:	d036      	beq.n	800a456 <etharp_update_arp_entry+0x7e>
 800a3e8:	461e      	mov	r6, r3
 800a3ea:	4615      	mov	r5, r2
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a3ec:	4621      	mov	r1, r4
 800a3ee:	f7fb fd00 	bl	8005df2 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800a3f2:	bb98      	cbnz	r0, 800a45c <etharp_update_arp_entry+0x84>
      ip4_addr_ismulticast(ipaddr)) {
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a3fa:	2be0      	cmp	r3, #224	; 0xe0
 800a3fc:	d031      	beq.n	800a462 <etharp_update_arp_entry+0x8a>
  i = etharp_find_entry(ipaddr, flags, netif);
 800a3fe:	4622      	mov	r2, r4
 800a400:	4631      	mov	r1, r6
 800a402:	4638      	mov	r0, r7
 800a404:	f7ff fed4 	bl	800a1b0 <etharp_find_entry>
  if (i < 0) {
 800a408:	2800      	cmp	r0, #0
 800a40a:	db2e      	blt.n	800a46a <etharp_update_arp_entry+0x92>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800a40c:	4e17      	ldr	r6, [pc, #92]	; (800a46c <etharp_update_arp_entry+0x94>)
 800a40e:	0042      	lsls	r2, r0, #1
 800a410:	1813      	adds	r3, r2, r0
 800a412:	00d9      	lsls	r1, r3, #3
 800a414:	1877      	adds	r7, r6, r1
 800a416:	2302      	movs	r3, #2
 800a418:	753b      	strb	r3, [r7, #20]
  arp_table[i].netif = netif;
 800a41a:	60bc      	str	r4, [r7, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800a41c:	460b      	mov	r3, r1
 800a41e:	3308      	adds	r3, #8
 800a420:	4433      	add	r3, r6
 800a422:	682a      	ldr	r2, [r5, #0]
 800a424:	605a      	str	r2, [r3, #4]
 800a426:	88aa      	ldrh	r2, [r5, #4]
 800a428:	811a      	strh	r2, [r3, #8]
  arp_table[i].ctime = 0;
 800a42a:	2300      	movs	r3, #0
 800a42c:	827b      	strh	r3, [r7, #18]
  if (arp_table[i].q != NULL) {
 800a42e:	5876      	ldr	r6, [r6, r1]
 800a430:	b1d6      	cbz	r6, 800a468 <etharp_update_arp_entry+0x90>
    arp_table[i].q = NULL;
 800a432:	2700      	movs	r7, #0
 800a434:	4a0d      	ldr	r2, [pc, #52]	; (800a46c <etharp_update_arp_entry+0x94>)
 800a436:	5057      	str	r7, [r2, r1]
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
 800a438:	462b      	mov	r3, r5
 800a43a:	f104 0229 	add.w	r2, r4, #41	; 0x29
 800a43e:	4631      	mov	r1, r6
 800a440:	4620      	mov	r0, r4
 800a442:	f7ff ffb7 	bl	800a3b4 <etharp_send_ip>
    pbuf_free(p);
 800a446:	4630      	mov	r0, r6
 800a448:	f7fc fca6 	bl	8006d98 <pbuf_free>
  return ERR_OK;
 800a44c:	4638      	mov	r0, r7
 800a44e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_ARG;
 800a450:	f06f 000e 	mvn.w	r0, #14
 800a454:	4770      	bx	lr
 800a456:	f06f 000e 	mvn.w	r0, #14
 800a45a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a45c:	f06f 000e 	mvn.w	r0, #14
 800a460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a462:	f06f 000e 	mvn.w	r0, #14
 800a466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return ERR_OK;
 800a468:	2000      	movs	r0, #0
}
 800a46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a46c:	20003f00 	.word	0x20003f00

0800a470 <etharp_arp_input>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800a470:	2800      	cmp	r0, #0
 800a472:	d06c      	beq.n	800a54e <etharp_arp_input+0xde>
{
 800a474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a478:	b083      	sub	sp, #12
 800a47a:	4606      	mov	r6, r0
 800a47c:	4614      	mov	r4, r2
 800a47e:	460d      	mov	r5, r1
  if (p->len < SIZEOF_ETHARP_PACKET) {
 800a480:	8953      	ldrh	r3, [r2, #10]
 800a482:	2b29      	cmp	r3, #41	; 0x29
 800a484:	d90a      	bls.n	800a49c <etharp_arp_input+0x2c>
  ethhdr = (struct eth_hdr *)p->payload;
 800a486:	6857      	ldr	r7, [r2, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800a488:	89fb      	ldrh	r3, [r7, #14]
 800a48a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a48e:	d009      	beq.n	800a4a4 <etharp_arp_input+0x34>
    pbuf_free(p);
 800a490:	4620      	mov	r0, r4
 800a492:	f7fc fc81 	bl	8006d98 <pbuf_free>
}
 800a496:	b003      	add	sp, #12
 800a498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    pbuf_free(p);
 800a49c:	4610      	mov	r0, r2
 800a49e:	f7fc fc7b 	bl	8006d98 <pbuf_free>
    return;
 800a4a2:	e7f8      	b.n	800a496 <etharp_arp_input+0x26>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
 800a4a4:	7cbb      	ldrb	r3, [r7, #18]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800a4a6:	2b06      	cmp	r3, #6
 800a4a8:	d1f2      	bne.n	800a490 <etharp_arp_input+0x20>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a4aa:	7cfb      	ldrb	r3, [r7, #19]
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
 800a4ac:	2b04      	cmp	r3, #4
 800a4ae:	d1ef      	bne.n	800a490 <etharp_arp_input+0x20>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800a4b0:	8a3b      	ldrh	r3, [r7, #16]
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a4b2:	2b08      	cmp	r3, #8
 800a4b4:	d1ec      	bne.n	800a490 <etharp_arp_input+0x20>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800a4b6:	69fb      	ldr	r3, [r7, #28]
 800a4b8:	9301      	str	r3, [sp, #4]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800a4ba:	f8d7 8026 	ldr.w	r8, [r7, #38]	; 0x26
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a4be:	6843      	ldr	r3, [r0, #4]
 800a4c0:	b133      	cbz	r3, 800a4d0 <etharp_arp_input+0x60>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800a4c2:	4598      	cmp	r8, r3
 800a4c4:	bf14      	ite	ne
 800a4c6:	f04f 0800 	movne.w	r8, #0
 800a4ca:	f04f 0801 	moveq.w	r8, #1
 800a4ce:	e001      	b.n	800a4d4 <etharp_arp_input+0x64>
    for_us = 0;
 800a4d0:	f04f 0800 	mov.w	r8, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800a4d4:	f107 0916 	add.w	r9, r7, #22
 800a4d8:	f1b8 0f00 	cmp.w	r8, #0
 800a4dc:	d010      	beq.n	800a500 <etharp_arp_input+0x90>
 800a4de:	2301      	movs	r3, #1
 800a4e0:	464a      	mov	r2, r9
 800a4e2:	a901      	add	r1, sp, #4
 800a4e4:	4630      	mov	r0, r6
 800a4e6:	f7ff ff77 	bl	800a3d8 <etharp_update_arp_entry>
  switch (hdr->opcode) {
 800a4ea:	8abb      	ldrh	r3, [r7, #20]
 800a4ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4f0:	d102      	bne.n	800a4f8 <etharp_arp_input+0x88>
    if (for_us) {
 800a4f2:	f1b8 0f00 	cmp.w	r8, #0
 800a4f6:	d105      	bne.n	800a504 <etharp_arp_input+0x94>
  pbuf_free(p);
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	f7fc fc4d 	bl	8006d98 <pbuf_free>
 800a4fe:	e7ca      	b.n	800a496 <etharp_arp_input+0x26>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800a500:	2302      	movs	r3, #2
 800a502:	e7ed      	b.n	800a4e0 <etharp_arp_input+0x70>
      hdr->opcode = htons(ARP_REPLY);
 800a504:	2002      	movs	r0, #2
 800a506:	f7fb f9ef 	bl	80058e8 <lwip_htons>
 800a50a:	82b8      	strh	r0, [r7, #20]
      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	f8c7 3026 	str.w	r3, [r7, #38]	; 0x26
      IPADDR2_COPY(&hdr->sipaddr, netif_ip4_addr(netif));
 800a512:	6873      	ldr	r3, [r6, #4]
 800a514:	61fb      	str	r3, [r7, #28]
      ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
 800a516:	f8d9 3000 	ldr.w	r3, [r9]
 800a51a:	623b      	str	r3, [r7, #32]
 800a51c:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 800a520:	84bb      	strh	r3, [r7, #36]	; 0x24
      ETHADDR16_COPY(&ethhdr->dest, &hdr->shwaddr);
 800a522:	f8d9 3000 	ldr.w	r3, [r9]
 800a526:	603b      	str	r3, [r7, #0]
 800a528:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 800a52c:	80bb      	strh	r3, [r7, #4]
      ETHADDR16_COPY(&hdr->shwaddr, ethaddr);
 800a52e:	682b      	ldr	r3, [r5, #0]
 800a530:	f8c7 3016 	str.w	r3, [r7, #22]
 800a534:	88ab      	ldrh	r3, [r5, #4]
 800a536:	f8a9 3004 	strh.w	r3, [r9, #4]
      ETHADDR16_COPY(&ethhdr->src, ethaddr);
 800a53a:	682b      	ldr	r3, [r5, #0]
 800a53c:	f8c7 3006 	str.w	r3, [r7, #6]
 800a540:	88ab      	ldrh	r3, [r5, #4]
 800a542:	817b      	strh	r3, [r7, #10]
      netif->linkoutput(netif, p);
 800a544:	69b3      	ldr	r3, [r6, #24]
 800a546:	4621      	mov	r1, r4
 800a548:	4630      	mov	r0, r6
 800a54a:	4798      	blx	r3
 800a54c:	e7d4      	b.n	800a4f8 <etharp_arp_input+0x88>
 800a54e:	4770      	bx	lr

0800a550 <etharp_cleanup_netif>:
{
 800a550:	b538      	push	{r3, r4, r5, lr}
 800a552:	4605      	mov	r5, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a554:	2400      	movs	r4, #0
 800a556:	e001      	b.n	800a55c <etharp_cleanup_netif+0xc>
 800a558:	3401      	adds	r4, #1
 800a55a:	b2e4      	uxtb	r4, r4
 800a55c:	2c09      	cmp	r4, #9
 800a55e:	d810      	bhi.n	800a582 <etharp_cleanup_netif+0x32>
    u8_t state = arp_table[i].state;
 800a560:	4620      	mov	r0, r4
 800a562:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a566:	00da      	lsls	r2, r3, #3
 800a568:	4b06      	ldr	r3, [pc, #24]	; (800a584 <etharp_cleanup_netif+0x34>)
 800a56a:	4413      	add	r3, r2
 800a56c:	7d1b      	ldrb	r3, [r3, #20]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d0f2      	beq.n	800a558 <etharp_cleanup_netif+0x8>
 800a572:	4b04      	ldr	r3, [pc, #16]	; (800a584 <etharp_cleanup_netif+0x34>)
 800a574:	4413      	add	r3, r2
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	42ab      	cmp	r3, r5
 800a57a:	d1ed      	bne.n	800a558 <etharp_cleanup_netif+0x8>
      etharp_free_entry(i);
 800a57c:	f7ff fdfe 	bl	800a17c <etharp_free_entry>
 800a580:	e7ea      	b.n	800a558 <etharp_cleanup_netif+0x8>
}
 800a582:	bd38      	pop	{r3, r4, r5, pc}
 800a584:	20003f00 	.word	0x20003f00

0800a588 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800a588:	b508      	push	{r3, lr}
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800a58a:	4a02      	ldr	r2, [pc, #8]	; (800a594 <etharp_request+0xc>)
 800a58c:	f7ff fefe 	bl	800a38c <etharp_request_dst>
}
 800a590:	bd08      	pop	{r3, pc}
 800a592:	bf00      	nop
 800a594:	0800d1c4 	.word	0x0800d1c4

0800a598 <etharp_tmr>:
{
 800a598:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a59a:	2400      	movs	r4, #0
 800a59c:	e005      	b.n	800a5aa <etharp_tmr+0x12>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a59e:	2b04      	cmp	r3, #4
 800a5a0:	d91d      	bls.n	800a5de <etharp_tmr+0x46>
        etharp_free_entry(i);
 800a5a2:	f7ff fdeb 	bl	800a17c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a5a6:	3401      	adds	r4, #1
 800a5a8:	b2e4      	uxtb	r4, r4
 800a5aa:	2c09      	cmp	r4, #9
 800a5ac:	d838      	bhi.n	800a620 <etharp_tmr+0x88>
    u8_t state = arp_table[i].state;
 800a5ae:	4620      	mov	r0, r4
 800a5b0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a5b4:	00da      	lsls	r2, r3, #3
 800a5b6:	4b1b      	ldr	r3, [pc, #108]	; (800a624 <etharp_tmr+0x8c>)
 800a5b8:	4413      	add	r3, r2
 800a5ba:	7d1b      	ldrb	r3, [r3, #20]
    if (state != ETHARP_STATE_EMPTY
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d0f2      	beq.n	800a5a6 <etharp_tmr+0xe>
      arp_table[i].ctime++;
 800a5c0:	4611      	mov	r1, r2
 800a5c2:	4a18      	ldr	r2, [pc, #96]	; (800a624 <etharp_tmr+0x8c>)
 800a5c4:	440a      	add	r2, r1
 800a5c6:	8a53      	ldrh	r3, [r2, #18]
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	8253      	strh	r3, [r2, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a5ce:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a5d2:	d2e6      	bcs.n	800a5a2 <etharp_tmr+0xa>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a5d4:	4a13      	ldr	r2, [pc, #76]	; (800a624 <etharp_tmr+0x8c>)
 800a5d6:	440a      	add	r2, r1
 800a5d8:	7d12      	ldrb	r2, [r2, #20]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a5da:	2a01      	cmp	r2, #1
 800a5dc:	d0df      	beq.n	800a59e <etharp_tmr+0x6>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800a5de:	2a03      	cmp	r2, #3
 800a5e0:	d00e      	beq.n	800a600 <etharp_tmr+0x68>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800a5e2:	2a04      	cmp	r2, #4
 800a5e4:	d014      	beq.n	800a610 <etharp_tmr+0x78>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800a5e6:	2a01      	cmp	r2, #1
 800a5e8:	d1dd      	bne.n	800a5a6 <etharp_tmr+0xe>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800a5ea:	4a0e      	ldr	r2, [pc, #56]	; (800a624 <etharp_tmr+0x8c>)
 800a5ec:	0043      	lsls	r3, r0, #1
 800a5ee:	181d      	adds	r5, r3, r0
 800a5f0:	00e9      	lsls	r1, r5, #3
 800a5f2:	4411      	add	r1, r2
 800a5f4:	460a      	mov	r2, r1
 800a5f6:	3104      	adds	r1, #4
 800a5f8:	6890      	ldr	r0, [r2, #8]
 800a5fa:	f7ff ffc5 	bl	800a588 <etharp_request>
 800a5fe:	e7d2      	b.n	800a5a6 <etharp_tmr+0xe>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800a600:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800a604:	00c2      	lsls	r2, r0, #3
 800a606:	4b07      	ldr	r3, [pc, #28]	; (800a624 <etharp_tmr+0x8c>)
 800a608:	4413      	add	r3, r2
 800a60a:	2204      	movs	r2, #4
 800a60c:	751a      	strb	r2, [r3, #20]
 800a60e:	e7ca      	b.n	800a5a6 <etharp_tmr+0xe>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800a610:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800a614:	00c2      	lsls	r2, r0, #3
 800a616:	4b03      	ldr	r3, [pc, #12]	; (800a624 <etharp_tmr+0x8c>)
 800a618:	4413      	add	r3, r2
 800a61a:	2202      	movs	r2, #2
 800a61c:	751a      	strb	r2, [r3, #20]
 800a61e:	e7c2      	b.n	800a5a6 <etharp_tmr+0xe>
}
 800a620:	bd38      	pop	{r3, r4, r5, pc}
 800a622:	bf00      	nop
 800a624:	20003f00 	.word	0x20003f00

0800a628 <etharp_output_to_arp_index>:
{
 800a628:	b570      	push	{r4, r5, r6, lr}
 800a62a:	4605      	mov	r5, r0
 800a62c:	460e      	mov	r6, r1
 800a62e:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800a630:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800a634:	00da      	lsls	r2, r3, #3
 800a636:	4b22      	ldr	r3, [pc, #136]	; (800a6c0 <etharp_output_to_arp_index+0x98>)
 800a638:	4413      	add	r3, r2
 800a63a:	7d1b      	ldrb	r3, [r3, #20]
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800a63c:	2b02      	cmp	r3, #2
 800a63e:	d00d      	beq.n	800a65c <etharp_output_to_arp_index+0x34>
    &arp_table[arp_idx].ethaddr);
 800a640:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800a644:	00e3      	lsls	r3, r4, #3
 800a646:	3308      	adds	r3, #8
 800a648:	4a1d      	ldr	r2, [pc, #116]	; (800a6c0 <etharp_output_to_arp_index+0x98>)
 800a64a:	4413      	add	r3, r2
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
 800a64c:	3304      	adds	r3, #4
 800a64e:	f105 0229 	add.w	r2, r5, #41	; 0x29
 800a652:	4631      	mov	r1, r6
 800a654:	4628      	mov	r0, r5
 800a656:	f7ff fead 	bl	800a3b4 <etharp_send_ip>
}
 800a65a:	bd70      	pop	{r4, r5, r6, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800a65c:	4b18      	ldr	r3, [pc, #96]	; (800a6c0 <etharp_output_to_arp_index+0x98>)
 800a65e:	4413      	add	r3, r2
 800a660:	8a5b      	ldrh	r3, [r3, #18]
 800a662:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800a666:	d819      	bhi.n	800a69c <etharp_output_to_arp_index+0x74>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800a668:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800a66c:	d3e8      	bcc.n	800a640 <etharp_output_to_arp_index+0x18>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800a66e:	4a14      	ldr	r2, [pc, #80]	; (800a6c0 <etharp_output_to_arp_index+0x98>)
 800a670:	0063      	lsls	r3, r4, #1
 800a672:	1918      	adds	r0, r3, r4
 800a674:	00c1      	lsls	r1, r0, #3
 800a676:	4608      	mov	r0, r1
 800a678:	4411      	add	r1, r2
 800a67a:	3008      	adds	r0, #8
 800a67c:	4402      	add	r2, r0
 800a67e:	3204      	adds	r2, #4
 800a680:	3104      	adds	r1, #4
 800a682:	4628      	mov	r0, r5
 800a684:	f7ff fe82 	bl	800a38c <etharp_request_dst>
 800a688:	2800      	cmp	r0, #0
 800a68a:	d1d9      	bne.n	800a640 <etharp_output_to_arp_index+0x18>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800a68c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a690:	00da      	lsls	r2, r3, #3
 800a692:	4b0b      	ldr	r3, [pc, #44]	; (800a6c0 <etharp_output_to_arp_index+0x98>)
 800a694:	4413      	add	r3, r2
 800a696:	2203      	movs	r2, #3
 800a698:	751a      	strb	r2, [r3, #20]
 800a69a:	e7d1      	b.n	800a640 <etharp_output_to_arp_index+0x18>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800a69c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800a6a0:	00d3      	lsls	r3, r2, #3
 800a6a2:	4907      	ldr	r1, [pc, #28]	; (800a6c0 <etharp_output_to_arp_index+0x98>)
 800a6a4:	4419      	add	r1, r3
 800a6a6:	3104      	adds	r1, #4
 800a6a8:	f7ff ff6e 	bl	800a588 <etharp_request>
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	d1c7      	bne.n	800a640 <etharp_output_to_arp_index+0x18>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800a6b0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a6b4:	00da      	lsls	r2, r3, #3
 800a6b6:	4b02      	ldr	r3, [pc, #8]	; (800a6c0 <etharp_output_to_arp_index+0x98>)
 800a6b8:	4413      	add	r3, r2
 800a6ba:	2203      	movs	r2, #3
 800a6bc:	751a      	strb	r2, [r3, #20]
 800a6be:	e7bf      	b.n	800a640 <etharp_output_to_arp_index+0x18>
 800a6c0:	20003f00 	.word	0x20003f00

0800a6c4 <etharp_query>:
{
 800a6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6c8:	4606      	mov	r6, r0
 800a6ca:	460d      	mov	r5, r1
 800a6cc:	4617      	mov	r7, r2
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800a6ce:	f100 0829 	add.w	r8, r0, #41	; 0x29
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a6d2:	4601      	mov	r1, r0
 800a6d4:	6828      	ldr	r0, [r5, #0]
 800a6d6:	f7fb fb8c 	bl	8005df2 <ip4_addr_isbroadcast_u32>
 800a6da:	2800      	cmp	r0, #0
 800a6dc:	d174      	bne.n	800a7c8 <etharp_query+0x104>
      ip4_addr_ismulticast(ipaddr) ||
 800a6de:	682b      	ldr	r3, [r5, #0]
 800a6e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a6e4:	2ae0      	cmp	r2, #224	; 0xe0
 800a6e6:	d073      	beq.n	800a7d0 <etharp_query+0x10c>
      ip4_addr_ismulticast(ipaddr) ||
 800a6e8:	2d00      	cmp	r5, #0
 800a6ea:	d075      	beq.n	800a7d8 <etharp_query+0x114>
      ip4_addr_isany(ipaddr)) {
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d077      	beq.n	800a7e0 <etharp_query+0x11c>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800a6f0:	4632      	mov	r2, r6
 800a6f2:	2101      	movs	r1, #1
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	f7ff fd5b 	bl	800a1b0 <etharp_find_entry>
  if (i < 0) {
 800a6fa:	1e04      	subs	r4, r0, #0
 800a6fc:	db74      	blt.n	800a7e8 <etharp_query+0x124>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800a6fe:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a702:	00da      	lsls	r2, r3, #3
 800a704:	4b3b      	ldr	r3, [pc, #236]	; (800a7f4 <etharp_query+0x130>)
 800a706:	4413      	add	r3, r2
 800a708:	7d1b      	ldrb	r3, [r3, #20]
 800a70a:	b9ab      	cbnz	r3, 800a738 <etharp_query+0x74>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800a70c:	4611      	mov	r1, r2
 800a70e:	4a39      	ldr	r2, [pc, #228]	; (800a7f4 <etharp_query+0x130>)
 800a710:	440a      	add	r2, r1
 800a712:	2301      	movs	r3, #1
 800a714:	7513      	strb	r3, [r2, #20]
    arp_table[i].netif = netif;
 800a716:	6096      	str	r6, [r2, #8]
  if (is_new_entry || (q == NULL)) {
 800a718:	b983      	cbnz	r3, 800a73c <etharp_query+0x78>
 800a71a:	b17f      	cbz	r7, 800a73c <etharp_query+0x78>
  err_t result = ERR_MEM;
 800a71c:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800a720:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a724:	00da      	lsls	r2, r3, #3
 800a726:	4b33      	ldr	r3, [pc, #204]	; (800a7f4 <etharp_query+0x130>)
 800a728:	4413      	add	r3, r2
 800a72a:	7d1b      	ldrb	r3, [r3, #20]
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d80d      	bhi.n	800a74c <etharp_query+0x88>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800a730:	2b01      	cmp	r3, #1
 800a732:	d019      	beq.n	800a768 <etharp_query+0xa4>
}
 800a734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  int is_new_entry = 0;
 800a738:	2300      	movs	r3, #0
 800a73a:	e7ed      	b.n	800a718 <etharp_query+0x54>
    result = etharp_request(netif, ipaddr);
 800a73c:	4629      	mov	r1, r5
 800a73e:	4630      	mov	r0, r6
 800a740:	f7ff ff22 	bl	800a588 <etharp_request>
    if (q == NULL) {
 800a744:	2f00      	cmp	r7, #0
 800a746:	d1eb      	bne.n	800a720 <etharp_query+0x5c>
 800a748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ETHARP_SET_HINT(netif, i);
 800a74c:	4b2a      	ldr	r3, [pc, #168]	; (800a7f8 <etharp_query+0x134>)
 800a74e:	701c      	strb	r4, [r3, #0]
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
 800a750:	4613      	mov	r3, r2
 800a752:	3308      	adds	r3, #8
 800a754:	4a27      	ldr	r2, [pc, #156]	; (800a7f4 <etharp_query+0x130>)
 800a756:	4413      	add	r3, r2
 800a758:	3304      	adds	r3, #4
 800a75a:	4642      	mov	r2, r8
 800a75c:	4639      	mov	r1, r7
 800a75e:	4630      	mov	r0, r6
 800a760:	f7ff fe28 	bl	800a3b4 <etharp_send_ip>
 800a764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a768:	463b      	mov	r3, r7
    while (p) {
 800a76a:	b123      	cbz	r3, 800a776 <etharp_query+0xb2>
      if (p->type != PBUF_ROM) {
 800a76c:	7b1a      	ldrb	r2, [r3, #12]
 800a76e:	2a01      	cmp	r2, #1
 800a770:	d113      	bne.n	800a79a <etharp_query+0xd6>
      p = p->next;
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	e7f9      	b.n	800a76a <etharp_query+0xa6>
    int copy_needed = 0;
 800a776:	2200      	movs	r2, #0
    if (copy_needed) {
 800a778:	b18a      	cbz	r2, 800a79e <etharp_query+0xda>
      p = pbuf_alloc(PBUF_RAW_TX, p->tot_len, PBUF_RAM);
 800a77a:	2200      	movs	r2, #0
 800a77c:	8919      	ldrh	r1, [r3, #8]
 800a77e:	2003      	movs	r0, #3
 800a780:	f7fc fb38 	bl	8006df4 <pbuf_alloc>
      if (p != NULL) {
 800a784:	4605      	mov	r5, r0
 800a786:	b170      	cbz	r0, 800a7a6 <etharp_query+0xe2>
        if (pbuf_copy(p, q) != ERR_OK) {
 800a788:	4639      	mov	r1, r7
 800a78a:	f7fc fc1f 	bl	8006fcc <pbuf_copy>
 800a78e:	b150      	cbz	r0, 800a7a6 <etharp_query+0xe2>
          pbuf_free(p);
 800a790:	4628      	mov	r0, r5
 800a792:	f7fc fb01 	bl	8006d98 <pbuf_free>
          p = NULL;
 800a796:	2500      	movs	r5, #0
 800a798:	e005      	b.n	800a7a6 <etharp_query+0xe2>
        copy_needed = 1;
 800a79a:	2201      	movs	r2, #1
 800a79c:	e7ec      	b.n	800a778 <etharp_query+0xb4>
      pbuf_ref(p);
 800a79e:	4638      	mov	r0, r7
 800a7a0:	f7fc fbf1 	bl	8006f86 <pbuf_ref>
      p = q;
 800a7a4:	463d      	mov	r5, r7
    if (p != NULL) {
 800a7a6:	b315      	cbz	r5, 800a7ee <etharp_query+0x12a>
      if (arp_table[i].q != NULL) {
 800a7a8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800a7ac:	00d3      	lsls	r3, r2, #3
 800a7ae:	4a11      	ldr	r2, [pc, #68]	; (800a7f4 <etharp_query+0x130>)
 800a7b0:	58d0      	ldr	r0, [r2, r3]
 800a7b2:	b108      	cbz	r0, 800a7b8 <etharp_query+0xf4>
        pbuf_free(arp_table[i].q);
 800a7b4:	f7fc faf0 	bl	8006d98 <pbuf_free>
      arp_table[i].q = p;
 800a7b8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800a7bc:	00e3      	lsls	r3, r4, #3
 800a7be:	4a0d      	ldr	r2, [pc, #52]	; (800a7f4 <etharp_query+0x130>)
 800a7c0:	50d5      	str	r5, [r2, r3]
      result = ERR_OK;
 800a7c2:	2000      	movs	r0, #0
 800a7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_ARG;
 800a7c8:	f06f 000e 	mvn.w	r0, #14
 800a7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7d0:	f06f 000e 	mvn.w	r0, #14
 800a7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7d8:	f06f 000e 	mvn.w	r0, #14
 800a7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7e0:	f06f 000e 	mvn.w	r0, #14
 800a7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (err_t)i;
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      result = ERR_MEM;
 800a7ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a7f2:	e79f      	b.n	800a734 <etharp_query+0x70>
 800a7f4:	20003f00 	.word	0x20003f00
 800a7f8:	20003ff0 	.word	0x20003ff0

0800a7fc <etharp_output>:
{
 800a7fc:	b570      	push	{r4, r5, r6, lr}
 800a7fe:	b082      	sub	sp, #8
 800a800:	4605      	mov	r5, r0
 800a802:	460e      	mov	r6, r1
 800a804:	4614      	mov	r4, r2
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
 800a806:	210e      	movs	r1, #14
 800a808:	4630      	mov	r0, r6
 800a80a:	f7fc fabb 	bl	8006d84 <pbuf_header>
 800a80e:	2800      	cmp	r0, #0
 800a810:	d171      	bne.n	800a8f6 <etharp_output+0xfa>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800a812:	4629      	mov	r1, r5
 800a814:	6820      	ldr	r0, [r4, #0]
 800a816:	f7fb faec 	bl	8005df2 <ip4_addr_isbroadcast_u32>
 800a81a:	2800      	cmp	r0, #0
 800a81c:	d162      	bne.n	800a8e4 <etharp_output+0xe8>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800a81e:	6823      	ldr	r3, [r4, #0]
 800a820:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a824:	2ae0      	cmp	r2, #224	; 0xe0
 800a826:	d020      	beq.n	800a86a <etharp_output+0x6e>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a828:	686a      	ldr	r2, [r5, #4]
 800a82a:	68a9      	ldr	r1, [r5, #8]
 800a82c:	405a      	eors	r2, r3
 800a82e:	420a      	tst	r2, r1
 800a830:	d009      	beq.n	800a846 <etharp_output+0x4a>
        !ip4_addr_islinklocal(ipaddr)) {
 800a832:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a834:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800a838:	4293      	cmp	r3, r2
 800a83a:	d004      	beq.n	800a846 <etharp_output+0x4a>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800a83c:	68eb      	ldr	r3, [r5, #12]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d05c      	beq.n	800a8fc <etharp_output+0x100>
            dst_addr = netif_ip4_gw(netif);
 800a842:	f105 040c 	add.w	r4, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800a846:	4b2f      	ldr	r3, [pc, #188]	; (800a904 <etharp_output+0x108>)
 800a848:	781a      	ldrb	r2, [r3, #0]
 800a84a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800a84e:	00d9      	lsls	r1, r3, #3
 800a850:	4b2d      	ldr	r3, [pc, #180]	; (800a908 <etharp_output+0x10c>)
 800a852:	440b      	add	r3, r1
 800a854:	7d1b      	ldrb	r3, [r3, #20]
 800a856:	2b01      	cmp	r3, #1
 800a858:	d93c      	bls.n	800a8d4 <etharp_output+0xd8>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800a85a:	6820      	ldr	r0, [r4, #0]
 800a85c:	4b2a      	ldr	r3, [pc, #168]	; (800a908 <etharp_output+0x10c>)
 800a85e:	440b      	add	r3, r1
 800a860:	685b      	ldr	r3, [r3, #4]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800a862:	4298      	cmp	r0, r3
 800a864:	d017      	beq.n	800a896 <etharp_output+0x9a>
 800a866:	2200      	movs	r2, #0
 800a868:	e01c      	b.n	800a8a4 <etharp_output+0xa8>
    mcastaddr.addr[0] = LL_MULTICAST_ADDR_0;
 800a86a:	2301      	movs	r3, #1
 800a86c:	f88d 3000 	strb.w	r3, [sp]
    mcastaddr.addr[1] = LL_MULTICAST_ADDR_1;
 800a870:	2300      	movs	r3, #0
 800a872:	f88d 3001 	strb.w	r3, [sp, #1]
    mcastaddr.addr[2] = LL_MULTICAST_ADDR_2;
 800a876:	235e      	movs	r3, #94	; 0x5e
 800a878:	f88d 3002 	strb.w	r3, [sp, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800a87c:	7863      	ldrb	r3, [r4, #1]
 800a87e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a882:	f88d 3003 	strb.w	r3, [sp, #3]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800a886:	78a3      	ldrb	r3, [r4, #2]
 800a888:	f88d 3004 	strb.w	r3, [sp, #4]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800a88c:	78e3      	ldrb	r3, [r4, #3]
 800a88e:	f88d 3005 	strb.w	r3, [sp, #5]
    dest = &mcastaddr;
 800a892:	466b      	mov	r3, sp
 800a894:	e027      	b.n	800a8e6 <etharp_output+0xea>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800a896:	4631      	mov	r1, r6
 800a898:	4628      	mov	r0, r5
 800a89a:	f7ff fec5 	bl	800a628 <etharp_output_to_arp_index>
 800a89e:	e028      	b.n	800a8f2 <etharp_output+0xf6>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800a8a0:	3201      	adds	r2, #1
 800a8a2:	b252      	sxtb	r2, r2
 800a8a4:	2a09      	cmp	r2, #9
 800a8a6:	dc17      	bgt.n	800a8d8 <etharp_output+0xdc>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800a8a8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800a8ac:	00d9      	lsls	r1, r3, #3
 800a8ae:	4b16      	ldr	r3, [pc, #88]	; (800a908 <etharp_output+0x10c>)
 800a8b0:	440b      	add	r3, r1
 800a8b2:	7d1b      	ldrb	r3, [r3, #20]
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d9f3      	bls.n	800a8a0 <etharp_output+0xa4>
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800a8b8:	6820      	ldr	r0, [r4, #0]
 800a8ba:	4b13      	ldr	r3, [pc, #76]	; (800a908 <etharp_output+0x10c>)
 800a8bc:	440b      	add	r3, r1
 800a8be:	685b      	ldr	r3, [r3, #4]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800a8c0:	4298      	cmp	r0, r3
 800a8c2:	d1ed      	bne.n	800a8a0 <etharp_output+0xa4>
        ETHARP_SET_HINT(netif, i);
 800a8c4:	b2d2      	uxtb	r2, r2
 800a8c6:	4b0f      	ldr	r3, [pc, #60]	; (800a904 <etharp_output+0x108>)
 800a8c8:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800a8ca:	4631      	mov	r1, r6
 800a8cc:	4628      	mov	r0, r5
 800a8ce:	f7ff feab 	bl	800a628 <etharp_output_to_arp_index>
 800a8d2:	e00e      	b.n	800a8f2 <etharp_output+0xf6>
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	e7e5      	b.n	800a8a4 <etharp_output+0xa8>
    return etharp_query(netif, dst_addr, q);
 800a8d8:	4632      	mov	r2, r6
 800a8da:	4621      	mov	r1, r4
 800a8dc:	4628      	mov	r0, r5
 800a8de:	f7ff fef1 	bl	800a6c4 <etharp_query>
 800a8e2:	e006      	b.n	800a8f2 <etharp_output+0xf6>
    dest = (const struct eth_addr *)&ethbroadcast;
 800a8e4:	4b09      	ldr	r3, [pc, #36]	; (800a90c <etharp_output+0x110>)
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
 800a8e6:	f105 0229 	add.w	r2, r5, #41	; 0x29
 800a8ea:	4631      	mov	r1, r6
 800a8ec:	4628      	mov	r0, r5
 800a8ee:	f7ff fd61 	bl	800a3b4 <etharp_send_ip>
}
 800a8f2:	b002      	add	sp, #8
 800a8f4:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_BUF;
 800a8f6:	f06f 0001 	mvn.w	r0, #1
 800a8fa:	e7fa      	b.n	800a8f2 <etharp_output+0xf6>
            return ERR_RTE;
 800a8fc:	f06f 0003 	mvn.w	r0, #3
 800a900:	e7f7      	b.n	800a8f2 <etharp_output+0xf6>
 800a902:	bf00      	nop
 800a904:	20003ff0 	.word	0x20003ff0
 800a908:	20003f00 	.word	0x20003f00
 800a90c:	0800d1c4 	.word	0x0800d1c4

0800a910 <ethernet_input>:
 * @param p the received packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800a910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a912:	4604      	mov	r4, r0
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800a914:	8945      	ldrh	r5, [r0, #10]
 800a916:	2d0e      	cmp	r5, #14
 800a918:	d916      	bls.n	800a948 <ethernet_input+0x38>
 800a91a:	460f      	mov	r7, r1
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800a91c:	6840      	ldr	r0, [r0, #4]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0], (unsigned)ethhdr->src.addr[1], (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3], (unsigned)ethhdr->src.addr[4], (unsigned)ethhdr->src.addr[5],
     (unsigned)htons(ethhdr->type)));

  type = ethhdr->type;
 800a91e:	8986      	ldrh	r6, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800a920:	7803      	ldrb	r3, [r0, #0]
 800a922:	f013 0f01 	tst.w	r3, #1
 800a926:	d00a      	beq.n	800a93e <ethernet_input+0x2e>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d012      	beq.n	800a952 <ethernet_input+0x42>
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
      }
    } else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800a92c:	2206      	movs	r2, #6
 800a92e:	491e      	ldr	r1, [pc, #120]	; (800a9a8 <ethernet_input+0x98>)
 800a930:	f001 f996 	bl	800bc60 <memcmp>
 800a934:	b918      	cbnz	r0, 800a93e <ethernet_input+0x2e>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800a936:	7b63      	ldrb	r3, [r4, #13]
 800a938:	f043 0308 	orr.w	r3, r3, #8
 800a93c:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800a93e:	2e08      	cmp	r6, #8
 800a940:	d012      	beq.n	800a968 <ethernet_input+0x58>
 800a942:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800a946:	d022      	beq.n	800a98e <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800a948:	4620      	mov	r0, r4
 800a94a:	f7fc fa25 	bl	8006d98 <pbuf_free>
  return ERR_OK;
}
 800a94e:	2000      	movs	r0, #0
 800a950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
 800a952:	7843      	ldrb	r3, [r0, #1]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d1f2      	bne.n	800a93e <ethernet_input+0x2e>
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
 800a958:	7883      	ldrb	r3, [r0, #2]
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
 800a95a:	2b5e      	cmp	r3, #94	; 0x5e
 800a95c:	d1ef      	bne.n	800a93e <ethernet_input+0x2e>
        p->flags |= PBUF_FLAG_LLMCAST;
 800a95e:	7b63      	ldrb	r3, [r4, #13]
 800a960:	f043 0310 	orr.w	r3, r3, #16
 800a964:	7363      	strb	r3, [r4, #13]
 800a966:	e7ea      	b.n	800a93e <ethernet_input+0x2e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800a968:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a96c:	f013 0f08 	tst.w	r3, #8
 800a970:	d0ea      	beq.n	800a948 <ethernet_input+0x38>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800a972:	2d0d      	cmp	r5, #13
 800a974:	dde8      	ble.n	800a948 <ethernet_input+0x38>
 800a976:	f06f 010d 	mvn.w	r1, #13
 800a97a:	4620      	mov	r0, r4
 800a97c:	f7fc fa02 	bl	8006d84 <pbuf_header>
 800a980:	2800      	cmp	r0, #0
 800a982:	d1e1      	bne.n	800a948 <ethernet_input+0x38>
        ip4_input(p, netif);
 800a984:	4639      	mov	r1, r7
 800a986:	4620      	mov	r0, r4
 800a988:	f7fb f8f8 	bl	8005b7c <ip4_input>
      break;
 800a98c:	e7df      	b.n	800a94e <ethernet_input+0x3e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800a98e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a992:	f013 0f08 	tst.w	r3, #8
 800a996:	d0d7      	beq.n	800a948 <ethernet_input+0x38>
      etharp_arp_input(netif, (struct eth_addr*)(netif->hwaddr), p);
 800a998:	4622      	mov	r2, r4
 800a99a:	f107 0129 	add.w	r1, r7, #41	; 0x29
 800a99e:	4638      	mov	r0, r7
 800a9a0:	f7ff fd66 	bl	800a470 <etharp_arp_input>
      break;
 800a9a4:	e7d3      	b.n	800a94e <ethernet_input+0x3e>
 800a9a6:	bf00      	nop
 800a9a8:	0800d1c4 	.word	0x0800d1c4

0800a9ac <sys_mbox_new>:


/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800a9ac:	b510      	push	{r4, lr}
 800a9ae:	4604      	mov	r4, r0
	(void ) size;
	
	*mbox = xQueueCreate( archMESG_QUEUE_LENGTH, sizeof( void * ) );
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	2104      	movs	r1, #4
 800a9b4:	2006      	movs	r0, #6
 800a9b6:	f7f8 fce5 	bl	8003384 <xQueueGenericCreate>
 800a9ba:	6020      	str	r0, [r4, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 800a9bc:	b108      	cbz	r0, 800a9c2 <sys_mbox_new+0x16>
  return ERR_MEM;
 
 return ERR_OK;
 800a9be:	2000      	movs	r0, #0
}
 800a9c0:	bd10      	pop	{r4, pc}
  return ERR_MEM;
 800a9c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c6:	bd10      	pop	{r4, pc}

0800a9c8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800a9c8:	b510      	push	{r4, lr}
 800a9ca:	4604      	mov	r4, r0
	if( uxQueueMessagesWaiting( *mbox ) )
 800a9cc:	6800      	ldr	r0, [r0, #0]
 800a9ce:	f7f8 ff6c 	bl	80038aa <uxQueueMessagesWaiting>
#endif /* SYS_STATS */
			
		// TODO notify the user of failure.
	}

	vQueueDelete( *mbox );
 800a9d2:	6820      	ldr	r0, [r4, #0]
 800a9d4:	f7f8 ff90 	bl	80038f8 <vQueueDelete>
 800a9d8:	bd10      	pop	{r4, pc}

0800a9da <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 800a9da:	b510      	push	{r4, lr}
 800a9dc:	b082      	sub	sp, #8
 800a9de:	4604      	mov	r4, r0
 800a9e0:	9101      	str	r1, [sp, #4]
	while ( xQueueSendToBack(*mbox, &data, portMAX_DELAY ) != pdTRUE ){}
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e8:	a901      	add	r1, sp, #4
 800a9ea:	6820      	ldr	r0, [r4, #0]
 800a9ec:	f7f8 fd00 	bl	80033f0 <xQueueGenericSend>
 800a9f0:	2801      	cmp	r0, #1
 800a9f2:	d1f6      	bne.n	800a9e2 <sys_mbox_post+0x8>
}
 800a9f4:	b002      	add	sp, #8
 800a9f6:	bd10      	pop	{r4, pc}

0800a9f8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800a9f8:	b510      	push	{r4, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	ac02      	add	r4, sp, #8
 800a9fe:	f844 1d04 	str.w	r1, [r4, #-4]!
err_t result;

   if ( xQueueSend( *mbox, &msg, 0 ) == pdPASS )
 800aa02:	2300      	movs	r3, #0
 800aa04:	461a      	mov	r2, r3
 800aa06:	4621      	mov	r1, r4
 800aa08:	6800      	ldr	r0, [r0, #0]
 800aa0a:	f7f8 fcf1 	bl	80033f0 <xQueueGenericSend>
 800aa0e:	2801      	cmp	r0, #1
 800aa10:	d102      	bne.n	800aa18 <sys_mbox_trypost+0x20>
   {
      result = ERR_OK;
 800aa12:	2000      	movs	r0, #0
#endif /* SYS_STATS */
			
   }

   return result;
}
 800aa14:	b002      	add	sp, #8
 800aa16:	bd10      	pop	{r4, pc}
      result = ERR_MEM;
 800aa18:	f04f 30ff 	mov.w	r0, #4294967295
 800aa1c:	e7fa      	b.n	800aa14 <sys_mbox_trypost+0x1c>

0800aa1e <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800aa1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa20:	b083      	sub	sp, #12
 800aa22:	4605      	mov	r5, r0
 800aa24:	460c      	mov	r4, r1
 800aa26:	4617      	mov	r7, r2
void *dummyptr;
portTickType StartTime, EndTime, Elapsed;

	StartTime = xTaskGetTickCount();
 800aa28:	f7f9 f980 	bl	8003d2c <xTaskGetTickCount>
 800aa2c:	4606      	mov	r6, r0

	if ( msg == NULL )
 800aa2e:	b174      	cbz	r4, 800aa4e <sys_arch_mbox_fetch+0x30>
	{
		msg = &dummyptr;
	}
		
	if ( timeout != 0 )
 800aa30:	b97f      	cbnz	r7, 800aa52 <sys_arch_mbox_fetch+0x34>
			return SYS_ARCH_TIMEOUT;
		}
	}
	else // block forever for a message.
	{
		while( pdTRUE != xQueueReceive( *mbox, &(*msg), portMAX_DELAY ) ){} // time is arbitrary
 800aa32:	2300      	movs	r3, #0
 800aa34:	f04f 32ff 	mov.w	r2, #4294967295
 800aa38:	4621      	mov	r1, r4
 800aa3a:	6828      	ldr	r0, [r5, #0]
 800aa3c:	f7f8 fe1a 	bl	8003674 <xQueueGenericReceive>
 800aa40:	2801      	cmp	r0, #1
 800aa42:	d1f6      	bne.n	800aa32 <sys_arch_mbox_fetch+0x14>
		EndTime = xTaskGetTickCount();
 800aa44:	f7f9 f972 	bl	8003d2c <xTaskGetTickCount>
		Elapsed = (EndTime - StartTime) * portTICK_RATE_MS;
 800aa48:	1b80      	subs	r0, r0, r6
		
		return ( Elapsed ); // return time blocked TODO test	
	}
}
 800aa4a:	b003      	add	sp, #12
 800aa4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		msg = &dummyptr;
 800aa4e:	ac01      	add	r4, sp, #4
 800aa50:	e7ee      	b.n	800aa30 <sys_arch_mbox_fetch+0x12>
		if ( pdTRUE == xQueueReceive( *mbox, &(*msg), timeout / portTICK_RATE_MS ) )
 800aa52:	2300      	movs	r3, #0
 800aa54:	463a      	mov	r2, r7
 800aa56:	4621      	mov	r1, r4
 800aa58:	6828      	ldr	r0, [r5, #0]
 800aa5a:	f7f8 fe0b 	bl	8003674 <xQueueGenericReceive>
 800aa5e:	2801      	cmp	r0, #1
 800aa60:	d004      	beq.n	800aa6c <sys_arch_mbox_fetch+0x4e>
			*msg = NULL;
 800aa62:	2300      	movs	r3, #0
 800aa64:	6023      	str	r3, [r4, #0]
			return SYS_ARCH_TIMEOUT;
 800aa66:	f04f 30ff 	mov.w	r0, #4294967295
 800aa6a:	e7ee      	b.n	800aa4a <sys_arch_mbox_fetch+0x2c>
			EndTime = xTaskGetTickCount();
 800aa6c:	f7f9 f95e 	bl	8003d2c <xTaskGetTickCount>
			Elapsed = (EndTime - StartTime) * portTICK_RATE_MS;
 800aa70:	1b80      	subs	r0, r0, r6
			return ( Elapsed );
 800aa72:	e7ea      	b.n	800aa4a <sys_arch_mbox_fetch+0x2c>

0800aa74 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800aa74:	b510      	push	{r4, lr}
 800aa76:	b082      	sub	sp, #8
void *dummyptr;

	if ( msg == NULL )
 800aa78:	460c      	mov	r4, r1
 800aa7a:	b159      	cbz	r1, 800aa94 <sys_arch_mbox_tryfetch+0x20>
	{
		msg = &dummyptr;
	}

   if ( pdTRUE == xQueueReceive( *mbox, &(*msg), 0 ) )
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	461a      	mov	r2, r3
 800aa80:	4621      	mov	r1, r4
 800aa82:	6800      	ldr	r0, [r0, #0]
 800aa84:	f7f8 fdf6 	bl	8003674 <xQueueGenericReceive>
 800aa88:	2801      	cmp	r0, #1
 800aa8a:	d005      	beq.n	800aa98 <sys_arch_mbox_tryfetch+0x24>
   {
      return ERR_OK;
   }
   else
   {
      return SYS_MBOX_EMPTY;
 800aa8c:	f04f 30ff 	mov.w	r0, #4294967295
   }
}
 800aa90:	b002      	add	sp, #8
 800aa92:	bd10      	pop	{r4, pc}
		msg = &dummyptr;
 800aa94:	ac01      	add	r4, sp, #4
 800aa96:	e7f1      	b.n	800aa7c <sys_arch_mbox_tryfetch+0x8>
      return ERR_OK;
 800aa98:	2000      	movs	r0, #0
 800aa9a:	e7f9      	b.n	800aa90 <sys_arch_mbox_tryfetch+0x1c>

0800aa9c <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)          
{      
  if (*mbox == SYS_MBOX_NULL) 
 800aa9c:	6803      	ldr	r3, [r0, #0]
 800aa9e:	b10b      	cbz	r3, 800aaa4 <sys_mbox_valid+0x8>
    return 0;
  else
    return 1;
 800aaa0:	2001      	movs	r0, #1
}                                             
 800aaa2:	4770      	bx	lr
    return 0;
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	4770      	bx	lr

0800aaa8 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/                                              
void sys_mbox_set_invalid(sys_mbox_t *mbox)   
{                                             
  *mbox = SYS_MBOX_NULL;                      
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	6003      	str	r3, [r0, #0]
 800aaac:	4770      	bx	lr

0800aaae <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800aaae:	b538      	push	{r3, r4, r5, lr}
 800aab0:	4604      	mov	r4, r0
 800aab2:	460d      	mov	r5, r1
	vSemaphoreCreateBinary(*sem );
 800aab4:	2203      	movs	r2, #3
 800aab6:	2100      	movs	r1, #0
 800aab8:	2001      	movs	r0, #1
 800aaba:	f7f8 fc63 	bl	8003384 <xQueueGenericCreate>
 800aabe:	6020      	str	r0, [r4, #0]
 800aac0:	b120      	cbz	r0, 800aacc <sys_sem_new+0x1e>
 800aac2:	2300      	movs	r3, #0
 800aac4:	461a      	mov	r2, r3
 800aac6:	4619      	mov	r1, r3
 800aac8:	f7f8 fc92 	bl	80033f0 <xQueueGenericSend>
	if(*sem == NULL)
 800aacc:	6820      	ldr	r0, [r4, #0]
 800aace:	b148      	cbz	r0, 800aae4 <sys_sem_new+0x36>
      ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */	
		return ERR_MEM;
	}
	
	if(count == 0)	// Means it can't be taken
 800aad0:	b10d      	cbz	r5, 800aad6 <sys_sem_new+0x28>
 	if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
		lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
	}
#endif /* SYS_STATS */
		
	return ERR_OK;
 800aad2:	2000      	movs	r0, #0
}
 800aad4:	bd38      	pop	{r3, r4, r5, pc}
		xSemaphoreTake(*sem,1);
 800aad6:	2300      	movs	r3, #0
 800aad8:	2201      	movs	r2, #1
 800aada:	4619      	mov	r1, r3
 800aadc:	f7f8 fdca 	bl	8003674 <xQueueGenericReceive>
	return ERR_OK;
 800aae0:	2000      	movs	r0, #0
 800aae2:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_MEM;
 800aae4:	f04f 30ff 	mov.w	r0, #4294967295
 800aae8:	bd38      	pop	{r3, r4, r5, pc}

0800aaea <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800aaea:	b570      	push	{r4, r5, r6, lr}
 800aaec:	4604      	mov	r4, r0
 800aaee:	460e      	mov	r6, r1
portTickType StartTime, EndTime, Elapsed;

	StartTime = xTaskGetTickCount();
 800aaf0:	f7f9 f91c 	bl	8003d2c <xTaskGetTickCount>
 800aaf4:	4605      	mov	r5, r0

	if(	timeout != 0)
 800aaf6:	b966      	cbnz	r6, 800ab12 <sys_arch_sem_wait+0x28>
			return SYS_ARCH_TIMEOUT;
		}
	}
	else // must block without a timeout
	{
		while( xSemaphoreTake(*sem, portMAX_DELAY) != pdTRUE){}
 800aaf8:	2300      	movs	r3, #0
 800aafa:	f04f 32ff 	mov.w	r2, #4294967295
 800aafe:	4619      	mov	r1, r3
 800ab00:	6820      	ldr	r0, [r4, #0]
 800ab02:	f7f8 fdb7 	bl	8003674 <xQueueGenericReceive>
 800ab06:	2801      	cmp	r0, #1
 800ab08:	d1f6      	bne.n	800aaf8 <sys_arch_sem_wait+0xe>
		EndTime = xTaskGetTickCount();
 800ab0a:	f7f9 f90f 	bl	8003d2c <xTaskGetTickCount>
		Elapsed = (EndTime - StartTime) * portTICK_RATE_MS;
 800ab0e:	1b40      	subs	r0, r0, r5

		return ( Elapsed ); // return time blocked	
 800ab10:	bd70      	pop	{r4, r5, r6, pc}
		if( xSemaphoreTake( *sem, timeout / portTICK_RATE_MS ) == pdTRUE )
 800ab12:	2300      	movs	r3, #0
 800ab14:	4632      	mov	r2, r6
 800ab16:	4619      	mov	r1, r3
 800ab18:	6820      	ldr	r0, [r4, #0]
 800ab1a:	f7f8 fdab 	bl	8003674 <xQueueGenericReceive>
 800ab1e:	2801      	cmp	r0, #1
 800ab20:	d002      	beq.n	800ab28 <sys_arch_sem_wait+0x3e>
			return SYS_ARCH_TIMEOUT;
 800ab22:	f04f 30ff 	mov.w	r0, #4294967295
		
	}
}
 800ab26:	bd70      	pop	{r4, r5, r6, pc}
			EndTime = xTaskGetTickCount();
 800ab28:	f7f9 f900 	bl	8003d2c <xTaskGetTickCount>
			Elapsed = (EndTime - StartTime) * portTICK_RATE_MS;
 800ab2c:	1b40      	subs	r0, r0, r5
			return (Elapsed); // return time blocked TODO test	
 800ab2e:	bd70      	pop	{r4, r5, r6, pc}

0800ab30 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 800ab30:	b508      	push	{r3, lr}
	xSemaphoreGive(*sem);
 800ab32:	2300      	movs	r3, #0
 800ab34:	461a      	mov	r2, r3
 800ab36:	4619      	mov	r1, r3
 800ab38:	6800      	ldr	r0, [r0, #0]
 800ab3a:	f7f8 fc59 	bl	80033f0 <xQueueGenericSend>
 800ab3e:	bd08      	pop	{r3, pc}

0800ab40 <sys_sem_free>:
}

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 800ab40:	b508      	push	{r3, lr}
#if SYS_STATS
      --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */
			
	vQueueDelete(*sem);
 800ab42:	6800      	ldr	r0, [r0, #0]
 800ab44:	f7f8 fed8 	bl	80038f8 <vQueueDelete>
 800ab48:	bd08      	pop	{r3, pc}

0800ab4a <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)                                               
{
  if (*sem == SYS_SEM_NULL)
 800ab4a:	6803      	ldr	r3, [r0, #0]
 800ab4c:	b10b      	cbz	r3, 800ab52 <sys_sem_valid+0x8>
    return 0;
  else
    return 1;                                       
 800ab4e:	2001      	movs	r0, #1
}
 800ab50:	4770      	bx	lr
    return 0;
 800ab52:	2000      	movs	r0, #0
 800ab54:	4770      	bx	lr

0800ab56 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/                                                                                                                                                                
void sys_sem_set_invalid(sys_sem_t *sem)                                        
{                                                                               
  *sem = SYS_SEM_NULL;                                                          
 800ab56:	2300      	movs	r3, #0
 800ab58:	6003      	str	r3, [r0, #0]
 800ab5a:	4770      	bx	lr

0800ab5c <sys_init>:
/*-----------------------------------------------------------------------------------*/
// Initialize sys arch
void sys_init(void)
{
	// keep track of how many threads have been created
	s_nextthread = 0;
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	4b01      	ldr	r3, [pc, #4]	; (800ab64 <sys_init+0x8>)
 800ab60:	801a      	strh	r2, [r3, #0]
 800ab62:	4770      	bx	lr
 800ab64:	20003ff2 	.word	0x20003ff2

0800ab68 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800ab68:	b510      	push	{r4, lr}
 800ab6a:	4604      	mov	r4, r0

  *mutex = xSemaphoreCreateMutex();
 800ab6c:	2001      	movs	r0, #1
 800ab6e:	f7f8 fcff 	bl	8003570 <xQueueCreateMutex>
 800ab72:	6020      	str	r0, [r4, #0]
		if(*mutex == NULL)
 800ab74:	b108      	cbz	r0, 800ab7a <sys_mutex_new+0x12>
	++lwip_stats.sys.mutex.used;
 	if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
		lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
	}
#endif /* SYS_STATS */
        return ERR_OK;
 800ab76:	2000      	movs	r0, #0
}
 800ab78:	bd10      	pop	{r4, pc}
		return ERR_MEM;
 800ab7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab7e:	bd10      	pop	{r4, pc}

0800ab80 <sys_mutex_lock>:
	vQueueDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 800ab80:	b508      	push	{r3, lr}
	sys_arch_sem_wait(mutex, 0);
 800ab82:	2100      	movs	r1, #0
 800ab84:	f7ff ffb1 	bl	800aaea <sys_arch_sem_wait>
 800ab88:	bd08      	pop	{r3, pc}

0800ab8a <sys_mutex_unlock>:
}

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 800ab8a:	b508      	push	{r3, lr}
	xSemaphoreGive(*mutex);
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	461a      	mov	r2, r3
 800ab90:	4619      	mov	r1, r3
 800ab92:	6800      	ldr	r0, [r0, #0]
 800ab94:	f7f8 fc2c 	bl	80033f0 <xQueueGenericSend>
 800ab98:	bd08      	pop	{r3, pc}
	...

0800ab9c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800ab9c:	b530      	push	{r4, r5, lr}
 800ab9e:	b087      	sub	sp, #28
xTaskHandle CreatedTask;
int result;

   if ( s_nextthread < SYS_THREAD_MAX )
 800aba0:	4c0d      	ldr	r4, [pc, #52]	; (800abd8 <sys_thread_new+0x3c>)
 800aba2:	8824      	ldrh	r4, [r4, #0]
 800aba4:	2c05      	cmp	r4, #5
 800aba6:	d813      	bhi.n	800abd0 <sys_thread_new+0x34>
 800aba8:	461d      	mov	r5, r3
 800abaa:	4613      	mov	r3, r2
 800abac:	460c      	mov	r4, r1
 800abae:	4601      	mov	r1, r0
   {
      result = xTaskCreate( thread, name, stacksize, arg, prio, &CreatedTask );
 800abb0:	2200      	movs	r2, #0
 800abb2:	9203      	str	r2, [sp, #12]
 800abb4:	9202      	str	r2, [sp, #8]
 800abb6:	aa05      	add	r2, sp, #20
 800abb8:	9201      	str	r2, [sp, #4]
 800abba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abbc:	9200      	str	r2, [sp, #0]
 800abbe:	b2aa      	uxth	r2, r5
 800abc0:	4620      	mov	r0, r4
 800abc2:	f7f8 ff71 	bl	8003aa8 <xTaskGenericCreate>

	   // For each task created, store the task handle (pid) in the timers array.
	   // This scheme doesn't allow for threads to be deleted
	   //s_timeoutlist[s_nextthread++].pid = CreatedTask;

	   if(result == pdPASS)
 800abc6:	2801      	cmp	r0, #1
 800abc8:	d104      	bne.n	800abd4 <sys_thread_new+0x38>
	   {
		   return CreatedTask;
 800abca:	9805      	ldr	r0, [sp, #20]
   }
   else
   {
      return NULL;
   }
}
 800abcc:	b007      	add	sp, #28
 800abce:	bd30      	pop	{r4, r5, pc}
      return NULL;
 800abd0:	2000      	movs	r0, #0
 800abd2:	e7fb      	b.n	800abcc <sys_thread_new+0x30>
		   return NULL;
 800abd4:	2000      	movs	r0, #0
 800abd6:	e7f9      	b.n	800abcc <sys_thread_new+0x30>
 800abd8:	20003ff2 	.word	0x20003ff2

0800abdc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800abdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t byteslefttocopy = 0;
  uint32_t i=0;
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800abe0:	4834      	ldr	r0, [pc, #208]	; (800acb4 <low_level_input+0xd8>)
 800abe2:	f7f5 ffd9 	bl	8000b98 <HAL_ETH_GetReceivedFrame_IT>
 800abe6:	2800      	cmp	r0, #0
 800abe8:	d160      	bne.n	800acac <low_level_input+0xd0>
    return NULL;
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800abea:	4b32      	ldr	r3, [pc, #200]	; (800acb4 <low_level_input+0xd8>)
 800abec:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800abee:	f8d3 8040 	ldr.w	r8, [r3, #64]	; 0x40
  
  if (len > 0)
 800abf2:	b949      	cbnz	r1, 800ac08 <low_level_input+0x2c>
  struct pbuf *p = NULL;
 800abf4:	f04f 0a00 	mov.w	sl, #0
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
  }
  
  if (p != NULL)
 800abf8:	f1ba 0f00 	cmp.w	sl, #0
 800abfc:	d033      	beq.n	800ac66 <low_level_input+0x8a>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800abfe:	4b2d      	ldr	r3, [pc, #180]	; (800acb4 <low_level_input+0xd8>)
 800ac00:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    bufferoffset = 0;
    for(q = p; q != NULL; q = q->next)
 800ac02:	46d1      	mov	r9, sl
    bufferoffset = 0;
 800ac04:	2400      	movs	r4, #0
    for(q = p; q != NULL; q = q->next)
 800ac06:	e027      	b.n	800ac58 <low_level_input+0x7c>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800ac08:	2203      	movs	r2, #3
 800ac0a:	2004      	movs	r0, #4
 800ac0c:	f7fc f8f2 	bl	8006df4 <pbuf_alloc>
 800ac10:	4682      	mov	sl, r0
 800ac12:	e7f1      	b.n	800abf8 <low_level_input+0x1c>
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800ac14:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800ac18:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 800ac1c:	3204      	adds	r2, #4
 800ac1e:	eb08 0104 	add.w	r1, r8, r4
 800ac22:	4430      	add	r0, r6
 800ac24:	f001 f82b 	bl	800bc7e <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800ac28:	68ff      	ldr	r7, [r7, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800ac2a:	f8d7 8008 	ldr.w	r8, [r7, #8]
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800ac2e:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800ac32:	1b36      	subs	r6, r6, r4
 800ac34:	f206 56f4 	addw	r6, r6, #1524	; 0x5f4
        bufferoffset = 0;
 800ac38:	2400      	movs	r4, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800ac3a:	18a5      	adds	r5, r4, r2
 800ac3c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800ac40:	429d      	cmp	r5, r3
 800ac42:	d8e7      	bhi.n	800ac14 <low_level_input+0x38>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800ac44:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800ac48:	eb08 0104 	add.w	r1, r8, r4
 800ac4c:	4430      	add	r0, r6
 800ac4e:	f001 f816 	bl	800bc7e <memcpy>
    for(q = p; q != NULL; q = q->next)
 800ac52:	f8d9 9000 	ldr.w	r9, [r9]
      bufferoffset = bufferoffset + byteslefttocopy;
 800ac56:	462c      	mov	r4, r5
    for(q = p; q != NULL; q = q->next)
 800ac58:	f1b9 0f00 	cmp.w	r9, #0
 800ac5c:	d003      	beq.n	800ac66 <low_level_input+0x8a>
      byteslefttocopy = q->len;
 800ac5e:	f8b9 200a 	ldrh.w	r2, [r9, #10]
      payloadoffset = 0;
 800ac62:	2600      	movs	r6, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800ac64:	e7e9      	b.n	800ac3a <low_level_input+0x5e>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800ac66:	4b13      	ldr	r3, [pc, #76]	; (800acb4 <low_level_input+0xd8>)
 800ac68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800ac6a:	2100      	movs	r1, #0
 800ac6c:	e005      	b.n	800ac7a <low_level_input+0x9e>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800ac74:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800ac76:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800ac78:	3101      	adds	r1, #1
 800ac7a:	4a0e      	ldr	r2, [pc, #56]	; (800acb4 <low_level_input+0xd8>)
 800ac7c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ac7e:	4291      	cmp	r1, r2
 800ac80:	d3f5      	bcc.n	800ac6e <low_level_input+0x92>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 800ac82:	4b0c      	ldr	r3, [pc, #48]	; (800acb4 <low_level_input+0xd8>)
 800ac84:	2200      	movs	r2, #0
 800ac86:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f241 0214 	movw	r2, #4116	; 0x1014
 800ac8e:	589a      	ldr	r2, [r3, r2]
 800ac90:	f012 0f80 	tst.w	r2, #128	; 0x80
 800ac94:	d007      	beq.n	800aca6 <low_level_input+0xca>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800ac96:	2180      	movs	r1, #128	; 0x80
 800ac98:	f241 0214 	movw	r2, #4116	; 0x1014
 800ac9c:	5099      	str	r1, [r3, r2]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800ac9e:	2100      	movs	r1, #0
 800aca0:	f241 0208 	movw	r2, #4104	; 0x1008
 800aca4:	5099      	str	r1, [r3, r2]
  }
  return p;
}
 800aca6:	4650      	mov	r0, sl
 800aca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return NULL;
 800acac:	f04f 0a00 	mov.w	sl, #0
 800acb0:	e7f9      	b.n	800aca6 <low_level_input+0xca>
 800acb2:	bf00      	nop
 800acb4:	20009418 	.word	0x20009418

0800acb8 <ethernetif_input>:
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void const * argument ) 
 
{
 800acb8:	b538      	push	{r3, r4, r5, lr}
 800acba:	4605      	mov	r5, r0
 800acbc:	e012      	b.n	800ace4 <ethernetif_input+0x2c>
          if (netif->input( p, netif) != ERR_OK )
          {
            pbuf_free(p);
          }
        }
      } while(p!=NULL);
 800acbe:	b174      	cbz	r4, 800acde <ethernetif_input+0x26>
        p = low_level_input( netif );
 800acc0:	4628      	mov	r0, r5
 800acc2:	f7ff ff8b 	bl	800abdc <low_level_input>
        if   (p != NULL)
 800acc6:	4604      	mov	r4, r0
 800acc8:	2800      	cmp	r0, #0
 800acca:	d0f8      	beq.n	800acbe <ethernetif_input+0x6>
          if (netif->input( p, netif) != ERR_OK )
 800accc:	692b      	ldr	r3, [r5, #16]
 800acce:	4629      	mov	r1, r5
 800acd0:	4798      	blx	r3
 800acd2:	2800      	cmp	r0, #0
 800acd4:	d0f3      	beq.n	800acbe <ethernetif_input+0x6>
            pbuf_free(p);
 800acd6:	4620      	mov	r0, r4
 800acd8:	f7fc f85e 	bl	8006d98 <pbuf_free>
 800acdc:	e7ef      	b.n	800acbe <ethernetif_input+0x6>
    }
		vTaskDelay(100);
 800acde:	2064      	movs	r0, #100	; 0x64
 800ace0:	f7f9 f938 	bl	8003f54 <vTaskDelay>
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 800ace4:	f04f 31ff 	mov.w	r1, #4294967295
 800ace8:	4b03      	ldr	r3, [pc, #12]	; (800acf8 <ethernetif_input+0x40>)
 800acea:	6818      	ldr	r0, [r3, #0]
 800acec:	f7f7 ff02 	bl	8002af4 <osSemaphoreWait>
 800acf0:	2800      	cmp	r0, #0
 800acf2:	d0e5      	beq.n	800acc0 <ethernetif_input+0x8>
 800acf4:	e7f3      	b.n	800acde <ethernetif_input+0x26>
 800acf6:	bf00      	nop
 800acf8:	20003ff4 	.word	0x20003ff4

0800acfc <low_level_output>:
{
 800acfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad00:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800ad02:	4b2c      	ldr	r3, [pc, #176]	; (800adb4 <low_level_output+0xb8>)
 800ad04:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800ad06:	f8d6 a008 	ldr.w	sl, [r6, #8]
  bufferoffset = 0;
 800ad0a:	2400      	movs	r4, #0
  uint32_t framelength = 0;
 800ad0c:	4627      	mov	r7, r4
  for(q = p; q != NULL; q = q->next)
 800ad0e:	f1bb 0f00 	cmp.w	fp, #0
 800ad12:	d032      	beq.n	800ad7a <low_level_output+0x7e>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800ad14:	6833      	ldr	r3, [r6, #0]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	db35      	blt.n	800ad86 <low_level_output+0x8a>
      byteslefttocopy = q->len;
 800ad1a:	f8bb 900a 	ldrh.w	r9, [fp, #10]
      payloadoffset = 0;
 800ad1e:	2500      	movs	r5, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800ad20:	eb04 0809 	add.w	r8, r4, r9
 800ad24:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800ad28:	4598      	cmp	r8, r3
 800ad2a:	d919      	bls.n	800ad60 <low_level_output+0x64>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800ad2c:	f8db 1004 	ldr.w	r1, [fp, #4]
 800ad30:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 800ad34:	3204      	adds	r2, #4
 800ad36:	4429      	add	r1, r5
 800ad38:	eb0a 0004 	add.w	r0, sl, r4
 800ad3c:	f000 ff9f 	bl	800bc7e <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800ad40:	68f6      	ldr	r6, [r6, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800ad42:	6833      	ldr	r3, [r6, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	db21      	blt.n	800ad8c <low_level_output+0x90>
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800ad48:	f8d6 a008 	ldr.w	sl, [r6, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800ad4c:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800ad50:	1b2d      	subs	r5, r5, r4
 800ad52:	f205 55f4 	addw	r5, r5, #1524	; 0x5f4
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800ad56:	1b3f      	subs	r7, r7, r4
 800ad58:	f207 57f4 	addw	r7, r7, #1524	; 0x5f4
        bufferoffset = 0;
 800ad5c:	2400      	movs	r4, #0
 800ad5e:	e7df      	b.n	800ad20 <low_level_output+0x24>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800ad60:	f8db 1004 	ldr.w	r1, [fp, #4]
 800ad64:	464a      	mov	r2, r9
 800ad66:	4429      	add	r1, r5
 800ad68:	eb0a 0004 	add.w	r0, sl, r4
 800ad6c:	f000 ff87 	bl	800bc7e <memcpy>
      framelength = framelength + byteslefttocopy;
 800ad70:	444f      	add	r7, r9
  for(q = p; q != NULL; q = q->next)
 800ad72:	f8db b000 	ldr.w	fp, [fp]
      bufferoffset = bufferoffset + byteslefttocopy;
 800ad76:	4644      	mov	r4, r8
 800ad78:	e7c9      	b.n	800ad0e <low_level_output+0x12>
  HAL_ETH_TransmitFrame(&heth, framelength);
 800ad7a:	4639      	mov	r1, r7
 800ad7c:	480d      	ldr	r0, [pc, #52]	; (800adb4 <low_level_output+0xb8>)
 800ad7e:	f7f5 fe79 	bl	8000a74 <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 800ad82:	2000      	movs	r0, #0
 800ad84:	e004      	b.n	800ad90 <low_level_output+0x94>
        errval = ERR_USE;
 800ad86:	f06f 0007 	mvn.w	r0, #7
 800ad8a:	e001      	b.n	800ad90 <low_level_output+0x94>
          errval = ERR_USE;
 800ad8c:	f06f 0007 	mvn.w	r0, #7
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800ad90:	4b08      	ldr	r3, [pc, #32]	; (800adb4 <low_level_output+0xb8>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f241 0214 	movw	r2, #4116	; 0x1014
 800ad98:	589a      	ldr	r2, [r3, r2]
 800ad9a:	f012 0f20 	tst.w	r2, #32
 800ad9e:	d007      	beq.n	800adb0 <low_level_output+0xb4>
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800ada0:	2120      	movs	r1, #32
 800ada2:	f241 0214 	movw	r2, #4116	; 0x1014
 800ada6:	5099      	str	r1, [r3, r2]
    heth.Instance->DMATPDR = 0;
 800ada8:	2100      	movs	r1, #0
 800adaa:	f241 0204 	movw	r2, #4100	; 0x1004
 800adae:	5099      	str	r1, [r3, r2]
}
 800adb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adb4:	20009418 	.word	0x20009418

0800adb8 <low_level_init>:
{ 
 800adb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adba:	b089      	sub	sp, #36	; 0x24
 800adbc:	4604      	mov	r4, r0
  heth.Instance = ETH;
 800adbe:	4835      	ldr	r0, [pc, #212]	; (800ae94 <low_level_init+0xdc>)
 800adc0:	4b35      	ldr	r3, [pc, #212]	; (800ae98 <low_level_init+0xe0>)
 800adc2:	6003      	str	r3, [r0, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800adc4:	2201      	movs	r2, #1
 800adc6:	6042      	str	r2, [r0, #4]
  heth.Init.PhyAddress = LAN8720A_PHY_ADDRESS;
 800adc8:	2300      	movs	r3, #0
 800adca:	8203      	strh	r3, [r0, #16]
  MACAddr[0] = 0x02;
 800adcc:	2102      	movs	r1, #2
 800adce:	f88d 1018 	strb.w	r1, [sp, #24]
  MACAddr[1] = 0x80;
 800add2:	2180      	movs	r1, #128	; 0x80
 800add4:	f88d 1019 	strb.w	r1, [sp, #25]
  MACAddr[2] = 0xE1;
 800add8:	21e1      	movs	r1, #225	; 0xe1
 800adda:	f88d 101a 	strb.w	r1, [sp, #26]
  MACAddr[3] = 0x00;
 800adde:	f88d 301b 	strb.w	r3, [sp, #27]
  MACAddr[4] = 0x00;
 800ade2:	f88d 301c 	strb.w	r3, [sp, #28]
  MACAddr[5] = 0x00;
 800ade6:	f88d 301d 	strb.w	r3, [sp, #29]
  heth.Init.MACAddr = &MACAddr[0];
 800adea:	a906      	add	r1, sp, #24
 800adec:	6141      	str	r1, [r0, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800adee:	6182      	str	r2, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800adf0:	61c3      	str	r3, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800adf2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800adf6:	6203      	str	r3, [r0, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800adf8:	f7f5 ffd8 	bl	8000dac <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800adfc:	b928      	cbnz	r0, 800ae0a <low_level_init+0x52>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800adfe:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800ae02:	f043 0304 	orr.w	r3, r3, #4
 800ae06:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800ae0a:	4f22      	ldr	r7, [pc, #136]	; (800ae94 <low_level_init+0xdc>)
 800ae0c:	2304      	movs	r3, #4
 800ae0e:	4a23      	ldr	r2, [pc, #140]	; (800ae9c <low_level_init+0xe4>)
 800ae10:	4923      	ldr	r1, [pc, #140]	; (800aea0 <low_level_init+0xe8>)
 800ae12:	4638      	mov	r0, r7
 800ae14:	f7f5 fdbe 	bl	8000994 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800ae18:	2304      	movs	r3, #4
 800ae1a:	4a22      	ldr	r2, [pc, #136]	; (800aea4 <low_level_init+0xec>)
 800ae1c:	4922      	ldr	r1, [pc, #136]	; (800aea8 <low_level_init+0xf0>)
 800ae1e:	4638      	mov	r0, r7
 800ae20:	f7f5 fdf1 	bl	8000a06 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETHARP_HWADDR_LEN;
 800ae24:	2306      	movs	r3, #6
 800ae26:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	781a      	ldrb	r2, [r3, #0]
 800ae2e:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800ae32:	785a      	ldrb	r2, [r3, #1]
 800ae34:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800ae38:	789a      	ldrb	r2, [r3, #2]
 800ae3a:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800ae3e:	78da      	ldrb	r2, [r3, #3]
 800ae40:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800ae44:	791a      	ldrb	r2, [r3, #4]
 800ae46:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800ae4a:	795b      	ldrb	r3, [r3, #5]
 800ae4c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->mtu = 1500;
 800ae50:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800ae54:	84e3      	strh	r3, [r4, #38]	; 0x26
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800ae56:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800ae5a:	f043 030a 	orr.w	r3, r3, #10
 800ae5e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  osSemaphoreDef(SEM);
 800ae62:	a808      	add	r0, sp, #32
 800ae64:	2300      	movs	r3, #0
 800ae66:	f840 3d0c 	str.w	r3, [r0, #-12]!
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800ae6a:	2101      	movs	r1, #1
 800ae6c:	f7f7 fe2f 	bl	8002ace <osSemaphoreCreate>
 800ae70:	4b0e      	ldr	r3, [pc, #56]	; (800aeac <low_level_init+0xf4>)
 800ae72:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800ae74:	466d      	mov	r5, sp
 800ae76:	4e0e      	ldr	r6, [pc, #56]	; (800aeb0 <low_level_init+0xf8>)
 800ae78:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ae7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ae7c:	6833      	ldr	r3, [r6, #0]
 800ae7e:	602b      	str	r3, [r5, #0]
  osThreadCreate (osThread(EthIf), netif);
 800ae80:	4621      	mov	r1, r4
 800ae82:	4668      	mov	r0, sp
 800ae84:	f7f7 fe06 	bl	8002a94 <osThreadCreate>
  HAL_ETH_Start(&heth);
 800ae88:	4638      	mov	r0, r7
 800ae8a:	f7f6 f8bb 	bl	8001004 <HAL_ETH_Start>
}
 800ae8e:	b009      	add	sp, #36	; 0x24
 800ae90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae92:	bf00      	nop
 800ae94:	20009418 	.word	0x20009418
 800ae98:	40028000 	.word	0x40028000
 800ae9c:	20009460 	.word	0x20009460
 800aea0:	20007b48 	.word	0x20007b48
 800aea4:	20007bc8 	.word	0x20007bc8
 800aea8:	20009398 	.word	0x20009398
 800aeac:	20003ff4 	.word	0x20003ff4
 800aeb0:	0800cfd4 	.word	0x0800cfd4

0800aeb4 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 800aeb4:	6802      	ldr	r2, [r0, #0]
 800aeb6:	4b31      	ldr	r3, [pc, #196]	; (800af7c <HAL_ETH_MspInit+0xc8>)
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d000      	beq.n	800aebe <HAL_ETH_MspInit+0xa>
 800aebc:	4770      	bx	lr
{
 800aebe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aec0:	b089      	sub	sp, #36	; 0x24
		vTaskDelay(LAN8742A_RESET_DELAY);
 800aec2:	2005      	movs	r0, #5
 800aec4:	f7f9 f846 	bl	8003f54 <vTaskDelay>
		vTaskDelay(LAN8742A_RESET_DELAY);
 800aec8:	2005      	movs	r0, #5
 800aeca:	f7f9 f843 	bl	8003f54 <vTaskDelay>
    __HAL_RCC_ETH_CLK_ENABLE();
 800aece:	2400      	movs	r4, #0
 800aed0:	9400      	str	r4, [sp, #0]
 800aed2:	4b2b      	ldr	r3, [pc, #172]	; (800af80 <HAL_ETH_MspInit+0xcc>)
 800aed4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aed6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800aeda:	631a      	str	r2, [r3, #48]	; 0x30
 800aedc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aede:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800aee2:	9200      	str	r2, [sp, #0]
 800aee4:	9a00      	ldr	r2, [sp, #0]
 800aee6:	9401      	str	r4, [sp, #4]
 800aee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aeea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800aeee:	631a      	str	r2, [r3, #48]	; 0x30
 800aef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aef2:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800aef6:	9201      	str	r2, [sp, #4]
 800aef8:	9a01      	ldr	r2, [sp, #4]
 800aefa:	9402      	str	r4, [sp, #8]
 800aefc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aefe:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800af02:	631a      	str	r2, [r3, #48]	; 0x30
 800af04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af0a:	9302      	str	r3, [sp, #8]
 800af0c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800af0e:	2332      	movs	r3, #50	; 0x32
 800af10:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af12:	2702      	movs	r7, #2
 800af14:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af16:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af18:	2603      	movs	r6, #3
 800af1a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800af1c:	250b      	movs	r5, #11
 800af1e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800af20:	a903      	add	r1, sp, #12
 800af22:	4818      	ldr	r0, [pc, #96]	; (800af84 <HAL_ETH_MspInit+0xd0>)
 800af24:	f7f6 f94a 	bl	80011bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800af28:	2386      	movs	r3, #134	; 0x86
 800af2a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af2c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af2e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af30:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800af32:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af34:	a903      	add	r1, sp, #12
 800af36:	4814      	ldr	r0, [pc, #80]	; (800af88 <HAL_ETH_MspInit+0xd4>)
 800af38:	f7f6 f940 	bl	80011bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800af3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800af40:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af42:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af44:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af46:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800af48:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800af4a:	a903      	add	r1, sp, #12
 800af4c:	480f      	ldr	r0, [pc, #60]	; (800af8c <HAL_ETH_MspInit+0xd8>)
 800af4e:	f7f6 f935 	bl	80011bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800af52:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800af56:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af58:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af5a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af5c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800af5e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800af60:	a903      	add	r1, sp, #12
 800af62:	480b      	ldr	r0, [pc, #44]	; (800af90 <HAL_ETH_MspInit+0xdc>)
 800af64:	f7f6 f92a 	bl	80011bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800af68:	4622      	mov	r2, r4
 800af6a:	2105      	movs	r1, #5
 800af6c:	203d      	movs	r0, #61	; 0x3d
 800af6e:	f7f5 fb67 	bl	8000640 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800af72:	203d      	movs	r0, #61	; 0x3d
 800af74:	f7f5 fb96 	bl	80006a4 <HAL_NVIC_EnableIRQ>
}
 800af78:	b009      	add	sp, #36	; 0x24
 800af7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af7c:	40028000 	.word	0x40028000
 800af80:	40023800 	.word	0x40023800
 800af84:	40020800 	.word	0x40020800
 800af88:	40020000 	.word	0x40020000
 800af8c:	40020400 	.word	0x40020400
 800af90:	40021800 	.word	0x40021800

0800af94 <HAL_ETH_RxCpltCallback>:
{
 800af94:	b508      	push	{r3, lr}
  osSemaphoreRelease(s_xSemaphore);
 800af96:	4b02      	ldr	r3, [pc, #8]	; (800afa0 <HAL_ETH_RxCpltCallback+0xc>)
 800af98:	6818      	ldr	r0, [r3, #0]
 800af9a:	f7f7 fde5 	bl	8002b68 <osSemaphoreRelease>
 800af9e:	bd08      	pop	{r3, pc}
 800afa0:	20003ff4 	.word	0x20003ff4

0800afa4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800afa4:	b508      	push	{r3, lr}
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800afa6:	2273      	movs	r2, #115	; 0x73
 800afa8:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  netif->name[1] = IFNAME1;
 800afac:	2274      	movs	r2, #116	; 0x74
 800afae:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800afb2:	4a04      	ldr	r2, [pc, #16]	; (800afc4 <ethernetif_init+0x20>)
 800afb4:	6142      	str	r2, [r0, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800afb6:	4a04      	ldr	r2, [pc, #16]	; (800afc8 <ethernetif_init+0x24>)
 800afb8:	6182      	str	r2, [r0, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800afba:	f7ff fefd 	bl	800adb8 <low_level_init>

  return ERR_OK;
}
 800afbe:	2000      	movs	r0, #0
 800afc0:	bd08      	pop	{r3, pc}
 800afc2:	bf00      	nop
 800afc4:	0800a7fd 	.word	0x0800a7fd
 800afc8:	0800acfd 	.word	0x0800acfd

0800afcc <ethernetif_set_link>:
  * @retval None
  */
 
void ethernetif_set_link(void const *argument)
 
{
 800afcc:	b510      	push	{r4, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	4604      	mov	r4, r0
  uint32_t regvalue = 0;
 800afd2:	2300      	movs	r3, #0
 800afd4:	9301      	str	r3, [sp, #4]
 800afd6:	e005      	b.n	800afe4 <ethernetif_set_link+0x18>
			HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
			
			/* Check whether the link is up or down*/
			if((regvalue & PHY_LINKED_STATUS)== (uint16_t)RESET &&  (link_arg->netif->flags & NETIF_FLAG_LINK_UP)  )
			{
				printf("Link Down!\r\n");					
 800afd8:	4815      	ldr	r0, [pc, #84]	; (800b030 <ethernetif_set_link+0x64>)
 800afda:	f000 fed7 	bl	800bd8c <puts>
				netif_set_link_down(link_arg->netif);
 800afde:	6820      	ldr	r0, [r4, #0]
 800afe0:	f7fb fe1b 	bl	8006c1a <netif_set_link_down>
    if (osSemaphoreWait( link_arg->semaphore, 1000)== osOK)
 800afe4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800afe8:	6860      	ldr	r0, [r4, #4]
 800afea:	f7f7 fd83 	bl	8002af4 <osSemaphoreWait>
 800afee:	2800      	cmp	r0, #0
 800aff0:	d1f8      	bne.n	800afe4 <ethernetif_set_link+0x18>
			HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800aff2:	aa01      	add	r2, sp, #4
 800aff4:	2101      	movs	r1, #1
 800aff6:	480f      	ldr	r0, [pc, #60]	; (800b034 <ethernetif_set_link+0x68>)
 800aff8:	f7f5 fe62 	bl	8000cc0 <HAL_ETH_ReadPHYRegister>
			if((regvalue & PHY_LINKED_STATUS)== (uint16_t)RESET &&  (link_arg->netif->flags & NETIF_FLAG_LINK_UP)  )
 800affc:	9b01      	ldr	r3, [sp, #4]
 800affe:	f013 0304 	ands.w	r3, r3, #4
 800b002:	d105      	bne.n	800b010 <ethernetif_set_link+0x44>
 800b004:	6822      	ldr	r2, [r4, #0]
 800b006:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800b00a:	f012 0f04 	tst.w	r2, #4
 800b00e:	d1e3      	bne.n	800afd8 <ethernetif_set_link+0xc>
			}      
			else if( (regvalue & PHY_LINKED_STATUS)!= (uint16_t)RESET  &&  ( !(link_arg->netif->flags & NETIF_FLAG_LINK_UP)) )
 800b010:	2b00      	cmp	r3, #0
 800b012:	d0e7      	beq.n	800afe4 <ethernetif_set_link+0x18>
 800b014:	6823      	ldr	r3, [r4, #0]
 800b016:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b01a:	f013 0f04 	tst.w	r3, #4
 800b01e:	d1e1      	bne.n	800afe4 <ethernetif_set_link+0x18>
			{        
					printf("Link Up!\r\n");
 800b020:	4805      	ldr	r0, [pc, #20]	; (800b038 <ethernetif_set_link+0x6c>)
 800b022:	f000 feb3 	bl	800bd8c <puts>
          netif_set_link_up(link_arg->netif);       
 800b026:	6820      	ldr	r0, [r4, #0]
 800b028:	f7fb fddf 	bl	8006bea <netif_set_link_up>
 800b02c:	e7da      	b.n	800afe4 <ethernetif_set_link+0x18>
 800b02e:	bf00      	nop
 800b030:	0800d1d4 	.word	0x0800d1d4
 800b034:	20009418 	.word	0x20009418
 800b038:	0800d1e0 	.word	0x0800d1e0

0800b03c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800b03c:	4770      	bx	lr
	...

0800b040 <ethernetif_update_config>:
{
 800b040:	b530      	push	{r4, r5, lr}
 800b042:	b083      	sub	sp, #12
 800b044:	4604      	mov	r4, r0
  __IO uint32_t tickstart = 0;
 800b046:	2300      	movs	r3, #0
 800b048:	9301      	str	r3, [sp, #4]
  uint32_t regvalue = 0;
 800b04a:	9300      	str	r3, [sp, #0]
  if(netif_is_link_up(netif))
 800b04c:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800b050:	f013 0f04 	tst.w	r3, #4
 800b054:	d051      	beq.n	800b0fa <ethernetif_update_config+0xba>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800b056:	4b2b      	ldr	r3, [pc, #172]	; (800b104 <ethernetif_update_config+0xc4>)
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d035      	beq.n	800b0ca <ethernetif_update_config+0x8a>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800b05e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b062:	2100      	movs	r1, #0
 800b064:	4827      	ldr	r0, [pc, #156]	; (800b104 <ethernetif_update_config+0xc4>)
 800b066:	f7f5 fe67 	bl	8000d38 <HAL_ETH_WritePHYRegister>
      tickstart = HAL_GetTick();
 800b06a:	f7f5 fac3 	bl	80005f4 <HAL_GetTick>
 800b06e:	9001      	str	r0, [sp, #4]
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800b070:	466a      	mov	r2, sp
 800b072:	2101      	movs	r1, #1
 800b074:	4823      	ldr	r0, [pc, #140]	; (800b104 <ethernetif_update_config+0xc4>)
 800b076:	f7f5 fe23 	bl	8000cc0 <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 800b07a:	f7f5 fabb 	bl	80005f4 <HAL_GetTick>
 800b07e:	9b01      	ldr	r3, [sp, #4]
 800b080:	1ac0      	subs	r0, r0, r3
 800b082:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b086:	d820      	bhi.n	800b0ca <ethernetif_update_config+0x8a>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800b088:	9b00      	ldr	r3, [sp, #0]
 800b08a:	f013 0f20 	tst.w	r3, #32
 800b08e:	d0ef      	beq.n	800b070 <ethernetif_update_config+0x30>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800b090:	466a      	mov	r2, sp
 800b092:	211f      	movs	r1, #31
 800b094:	481b      	ldr	r0, [pc, #108]	; (800b104 <ethernetif_update_config+0xc4>)
 800b096:	f7f5 fe13 	bl	8000cc0 <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800b09a:	9b00      	ldr	r3, [sp, #0]
 800b09c:	f013 0f10 	tst.w	r3, #16
 800b0a0:	d00a      	beq.n	800b0b8 <ethernetif_update_config+0x78>
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;  
 800b0a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b0a6:	4a17      	ldr	r2, [pc, #92]	; (800b104 <ethernetif_update_config+0xc4>)
 800b0a8:	60d1      	str	r1, [r2, #12]
      if(regvalue & PHY_SPEED_STATUS)
 800b0aa:	f013 0f04 	tst.w	r3, #4
 800b0ae:	d007      	beq.n	800b0c0 <ethernetif_update_config+0x80>
        heth.Init.Speed = ETH_SPEED_10M; 
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	4b14      	ldr	r3, [pc, #80]	; (800b104 <ethernetif_update_config+0xc4>)
 800b0b4:	609a      	str	r2, [r3, #8]
 800b0b6:	e013      	b.n	800b0e0 <ethernetif_update_config+0xa0>
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;           
 800b0b8:	2100      	movs	r1, #0
 800b0ba:	4a12      	ldr	r2, [pc, #72]	; (800b104 <ethernetif_update_config+0xc4>)
 800b0bc:	60d1      	str	r1, [r2, #12]
 800b0be:	e7f4      	b.n	800b0aa <ethernetif_update_config+0x6a>
        heth.Init.Speed = ETH_SPEED_100M;
 800b0c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b0c4:	4b0f      	ldr	r3, [pc, #60]	; (800b104 <ethernetif_update_config+0xc4>)
 800b0c6:	609a      	str	r2, [r3, #8]
 800b0c8:	e00a      	b.n	800b0e0 <ethernetif_update_config+0xa0>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800b0ca:	480e      	ldr	r0, [pc, #56]	; (800b104 <ethernetif_update_config+0xc4>)
 800b0cc:	68c2      	ldr	r2, [r0, #12]
 800b0ce:	f3c2 02cf 	ubfx	r2, r2, #3, #16
                                                     (uint16_t)(heth.Init.Speed >> 1))); 
 800b0d2:	6883      	ldr	r3, [r0, #8]
 800b0d4:	f3c3 034f 	ubfx	r3, r3, #1, #16
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800b0d8:	431a      	orrs	r2, r3
 800b0da:	2100      	movs	r1, #0
 800b0dc:	f7f5 fe2c 	bl	8000d38 <HAL_ETH_WritePHYRegister>
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800b0e0:	4d08      	ldr	r5, [pc, #32]	; (800b104 <ethernetif_update_config+0xc4>)
 800b0e2:	2100      	movs	r1, #0
 800b0e4:	4628      	mov	r0, r5
 800b0e6:	f7f5 ffd1 	bl	800108c <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);   
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	f7f5 ff8a 	bl	8001004 <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	f7ff ffa3 	bl	800b03c <ethernetif_notify_conn_changed>
}
 800b0f6:	b003      	add	sp, #12
 800b0f8:	bd30      	pop	{r4, r5, pc}
    HAL_ETH_Stop(&heth);
 800b0fa:	4802      	ldr	r0, [pc, #8]	; (800b104 <ethernetif_update_config+0xc4>)
 800b0fc:	f7f5 ffa4 	bl	8001048 <HAL_ETH_Stop>
 800b100:	e7f6      	b.n	800b0f0 <ethernetif_update_config+0xb0>
 800b102:	bf00      	nop
 800b104:	20009418 	.word	0x20009418

0800b108 <MX_GPIO_Init>:
     PB12   ------> USB_OTG_HS_ID
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 800b108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b10c:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b10e:	2400      	movs	r4, #0
 800b110:	9400      	str	r4, [sp, #0]
 800b112:	4b75      	ldr	r3, [pc, #468]	; (800b2e8 <MX_GPIO_Init+0x1e0>)
 800b114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b116:	f042 0210 	orr.w	r2, r2, #16
 800b11a:	631a      	str	r2, [r3, #48]	; 0x30
 800b11c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b11e:	f002 0210 	and.w	r2, r2, #16
 800b122:	9200      	str	r2, [sp, #0]
 800b124:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800b126:	9401      	str	r4, [sp, #4]
 800b128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b12a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b12e:	631a      	str	r2, [r3, #48]	; 0x30
 800b130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b132:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800b136:	9201      	str	r2, [sp, #4]
 800b138:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b13a:	9402      	str	r4, [sp, #8]
 800b13c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b13e:	f042 0204 	orr.w	r2, r2, #4
 800b142:	631a      	str	r2, [r3, #48]	; 0x30
 800b144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b146:	f002 0204 	and.w	r2, r2, #4
 800b14a:	9202      	str	r2, [sp, #8]
 800b14c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800b14e:	9403      	str	r4, [sp, #12]
 800b150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b152:	f042 0220 	orr.w	r2, r2, #32
 800b156:	631a      	str	r2, [r3, #48]	; 0x30
 800b158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b15a:	f002 0220 	and.w	r2, r2, #32
 800b15e:	9203      	str	r2, [sp, #12]
 800b160:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b162:	9404      	str	r4, [sp, #16]
 800b164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b166:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b16a:	631a      	str	r2, [r3, #48]	; 0x30
 800b16c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b16e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800b172:	9204      	str	r2, [sp, #16]
 800b174:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b176:	9405      	str	r4, [sp, #20]
 800b178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b17a:	f042 0201 	orr.w	r2, r2, #1
 800b17e:	631a      	str	r2, [r3, #48]	; 0x30
 800b180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b182:	f002 0201 	and.w	r2, r2, #1
 800b186:	9205      	str	r2, [sp, #20]
 800b188:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b18a:	9406      	str	r4, [sp, #24]
 800b18c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b18e:	f042 0202 	orr.w	r2, r2, #2
 800b192:	631a      	str	r2, [r3, #48]	; 0x30
 800b194:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b196:	f002 0202 	and.w	r2, r2, #2
 800b19a:	9206      	str	r2, [sp, #24]
 800b19c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800b19e:	9407      	str	r4, [sp, #28]
 800b1a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1a6:	631a      	str	r2, [r3, #48]	; 0x30
 800b1a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1aa:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800b1ae:	9207      	str	r2, [sp, #28]
 800b1b0:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b1b2:	9408      	str	r4, [sp, #32]
 800b1b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1b6:	f042 0208 	orr.w	r2, r2, #8
 800b1ba:	631a      	str	r2, [r3, #48]	; 0x30
 800b1bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1be:	f003 0308 	and.w	r3, r3, #8
 800b1c2:	9308      	str	r3, [sp, #32]
 800b1c4:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_SET);
 800b1c6:	f8df 913c 	ldr.w	r9, [pc, #316]	; 800b304 <MX_GPIO_Init+0x1fc>
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800b1d0:	4648      	mov	r0, r9
 800b1d2:	f7f6 f8e5 	bl	80013a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 800b1d6:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800b308 <MX_GPIO_Init+0x200>
 800b1da:	2201      	movs	r2, #1
 800b1dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b1e0:	4640      	mov	r0, r8
 800b1e2:	f7f6 f8dd 	bl	80013a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 PE8 PE9 
                           PE10 PE11 PE12 PE13 
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 800b1e6:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800b1ea:	9609      	str	r6, [sp, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b1ec:	2503      	movs	r5, #3
 800b1ee:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1f0:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b1f2:	a909      	add	r1, sp, #36	; 0x24
 800b1f4:	483d      	ldr	r0, [pc, #244]	; (800b2ec <MX_GPIO_Init+0x1e4>)
 800b1f6:	f7f5 ffe1 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI9 PI10 PI11 
                           PI0 PI2 PI3 PI4 
                           PI5 PI6 PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800b1fa:	f640 73fd 	movw	r3, #4093	; 0xffd
 800b1fe:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b200:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b202:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b204:	f8df a104 	ldr.w	sl, [pc, #260]	; 800b30c <MX_GPIO_Init+0x204>
 800b208:	a909      	add	r1, sp, #36	; 0x24
 800b20a:	4650      	mov	r0, sl
 800b20c:	f7f5 ffd6 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC2 PC3 
                           PC6 PC7 PC8 PC9 
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3 
 800b210:	f643 73cd 	movw	r3, #16333	; 0x3fcd
 800b214:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b216:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b218:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b21a:	a909      	add	r1, sp, #36	; 0x24
 800b21c:	4834      	ldr	r0, [pc, #208]	; (800b2f0 <MX_GPIO_Init+0x1e8>)
 800b21e:	f7f5 ffcd 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3 
                           PF4 PF5 PF6 PF7 
                           PF8 PF9 PF10 PF11 
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800b222:	9609      	str	r6, [sp, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b224:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b226:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b228:	a909      	add	r1, sp, #36	; 0x24
 800b22a:	4832      	ldr	r0, [pc, #200]	; (800b2f4 <MX_GPIO_Init+0x1ec>)
 800b22c:	f7f5 ffc6 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA4 PA5 
                           PA6 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 800b230:	f641 0379 	movw	r3, #6265	; 0x1879
 800b234:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b236:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b238:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b23a:	a909      	add	r1, sp, #36	; 0x24
 800b23c:	482e      	ldr	r0, [pc, #184]	; (800b2f8 <MX_GPIO_Init+0x1f0>)
 800b23e:	f7f5 ffbd 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PH2 PH3 PH4 PH5 
                           PH6 PH7 PH8 PH9 
                           PH13 PH14 PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 800b242:	f24e 33fc 	movw	r3, #58364	; 0xe3fc
 800b246:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b248:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b24a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b24c:	a909      	add	r1, sp, #36	; 0x24
 800b24e:	4648      	mov	r0, r9
 800b250:	f7f5 ffb4 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB13 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 800b254:	f242 7327 	movw	r3, #10023	; 0x2727
 800b258:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_13|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b25a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b25c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b25e:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 800b310 <MX_GPIO_Init+0x208>
 800b262:	a909      	add	r1, sp, #36	; 0x24
 800b264:	4658      	mov	r0, fp
 800b266:	f7f5 ffa9 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3 
                           PG4 PG5 PG6 PG7 
                           PG8 PG9 PG10 PG11 
                           PG12 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800b26a:	f649 73ff 	movw	r3, #40959	; 0x9fff
 800b26e:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b270:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b272:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b274:	a909      	add	r1, sp, #36	; 0x24
 800b276:	4821      	ldr	r0, [pc, #132]	; (800b2fc <MX_GPIO_Init+0x1f4>)
 800b278:	f7f5 ffa0 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 800b27c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b280:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b282:	2701      	movs	r7, #1
 800b284:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b286:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b288:	2602      	movs	r6, #2
 800b28a:	960c      	str	r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b28c:	a909      	add	r1, sp, #36	; 0x24
 800b28e:	4648      	mov	r0, r9
 800b290:	f7f5 ff94 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 800b294:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800b298:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b29a:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b29c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b29e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800b2a0:	230c      	movs	r3, #12
 800b2a2:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b2a4:	a909      	add	r1, sp, #36	; 0x24
 800b2a6:	4658      	mov	r0, fp
 800b2a8:	f7f5 ff88 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD13 PD14 PD15 PD0 
                           PD1 PD2 PD3 PD4 
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800b2ac:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800b2b0:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b2b2:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2b4:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b2b6:	a909      	add	r1, sp, #36	; 0x24
 800b2b8:	4640      	mov	r0, r8
 800b2ba:	f7f5 ff7f 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_4_Pin;
 800b2be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2c2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b2c4:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b2c6:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b2c8:	960c      	str	r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(LED_4_GPIO_Port, &GPIO_InitStruct);
 800b2ca:	a909      	add	r1, sp, #36	; 0x24
 800b2cc:	4640      	mov	r0, r8
 800b2ce:	f7f5 ff75 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU6050_INT_Pin;
 800b2d2:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b2d4:	4b0a      	ldr	r3, [pc, #40]	; (800b300 <MX_GPIO_Init+0x1f8>)
 800b2d6:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2d8:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(MPU6050_INT_GPIO_Port, &GPIO_InitStruct);
 800b2da:	a909      	add	r1, sp, #36	; 0x24
 800b2dc:	4650      	mov	r0, sl
 800b2de:	f7f5 ff6d 	bl	80011bc <HAL_GPIO_Init>
//  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//  GPIO_InitStruct.Pull = GPIO_PULLUP;
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
//  HAL_GPIO_Init(ETH_NRST_GPIO_Port, &GPIO_InitStruct);

}
 800b2e2:	b00f      	add	sp, #60	; 0x3c
 800b2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2e8:	40023800 	.word	0x40023800
 800b2ec:	40021000 	.word	0x40021000
 800b2f0:	40020800 	.word	0x40020800
 800b2f4:	40021400 	.word	0x40021400
 800b2f8:	40020000 	.word	0x40020000
 800b2fc:	40021800 	.word	0x40021800
 800b300:	10110000 	.word	0x10110000
 800b304:	40021c00 	.word	0x40021c00
 800b308:	40020c00 	.word	0x40020c00
 800b30c:	40022000 	.word	0x40022000
 800b310:	40020400 	.word	0x40020400

0800b314 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800b314:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 800b316:	480b      	ldr	r0, [pc, #44]	; (800b344 <MX_I2C1_Init+0x30>)
 800b318:	4b0b      	ldr	r3, [pc, #44]	; (800b348 <MX_I2C1_Init+0x34>)
 800b31a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800b31c:	4b0b      	ldr	r3, [pc, #44]	; (800b34c <MX_I2C1_Init+0x38>)
 800b31e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800b320:	2300      	movs	r3, #0
 800b322:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800b324:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b326:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b32a:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b32c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800b32e:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b330:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b332:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800b334:	f7f6 f83a 	bl	80013ac <HAL_I2C_Init>
 800b338:	b900      	cbnz	r0, 800b33c <MX_I2C1_Init+0x28>
 800b33a:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 800b33c:	f000 f9c8 	bl	800b6d0 <Error_Handler>
  }

}
 800b340:	e7fb      	b.n	800b33a <MX_I2C1_Init+0x26>
 800b342:	bf00      	nop
 800b344:	2000ac30 	.word	0x2000ac30
 800b348:	40005400 	.word	0x40005400
 800b34c:	000186a0 	.word	0x000186a0

0800b350 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 800b350:	6802      	ldr	r2, [r0, #0]
 800b352:	4b12      	ldr	r3, [pc, #72]	; (800b39c <HAL_I2C_MspInit+0x4c>)
 800b354:	429a      	cmp	r2, r3
 800b356:	d000      	beq.n	800b35a <HAL_I2C_MspInit+0xa>
 800b358:	4770      	bx	lr
{
 800b35a:	b500      	push	{lr}
 800b35c:	b087      	sub	sp, #28
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b35e:	23c0      	movs	r3, #192	; 0xc0
 800b360:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b362:	2312      	movs	r3, #18
 800b364:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b366:	2301      	movs	r3, #1
 800b368:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b36a:	2303      	movs	r3, #3
 800b36c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b36e:	2304      	movs	r3, #4
 800b370:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b372:	eb0d 0103 	add.w	r1, sp, r3
 800b376:	480a      	ldr	r0, [pc, #40]	; (800b3a0 <HAL_I2C_MspInit+0x50>)
 800b378:	f7f5 ff20 	bl	80011bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b37c:	2300      	movs	r3, #0
 800b37e:	9300      	str	r3, [sp, #0]
 800b380:	4b08      	ldr	r3, [pc, #32]	; (800b3a4 <HAL_I2C_MspInit+0x54>)
 800b382:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b384:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800b388:	641a      	str	r2, [r3, #64]	; 0x40
 800b38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b38c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b390:	9300      	str	r3, [sp, #0]
 800b392:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800b394:	b007      	add	sp, #28
 800b396:	f85d fb04 	ldr.w	pc, [sp], #4
 800b39a:	bf00      	nop
 800b39c:	40005400 	.word	0x40005400
 800b3a0:	40020400 	.word	0x40020400
 800b3a4:	40023800 	.word	0x40023800

0800b3a8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3aa:	b08b      	sub	sp, #44	; 0x2c
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800b3ac:	4f38      	ldr	r7, [pc, #224]	; (800b490 <MX_LWIP_Init+0xe8>)
 800b3ae:	20c0      	movs	r0, #192	; 0xc0
 800b3b0:	7038      	strb	r0, [r7, #0]
  IP_ADDRESS[1] = 168;
 800b3b2:	21a8      	movs	r1, #168	; 0xa8
 800b3b4:	7079      	strb	r1, [r7, #1]
  IP_ADDRESS[2] = 1;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	70bb      	strb	r3, [r7, #2]
  IP_ADDRESS[3] = 147;
 800b3ba:	2293      	movs	r2, #147	; 0x93
 800b3bc:	70fa      	strb	r2, [r7, #3]
  NETMASK_ADDRESS[0] = 255;
 800b3be:	4e35      	ldr	r6, [pc, #212]	; (800b494 <MX_LWIP_Init+0xec>)
 800b3c0:	22ff      	movs	r2, #255	; 0xff
 800b3c2:	7032      	strb	r2, [r6, #0]
  NETMASK_ADDRESS[1] = 255;
 800b3c4:	7072      	strb	r2, [r6, #1]
  NETMASK_ADDRESS[2] = 255;
 800b3c6:	70b2      	strb	r2, [r6, #2]
  NETMASK_ADDRESS[3] = 0;
 800b3c8:	2400      	movs	r4, #0
 800b3ca:	70f4      	strb	r4, [r6, #3]
  GATEWAY_ADDRESS[0] = 192;
 800b3cc:	4d32      	ldr	r5, [pc, #200]	; (800b498 <MX_LWIP_Init+0xf0>)
 800b3ce:	7028      	strb	r0, [r5, #0]
  GATEWAY_ADDRESS[1] = 168;
 800b3d0:	7069      	strb	r1, [r5, #1]
  GATEWAY_ADDRESS[2] = 1;
 800b3d2:	70ab      	strb	r3, [r5, #2]
  GATEWAY_ADDRESS[3] = 1;
 800b3d4:	70eb      	strb	r3, [r5, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800b3d6:	4621      	mov	r1, r4
 800b3d8:	4620      	mov	r0, r4
 800b3da:	f7fa fa61 	bl	80058a0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b3de:	78fa      	ldrb	r2, [r7, #3]
 800b3e0:	78bb      	ldrb	r3, [r7, #2]
 800b3e2:	041b      	lsls	r3, r3, #16
 800b3e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b3e8:	787a      	ldrb	r2, [r7, #1]
 800b3ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b3ee:	783a      	ldrb	r2, [r7, #0]
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	492a      	ldr	r1, [pc, #168]	; (800b49c <MX_LWIP_Init+0xf4>)
 800b3f4:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b3f6:	78f2      	ldrb	r2, [r6, #3]
 800b3f8:	78b3      	ldrb	r3, [r6, #2]
 800b3fa:	041b      	lsls	r3, r3, #16
 800b3fc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b400:	7872      	ldrb	r2, [r6, #1]
 800b402:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b406:	7832      	ldrb	r2, [r6, #0]
 800b408:	4313      	orrs	r3, r2
 800b40a:	4a25      	ldr	r2, [pc, #148]	; (800b4a0 <MX_LWIP_Init+0xf8>)
 800b40c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b40e:	78eb      	ldrb	r3, [r5, #3]
 800b410:	78a8      	ldrb	r0, [r5, #2]
 800b412:	0400      	lsls	r0, r0, #16
 800b414:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800b418:	786b      	ldrb	r3, [r5, #1]
 800b41a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800b41e:	782b      	ldrb	r3, [r5, #0]
 800b420:	4318      	orrs	r0, r3
 800b422:	4b20      	ldr	r3, [pc, #128]	; (800b4a4 <MX_LWIP_Init+0xfc>)
 800b424:	6018      	str	r0, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800b426:	4d20      	ldr	r5, [pc, #128]	; (800b4a8 <MX_LWIP_Init+0x100>)
 800b428:	4820      	ldr	r0, [pc, #128]	; (800b4ac <MX_LWIP_Init+0x104>)
 800b42a:	9002      	str	r0, [sp, #8]
 800b42c:	4820      	ldr	r0, [pc, #128]	; (800b4b0 <MX_LWIP_Init+0x108>)
 800b42e:	9001      	str	r0, [sp, #4]
 800b430:	9400      	str	r4, [sp, #0]
 800b432:	4628      	mov	r0, r5
 800b434:	f7fb fb88 	bl	8006b48 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b438:	4628      	mov	r0, r5
 800b43a:	f7fb fbad 	bl	8006b98 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800b43e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800b442:	f013 0f04 	tst.w	r3, #4
 800b446:	d11f      	bne.n	800b488 <MX_LWIP_Init+0xe0>
    netif_set_up(&gnetif);
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800b448:	4817      	ldr	r0, [pc, #92]	; (800b4a8 <MX_LWIP_Init+0x100>)
 800b44a:	f7fb fbbd 	bl	8006bc8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800b44e:	4c16      	ldr	r4, [pc, #88]	; (800b4a8 <MX_LWIP_Init+0x100>)
 800b450:	4918      	ldr	r1, [pc, #96]	; (800b4b4 <MX_LWIP_Init+0x10c>)
 800b452:	4620      	mov	r0, r4
 800b454:	f7fb fbef 	bl	8006c36 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 800b458:	a80a      	add	r0, sp, #40	; 0x28
 800b45a:	2300      	movs	r3, #0
 800b45c:	f840 3d04 	str.w	r3, [r0, #-4]!
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800b460:	2101      	movs	r1, #1
 800b462:	f7f7 fb34 	bl	8002ace <osSemaphoreCreate>
 800b466:	4b14      	ldr	r3, [pc, #80]	; (800b4b8 <MX_LWIP_Init+0x110>)
 800b468:	6018      	str	r0, [r3, #0]

  link_arg.netif = &gnetif;
 800b46a:	4e14      	ldr	r6, [pc, #80]	; (800b4bc <MX_LWIP_Init+0x114>)
 800b46c:	6034      	str	r4, [r6, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800b46e:	6070      	str	r0, [r6, #4]
  /* Create the Ethernet link handler thread */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800b470:	ac04      	add	r4, sp, #16
 800b472:	4d13      	ldr	r5, [pc, #76]	; (800b4c0 <MX_LWIP_Init+0x118>)
 800b474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b478:	682b      	ldr	r3, [r5, #0]
 800b47a:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(LinkThr), &link_arg);
 800b47c:	4631      	mov	r1, r6
 800b47e:	a804      	add	r0, sp, #16
 800b480:	f7f7 fb08 	bl	8002a94 <osThreadCreate>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800b484:	b00b      	add	sp, #44	; 0x2c
 800b486:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netif_set_up(&gnetif);
 800b488:	4628      	mov	r0, r5
 800b48a:	f7fb fb8b 	bl	8006ba4 <netif_set_up>
 800b48e:	e7de      	b.n	800b44e <MX_LWIP_Init+0xa6>
 800b490:	2000accc 	.word	0x2000accc
 800b494:	2000acc8 	.word	0x2000acc8
 800b498:	2000ac8c 	.word	0x2000ac8c
 800b49c:	2000acc4 	.word	0x2000acc4
 800b4a0:	2000acd0 	.word	0x2000acd0
 800b4a4:	2000acd4 	.word	0x2000acd4
 800b4a8:	2000ac90 	.word	0x2000ac90
 800b4ac:	0800a911 	.word	0x0800a911
 800b4b0:	0800afa5 	.word	0x0800afa5
 800b4b4:	0800b041 	.word	0x0800b041
 800b4b8:	20003ff8 	.word	0x20003ff8
 800b4bc:	2000ac84 	.word	0x2000ac84
 800b4c0:	0800cfe8 	.word	0x0800cfe8

0800b4c4 <tcp_client_thread>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void tcp_client_thread(void const * argument)
{
 800b4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4c6:	b0a9      	sub	sp, #164	; 0xa4
	int optval = 1;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	9327      	str	r3, [sp, #156]	; 0x9c
	int sock, newconn, size;
	int i32Retry = 3;
  struct sockaddr_in  remotehost;
	char  buf[128]="This is a tcp client connection.\r\n";
 800b4cc:	ac03      	add	r4, sp, #12
 800b4ce:	4d67      	ldr	r5, [pc, #412]	; (800b66c <tcp_client_thread+0x1a8>)
 800b4d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b4d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b4d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b4d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b4d8:	682b      	ldr	r3, [r5, #0]
 800b4da:	f824 3b02 	strh.w	r3, [r4], #2
 800b4de:	0c1b      	lsrs	r3, r3, #16
 800b4e0:	7023      	strb	r3, [r4, #0]
 800b4e2:	225d      	movs	r2, #93	; 0x5d
 800b4e4:	2100      	movs	r1, #0
 800b4e6:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
 800b4ea:	f000 fbd3 	bl	800bc94 <memset>
	LWIP_UNUSED_ARG(argument);

	printf("tcp client work.\r\n");
 800b4ee:	4860      	ldr	r0, [pc, #384]	; (800b670 <tcp_client_thread+0x1ac>)
 800b4f0:	f000 fc4c 	bl	800bd8c <puts>
	int i32Retry = 3;
 800b4f4:	2403      	movs	r4, #3
	
 /* create a TCP socket */
  while ((sock = socket(PF_INET, SOCK_STREAM, IP_PROTO_TCP)) < 0 && i32Retry>0) 
 800b4f6:	e00e      	b.n	800b516 <tcp_client_thread+0x52>
  {
		i32Retry--;
 800b4f8:	3c01      	subs	r4, #1
    printf("can not create socket,errno=%d(%s), retry number = %d\r\n",errno,strerror(errno),i32Retry);
 800b4fa:	f000 fb87 	bl	800bc0c <__errno>
 800b4fe:	6805      	ldr	r5, [r0, #0]
 800b500:	f000 fb84 	bl	800bc0c <__errno>
 800b504:	6800      	ldr	r0, [r0, #0]
 800b506:	f000 fe2f 	bl	800c168 <strerror>
 800b50a:	4623      	mov	r3, r4
 800b50c:	4602      	mov	r2, r0
 800b50e:	4629      	mov	r1, r5
 800b510:	4858      	ldr	r0, [pc, #352]	; (800b674 <tcp_client_thread+0x1b0>)
 800b512:	f000 fbc7 	bl	800bca4 <iprintf>
  while ((sock = socket(PF_INET, SOCK_STREAM, IP_PROTO_TCP)) < 0 && i32Retry>0) 
 800b516:	2206      	movs	r2, #6
 800b518:	2101      	movs	r1, #1
 800b51a:	2002      	movs	r0, #2
 800b51c:	f7fa f88a 	bl	8005634 <lwip_socket>
 800b520:	1e06      	subs	r6, r0, #0
 800b522:	da01      	bge.n	800b528 <tcp_client_thread+0x64>
 800b524:	2c00      	cmp	r4, #0
 800b526:	dce7      	bgt.n	800b4f8 <tcp_client_thread+0x34>
    
  }
	if(i32Retry<=0) 	vTaskDelete( TcpClientHandle );
 800b528:	2c00      	cmp	r4, #0
 800b52a:	dd32      	ble.n	800b592 <tcp_client_thread+0xce>
  else 						i32Retry=3;
 800b52c:	2403      	movs	r4, #3
	
	lwip_setsockopt(sock,SOL_SOCKET,SO_KEEPALIVE,&optval,sizeof(optval));
 800b52e:	2304      	movs	r3, #4
 800b530:	9300      	str	r3, [sp, #0]
 800b532:	ab27      	add	r3, sp, #156	; 0x9c
 800b534:	2208      	movs	r2, #8
 800b536:	f640 71ff 	movw	r1, #4095	; 0xfff
 800b53a:	4630      	mov	r0, r6
 800b53c:	f7fa f8c4 	bl	80056c8 <lwip_setsockopt>
  /* bind to port 80 at any interface */
	remotehost.sin_len = sizeof(remotehost);
 800b540:	2310      	movs	r3, #16
 800b542:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
  remotehost.sin_family = AF_INET;
 800b546:	2302      	movs	r3, #2
 800b548:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
  remotehost.sin_port = htons(6800);
 800b54c:	f641 2090 	movw	r0, #6800	; 0x1a90
 800b550:	f7fa f9ca 	bl	80058e8 <lwip_htons>
 800b554:	f8ad 008e 	strh.w	r0, [sp, #142]	; 0x8e
  remotehost.sin_addr.s_addr = inet_addr("192.168.1.102");
 800b558:	4847      	ldr	r0, [pc, #284]	; (800b678 <tcp_client_thread+0x1b4>)
 800b55a:	f7fa fd1a 	bl	8005f92 <ipaddr_addr>
 800b55e:	9024      	str	r0, [sp, #144]	; 0x90

  while (connect(sock, (struct sockaddr *)&remotehost, sizeof (remotehost)) < 0 && i32Retry>0)
 800b560:	2210      	movs	r2, #16
 800b562:	a923      	add	r1, sp, #140	; 0x8c
 800b564:	4630      	mov	r0, r6
 800b566:	f7f9 ff61 	bl	800542c <lwip_connect>
 800b56a:	2800      	cmp	r0, #0
 800b56c:	da16      	bge.n	800b59c <tcp_client_thread+0xd8>
 800b56e:	2c00      	cmp	r4, #0
 800b570:	dd14      	ble.n	800b59c <tcp_client_thread+0xd8>
  {
    printf("can not connect to server,errno=%d(%s),retry number = %d\r\n",errno,strerror(errno),i32Retry);
 800b572:	f000 fb4b 	bl	800bc0c <__errno>
 800b576:	6805      	ldr	r5, [r0, #0]
 800b578:	f000 fb48 	bl	800bc0c <__errno>
 800b57c:	6800      	ldr	r0, [r0, #0]
 800b57e:	f000 fdf3 	bl	800c168 <strerror>
 800b582:	4623      	mov	r3, r4
 800b584:	4602      	mov	r2, r0
 800b586:	4629      	mov	r1, r5
 800b588:	483c      	ldr	r0, [pc, #240]	; (800b67c <tcp_client_thread+0x1b8>)
 800b58a:	f000 fb8b 	bl	800bca4 <iprintf>
		i32Retry--;
 800b58e:	3c01      	subs	r4, #1
 800b590:	e7e6      	b.n	800b560 <tcp_client_thread+0x9c>
	if(i32Retry<=0) 	vTaskDelete( TcpClientHandle );
 800b592:	4b3b      	ldr	r3, [pc, #236]	; (800b680 <tcp_client_thread+0x1bc>)
 800b594:	6818      	ldr	r0, [r3, #0]
 800b596:	f7f8 fb21 	bl	8003bdc <vTaskDelete>
 800b59a:	e7c8      	b.n	800b52e <tcp_client_thread+0x6a>
  }
	if(i32Retry<=0){
 800b59c:	2c00      	cmp	r4, #0
 800b59e:	dd0a      	ble.n	800b5b6 <tcp_client_thread+0xf2>
		close(sock);    
		vTaskDelete( TcpClientHandle );
	}
  else 	i32Retry=3;
  
  LED_4_ON;
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b5a6:	4837      	ldr	r0, [pc, #220]	; (800b684 <tcp_client_thread+0x1c0>)
 800b5a8:	f7f5 fefa 	bl	80013a0 <HAL_GPIO_WritePin>
  
  size = strlen(buf);
 800b5ac:	a803      	add	r0, sp, #12
 800b5ae:	f7f4 fe1f 	bl	80001f0 <strlen>
 800b5b2:	4607      	mov	r7, r0
 800b5b4:	e021      	b.n	800b5fa <tcp_client_thread+0x136>
		close(sock);    
 800b5b6:	4630      	mov	r0, r6
 800b5b8:	f7f9 ff06 	bl	80053c8 <lwip_close>
		vTaskDelete( TcpClientHandle );
 800b5bc:	4b30      	ldr	r3, [pc, #192]	; (800b680 <tcp_client_thread+0x1bc>)
 800b5be:	6818      	ldr	r0, [r3, #0]
 800b5c0:	f7f8 fb0c 	bl	8003bdc <vTaskDelete>
 800b5c4:	e7ec      	b.n	800b5a0 <tcp_client_thread+0xdc>
			LED_RED;
			printf("errno=%d (%s)\r\n",errno,strerror(errno));
		}
		else
		{
			LED_GREEN;
 800b5c6:	4c30      	ldr	r4, [pc, #192]	; (800b688 <tcp_client_thread+0x1c4>)
 800b5c8:	2201      	movs	r2, #1
 800b5ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	f7f5 fee6 	bl	80013a0 <HAL_GPIO_WritePin>
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b5da:	4620      	mov	r0, r4
 800b5dc:	f7f5 fee0 	bl	80013a0 <HAL_GPIO_WritePin>
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b5e6:	4620      	mov	r0, r4
 800b5e8:	f7f5 feda 	bl	80013a0 <HAL_GPIO_WritePin>
			printf("Data sent!\r\n");
 800b5ec:	4827      	ldr	r0, [pc, #156]	; (800b68c <tcp_client_thread+0x1c8>)
 800b5ee:	f000 fbcd 	bl	800bd8c <puts>
		}
		vTaskDelay(1000);
 800b5f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b5f6:	f7f8 fcad 	bl	8003f54 <vTaskDelay>
		printf("LocalTime = %u, xTickCount = %u, uwTick = %u\r\n", LocalTime,xTaskGetTickCount(), HAL_GetTick());
 800b5fa:	4b25      	ldr	r3, [pc, #148]	; (800b690 <tcp_client_thread+0x1cc>)
 800b5fc:	681c      	ldr	r4, [r3, #0]
 800b5fe:	f7f8 fb95 	bl	8003d2c <xTaskGetTickCount>
 800b602:	4605      	mov	r5, r0
 800b604:	f7f4 fff6 	bl	80005f4 <HAL_GetTick>
 800b608:	4603      	mov	r3, r0
 800b60a:	462a      	mov	r2, r5
 800b60c:	4621      	mov	r1, r4
 800b60e:	4821      	ldr	r0, [pc, #132]	; (800b694 <tcp_client_thread+0x1d0>)
 800b610:	f000 fb48 	bl	800bca4 <iprintf>
    if(size != send(sock, buf, (size_t)strlen(buf),0))
 800b614:	a803      	add	r0, sp, #12
 800b616:	f7f4 fdeb 	bl	80001f0 <strlen>
 800b61a:	2300      	movs	r3, #0
 800b61c:	4602      	mov	r2, r0
 800b61e:	a903      	add	r1, sp, #12
 800b620:	4630      	mov	r0, r6
 800b622:	f7f9 ffb7 	bl	8005594 <lwip_send>
 800b626:	4287      	cmp	r7, r0
 800b628:	d0cd      	beq.n	800b5c6 <tcp_client_thread+0x102>
			LED_RED;
 800b62a:	4c17      	ldr	r4, [pc, #92]	; (800b688 <tcp_client_thread+0x1c4>)
 800b62c:	2200      	movs	r2, #0
 800b62e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b632:	4620      	mov	r0, r4
 800b634:	f7f5 feb4 	bl	80013a0 <HAL_GPIO_WritePin>
 800b638:	2201      	movs	r2, #1
 800b63a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b63e:	4620      	mov	r0, r4
 800b640:	f7f5 feae 	bl	80013a0 <HAL_GPIO_WritePin>
 800b644:	2201      	movs	r2, #1
 800b646:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b64a:	4620      	mov	r0, r4
 800b64c:	f7f5 fea8 	bl	80013a0 <HAL_GPIO_WritePin>
			printf("errno=%d (%s)\r\n",errno,strerror(errno));
 800b650:	f000 fadc 	bl	800bc0c <__errno>
 800b654:	6804      	ldr	r4, [r0, #0]
 800b656:	f000 fad9 	bl	800bc0c <__errno>
 800b65a:	6800      	ldr	r0, [r0, #0]
 800b65c:	f000 fd84 	bl	800c168 <strerror>
 800b660:	4602      	mov	r2, r0
 800b662:	4621      	mov	r1, r4
 800b664:	480c      	ldr	r0, [pc, #48]	; (800b698 <tcp_client_thread+0x1d4>)
 800b666:	f000 fb1d 	bl	800bca4 <iprintf>
 800b66a:	e7c2      	b.n	800b5f2 <tcp_client_thread+0x12e>
 800b66c:	0800cffc 	.word	0x0800cffc
 800b670:	0800d220 	.word	0x0800d220
 800b674:	0800d234 	.word	0x0800d234
 800b678:	0800d26c 	.word	0x0800d26c
 800b67c:	0800d27c 	.word	0x0800d27c
 800b680:	20004000 	.word	0x20004000
 800b684:	40020c00 	.word	0x40020c00
 800b688:	40021c00 	.word	0x40021c00
 800b68c:	0800d2f8 	.word	0x0800d2f8
 800b690:	20003ffc 	.word	0x20003ffc
 800b694:	0800d2b8 	.word	0x0800d2b8
 800b698:	0800d2e8 	.word	0x0800d2e8

0800b69c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b69c:	b510      	push	{r4, lr}
 800b69e:	4604      	mov	r4, r0
/* USER CODE BEGIN Callback 0 */
	
/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800b6a0:	6802      	ldr	r2, [r0, #0]
 800b6a2:	4b08      	ldr	r3, [pc, #32]	; (800b6c4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d004      	beq.n	800b6b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
  }		
/* USER CODE BEGIN Callback 1 */
	if(htim->Instance == TIM3)
 800b6a8:	6822      	ldr	r2, [r4, #0]
 800b6aa:	4b07      	ldr	r3, [pc, #28]	; (800b6c8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d003      	beq.n	800b6b8 <HAL_TIM_PeriodElapsedCallback+0x1c>
 800b6b0:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 800b6b2:	f7f4 ff97 	bl	80005e4 <HAL_IncTick>
 800b6b6:	e7f7      	b.n	800b6a8 <HAL_TIM_PeriodElapsedCallback+0xc>
	{
		LocalTime += 10;
 800b6b8:	4a04      	ldr	r2, [pc, #16]	; (800b6cc <HAL_TIM_PeriodElapsedCallback+0x30>)
 800b6ba:	6813      	ldr	r3, [r2, #0]
 800b6bc:	330a      	adds	r3, #10
 800b6be:	6013      	str	r3, [r2, #0]
//		{
//			LwIP_Periodic_Handle(LocalTime);
//		}
	}
/* USER CODE END Callback 1 */
}
 800b6c0:	e7f6      	b.n	800b6b0 <HAL_TIM_PeriodElapsedCallback+0x14>
 800b6c2:	bf00      	nop
 800b6c4:	40010000 	.word	0x40010000
 800b6c8:	40000400 	.word	0x40000400
 800b6cc:	20003ffc 	.word	0x20003ffc

0800b6d0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 800b6d0:	e7fe      	b.n	800b6d0 <Error_Handler>
	...

0800b6d4 <SystemClock_Config>:
{
 800b6d4:	b500      	push	{lr}
 800b6d6:	b0a1      	sub	sp, #132	; 0x84
  __HAL_RCC_PWR_CLK_ENABLE();
 800b6d8:	2100      	movs	r1, #0
 800b6da:	9101      	str	r1, [sp, #4]
 800b6dc:	4b32      	ldr	r3, [pc, #200]	; (800b7a8 <SystemClock_Config+0xd4>)
 800b6de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b6e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b6e4:	641a      	str	r2, [r3, #64]	; 0x40
 800b6e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6ec:	9301      	str	r3, [sp, #4]
 800b6ee:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b6f0:	9102      	str	r1, [sp, #8]
 800b6f2:	4b2e      	ldr	r3, [pc, #184]	; (800b7ac <SystemClock_Config+0xd8>)
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800b6fa:	601a      	str	r2, [r3, #0]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b702:	9302      	str	r3, [sp, #8]
 800b704:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800b706:	2305      	movs	r3, #5
 800b708:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b70a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b70e:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800b710:	2301      	movs	r3, #1
 800b712:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b714:	2302      	movs	r3, #2
 800b716:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b718:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800b71c:	921b      	str	r2, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800b71e:	220f      	movs	r2, #15
 800b720:	921c      	str	r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 216;
 800b722:	22d8      	movs	r2, #216	; 0xd8
 800b724:	921d      	str	r2, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800b726:	931e      	str	r3, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800b728:	2304      	movs	r3, #4
 800b72a:	931f      	str	r3, [sp, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b72c:	a814      	add	r0, sp, #80	; 0x50
 800b72e:	f7f5 ff1b 	bl	8001568 <HAL_RCC_OscConfig>
 800b732:	bb80      	cbnz	r0, 800b796 <SystemClock_Config+0xc2>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800b734:	f7f5 fec8 	bl	80014c8 <HAL_PWREx_EnableOverDrive>
 800b738:	bb78      	cbnz	r0, 800b79a <SystemClock_Config+0xc6>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b73a:	230f      	movs	r3, #15
 800b73c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b73e:	2302      	movs	r3, #2
 800b740:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b742:	2300      	movs	r3, #0
 800b744:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800b746:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800b74a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800b74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b750:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800b752:	2105      	movs	r1, #5
 800b754:	a80f      	add	r0, sp, #60	; 0x3c
 800b756:	f7f6 f943 	bl	80019e0 <HAL_RCC_ClockConfig>
 800b75a:	bb00      	cbnz	r0, 800b79e <SystemClock_Config+0xca>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b75c:	2320      	movs	r3, #32
 800b75e:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800b760:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b764:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b766:	a803      	add	r0, sp, #12
 800b768:	f7f6 fa58 	bl	8001c1c <HAL_RCCEx_PeriphCLKConfig>
 800b76c:	b9c8      	cbnz	r0, 800b7a2 <SystemClock_Config+0xce>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800b76e:	f7f6 fa05 	bl	8001b7c <HAL_RCC_GetHCLKFreq>
 800b772:	4b0f      	ldr	r3, [pc, #60]	; (800b7b0 <SystemClock_Config+0xdc>)
 800b774:	fba3 3000 	umull	r3, r0, r3, r0
 800b778:	0980      	lsrs	r0, r0, #6
 800b77a:	f7f4 ff9f 	bl	80006bc <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800b77e:	2004      	movs	r0, #4
 800b780:	f7f4 ffb2 	bl	80006e8 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800b784:	2200      	movs	r2, #0
 800b786:	210f      	movs	r1, #15
 800b788:	f04f 30ff 	mov.w	r0, #4294967295
 800b78c:	f7f4 ff58 	bl	8000640 <HAL_NVIC_SetPriority>
}
 800b790:	b021      	add	sp, #132	; 0x84
 800b792:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800b796:	f7ff ff9b 	bl	800b6d0 <Error_Handler>
    Error_Handler();
 800b79a:	f7ff ff99 	bl	800b6d0 <Error_Handler>
    Error_Handler();
 800b79e:	f7ff ff97 	bl	800b6d0 <Error_Handler>
    Error_Handler();
 800b7a2:	f7ff ff95 	bl	800b6d0 <Error_Handler>
 800b7a6:	bf00      	nop
 800b7a8:	40023800 	.word	0x40023800
 800b7ac:	40007000 	.word	0x40007000
 800b7b0:	10624dd3 	.word	0x10624dd3

0800b7b4 <main>:
{
 800b7b4:	b500      	push	{lr}
 800b7b6:	b087      	sub	sp, #28
  HAL_Init();
 800b7b8:	f7f4 fefa 	bl	80005b0 <HAL_Init>
  SystemClock_Config();
 800b7bc:	f7ff ff8a 	bl	800b6d4 <SystemClock_Config>
  MX_GPIO_Init();
 800b7c0:	f7ff fca2 	bl	800b108 <MX_GPIO_Init>
  MX_RTC_Init();
 800b7c4:	f000 f830 	bl	800b828 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800b7c8:	f000 f9b0 	bl	800bb2c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800b7cc:	f7ff fda2 	bl	800b314 <MX_I2C1_Init>
  MX_TIM3_Init();
 800b7d0:	f000 f956 	bl	800ba80 <MX_TIM3_Init>
	MX_LWIP_Init();
 800b7d4:	f7ff fde8 	bl	800b3a8 <MX_LWIP_Init>
	osSemaphoreDef(NetTimerSEM);
 800b7d8:	2600      	movs	r6, #0
 800b7da:	a806      	add	r0, sp, #24
 800b7dc:	f840 6d04 	str.w	r6, [r0, #-4]!
  s_NetTimerSemaphore = osSemaphoreCreate(osSemaphore(NetTimerSEM) , 1 );
 800b7e0:	2101      	movs	r1, #1
 800b7e2:	f7f7 f974 	bl	8002ace <osSemaphoreCreate>
 800b7e6:	4b0c      	ldr	r3, [pc, #48]	; (800b818 <main+0x64>)
 800b7e8:	6018      	str	r0, [r3, #0]
	vTaskDelay(3000);
 800b7ea:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800b7ee:	f7f8 fbb1 	bl	8003f54 <vTaskDelay>
	osThreadDef(client_thread, tcp_client_thread, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE*2);
 800b7f2:	466c      	mov	r4, sp
 800b7f4:	4d09      	ldr	r5, [pc, #36]	; (800b81c <main+0x68>)
 800b7f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b7f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b7fa:	682b      	ldr	r3, [r5, #0]
 800b7fc:	6023      	str	r3, [r4, #0]
  TcpClientHandle = osThreadCreate(osThread(client_thread), NULL);
 800b7fe:	4631      	mov	r1, r6
 800b800:	4668      	mov	r0, sp
 800b802:	f7f7 f947 	bl	8002a94 <osThreadCreate>
 800b806:	4b06      	ldr	r3, [pc, #24]	; (800b820 <main+0x6c>)
 800b808:	6018      	str	r0, [r3, #0]
	printf("Schedular Start!\r\n");
 800b80a:	4806      	ldr	r0, [pc, #24]	; (800b824 <main+0x70>)
 800b80c:	f000 fabe 	bl	800bd8c <puts>
  osKernelStart();
 800b810:	f7f7 f93b 	bl	8002a8a <osKernelStart>
 800b814:	e7fe      	b.n	800b814 <main+0x60>
 800b816:	bf00      	nop
 800b818:	20004004 	.word	0x20004004
 800b81c:	0800d07c 	.word	0x0800d07c
 800b820:	20004000 	.word	0x20004000
 800b824:	0800d1fc 	.word	0x0800d1fc

0800b828 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800b828:	b500      	push	{lr}
 800b82a:	b087      	sub	sp, #28
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;

    /**Initialize RTC Only 
    */
  hrtc.Instance = RTC;
 800b82c:	481c      	ldr	r0, [pc, #112]	; (800b8a0 <MX_RTC_Init+0x78>)
 800b82e:	4b1d      	ldr	r3, [pc, #116]	; (800b8a4 <MX_RTC_Init+0x7c>)
 800b830:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800b832:	2300      	movs	r3, #0
 800b834:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 800b836:	227f      	movs	r2, #127	; 0x7f
 800b838:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 800b83a:	22ff      	movs	r2, #255	; 0xff
 800b83c:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800b83e:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800b840:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800b842:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800b844:	f7f6 fb9d 	bl	8001f82 <HAL_RTC_Init>
 800b848:	bb00      	cbnz	r0, 800b88c <MX_RTC_Init+0x64>
    Error_Handler();
  }

    /**Initialize RTC and set the Time and Date 
    */
  sTime.Hours = 0x0;
 800b84a:	2300      	movs	r3, #0
 800b84c:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 800b850:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 800b854:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800b858:	9304      	str	r3, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800b85a:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800b85c:	2201      	movs	r2, #1
 800b85e:	a901      	add	r1, sp, #4
 800b860:	480f      	ldr	r0, [pc, #60]	; (800b8a0 <MX_RTC_Init+0x78>)
 800b862:	f7f6 fbeb 	bl	800203c <HAL_RTC_SetTime>
 800b866:	b9a0      	cbnz	r0, 800b892 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800b868:	2201      	movs	r2, #1
 800b86a:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 800b86e:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 800b872:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 800b876:	2300      	movs	r3, #0
 800b878:	f88d 3003 	strb.w	r3, [sp, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800b87c:	4669      	mov	r1, sp
 800b87e:	4808      	ldr	r0, [pc, #32]	; (800b8a0 <MX_RTC_Init+0x78>)
 800b880:	f7f6 fc5b 	bl	800213a <HAL_RTC_SetDate>
 800b884:	b940      	cbnz	r0, 800b898 <MX_RTC_Init+0x70>
  {
    Error_Handler();
  }

}
 800b886:	b007      	add	sp, #28
 800b888:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800b88c:	f7ff ff20 	bl	800b6d0 <Error_Handler>
 800b890:	e7db      	b.n	800b84a <MX_RTC_Init+0x22>
    Error_Handler();
 800b892:	f7ff ff1d 	bl	800b6d0 <Error_Handler>
 800b896:	e7e7      	b.n	800b868 <MX_RTC_Init+0x40>
    Error_Handler();
 800b898:	f7ff ff1a 	bl	800b6d0 <Error_Handler>
}
 800b89c:	e7f3      	b.n	800b886 <MX_RTC_Init+0x5e>
 800b89e:	bf00      	nop
 800b8a0:	2000acd8 	.word	0x2000acd8
 800b8a4:	40002800 	.word	0x40002800

0800b8a8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 800b8a8:	6802      	ldr	r2, [r0, #0]
 800b8aa:	4b04      	ldr	r3, [pc, #16]	; (800b8bc <HAL_RTC_MspInit+0x14>)
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d000      	beq.n	800b8b2 <HAL_RTC_MspInit+0xa>
 800b8b0:	4770      	bx	lr
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	4b02      	ldr	r3, [pc, #8]	; (800b8c0 <HAL_RTC_MspInit+0x18>)
 800b8b6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800b8b8:	e7fa      	b.n	800b8b0 <HAL_RTC_MspInit+0x8>
 800b8ba:	bf00      	nop
 800b8bc:	40002800 	.word	0x40002800
 800b8c0:	42470e3c 	.word	0x42470e3c

0800b8c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b8c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b8c6:	2003      	movs	r0, #3
 800b8c8:	f7f4 fea8 	bl	800061c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	4611      	mov	r1, r2
 800b8d0:	f06f 000b 	mvn.w	r0, #11
 800b8d4:	f7f4 feb4 	bl	8000640 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800b8d8:	2200      	movs	r2, #0
 800b8da:	4611      	mov	r1, r2
 800b8dc:	f06f 000a 	mvn.w	r0, #10
 800b8e0:	f7f4 feae 	bl	8000640 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	4611      	mov	r1, r2
 800b8e8:	f06f 0009 	mvn.w	r0, #9
 800b8ec:	f7f4 fea8 	bl	8000640 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	4611      	mov	r1, r2
 800b8f4:	f06f 0004 	mvn.w	r0, #4
 800b8f8:	f7f4 fea2 	bl	8000640 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	4611      	mov	r1, r2
 800b900:	f06f 0003 	mvn.w	r0, #3
 800b904:	f7f4 fe9c 	bl	8000640 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b908:	2200      	movs	r2, #0
 800b90a:	210f      	movs	r1, #15
 800b90c:	f06f 0001 	mvn.w	r0, #1
 800b910:	f7f4 fe96 	bl	8000640 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b914:	2200      	movs	r2, #0
 800b916:	4611      	mov	r1, r2
 800b918:	f04f 30ff 	mov.w	r0, #4294967295
 800b91c:	f7f4 fe90 	bl	8000640 <HAL_NVIC_SetPriority>
 800b920:	bd08      	pop	{r3, pc}
	...

0800b924 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b924:	b510      	push	{r4, lr}
 800b926:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800b928:	2200      	movs	r2, #0
 800b92a:	4601      	mov	r1, r0
 800b92c:	2019      	movs	r0, #25
 800b92e:	f7f4 fe87 	bl	8000640 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800b932:	2019      	movs	r0, #25
 800b934:	f7f4 feb6 	bl	80006a4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800b938:	2400      	movs	r4, #0
 800b93a:	9401      	str	r4, [sp, #4]
 800b93c:	4b14      	ldr	r3, [pc, #80]	; (800b990 <HAL_InitTick+0x6c>)
 800b93e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b940:	f042 0201 	orr.w	r2, r2, #1
 800b944:	645a      	str	r2, [r3, #68]	; 0x44
 800b946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b948:	f003 0301 	and.w	r3, r3, #1
 800b94c:	9301      	str	r3, [sp, #4]
 800b94e:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b950:	a902      	add	r1, sp, #8
 800b952:	a803      	add	r0, sp, #12
 800b954:	f7f6 f944 	bl	8001be0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800b958:	f7f6 f92c 	bl	8001bb4 <HAL_RCC_GetPCLK2Freq>
 800b95c:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800b95e:	480d      	ldr	r0, [pc, #52]	; (800b994 <HAL_InitTick+0x70>)
 800b960:	fba0 2303 	umull	r2, r3, r0, r3
 800b964:	0c9b      	lsrs	r3, r3, #18
 800b966:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800b968:	480b      	ldr	r0, [pc, #44]	; (800b998 <HAL_InitTick+0x74>)
 800b96a:	4a0c      	ldr	r2, [pc, #48]	; (800b99c <HAL_InitTick+0x78>)
 800b96c:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800b96e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b972:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800b974:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 800b976:	6104      	str	r4, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b978:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800b97a:	f7f6 fe65 	bl	8002648 <HAL_TIM_Base_Init>
 800b97e:	b110      	cbz	r0, 800b986 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800b980:	2001      	movs	r0, #1
}
 800b982:	b008      	add	sp, #32
 800b984:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 800b986:	4804      	ldr	r0, [pc, #16]	; (800b998 <HAL_InitTick+0x74>)
 800b988:	f7f6 fc7f 	bl	800228a <HAL_TIM_Base_Start_IT>
 800b98c:	e7f9      	b.n	800b982 <HAL_InitTick+0x5e>
 800b98e:	bf00      	nop
 800b990:	40023800 	.word	0x40023800
 800b994:	431bde83 	.word	0x431bde83
 800b998:	2000acf8 	.word	0x2000acf8
 800b99c:	40010000 	.word	0x40010000

0800b9a0 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 800b9a0:	4770      	bx	lr

0800b9a2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800b9a2:	e7fe      	b.n	800b9a2 <HardFault_Handler>

0800b9a4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800b9a4:	e7fe      	b.n	800b9a4 <MemManage_Handler>

0800b9a6 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800b9a6:	e7fe      	b.n	800b9a6 <BusFault_Handler>

0800b9a8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800b9a8:	e7fe      	b.n	800b9a8 <UsageFault_Handler>

0800b9aa <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800b9aa:	4770      	bx	lr

0800b9ac <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800b9ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 800b9ae:	f7f7 f909 	bl	8002bc4 <osSystickHandler>
 800b9b2:	bd08      	pop	{r3, pc}

0800b9b4 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 800b9b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b9b6:	4802      	ldr	r0, [pc, #8]	; (800b9c0 <TIM1_UP_TIM10_IRQHandler+0xc>)
 800b9b8:	f7f6 fcfb 	bl	80023b2 <HAL_TIM_IRQHandler>
 800b9bc:	bd08      	pop	{r3, pc}
 800b9be:	bf00      	nop
 800b9c0:	2000acf8 	.word	0x2000acf8

0800b9c4 <TIM3_IRQHandler>:

/**
* @brief This function handles TIM3 global interrupt.
*/
void TIM3_IRQHandler(void)
{
 800b9c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800b9c6:	4811      	ldr	r0, [pc, #68]	; (800ba0c <TIM3_IRQHandler+0x48>)
 800b9c8:	f7f6 fcf3 	bl	80023b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  if(LocalTime%1000==0 && Netif_LinkSemaphore!=NULL)
 800b9cc:	4b10      	ldr	r3, [pc, #64]	; (800ba10 <TIM3_IRQHandler+0x4c>)
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	4b10      	ldr	r3, [pc, #64]	; (800ba14 <TIM3_IRQHandler+0x50>)
 800b9d2:	fba3 1302 	umull	r1, r3, r3, r2
 800b9d6:	099b      	lsrs	r3, r3, #6
 800b9d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b9dc:	fb01 2313 	mls	r3, r1, r3, r2
 800b9e0:	b923      	cbnz	r3, 800b9ec <TIM3_IRQHandler+0x28>
 800b9e2:	4b0d      	ldr	r3, [pc, #52]	; (800ba18 <TIM3_IRQHandler+0x54>)
 800b9e4:	6818      	ldr	r0, [r3, #0]
 800b9e6:	b108      	cbz	r0, 800b9ec <TIM3_IRQHandler+0x28>
	{
		  /* Give the semaphore to wakeup LwIP task */
    osSemaphoreRelease( Netif_LinkSemaphore ); 
 800b9e8:	f7f7 f8be 	bl	8002b68 <osSemaphoreRelease>
	
	}
	 if(LocalTime%50==0 && s_NetTimerSemaphore!=NULL)
 800b9ec:	4b08      	ldr	r3, [pc, #32]	; (800ba10 <TIM3_IRQHandler+0x4c>)
 800b9ee:	681a      	ldr	r2, [r3, #0]
 800b9f0:	4b0a      	ldr	r3, [pc, #40]	; (800ba1c <TIM3_IRQHandler+0x58>)
 800b9f2:	fba3 1302 	umull	r1, r3, r3, r2
 800b9f6:	091b      	lsrs	r3, r3, #4
 800b9f8:	2132      	movs	r1, #50	; 0x32
 800b9fa:	fb01 2313 	mls	r3, r1, r3, r2
 800b9fe:	b923      	cbnz	r3, 800ba0a <TIM3_IRQHandler+0x46>
 800ba00:	4b07      	ldr	r3, [pc, #28]	; (800ba20 <TIM3_IRQHandler+0x5c>)
 800ba02:	6818      	ldr	r0, [r3, #0]
 800ba04:	b108      	cbz	r0, 800ba0a <TIM3_IRQHandler+0x46>
	{
		  /* Give the semaphore to wakeup LwIP task */
    osSemaphoreRelease( s_NetTimerSemaphore ); 
 800ba06:	f7f7 f8af 	bl	8002b68 <osSemaphoreRelease>
 800ba0a:	bd08      	pop	{r3, pc}
 800ba0c:	2000ad34 	.word	0x2000ad34
 800ba10:	20003ffc 	.word	0x20003ffc
 800ba14:	10624dd3 	.word	0x10624dd3
 800ba18:	20003ff8 	.word	0x20003ff8
 800ba1c:	51eb851f 	.word	0x51eb851f
 800ba20:	20004004 	.word	0x20004004

0800ba24 <ETH_IRQHandler>:

/**
* @brief This function handles Ethernet global interrupt.
*/
void ETH_IRQHandler(void)
{
 800ba24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800ba26:	4802      	ldr	r0, [pc, #8]	; (800ba30 <ETH_IRQHandler+0xc>)
 800ba28:	f7f5 f904 	bl	8000c34 <HAL_ETH_IRQHandler>
 800ba2c:	bd08      	pop	{r3, pc}
 800ba2e:	bf00      	nop
 800ba30:	20009418 	.word	0x20009418

0800ba34 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ba34:	490f      	ldr	r1, [pc, #60]	; (800ba74 <SystemInit+0x40>)
 800ba36:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800ba3a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ba3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800ba42:	4b0d      	ldr	r3, [pc, #52]	; (800ba78 <SystemInit+0x44>)
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	f042 0201 	orr.w	r2, r2, #1
 800ba4a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ba4c:	2000      	movs	r0, #0
 800ba4e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800ba56:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ba5a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800ba5c:	4a07      	ldr	r2, [pc, #28]	; (800ba7c <SystemInit+0x48>)
 800ba5e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800ba60:	681a      	ldr	r2, [r3, #0]
 800ba62:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ba66:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800ba68:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ba6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ba6e:	608b      	str	r3, [r1, #8]
 800ba70:	4770      	bx	lr
 800ba72:	bf00      	nop
 800ba74:	e000ed00 	.word	0xe000ed00
 800ba78:	40023800 	.word	0x40023800
 800ba7c:	24003010 	.word	0x24003010

0800ba80 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800ba80:	b500      	push	{lr}
 800ba82:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 800ba84:	4817      	ldr	r0, [pc, #92]	; (800bae4 <MX_TIM3_Init+0x64>)
 800ba86:	4b18      	ldr	r3, [pc, #96]	; (800bae8 <MX_TIM3_Init+0x68>)
 800ba88:	6003      	str	r3, [r0, #0]
  htim3.Init.Prescaler = 899;
 800ba8a:	f240 3383 	movw	r3, #899	; 0x383
 800ba8e:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ba90:	2300      	movs	r3, #0
 800ba92:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 999;
 800ba94:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ba98:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ba9a:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800ba9c:	f7f6 fdd4 	bl	8002648 <HAL_TIM_Base_Init>
 800baa0:	b9b0      	cbnz	r0, 800bad0 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800baa2:	a906      	add	r1, sp, #24
 800baa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800baa8:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800baac:	480d      	ldr	r0, [pc, #52]	; (800bae4 <MX_TIM3_Init+0x64>)
 800baae:	f7f6 fbf8 	bl	80022a2 <HAL_TIM_ConfigClockSource>
 800bab2:	b980      	cbnz	r0, 800bad6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bab4:	2300      	movs	r3, #0
 800bab6:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bab8:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800baba:	4669      	mov	r1, sp
 800babc:	4809      	ldr	r0, [pc, #36]	; (800bae4 <MX_TIM3_Init+0x64>)
 800babe:	f7f6 fddc 	bl	800267a <HAL_TIMEx_MasterConfigSynchronization>
 800bac2:	b958      	cbnz	r0, 800badc <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
  }
/*USER CODE BEGIN TIM3_INIT*/
	HAL_TIM_Base_Start_IT(&htim3);
 800bac4:	4807      	ldr	r0, [pc, #28]	; (800bae4 <MX_TIM3_Init+0x64>)
 800bac6:	f7f6 fbe0 	bl	800228a <HAL_TIM_Base_Start_IT>
/*USER CODE END TIM3_INIT */
}
 800baca:	b007      	add	sp, #28
 800bacc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800bad0:	f7ff fdfe 	bl	800b6d0 <Error_Handler>
 800bad4:	e7e5      	b.n	800baa2 <MX_TIM3_Init+0x22>
    Error_Handler();
 800bad6:	f7ff fdfb 	bl	800b6d0 <Error_Handler>
 800bada:	e7eb      	b.n	800bab4 <MX_TIM3_Init+0x34>
    Error_Handler();
 800badc:	f7ff fdf8 	bl	800b6d0 <Error_Handler>
 800bae0:	e7f0      	b.n	800bac4 <MX_TIM3_Init+0x44>
 800bae2:	bf00      	nop
 800bae4:	2000ad34 	.word	0x2000ad34
 800bae8:	40000400 	.word	0x40000400

0800baec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 800baec:	6802      	ldr	r2, [r0, #0]
 800baee:	4b0e      	ldr	r3, [pc, #56]	; (800bb28 <HAL_TIM_Base_MspInit+0x3c>)
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d000      	beq.n	800baf6 <HAL_TIM_Base_MspInit+0xa>
 800baf4:	4770      	bx	lr
{
 800baf6:	b500      	push	{lr}
 800baf8:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800bafa:	2200      	movs	r2, #0
 800bafc:	9201      	str	r2, [sp, #4]
 800bafe:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 800bb02:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800bb04:	f041 0102 	orr.w	r1, r1, #2
 800bb08:	6419      	str	r1, [r3, #64]	; 0x40
 800bb0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb0c:	f003 0302 	and.w	r3, r3, #2
 800bb10:	9301      	str	r3, [sp, #4]
 800bb12:	9b01      	ldr	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800bb14:	2105      	movs	r1, #5
 800bb16:	201d      	movs	r0, #29
 800bb18:	f7f4 fd92 	bl	8000640 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800bb1c:	201d      	movs	r0, #29
 800bb1e:	f7f4 fdc1 	bl	80006a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800bb22:	b003      	add	sp, #12
 800bb24:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb28:	40000400 	.word	0x40000400

0800bb2c <MX_USART1_UART_Init>:


/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800bb2c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 800bb2e:	480a      	ldr	r0, [pc, #40]	; (800bb58 <MX_USART1_UART_Init+0x2c>)
 800bb30:	4b0a      	ldr	r3, [pc, #40]	; (800bb5c <MX_USART1_UART_Init+0x30>)
 800bb32:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800bb34:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800bb38:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800bb3e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800bb40:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800bb42:	220c      	movs	r2, #12
 800bb44:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bb46:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800bb48:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800bb4a:	f7f6 ff63 	bl	8002a14 <HAL_UART_Init>
 800bb4e:	b900      	cbnz	r0, 800bb52 <MX_USART1_UART_Init+0x26>
 800bb50:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 800bb52:	f7ff fdbd 	bl	800b6d0 <Error_Handler>
  }

}
 800bb56:	e7fb      	b.n	800bb50 <MX_USART1_UART_Init+0x24>
 800bb58:	2000ad70 	.word	0x2000ad70
 800bb5c:	40011000 	.word	0x40011000

0800bb60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 800bb60:	6802      	ldr	r2, [r0, #0]
 800bb62:	4b12      	ldr	r3, [pc, #72]	; (800bbac <HAL_UART_MspInit+0x4c>)
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d000      	beq.n	800bb6a <HAL_UART_MspInit+0xa>
 800bb68:	4770      	bx	lr
{
 800bb6a:	b500      	push	{lr}
 800bb6c:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800bb6e:	2300      	movs	r3, #0
 800bb70:	9300      	str	r3, [sp, #0]
 800bb72:	4b0f      	ldr	r3, [pc, #60]	; (800bbb0 <HAL_UART_MspInit+0x50>)
 800bb74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb76:	f042 0210 	orr.w	r2, r2, #16
 800bb7a:	645a      	str	r2, [r3, #68]	; 0x44
 800bb7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb7e:	f003 0310 	and.w	r3, r3, #16
 800bb82:	9300      	str	r3, [sp, #0]
 800bb84:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800bb86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800bb8a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb8c:	2302      	movs	r3, #2
 800bb8e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bb90:	2301      	movs	r3, #1
 800bb92:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bb94:	2303      	movs	r3, #3
 800bb96:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800bb98:	2307      	movs	r3, #7
 800bb9a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb9c:	a901      	add	r1, sp, #4
 800bb9e:	4805      	ldr	r0, [pc, #20]	; (800bbb4 <HAL_UART_MspInit+0x54>)
 800bba0:	f7f5 fb0c 	bl	80011bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800bba4:	b007      	add	sp, #28
 800bba6:	f85d fb04 	ldr.w	pc, [sp], #4
 800bbaa:	bf00      	nop
 800bbac:	40011000 	.word	0x40011000
 800bbb0:	40023800 	.word	0x40023800
 800bbb4:	40020000 	.word	0x40020000

0800bbb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800bbb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bbf0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800bbbc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800bbbe:	e003      	b.n	800bbc8 <LoopCopyDataInit>

0800bbc0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800bbc0:	4b0c      	ldr	r3, [pc, #48]	; (800bbf4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800bbc2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800bbc4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800bbc6:	3104      	adds	r1, #4

0800bbc8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800bbc8:	480b      	ldr	r0, [pc, #44]	; (800bbf8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800bbca:	4b0c      	ldr	r3, [pc, #48]	; (800bbfc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800bbcc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800bbce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800bbd0:	d3f6      	bcc.n	800bbc0 <CopyDataInit>
  ldr  r2, =_sbss
 800bbd2:	4a0b      	ldr	r2, [pc, #44]	; (800bc00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800bbd4:	e002      	b.n	800bbdc <LoopFillZerobss>

0800bbd6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800bbd6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800bbd8:	f842 3b04 	str.w	r3, [r2], #4

0800bbdc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800bbdc:	4b09      	ldr	r3, [pc, #36]	; (800bc04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800bbde:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800bbe0:	d3f9      	bcc.n	800bbd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800bbe2:	f7ff ff27 	bl	800ba34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bbe6:	f000 f817 	bl	800bc18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bbea:	f7ff fde3 	bl	800b7b4 <main>
  bx  lr    
 800bbee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800bbf0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800bbf4:	0800da44 	.word	0x0800da44
  ldr  r0, =_sdata
 800bbf8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800bbfc:	200000a8 	.word	0x200000a8
  ldr  r2, =_sbss
 800bc00:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 800bc04:	2000adb4 	.word	0x2000adb4

0800bc08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bc08:	e7fe      	b.n	800bc08 <ADC_IRQHandler>
	...

0800bc0c <__errno>:
 800bc0c:	4b01      	ldr	r3, [pc, #4]	; (800bc14 <__errno+0x8>)
 800bc0e:	6818      	ldr	r0, [r3, #0]
 800bc10:	4770      	bx	lr
 800bc12:	bf00      	nop
 800bc14:	20000044 	.word	0x20000044

0800bc18 <__libc_init_array>:
 800bc18:	b570      	push	{r4, r5, r6, lr}
 800bc1a:	4e0d      	ldr	r6, [pc, #52]	; (800bc50 <__libc_init_array+0x38>)
 800bc1c:	4c0d      	ldr	r4, [pc, #52]	; (800bc54 <__libc_init_array+0x3c>)
 800bc1e:	1ba4      	subs	r4, r4, r6
 800bc20:	10a4      	asrs	r4, r4, #2
 800bc22:	2500      	movs	r5, #0
 800bc24:	42a5      	cmp	r5, r4
 800bc26:	d109      	bne.n	800bc3c <__libc_init_array+0x24>
 800bc28:	4e0b      	ldr	r6, [pc, #44]	; (800bc58 <__libc_init_array+0x40>)
 800bc2a:	4c0c      	ldr	r4, [pc, #48]	; (800bc5c <__libc_init_array+0x44>)
 800bc2c:	f001 f9c6 	bl	800cfbc <_init>
 800bc30:	1ba4      	subs	r4, r4, r6
 800bc32:	10a4      	asrs	r4, r4, #2
 800bc34:	2500      	movs	r5, #0
 800bc36:	42a5      	cmp	r5, r4
 800bc38:	d105      	bne.n	800bc46 <__libc_init_array+0x2e>
 800bc3a:	bd70      	pop	{r4, r5, r6, pc}
 800bc3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bc40:	4798      	blx	r3
 800bc42:	3501      	adds	r5, #1
 800bc44:	e7ee      	b.n	800bc24 <__libc_init_array+0xc>
 800bc46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bc4a:	4798      	blx	r3
 800bc4c:	3501      	adds	r5, #1
 800bc4e:	e7f2      	b.n	800bc36 <__libc_init_array+0x1e>
 800bc50:	0800da3c 	.word	0x0800da3c
 800bc54:	0800da3c 	.word	0x0800da3c
 800bc58:	0800da3c 	.word	0x0800da3c
 800bc5c:	0800da40 	.word	0x0800da40

0800bc60 <memcmp>:
 800bc60:	b510      	push	{r4, lr}
 800bc62:	3901      	subs	r1, #1
 800bc64:	4402      	add	r2, r0
 800bc66:	4290      	cmp	r0, r2
 800bc68:	d101      	bne.n	800bc6e <memcmp+0xe>
 800bc6a:	2000      	movs	r0, #0
 800bc6c:	bd10      	pop	{r4, pc}
 800bc6e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bc72:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bc76:	42a3      	cmp	r3, r4
 800bc78:	d0f5      	beq.n	800bc66 <memcmp+0x6>
 800bc7a:	1b18      	subs	r0, r3, r4
 800bc7c:	bd10      	pop	{r4, pc}

0800bc7e <memcpy>:
 800bc7e:	b510      	push	{r4, lr}
 800bc80:	1e43      	subs	r3, r0, #1
 800bc82:	440a      	add	r2, r1
 800bc84:	4291      	cmp	r1, r2
 800bc86:	d100      	bne.n	800bc8a <memcpy+0xc>
 800bc88:	bd10      	pop	{r4, pc}
 800bc8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc92:	e7f7      	b.n	800bc84 <memcpy+0x6>

0800bc94 <memset>:
 800bc94:	4402      	add	r2, r0
 800bc96:	4603      	mov	r3, r0
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d100      	bne.n	800bc9e <memset+0xa>
 800bc9c:	4770      	bx	lr
 800bc9e:	f803 1b01 	strb.w	r1, [r3], #1
 800bca2:	e7f9      	b.n	800bc98 <memset+0x4>

0800bca4 <iprintf>:
 800bca4:	b40f      	push	{r0, r1, r2, r3}
 800bca6:	4b0a      	ldr	r3, [pc, #40]	; (800bcd0 <iprintf+0x2c>)
 800bca8:	b513      	push	{r0, r1, r4, lr}
 800bcaa:	681c      	ldr	r4, [r3, #0]
 800bcac:	b124      	cbz	r4, 800bcb8 <iprintf+0x14>
 800bcae:	69a3      	ldr	r3, [r4, #24]
 800bcb0:	b913      	cbnz	r3, 800bcb8 <iprintf+0x14>
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	f000 fc16 	bl	800c4e4 <__sinit>
 800bcb8:	ab05      	add	r3, sp, #20
 800bcba:	9a04      	ldr	r2, [sp, #16]
 800bcbc:	68a1      	ldr	r1, [r4, #8]
 800bcbe:	9301      	str	r3, [sp, #4]
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	f000 fdd3 	bl	800c86c <_vfiprintf_r>
 800bcc6:	b002      	add	sp, #8
 800bcc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bccc:	b004      	add	sp, #16
 800bcce:	4770      	bx	lr
 800bcd0:	20000044 	.word	0x20000044

0800bcd4 <_puts_r>:
 800bcd4:	b570      	push	{r4, r5, r6, lr}
 800bcd6:	460e      	mov	r6, r1
 800bcd8:	4605      	mov	r5, r0
 800bcda:	b118      	cbz	r0, 800bce4 <_puts_r+0x10>
 800bcdc:	6983      	ldr	r3, [r0, #24]
 800bcde:	b90b      	cbnz	r3, 800bce4 <_puts_r+0x10>
 800bce0:	f000 fc00 	bl	800c4e4 <__sinit>
 800bce4:	69ab      	ldr	r3, [r5, #24]
 800bce6:	68ac      	ldr	r4, [r5, #8]
 800bce8:	b913      	cbnz	r3, 800bcf0 <_puts_r+0x1c>
 800bcea:	4628      	mov	r0, r5
 800bcec:	f000 fbfa 	bl	800c4e4 <__sinit>
 800bcf0:	4b23      	ldr	r3, [pc, #140]	; (800bd80 <_puts_r+0xac>)
 800bcf2:	429c      	cmp	r4, r3
 800bcf4:	d117      	bne.n	800bd26 <_puts_r+0x52>
 800bcf6:	686c      	ldr	r4, [r5, #4]
 800bcf8:	89a3      	ldrh	r3, [r4, #12]
 800bcfa:	071b      	lsls	r3, r3, #28
 800bcfc:	d51d      	bpl.n	800bd3a <_puts_r+0x66>
 800bcfe:	6923      	ldr	r3, [r4, #16]
 800bd00:	b1db      	cbz	r3, 800bd3a <_puts_r+0x66>
 800bd02:	3e01      	subs	r6, #1
 800bd04:	68a3      	ldr	r3, [r4, #8]
 800bd06:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bd0a:	3b01      	subs	r3, #1
 800bd0c:	60a3      	str	r3, [r4, #8]
 800bd0e:	b9e9      	cbnz	r1, 800bd4c <_puts_r+0x78>
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	da2e      	bge.n	800bd72 <_puts_r+0x9e>
 800bd14:	4622      	mov	r2, r4
 800bd16:	210a      	movs	r1, #10
 800bd18:	4628      	mov	r0, r5
 800bd1a:	f000 fa31 	bl	800c180 <__swbuf_r>
 800bd1e:	3001      	adds	r0, #1
 800bd20:	d011      	beq.n	800bd46 <_puts_r+0x72>
 800bd22:	200a      	movs	r0, #10
 800bd24:	bd70      	pop	{r4, r5, r6, pc}
 800bd26:	4b17      	ldr	r3, [pc, #92]	; (800bd84 <_puts_r+0xb0>)
 800bd28:	429c      	cmp	r4, r3
 800bd2a:	d101      	bne.n	800bd30 <_puts_r+0x5c>
 800bd2c:	68ac      	ldr	r4, [r5, #8]
 800bd2e:	e7e3      	b.n	800bcf8 <_puts_r+0x24>
 800bd30:	4b15      	ldr	r3, [pc, #84]	; (800bd88 <_puts_r+0xb4>)
 800bd32:	429c      	cmp	r4, r3
 800bd34:	bf08      	it	eq
 800bd36:	68ec      	ldreq	r4, [r5, #12]
 800bd38:	e7de      	b.n	800bcf8 <_puts_r+0x24>
 800bd3a:	4621      	mov	r1, r4
 800bd3c:	4628      	mov	r0, r5
 800bd3e:	f000 fa71 	bl	800c224 <__swsetup_r>
 800bd42:	2800      	cmp	r0, #0
 800bd44:	d0dd      	beq.n	800bd02 <_puts_r+0x2e>
 800bd46:	f04f 30ff 	mov.w	r0, #4294967295
 800bd4a:	bd70      	pop	{r4, r5, r6, pc}
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	da04      	bge.n	800bd5a <_puts_r+0x86>
 800bd50:	69a2      	ldr	r2, [r4, #24]
 800bd52:	4293      	cmp	r3, r2
 800bd54:	db06      	blt.n	800bd64 <_puts_r+0x90>
 800bd56:	290a      	cmp	r1, #10
 800bd58:	d004      	beq.n	800bd64 <_puts_r+0x90>
 800bd5a:	6823      	ldr	r3, [r4, #0]
 800bd5c:	1c5a      	adds	r2, r3, #1
 800bd5e:	6022      	str	r2, [r4, #0]
 800bd60:	7019      	strb	r1, [r3, #0]
 800bd62:	e7cf      	b.n	800bd04 <_puts_r+0x30>
 800bd64:	4622      	mov	r2, r4
 800bd66:	4628      	mov	r0, r5
 800bd68:	f000 fa0a 	bl	800c180 <__swbuf_r>
 800bd6c:	3001      	adds	r0, #1
 800bd6e:	d1c9      	bne.n	800bd04 <_puts_r+0x30>
 800bd70:	e7e9      	b.n	800bd46 <_puts_r+0x72>
 800bd72:	6823      	ldr	r3, [r4, #0]
 800bd74:	200a      	movs	r0, #10
 800bd76:	1c5a      	adds	r2, r3, #1
 800bd78:	6022      	str	r2, [r4, #0]
 800bd7a:	7018      	strb	r0, [r3, #0]
 800bd7c:	bd70      	pop	{r4, r5, r6, pc}
 800bd7e:	bf00      	nop
 800bd80:	0800d9c0 	.word	0x0800d9c0
 800bd84:	0800d9e0 	.word	0x0800d9e0
 800bd88:	0800d9a0 	.word	0x0800d9a0

0800bd8c <puts>:
 800bd8c:	4b02      	ldr	r3, [pc, #8]	; (800bd98 <puts+0xc>)
 800bd8e:	4601      	mov	r1, r0
 800bd90:	6818      	ldr	r0, [r3, #0]
 800bd92:	f7ff bf9f 	b.w	800bcd4 <_puts_r>
 800bd96:	bf00      	nop
 800bd98:	20000044 	.word	0x20000044

0800bd9c <_strerror_r>:
 800bd9c:	b510      	push	{r4, lr}
 800bd9e:	4604      	mov	r4, r0
 800bda0:	4608      	mov	r0, r1
 800bda2:	4611      	mov	r1, r2
 800bda4:	288e      	cmp	r0, #142	; 0x8e
 800bda6:	f200 812f 	bhi.w	800c008 <_strerror_r+0x26c>
 800bdaa:	e8df f010 	tbh	[pc, r0, lsl #1]
 800bdae:	0138      	.short	0x0138
 800bdb0:	0091008f 	.word	0x0091008f
 800bdb4:	00950093 	.word	0x00950093
 800bdb8:	00990097 	.word	0x00990097
 800bdbc:	009d009b 	.word	0x009d009b
 800bdc0:	00a300a1 	.word	0x00a300a1
 800bdc4:	00a900a7 	.word	0x00a900a7
 800bdc8:	00ad00ab 	.word	0x00ad00ab
 800bdcc:	00af012d 	.word	0x00af012d
 800bdd0:	00b300b1 	.word	0x00b300b1
 800bdd4:	00b700b5 	.word	0x00b700b5
 800bdd8:	00bf00bd 	.word	0x00bf00bd
 800bddc:	00c700c5 	.word	0x00c700c5
 800bde0:	00cb00c9 	.word	0x00cb00c9
 800bde4:	00d100cd 	.word	0x00d100cd
 800bde8:	00d700d5 	.word	0x00d700d5
 800bdec:	00db00d9 	.word	0x00db00d9
 800bdf0:	00df00dd 	.word	0x00df00dd
 800bdf4:	00e300e1 	.word	0x00e300e1
 800bdf8:	012d012d 	.word	0x012d012d
 800bdfc:	012d012d 	.word	0x012d012d
 800be00:	012d012d 	.word	0x012d012d
 800be04:	012d012d 	.word	0x012d012d
 800be08:	00eb00e7 	.word	0x00eb00e7
 800be0c:	012d012d 	.word	0x012d012d
 800be10:	012d012d 	.word	0x012d012d
 800be14:	012d012d 	.word	0x012d012d
 800be18:	012d012d 	.word	0x012d012d
 800be1c:	012d012d 	.word	0x012d012d
 800be20:	012d012d 	.word	0x012d012d
 800be24:	00ed012d 	.word	0x00ed012d
 800be28:	00ef0107 	.word	0x00ef0107
 800be2c:	012d00f1 	.word	0x012d00f1
 800be30:	012d012d 	.word	0x012d012d
 800be34:	012d00f3 	.word	0x012d00f3
 800be38:	012d012d 	.word	0x012d012d
 800be3c:	012d00f5 	.word	0x012d00f5
 800be40:	00f9012d 	.word	0x00f9012d
 800be44:	012d012d 	.word	0x012d012d
 800be48:	012d00fb 	.word	0x012d00fb
 800be4c:	012d012d 	.word	0x012d012d
 800be50:	012d012d 	.word	0x012d012d
 800be54:	012d012d 	.word	0x012d012d
 800be58:	012d012d 	.word	0x012d012d
 800be5c:	00fd012d 	.word	0x00fd012d
 800be60:	00ff012d 	.word	0x00ff012d
 800be64:	01030101 	.word	0x01030101
 800be68:	012d012d 	.word	0x012d012d
 800be6c:	012d0125 	.word	0x012d0125
 800be70:	012d012d 	.word	0x012d012d
 800be74:	012d012d 	.word	0x012d012d
 800be78:	012d012d 	.word	0x012d012d
 800be7c:	0113012d 	.word	0x0113012d
 800be80:	01090105 	.word	0x01090105
 800be84:	010d010b 	.word	0x010d010b
 800be88:	012d010f 	.word	0x012d010f
 800be8c:	01150111 	.word	0x01150111
 800be90:	00e90119 	.word	0x00e90119
 800be94:	012b00c1 	.word	0x012b00c1
 800be98:	00cf00b9 	.word	0x00cf00b9
 800be9c:	009f00bb 	.word	0x009f00bb
 800bea0:	012900a5 	.word	0x012900a5
 800bea4:	012d00f7 	.word	0x012d00f7
 800bea8:	00c30117 	.word	0x00c30117
 800beac:	011b011d 	.word	0x011b011d
 800beb0:	012d012d 	.word	0x012d012d
 800beb4:	012d012d 	.word	0x012d012d
 800beb8:	00d3012d 	.word	0x00d3012d
 800bebc:	012d012d 	.word	0x012d012d
 800bec0:	00e5012d 	.word	0x00e5012d
 800bec4:	011f0127 	.word	0x011f0127
 800bec8:	01230121 	.word	0x01230121
 800becc:	4855      	ldr	r0, [pc, #340]	; (800c024 <_strerror_r+0x288>)
 800bece:	bd10      	pop	{r4, pc}
 800bed0:	4855      	ldr	r0, [pc, #340]	; (800c028 <_strerror_r+0x28c>)
 800bed2:	bd10      	pop	{r4, pc}
 800bed4:	4855      	ldr	r0, [pc, #340]	; (800c02c <_strerror_r+0x290>)
 800bed6:	bd10      	pop	{r4, pc}
 800bed8:	4855      	ldr	r0, [pc, #340]	; (800c030 <_strerror_r+0x294>)
 800beda:	bd10      	pop	{r4, pc}
 800bedc:	4855      	ldr	r0, [pc, #340]	; (800c034 <_strerror_r+0x298>)
 800bede:	bd10      	pop	{r4, pc}
 800bee0:	4855      	ldr	r0, [pc, #340]	; (800c038 <_strerror_r+0x29c>)
 800bee2:	bd10      	pop	{r4, pc}
 800bee4:	4855      	ldr	r0, [pc, #340]	; (800c03c <_strerror_r+0x2a0>)
 800bee6:	bd10      	pop	{r4, pc}
 800bee8:	4855      	ldr	r0, [pc, #340]	; (800c040 <_strerror_r+0x2a4>)
 800beea:	bd10      	pop	{r4, pc}
 800beec:	4855      	ldr	r0, [pc, #340]	; (800c044 <_strerror_r+0x2a8>)
 800beee:	bd10      	pop	{r4, pc}
 800bef0:	4855      	ldr	r0, [pc, #340]	; (800c048 <_strerror_r+0x2ac>)
 800bef2:	bd10      	pop	{r4, pc}
 800bef4:	4855      	ldr	r0, [pc, #340]	; (800c04c <_strerror_r+0x2b0>)
 800bef6:	bd10      	pop	{r4, pc}
 800bef8:	4855      	ldr	r0, [pc, #340]	; (800c050 <_strerror_r+0x2b4>)
 800befa:	bd10      	pop	{r4, pc}
 800befc:	4855      	ldr	r0, [pc, #340]	; (800c054 <_strerror_r+0x2b8>)
 800befe:	bd10      	pop	{r4, pc}
 800bf00:	4855      	ldr	r0, [pc, #340]	; (800c058 <_strerror_r+0x2bc>)
 800bf02:	bd10      	pop	{r4, pc}
 800bf04:	4855      	ldr	r0, [pc, #340]	; (800c05c <_strerror_r+0x2c0>)
 800bf06:	bd10      	pop	{r4, pc}
 800bf08:	4855      	ldr	r0, [pc, #340]	; (800c060 <_strerror_r+0x2c4>)
 800bf0a:	bd10      	pop	{r4, pc}
 800bf0c:	4855      	ldr	r0, [pc, #340]	; (800c064 <_strerror_r+0x2c8>)
 800bf0e:	bd10      	pop	{r4, pc}
 800bf10:	4855      	ldr	r0, [pc, #340]	; (800c068 <_strerror_r+0x2cc>)
 800bf12:	bd10      	pop	{r4, pc}
 800bf14:	4855      	ldr	r0, [pc, #340]	; (800c06c <_strerror_r+0x2d0>)
 800bf16:	bd10      	pop	{r4, pc}
 800bf18:	4855      	ldr	r0, [pc, #340]	; (800c070 <_strerror_r+0x2d4>)
 800bf1a:	bd10      	pop	{r4, pc}
 800bf1c:	4855      	ldr	r0, [pc, #340]	; (800c074 <_strerror_r+0x2d8>)
 800bf1e:	bd10      	pop	{r4, pc}
 800bf20:	4855      	ldr	r0, [pc, #340]	; (800c078 <_strerror_r+0x2dc>)
 800bf22:	bd10      	pop	{r4, pc}
 800bf24:	4855      	ldr	r0, [pc, #340]	; (800c07c <_strerror_r+0x2e0>)
 800bf26:	bd10      	pop	{r4, pc}
 800bf28:	4855      	ldr	r0, [pc, #340]	; (800c080 <_strerror_r+0x2e4>)
 800bf2a:	bd10      	pop	{r4, pc}
 800bf2c:	4855      	ldr	r0, [pc, #340]	; (800c084 <_strerror_r+0x2e8>)
 800bf2e:	bd10      	pop	{r4, pc}
 800bf30:	4855      	ldr	r0, [pc, #340]	; (800c088 <_strerror_r+0x2ec>)
 800bf32:	bd10      	pop	{r4, pc}
 800bf34:	4855      	ldr	r0, [pc, #340]	; (800c08c <_strerror_r+0x2f0>)
 800bf36:	bd10      	pop	{r4, pc}
 800bf38:	4855      	ldr	r0, [pc, #340]	; (800c090 <_strerror_r+0x2f4>)
 800bf3a:	bd10      	pop	{r4, pc}
 800bf3c:	4855      	ldr	r0, [pc, #340]	; (800c094 <_strerror_r+0x2f8>)
 800bf3e:	bd10      	pop	{r4, pc}
 800bf40:	4855      	ldr	r0, [pc, #340]	; (800c098 <_strerror_r+0x2fc>)
 800bf42:	bd10      	pop	{r4, pc}
 800bf44:	4855      	ldr	r0, [pc, #340]	; (800c09c <_strerror_r+0x300>)
 800bf46:	bd10      	pop	{r4, pc}
 800bf48:	4855      	ldr	r0, [pc, #340]	; (800c0a0 <_strerror_r+0x304>)
 800bf4a:	bd10      	pop	{r4, pc}
 800bf4c:	4855      	ldr	r0, [pc, #340]	; (800c0a4 <_strerror_r+0x308>)
 800bf4e:	bd10      	pop	{r4, pc}
 800bf50:	4855      	ldr	r0, [pc, #340]	; (800c0a8 <_strerror_r+0x30c>)
 800bf52:	bd10      	pop	{r4, pc}
 800bf54:	4855      	ldr	r0, [pc, #340]	; (800c0ac <_strerror_r+0x310>)
 800bf56:	bd10      	pop	{r4, pc}
 800bf58:	4855      	ldr	r0, [pc, #340]	; (800c0b0 <_strerror_r+0x314>)
 800bf5a:	bd10      	pop	{r4, pc}
 800bf5c:	4855      	ldr	r0, [pc, #340]	; (800c0b4 <_strerror_r+0x318>)
 800bf5e:	bd10      	pop	{r4, pc}
 800bf60:	4855      	ldr	r0, [pc, #340]	; (800c0b8 <_strerror_r+0x31c>)
 800bf62:	bd10      	pop	{r4, pc}
 800bf64:	4855      	ldr	r0, [pc, #340]	; (800c0bc <_strerror_r+0x320>)
 800bf66:	bd10      	pop	{r4, pc}
 800bf68:	4855      	ldr	r0, [pc, #340]	; (800c0c0 <_strerror_r+0x324>)
 800bf6a:	bd10      	pop	{r4, pc}
 800bf6c:	4855      	ldr	r0, [pc, #340]	; (800c0c4 <_strerror_r+0x328>)
 800bf6e:	bd10      	pop	{r4, pc}
 800bf70:	4855      	ldr	r0, [pc, #340]	; (800c0c8 <_strerror_r+0x32c>)
 800bf72:	bd10      	pop	{r4, pc}
 800bf74:	4855      	ldr	r0, [pc, #340]	; (800c0cc <_strerror_r+0x330>)
 800bf76:	bd10      	pop	{r4, pc}
 800bf78:	4855      	ldr	r0, [pc, #340]	; (800c0d0 <_strerror_r+0x334>)
 800bf7a:	bd10      	pop	{r4, pc}
 800bf7c:	4855      	ldr	r0, [pc, #340]	; (800c0d4 <_strerror_r+0x338>)
 800bf7e:	bd10      	pop	{r4, pc}
 800bf80:	4855      	ldr	r0, [pc, #340]	; (800c0d8 <_strerror_r+0x33c>)
 800bf82:	bd10      	pop	{r4, pc}
 800bf84:	4855      	ldr	r0, [pc, #340]	; (800c0dc <_strerror_r+0x340>)
 800bf86:	bd10      	pop	{r4, pc}
 800bf88:	4855      	ldr	r0, [pc, #340]	; (800c0e0 <_strerror_r+0x344>)
 800bf8a:	bd10      	pop	{r4, pc}
 800bf8c:	4855      	ldr	r0, [pc, #340]	; (800c0e4 <_strerror_r+0x348>)
 800bf8e:	bd10      	pop	{r4, pc}
 800bf90:	4855      	ldr	r0, [pc, #340]	; (800c0e8 <_strerror_r+0x34c>)
 800bf92:	bd10      	pop	{r4, pc}
 800bf94:	4855      	ldr	r0, [pc, #340]	; (800c0ec <_strerror_r+0x350>)
 800bf96:	bd10      	pop	{r4, pc}
 800bf98:	4855      	ldr	r0, [pc, #340]	; (800c0f0 <_strerror_r+0x354>)
 800bf9a:	bd10      	pop	{r4, pc}
 800bf9c:	4855      	ldr	r0, [pc, #340]	; (800c0f4 <_strerror_r+0x358>)
 800bf9e:	bd10      	pop	{r4, pc}
 800bfa0:	4855      	ldr	r0, [pc, #340]	; (800c0f8 <_strerror_r+0x35c>)
 800bfa2:	bd10      	pop	{r4, pc}
 800bfa4:	4855      	ldr	r0, [pc, #340]	; (800c0fc <_strerror_r+0x360>)
 800bfa6:	bd10      	pop	{r4, pc}
 800bfa8:	4855      	ldr	r0, [pc, #340]	; (800c100 <_strerror_r+0x364>)
 800bfaa:	bd10      	pop	{r4, pc}
 800bfac:	4855      	ldr	r0, [pc, #340]	; (800c104 <_strerror_r+0x368>)
 800bfae:	bd10      	pop	{r4, pc}
 800bfb0:	4855      	ldr	r0, [pc, #340]	; (800c108 <_strerror_r+0x36c>)
 800bfb2:	bd10      	pop	{r4, pc}
 800bfb4:	4855      	ldr	r0, [pc, #340]	; (800c10c <_strerror_r+0x370>)
 800bfb6:	bd10      	pop	{r4, pc}
 800bfb8:	4855      	ldr	r0, [pc, #340]	; (800c110 <_strerror_r+0x374>)
 800bfba:	bd10      	pop	{r4, pc}
 800bfbc:	4855      	ldr	r0, [pc, #340]	; (800c114 <_strerror_r+0x378>)
 800bfbe:	bd10      	pop	{r4, pc}
 800bfc0:	4855      	ldr	r0, [pc, #340]	; (800c118 <_strerror_r+0x37c>)
 800bfc2:	bd10      	pop	{r4, pc}
 800bfc4:	4855      	ldr	r0, [pc, #340]	; (800c11c <_strerror_r+0x380>)
 800bfc6:	bd10      	pop	{r4, pc}
 800bfc8:	4855      	ldr	r0, [pc, #340]	; (800c120 <_strerror_r+0x384>)
 800bfca:	bd10      	pop	{r4, pc}
 800bfcc:	4855      	ldr	r0, [pc, #340]	; (800c124 <_strerror_r+0x388>)
 800bfce:	bd10      	pop	{r4, pc}
 800bfd0:	4855      	ldr	r0, [pc, #340]	; (800c128 <_strerror_r+0x38c>)
 800bfd2:	bd10      	pop	{r4, pc}
 800bfd4:	4855      	ldr	r0, [pc, #340]	; (800c12c <_strerror_r+0x390>)
 800bfd6:	bd10      	pop	{r4, pc}
 800bfd8:	4855      	ldr	r0, [pc, #340]	; (800c130 <_strerror_r+0x394>)
 800bfda:	bd10      	pop	{r4, pc}
 800bfdc:	4855      	ldr	r0, [pc, #340]	; (800c134 <_strerror_r+0x398>)
 800bfde:	bd10      	pop	{r4, pc}
 800bfe0:	4855      	ldr	r0, [pc, #340]	; (800c138 <_strerror_r+0x39c>)
 800bfe2:	bd10      	pop	{r4, pc}
 800bfe4:	4855      	ldr	r0, [pc, #340]	; (800c13c <_strerror_r+0x3a0>)
 800bfe6:	bd10      	pop	{r4, pc}
 800bfe8:	4855      	ldr	r0, [pc, #340]	; (800c140 <_strerror_r+0x3a4>)
 800bfea:	bd10      	pop	{r4, pc}
 800bfec:	4855      	ldr	r0, [pc, #340]	; (800c144 <_strerror_r+0x3a8>)
 800bfee:	bd10      	pop	{r4, pc}
 800bff0:	4855      	ldr	r0, [pc, #340]	; (800c148 <_strerror_r+0x3ac>)
 800bff2:	bd10      	pop	{r4, pc}
 800bff4:	4855      	ldr	r0, [pc, #340]	; (800c14c <_strerror_r+0x3b0>)
 800bff6:	bd10      	pop	{r4, pc}
 800bff8:	4855      	ldr	r0, [pc, #340]	; (800c150 <_strerror_r+0x3b4>)
 800bffa:	bd10      	pop	{r4, pc}
 800bffc:	4855      	ldr	r0, [pc, #340]	; (800c154 <_strerror_r+0x3b8>)
 800bffe:	bd10      	pop	{r4, pc}
 800c000:	4855      	ldr	r0, [pc, #340]	; (800c158 <_strerror_r+0x3bc>)
 800c002:	bd10      	pop	{r4, pc}
 800c004:	4855      	ldr	r0, [pc, #340]	; (800c15c <_strerror_r+0x3c0>)
 800c006:	bd10      	pop	{r4, pc}
 800c008:	2b00      	cmp	r3, #0
 800c00a:	bf14      	ite	ne
 800c00c:	461a      	movne	r2, r3
 800c00e:	4622      	moveq	r2, r4
 800c010:	f000 f8b4 	bl	800c17c <_user_strerror>
 800c014:	4b52      	ldr	r3, [pc, #328]	; (800c160 <_strerror_r+0x3c4>)
 800c016:	2800      	cmp	r0, #0
 800c018:	bf08      	it	eq
 800c01a:	4618      	moveq	r0, r3
 800c01c:	bd10      	pop	{r4, pc}
 800c01e:	4851      	ldr	r0, [pc, #324]	; (800c164 <_strerror_r+0x3c8>)
 800c020:	bd10      	pop	{r4, pc}
 800c022:	bf00      	nop
 800c024:	0800d310 	.word	0x0800d310
 800c028:	0800d31a 	.word	0x0800d31a
 800c02c:	0800d334 	.word	0x0800d334
 800c030:	0800d344 	.word	0x0800d344
 800c034:	0800d35c 	.word	0x0800d35c
 800c038:	0800d366 	.word	0x0800d366
 800c03c:	0800d380 	.word	0x0800d380
 800c040:	0800d392 	.word	0x0800d392
 800c044:	0800d3a4 	.word	0x0800d3a4
 800c048:	0800d3bd 	.word	0x0800d3bd
 800c04c:	0800d3cd 	.word	0x0800d3cd
 800c050:	0800d3d9 	.word	0x0800d3d9
 800c054:	0800d3f6 	.word	0x0800d3f6
 800c058:	0800d408 	.word	0x0800d408
 800c05c:	0800d419 	.word	0x0800d419
 800c060:	0800d42b 	.word	0x0800d42b
 800c064:	0800d437 	.word	0x0800d437
 800c068:	0800d44f 	.word	0x0800d44f
 800c06c:	0800d45b 	.word	0x0800d45b
 800c070:	0800d46d 	.word	0x0800d46d
 800c074:	0800d47c 	.word	0x0800d47c
 800c078:	0800d48c 	.word	0x0800d48c
 800c07c:	0800d499 	.word	0x0800d499
 800c080:	0800d4b8 	.word	0x0800d4b8
 800c084:	0800d4c7 	.word	0x0800d4c7
 800c088:	0800d4d8 	.word	0x0800d4d8
 800c08c:	0800d4fc 	.word	0x0800d4fc
 800c090:	0800d51a 	.word	0x0800d51a
 800c094:	0800d538 	.word	0x0800d538
 800c098:	0800d558 	.word	0x0800d558
 800c09c:	0800d56f 	.word	0x0800d56f
 800c0a0:	0800d57e 	.word	0x0800d57e
 800c0a4:	0800d58d 	.word	0x0800d58d
 800c0a8:	0800d5a1 	.word	0x0800d5a1
 800c0ac:	0800d5b9 	.word	0x0800d5b9
 800c0b0:	0800d5c7 	.word	0x0800d5c7
 800c0b4:	0800d5d4 	.word	0x0800d5d4
 800c0b8:	0800d5ea 	.word	0x0800d5ea
 800c0bc:	0800d5f9 	.word	0x0800d5f9
 800c0c0:	0800d605 	.word	0x0800d605
 800c0c4:	0800d634 	.word	0x0800d634
 800c0c8:	0800d645 	.word	0x0800d645
 800c0cc:	0800d660 	.word	0x0800d660
 800c0d0:	0800d673 	.word	0x0800d673
 800c0d4:	0800d689 	.word	0x0800d689
 800c0d8:	0800d692 	.word	0x0800d692
 800c0dc:	0800d6a9 	.word	0x0800d6a9
 800c0e0:	0800d6b1 	.word	0x0800d6b1
 800c0e4:	0800d6be 	.word	0x0800d6be
 800c0e8:	0800d6d3 	.word	0x0800d6d3
 800c0ec:	0800d6e7 	.word	0x0800d6e7
 800c0f0:	0800d6ff 	.word	0x0800d6ff
 800c0f4:	0800d70e 	.word	0x0800d70e
 800c0f8:	0800d71f 	.word	0x0800d71f
 800c0fc:	0800d732 	.word	0x0800d732
 800c100:	0800d73e 	.word	0x0800d73e
 800c104:	0800d757 	.word	0x0800d757
 800c108:	0800d76b 	.word	0x0800d76b
 800c10c:	0800d786 	.word	0x0800d786
 800c110:	0800d79e 	.word	0x0800d79e
 800c114:	0800d7b8 	.word	0x0800d7b8
 800c118:	0800d7c0 	.word	0x0800d7c0
 800c11c:	0800d7f0 	.word	0x0800d7f0
 800c120:	0800d80f 	.word	0x0800d80f
 800c124:	0800d82e 	.word	0x0800d82e
 800c128:	0800d845 	.word	0x0800d845
 800c12c:	0800d858 	.word	0x0800d858
 800c130:	0800d871 	.word	0x0800d871
 800c134:	0800d888 	.word	0x0800d888
 800c138:	0800d89e 	.word	0x0800d89e
 800c13c:	0800d8bf 	.word	0x0800d8bf
 800c140:	0800d8d7 	.word	0x0800d8d7
 800c144:	0800d8f3 	.word	0x0800d8f3
 800c148:	0800d906 	.word	0x0800d906
 800c14c:	0800d91c 	.word	0x0800d91c
 800c150:	0800d930 	.word	0x0800d930
 800c154:	0800d952 	.word	0x0800d952
 800c158:	0800d978 	.word	0x0800d978
 800c15c:	0800d989 	.word	0x0800d989
 800c160:	0800da05 	.word	0x0800da05
 800c164:	0800d308 	.word	0x0800d308

0800c168 <strerror>:
 800c168:	4601      	mov	r1, r0
 800c16a:	4803      	ldr	r0, [pc, #12]	; (800c178 <strerror+0x10>)
 800c16c:	2300      	movs	r3, #0
 800c16e:	461a      	mov	r2, r3
 800c170:	6800      	ldr	r0, [r0, #0]
 800c172:	f7ff be13 	b.w	800bd9c <_strerror_r>
 800c176:	bf00      	nop
 800c178:	20000044 	.word	0x20000044

0800c17c <_user_strerror>:
 800c17c:	2000      	movs	r0, #0
 800c17e:	4770      	bx	lr

0800c180 <__swbuf_r>:
 800c180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c182:	460e      	mov	r6, r1
 800c184:	4614      	mov	r4, r2
 800c186:	4605      	mov	r5, r0
 800c188:	b118      	cbz	r0, 800c192 <__swbuf_r+0x12>
 800c18a:	6983      	ldr	r3, [r0, #24]
 800c18c:	b90b      	cbnz	r3, 800c192 <__swbuf_r+0x12>
 800c18e:	f000 f9a9 	bl	800c4e4 <__sinit>
 800c192:	4b21      	ldr	r3, [pc, #132]	; (800c218 <__swbuf_r+0x98>)
 800c194:	429c      	cmp	r4, r3
 800c196:	d12a      	bne.n	800c1ee <__swbuf_r+0x6e>
 800c198:	686c      	ldr	r4, [r5, #4]
 800c19a:	69a3      	ldr	r3, [r4, #24]
 800c19c:	60a3      	str	r3, [r4, #8]
 800c19e:	89a3      	ldrh	r3, [r4, #12]
 800c1a0:	071a      	lsls	r2, r3, #28
 800c1a2:	d52e      	bpl.n	800c202 <__swbuf_r+0x82>
 800c1a4:	6923      	ldr	r3, [r4, #16]
 800c1a6:	b363      	cbz	r3, 800c202 <__swbuf_r+0x82>
 800c1a8:	6923      	ldr	r3, [r4, #16]
 800c1aa:	6820      	ldr	r0, [r4, #0]
 800c1ac:	1ac0      	subs	r0, r0, r3
 800c1ae:	6963      	ldr	r3, [r4, #20]
 800c1b0:	b2f6      	uxtb	r6, r6
 800c1b2:	4298      	cmp	r0, r3
 800c1b4:	4637      	mov	r7, r6
 800c1b6:	db04      	blt.n	800c1c2 <__swbuf_r+0x42>
 800c1b8:	4621      	mov	r1, r4
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	f000 f928 	bl	800c410 <_fflush_r>
 800c1c0:	bb28      	cbnz	r0, 800c20e <__swbuf_r+0x8e>
 800c1c2:	68a3      	ldr	r3, [r4, #8]
 800c1c4:	3b01      	subs	r3, #1
 800c1c6:	60a3      	str	r3, [r4, #8]
 800c1c8:	6823      	ldr	r3, [r4, #0]
 800c1ca:	1c5a      	adds	r2, r3, #1
 800c1cc:	6022      	str	r2, [r4, #0]
 800c1ce:	701e      	strb	r6, [r3, #0]
 800c1d0:	6963      	ldr	r3, [r4, #20]
 800c1d2:	3001      	adds	r0, #1
 800c1d4:	4298      	cmp	r0, r3
 800c1d6:	d004      	beq.n	800c1e2 <__swbuf_r+0x62>
 800c1d8:	89a3      	ldrh	r3, [r4, #12]
 800c1da:	07db      	lsls	r3, r3, #31
 800c1dc:	d519      	bpl.n	800c212 <__swbuf_r+0x92>
 800c1de:	2e0a      	cmp	r6, #10
 800c1e0:	d117      	bne.n	800c212 <__swbuf_r+0x92>
 800c1e2:	4621      	mov	r1, r4
 800c1e4:	4628      	mov	r0, r5
 800c1e6:	f000 f913 	bl	800c410 <_fflush_r>
 800c1ea:	b190      	cbz	r0, 800c212 <__swbuf_r+0x92>
 800c1ec:	e00f      	b.n	800c20e <__swbuf_r+0x8e>
 800c1ee:	4b0b      	ldr	r3, [pc, #44]	; (800c21c <__swbuf_r+0x9c>)
 800c1f0:	429c      	cmp	r4, r3
 800c1f2:	d101      	bne.n	800c1f8 <__swbuf_r+0x78>
 800c1f4:	68ac      	ldr	r4, [r5, #8]
 800c1f6:	e7d0      	b.n	800c19a <__swbuf_r+0x1a>
 800c1f8:	4b09      	ldr	r3, [pc, #36]	; (800c220 <__swbuf_r+0xa0>)
 800c1fa:	429c      	cmp	r4, r3
 800c1fc:	bf08      	it	eq
 800c1fe:	68ec      	ldreq	r4, [r5, #12]
 800c200:	e7cb      	b.n	800c19a <__swbuf_r+0x1a>
 800c202:	4621      	mov	r1, r4
 800c204:	4628      	mov	r0, r5
 800c206:	f000 f80d 	bl	800c224 <__swsetup_r>
 800c20a:	2800      	cmp	r0, #0
 800c20c:	d0cc      	beq.n	800c1a8 <__swbuf_r+0x28>
 800c20e:	f04f 37ff 	mov.w	r7, #4294967295
 800c212:	4638      	mov	r0, r7
 800c214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c216:	bf00      	nop
 800c218:	0800d9c0 	.word	0x0800d9c0
 800c21c:	0800d9e0 	.word	0x0800d9e0
 800c220:	0800d9a0 	.word	0x0800d9a0

0800c224 <__swsetup_r>:
 800c224:	4b32      	ldr	r3, [pc, #200]	; (800c2f0 <__swsetup_r+0xcc>)
 800c226:	b570      	push	{r4, r5, r6, lr}
 800c228:	681d      	ldr	r5, [r3, #0]
 800c22a:	4606      	mov	r6, r0
 800c22c:	460c      	mov	r4, r1
 800c22e:	b125      	cbz	r5, 800c23a <__swsetup_r+0x16>
 800c230:	69ab      	ldr	r3, [r5, #24]
 800c232:	b913      	cbnz	r3, 800c23a <__swsetup_r+0x16>
 800c234:	4628      	mov	r0, r5
 800c236:	f000 f955 	bl	800c4e4 <__sinit>
 800c23a:	4b2e      	ldr	r3, [pc, #184]	; (800c2f4 <__swsetup_r+0xd0>)
 800c23c:	429c      	cmp	r4, r3
 800c23e:	d10f      	bne.n	800c260 <__swsetup_r+0x3c>
 800c240:	686c      	ldr	r4, [r5, #4]
 800c242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c246:	b29a      	uxth	r2, r3
 800c248:	0715      	lsls	r5, r2, #28
 800c24a:	d42c      	bmi.n	800c2a6 <__swsetup_r+0x82>
 800c24c:	06d0      	lsls	r0, r2, #27
 800c24e:	d411      	bmi.n	800c274 <__swsetup_r+0x50>
 800c250:	2209      	movs	r2, #9
 800c252:	6032      	str	r2, [r6, #0]
 800c254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c258:	81a3      	strh	r3, [r4, #12]
 800c25a:	f04f 30ff 	mov.w	r0, #4294967295
 800c25e:	bd70      	pop	{r4, r5, r6, pc}
 800c260:	4b25      	ldr	r3, [pc, #148]	; (800c2f8 <__swsetup_r+0xd4>)
 800c262:	429c      	cmp	r4, r3
 800c264:	d101      	bne.n	800c26a <__swsetup_r+0x46>
 800c266:	68ac      	ldr	r4, [r5, #8]
 800c268:	e7eb      	b.n	800c242 <__swsetup_r+0x1e>
 800c26a:	4b24      	ldr	r3, [pc, #144]	; (800c2fc <__swsetup_r+0xd8>)
 800c26c:	429c      	cmp	r4, r3
 800c26e:	bf08      	it	eq
 800c270:	68ec      	ldreq	r4, [r5, #12]
 800c272:	e7e6      	b.n	800c242 <__swsetup_r+0x1e>
 800c274:	0751      	lsls	r1, r2, #29
 800c276:	d512      	bpl.n	800c29e <__swsetup_r+0x7a>
 800c278:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c27a:	b141      	cbz	r1, 800c28e <__swsetup_r+0x6a>
 800c27c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c280:	4299      	cmp	r1, r3
 800c282:	d002      	beq.n	800c28a <__swsetup_r+0x66>
 800c284:	4630      	mov	r0, r6
 800c286:	f000 fa1b 	bl	800c6c0 <_free_r>
 800c28a:	2300      	movs	r3, #0
 800c28c:	6363      	str	r3, [r4, #52]	; 0x34
 800c28e:	89a3      	ldrh	r3, [r4, #12]
 800c290:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c294:	81a3      	strh	r3, [r4, #12]
 800c296:	2300      	movs	r3, #0
 800c298:	6063      	str	r3, [r4, #4]
 800c29a:	6923      	ldr	r3, [r4, #16]
 800c29c:	6023      	str	r3, [r4, #0]
 800c29e:	89a3      	ldrh	r3, [r4, #12]
 800c2a0:	f043 0308 	orr.w	r3, r3, #8
 800c2a4:	81a3      	strh	r3, [r4, #12]
 800c2a6:	6923      	ldr	r3, [r4, #16]
 800c2a8:	b94b      	cbnz	r3, 800c2be <__swsetup_r+0x9a>
 800c2aa:	89a3      	ldrh	r3, [r4, #12]
 800c2ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c2b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c2b4:	d003      	beq.n	800c2be <__swsetup_r+0x9a>
 800c2b6:	4621      	mov	r1, r4
 800c2b8:	4630      	mov	r0, r6
 800c2ba:	f000 f9c1 	bl	800c640 <__smakebuf_r>
 800c2be:	89a2      	ldrh	r2, [r4, #12]
 800c2c0:	f012 0301 	ands.w	r3, r2, #1
 800c2c4:	d00c      	beq.n	800c2e0 <__swsetup_r+0xbc>
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	60a3      	str	r3, [r4, #8]
 800c2ca:	6963      	ldr	r3, [r4, #20]
 800c2cc:	425b      	negs	r3, r3
 800c2ce:	61a3      	str	r3, [r4, #24]
 800c2d0:	6923      	ldr	r3, [r4, #16]
 800c2d2:	b953      	cbnz	r3, 800c2ea <__swsetup_r+0xc6>
 800c2d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2d8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c2dc:	d1ba      	bne.n	800c254 <__swsetup_r+0x30>
 800c2de:	bd70      	pop	{r4, r5, r6, pc}
 800c2e0:	0792      	lsls	r2, r2, #30
 800c2e2:	bf58      	it	pl
 800c2e4:	6963      	ldrpl	r3, [r4, #20]
 800c2e6:	60a3      	str	r3, [r4, #8]
 800c2e8:	e7f2      	b.n	800c2d0 <__swsetup_r+0xac>
 800c2ea:	2000      	movs	r0, #0
 800c2ec:	e7f7      	b.n	800c2de <__swsetup_r+0xba>
 800c2ee:	bf00      	nop
 800c2f0:	20000044 	.word	0x20000044
 800c2f4:	0800d9c0 	.word	0x0800d9c0
 800c2f8:	0800d9e0 	.word	0x0800d9e0
 800c2fc:	0800d9a0 	.word	0x0800d9a0

0800c300 <__sflush_r>:
 800c300:	898a      	ldrh	r2, [r1, #12]
 800c302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c306:	4605      	mov	r5, r0
 800c308:	0710      	lsls	r0, r2, #28
 800c30a:	460c      	mov	r4, r1
 800c30c:	d45a      	bmi.n	800c3c4 <__sflush_r+0xc4>
 800c30e:	684b      	ldr	r3, [r1, #4]
 800c310:	2b00      	cmp	r3, #0
 800c312:	dc05      	bgt.n	800c320 <__sflush_r+0x20>
 800c314:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c316:	2b00      	cmp	r3, #0
 800c318:	dc02      	bgt.n	800c320 <__sflush_r+0x20>
 800c31a:	2000      	movs	r0, #0
 800c31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c320:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c322:	2e00      	cmp	r6, #0
 800c324:	d0f9      	beq.n	800c31a <__sflush_r+0x1a>
 800c326:	2300      	movs	r3, #0
 800c328:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c32c:	682f      	ldr	r7, [r5, #0]
 800c32e:	602b      	str	r3, [r5, #0]
 800c330:	d033      	beq.n	800c39a <__sflush_r+0x9a>
 800c332:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c334:	89a3      	ldrh	r3, [r4, #12]
 800c336:	075a      	lsls	r2, r3, #29
 800c338:	d505      	bpl.n	800c346 <__sflush_r+0x46>
 800c33a:	6863      	ldr	r3, [r4, #4]
 800c33c:	1ac0      	subs	r0, r0, r3
 800c33e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c340:	b10b      	cbz	r3, 800c346 <__sflush_r+0x46>
 800c342:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c344:	1ac0      	subs	r0, r0, r3
 800c346:	2300      	movs	r3, #0
 800c348:	4602      	mov	r2, r0
 800c34a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c34c:	6a21      	ldr	r1, [r4, #32]
 800c34e:	4628      	mov	r0, r5
 800c350:	47b0      	blx	r6
 800c352:	1c43      	adds	r3, r0, #1
 800c354:	89a3      	ldrh	r3, [r4, #12]
 800c356:	d106      	bne.n	800c366 <__sflush_r+0x66>
 800c358:	6829      	ldr	r1, [r5, #0]
 800c35a:	291d      	cmp	r1, #29
 800c35c:	d84b      	bhi.n	800c3f6 <__sflush_r+0xf6>
 800c35e:	4a2b      	ldr	r2, [pc, #172]	; (800c40c <__sflush_r+0x10c>)
 800c360:	40ca      	lsrs	r2, r1
 800c362:	07d6      	lsls	r6, r2, #31
 800c364:	d547      	bpl.n	800c3f6 <__sflush_r+0xf6>
 800c366:	2200      	movs	r2, #0
 800c368:	6062      	str	r2, [r4, #4]
 800c36a:	04d9      	lsls	r1, r3, #19
 800c36c:	6922      	ldr	r2, [r4, #16]
 800c36e:	6022      	str	r2, [r4, #0]
 800c370:	d504      	bpl.n	800c37c <__sflush_r+0x7c>
 800c372:	1c42      	adds	r2, r0, #1
 800c374:	d101      	bne.n	800c37a <__sflush_r+0x7a>
 800c376:	682b      	ldr	r3, [r5, #0]
 800c378:	b903      	cbnz	r3, 800c37c <__sflush_r+0x7c>
 800c37a:	6560      	str	r0, [r4, #84]	; 0x54
 800c37c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c37e:	602f      	str	r7, [r5, #0]
 800c380:	2900      	cmp	r1, #0
 800c382:	d0ca      	beq.n	800c31a <__sflush_r+0x1a>
 800c384:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c388:	4299      	cmp	r1, r3
 800c38a:	d002      	beq.n	800c392 <__sflush_r+0x92>
 800c38c:	4628      	mov	r0, r5
 800c38e:	f000 f997 	bl	800c6c0 <_free_r>
 800c392:	2000      	movs	r0, #0
 800c394:	6360      	str	r0, [r4, #52]	; 0x34
 800c396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c39a:	6a21      	ldr	r1, [r4, #32]
 800c39c:	2301      	movs	r3, #1
 800c39e:	4628      	mov	r0, r5
 800c3a0:	47b0      	blx	r6
 800c3a2:	1c41      	adds	r1, r0, #1
 800c3a4:	d1c6      	bne.n	800c334 <__sflush_r+0x34>
 800c3a6:	682b      	ldr	r3, [r5, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d0c3      	beq.n	800c334 <__sflush_r+0x34>
 800c3ac:	2b1d      	cmp	r3, #29
 800c3ae:	d001      	beq.n	800c3b4 <__sflush_r+0xb4>
 800c3b0:	2b16      	cmp	r3, #22
 800c3b2:	d101      	bne.n	800c3b8 <__sflush_r+0xb8>
 800c3b4:	602f      	str	r7, [r5, #0]
 800c3b6:	e7b0      	b.n	800c31a <__sflush_r+0x1a>
 800c3b8:	89a3      	ldrh	r3, [r4, #12]
 800c3ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3be:	81a3      	strh	r3, [r4, #12]
 800c3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3c4:	690f      	ldr	r7, [r1, #16]
 800c3c6:	2f00      	cmp	r7, #0
 800c3c8:	d0a7      	beq.n	800c31a <__sflush_r+0x1a>
 800c3ca:	0793      	lsls	r3, r2, #30
 800c3cc:	680e      	ldr	r6, [r1, #0]
 800c3ce:	bf08      	it	eq
 800c3d0:	694b      	ldreq	r3, [r1, #20]
 800c3d2:	600f      	str	r7, [r1, #0]
 800c3d4:	bf18      	it	ne
 800c3d6:	2300      	movne	r3, #0
 800c3d8:	eba6 0807 	sub.w	r8, r6, r7
 800c3dc:	608b      	str	r3, [r1, #8]
 800c3de:	f1b8 0f00 	cmp.w	r8, #0
 800c3e2:	dd9a      	ble.n	800c31a <__sflush_r+0x1a>
 800c3e4:	4643      	mov	r3, r8
 800c3e6:	463a      	mov	r2, r7
 800c3e8:	6a21      	ldr	r1, [r4, #32]
 800c3ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c3ec:	4628      	mov	r0, r5
 800c3ee:	47b0      	blx	r6
 800c3f0:	2800      	cmp	r0, #0
 800c3f2:	dc07      	bgt.n	800c404 <__sflush_r+0x104>
 800c3f4:	89a3      	ldrh	r3, [r4, #12]
 800c3f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3fa:	81a3      	strh	r3, [r4, #12]
 800c3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c404:	4407      	add	r7, r0
 800c406:	eba8 0800 	sub.w	r8, r8, r0
 800c40a:	e7e8      	b.n	800c3de <__sflush_r+0xde>
 800c40c:	20400001 	.word	0x20400001

0800c410 <_fflush_r>:
 800c410:	b538      	push	{r3, r4, r5, lr}
 800c412:	690b      	ldr	r3, [r1, #16]
 800c414:	4605      	mov	r5, r0
 800c416:	460c      	mov	r4, r1
 800c418:	b1db      	cbz	r3, 800c452 <_fflush_r+0x42>
 800c41a:	b118      	cbz	r0, 800c424 <_fflush_r+0x14>
 800c41c:	6983      	ldr	r3, [r0, #24]
 800c41e:	b90b      	cbnz	r3, 800c424 <_fflush_r+0x14>
 800c420:	f000 f860 	bl	800c4e4 <__sinit>
 800c424:	4b0c      	ldr	r3, [pc, #48]	; (800c458 <_fflush_r+0x48>)
 800c426:	429c      	cmp	r4, r3
 800c428:	d109      	bne.n	800c43e <_fflush_r+0x2e>
 800c42a:	686c      	ldr	r4, [r5, #4]
 800c42c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c430:	b17b      	cbz	r3, 800c452 <_fflush_r+0x42>
 800c432:	4621      	mov	r1, r4
 800c434:	4628      	mov	r0, r5
 800c436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c43a:	f7ff bf61 	b.w	800c300 <__sflush_r>
 800c43e:	4b07      	ldr	r3, [pc, #28]	; (800c45c <_fflush_r+0x4c>)
 800c440:	429c      	cmp	r4, r3
 800c442:	d101      	bne.n	800c448 <_fflush_r+0x38>
 800c444:	68ac      	ldr	r4, [r5, #8]
 800c446:	e7f1      	b.n	800c42c <_fflush_r+0x1c>
 800c448:	4b05      	ldr	r3, [pc, #20]	; (800c460 <_fflush_r+0x50>)
 800c44a:	429c      	cmp	r4, r3
 800c44c:	bf08      	it	eq
 800c44e:	68ec      	ldreq	r4, [r5, #12]
 800c450:	e7ec      	b.n	800c42c <_fflush_r+0x1c>
 800c452:	2000      	movs	r0, #0
 800c454:	bd38      	pop	{r3, r4, r5, pc}
 800c456:	bf00      	nop
 800c458:	0800d9c0 	.word	0x0800d9c0
 800c45c:	0800d9e0 	.word	0x0800d9e0
 800c460:	0800d9a0 	.word	0x0800d9a0

0800c464 <_cleanup_r>:
 800c464:	4901      	ldr	r1, [pc, #4]	; (800c46c <_cleanup_r+0x8>)
 800c466:	f000 b8a9 	b.w	800c5bc <_fwalk_reent>
 800c46a:	bf00      	nop
 800c46c:	0800c411 	.word	0x0800c411

0800c470 <std.isra.0>:
 800c470:	2300      	movs	r3, #0
 800c472:	b510      	push	{r4, lr}
 800c474:	4604      	mov	r4, r0
 800c476:	6003      	str	r3, [r0, #0]
 800c478:	6043      	str	r3, [r0, #4]
 800c47a:	6083      	str	r3, [r0, #8]
 800c47c:	8181      	strh	r1, [r0, #12]
 800c47e:	6643      	str	r3, [r0, #100]	; 0x64
 800c480:	81c2      	strh	r2, [r0, #14]
 800c482:	6103      	str	r3, [r0, #16]
 800c484:	6143      	str	r3, [r0, #20]
 800c486:	6183      	str	r3, [r0, #24]
 800c488:	4619      	mov	r1, r3
 800c48a:	2208      	movs	r2, #8
 800c48c:	305c      	adds	r0, #92	; 0x5c
 800c48e:	f7ff fc01 	bl	800bc94 <memset>
 800c492:	4b05      	ldr	r3, [pc, #20]	; (800c4a8 <std.isra.0+0x38>)
 800c494:	6263      	str	r3, [r4, #36]	; 0x24
 800c496:	4b05      	ldr	r3, [pc, #20]	; (800c4ac <std.isra.0+0x3c>)
 800c498:	62a3      	str	r3, [r4, #40]	; 0x28
 800c49a:	4b05      	ldr	r3, [pc, #20]	; (800c4b0 <std.isra.0+0x40>)
 800c49c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c49e:	4b05      	ldr	r3, [pc, #20]	; (800c4b4 <std.isra.0+0x44>)
 800c4a0:	6224      	str	r4, [r4, #32]
 800c4a2:	6323      	str	r3, [r4, #48]	; 0x30
 800c4a4:	bd10      	pop	{r4, pc}
 800c4a6:	bf00      	nop
 800c4a8:	0800cde5 	.word	0x0800cde5
 800c4ac:	0800ce07 	.word	0x0800ce07
 800c4b0:	0800ce3f 	.word	0x0800ce3f
 800c4b4:	0800ce63 	.word	0x0800ce63

0800c4b8 <__sfmoreglue>:
 800c4b8:	b570      	push	{r4, r5, r6, lr}
 800c4ba:	1e4a      	subs	r2, r1, #1
 800c4bc:	2568      	movs	r5, #104	; 0x68
 800c4be:	4355      	muls	r5, r2
 800c4c0:	460e      	mov	r6, r1
 800c4c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c4c6:	f000 f949 	bl	800c75c <_malloc_r>
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	b140      	cbz	r0, 800c4e0 <__sfmoreglue+0x28>
 800c4ce:	2100      	movs	r1, #0
 800c4d0:	e880 0042 	stmia.w	r0, {r1, r6}
 800c4d4:	300c      	adds	r0, #12
 800c4d6:	60a0      	str	r0, [r4, #8]
 800c4d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c4dc:	f7ff fbda 	bl	800bc94 <memset>
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	bd70      	pop	{r4, r5, r6, pc}

0800c4e4 <__sinit>:
 800c4e4:	6983      	ldr	r3, [r0, #24]
 800c4e6:	b510      	push	{r4, lr}
 800c4e8:	4604      	mov	r4, r0
 800c4ea:	bb33      	cbnz	r3, 800c53a <__sinit+0x56>
 800c4ec:	6483      	str	r3, [r0, #72]	; 0x48
 800c4ee:	64c3      	str	r3, [r0, #76]	; 0x4c
 800c4f0:	6503      	str	r3, [r0, #80]	; 0x50
 800c4f2:	4b12      	ldr	r3, [pc, #72]	; (800c53c <__sinit+0x58>)
 800c4f4:	4a12      	ldr	r2, [pc, #72]	; (800c540 <__sinit+0x5c>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	6282      	str	r2, [r0, #40]	; 0x28
 800c4fa:	4298      	cmp	r0, r3
 800c4fc:	bf04      	itt	eq
 800c4fe:	2301      	moveq	r3, #1
 800c500:	6183      	streq	r3, [r0, #24]
 800c502:	f000 f81f 	bl	800c544 <__sfp>
 800c506:	6060      	str	r0, [r4, #4]
 800c508:	4620      	mov	r0, r4
 800c50a:	f000 f81b 	bl	800c544 <__sfp>
 800c50e:	60a0      	str	r0, [r4, #8]
 800c510:	4620      	mov	r0, r4
 800c512:	f000 f817 	bl	800c544 <__sfp>
 800c516:	2200      	movs	r2, #0
 800c518:	60e0      	str	r0, [r4, #12]
 800c51a:	2104      	movs	r1, #4
 800c51c:	6860      	ldr	r0, [r4, #4]
 800c51e:	f7ff ffa7 	bl	800c470 <std.isra.0>
 800c522:	2201      	movs	r2, #1
 800c524:	2109      	movs	r1, #9
 800c526:	68a0      	ldr	r0, [r4, #8]
 800c528:	f7ff ffa2 	bl	800c470 <std.isra.0>
 800c52c:	2202      	movs	r2, #2
 800c52e:	2112      	movs	r1, #18
 800c530:	68e0      	ldr	r0, [r4, #12]
 800c532:	f7ff ff9d 	bl	800c470 <std.isra.0>
 800c536:	2301      	movs	r3, #1
 800c538:	61a3      	str	r3, [r4, #24]
 800c53a:	bd10      	pop	{r4, pc}
 800c53c:	0800d304 	.word	0x0800d304
 800c540:	0800c465 	.word	0x0800c465

0800c544 <__sfp>:
 800c544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c546:	4b1c      	ldr	r3, [pc, #112]	; (800c5b8 <__sfp+0x74>)
 800c548:	681e      	ldr	r6, [r3, #0]
 800c54a:	69b3      	ldr	r3, [r6, #24]
 800c54c:	4607      	mov	r7, r0
 800c54e:	b913      	cbnz	r3, 800c556 <__sfp+0x12>
 800c550:	4630      	mov	r0, r6
 800c552:	f7ff ffc7 	bl	800c4e4 <__sinit>
 800c556:	3648      	adds	r6, #72	; 0x48
 800c558:	68b4      	ldr	r4, [r6, #8]
 800c55a:	6873      	ldr	r3, [r6, #4]
 800c55c:	3b01      	subs	r3, #1
 800c55e:	d503      	bpl.n	800c568 <__sfp+0x24>
 800c560:	6833      	ldr	r3, [r6, #0]
 800c562:	b133      	cbz	r3, 800c572 <__sfp+0x2e>
 800c564:	6836      	ldr	r6, [r6, #0]
 800c566:	e7f7      	b.n	800c558 <__sfp+0x14>
 800c568:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c56c:	b16d      	cbz	r5, 800c58a <__sfp+0x46>
 800c56e:	3468      	adds	r4, #104	; 0x68
 800c570:	e7f4      	b.n	800c55c <__sfp+0x18>
 800c572:	2104      	movs	r1, #4
 800c574:	4638      	mov	r0, r7
 800c576:	f7ff ff9f 	bl	800c4b8 <__sfmoreglue>
 800c57a:	6030      	str	r0, [r6, #0]
 800c57c:	2800      	cmp	r0, #0
 800c57e:	d1f1      	bne.n	800c564 <__sfp+0x20>
 800c580:	230c      	movs	r3, #12
 800c582:	603b      	str	r3, [r7, #0]
 800c584:	4604      	mov	r4, r0
 800c586:	4620      	mov	r0, r4
 800c588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c58a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c58e:	81e3      	strh	r3, [r4, #14]
 800c590:	2301      	movs	r3, #1
 800c592:	81a3      	strh	r3, [r4, #12]
 800c594:	6665      	str	r5, [r4, #100]	; 0x64
 800c596:	6025      	str	r5, [r4, #0]
 800c598:	60a5      	str	r5, [r4, #8]
 800c59a:	6065      	str	r5, [r4, #4]
 800c59c:	6125      	str	r5, [r4, #16]
 800c59e:	6165      	str	r5, [r4, #20]
 800c5a0:	61a5      	str	r5, [r4, #24]
 800c5a2:	2208      	movs	r2, #8
 800c5a4:	4629      	mov	r1, r5
 800c5a6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c5aa:	f7ff fb73 	bl	800bc94 <memset>
 800c5ae:	6365      	str	r5, [r4, #52]	; 0x34
 800c5b0:	63a5      	str	r5, [r4, #56]	; 0x38
 800c5b2:	64a5      	str	r5, [r4, #72]	; 0x48
 800c5b4:	64e5      	str	r5, [r4, #76]	; 0x4c
 800c5b6:	e7e6      	b.n	800c586 <__sfp+0x42>
 800c5b8:	0800d304 	.word	0x0800d304

0800c5bc <_fwalk_reent>:
 800c5bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5c0:	4680      	mov	r8, r0
 800c5c2:	4689      	mov	r9, r1
 800c5c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c5c8:	2600      	movs	r6, #0
 800c5ca:	b914      	cbnz	r4, 800c5d2 <_fwalk_reent+0x16>
 800c5cc:	4630      	mov	r0, r6
 800c5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5d2:	68a5      	ldr	r5, [r4, #8]
 800c5d4:	6867      	ldr	r7, [r4, #4]
 800c5d6:	3f01      	subs	r7, #1
 800c5d8:	d501      	bpl.n	800c5de <_fwalk_reent+0x22>
 800c5da:	6824      	ldr	r4, [r4, #0]
 800c5dc:	e7f5      	b.n	800c5ca <_fwalk_reent+0xe>
 800c5de:	89ab      	ldrh	r3, [r5, #12]
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	d907      	bls.n	800c5f4 <_fwalk_reent+0x38>
 800c5e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	d003      	beq.n	800c5f4 <_fwalk_reent+0x38>
 800c5ec:	4629      	mov	r1, r5
 800c5ee:	4640      	mov	r0, r8
 800c5f0:	47c8      	blx	r9
 800c5f2:	4306      	orrs	r6, r0
 800c5f4:	3568      	adds	r5, #104	; 0x68
 800c5f6:	e7ee      	b.n	800c5d6 <_fwalk_reent+0x1a>

0800c5f8 <__swhatbuf_r>:
 800c5f8:	b570      	push	{r4, r5, r6, lr}
 800c5fa:	460e      	mov	r6, r1
 800c5fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c600:	2900      	cmp	r1, #0
 800c602:	b090      	sub	sp, #64	; 0x40
 800c604:	4614      	mov	r4, r2
 800c606:	461d      	mov	r5, r3
 800c608:	da07      	bge.n	800c61a <__swhatbuf_r+0x22>
 800c60a:	2300      	movs	r3, #0
 800c60c:	602b      	str	r3, [r5, #0]
 800c60e:	89b3      	ldrh	r3, [r6, #12]
 800c610:	061a      	lsls	r2, r3, #24
 800c612:	d410      	bmi.n	800c636 <__swhatbuf_r+0x3e>
 800c614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c618:	e00e      	b.n	800c638 <__swhatbuf_r+0x40>
 800c61a:	aa01      	add	r2, sp, #4
 800c61c:	f000 fc48 	bl	800ceb0 <_fstat_r>
 800c620:	2800      	cmp	r0, #0
 800c622:	dbf2      	blt.n	800c60a <__swhatbuf_r+0x12>
 800c624:	9a02      	ldr	r2, [sp, #8]
 800c626:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c62a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c62e:	425a      	negs	r2, r3
 800c630:	415a      	adcs	r2, r3
 800c632:	602a      	str	r2, [r5, #0]
 800c634:	e7ee      	b.n	800c614 <__swhatbuf_r+0x1c>
 800c636:	2340      	movs	r3, #64	; 0x40
 800c638:	2000      	movs	r0, #0
 800c63a:	6023      	str	r3, [r4, #0]
 800c63c:	b010      	add	sp, #64	; 0x40
 800c63e:	bd70      	pop	{r4, r5, r6, pc}

0800c640 <__smakebuf_r>:
 800c640:	898b      	ldrh	r3, [r1, #12]
 800c642:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c644:	079d      	lsls	r5, r3, #30
 800c646:	4606      	mov	r6, r0
 800c648:	460c      	mov	r4, r1
 800c64a:	d507      	bpl.n	800c65c <__smakebuf_r+0x1c>
 800c64c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c650:	6023      	str	r3, [r4, #0]
 800c652:	6123      	str	r3, [r4, #16]
 800c654:	2301      	movs	r3, #1
 800c656:	6163      	str	r3, [r4, #20]
 800c658:	b002      	add	sp, #8
 800c65a:	bd70      	pop	{r4, r5, r6, pc}
 800c65c:	ab01      	add	r3, sp, #4
 800c65e:	466a      	mov	r2, sp
 800c660:	f7ff ffca 	bl	800c5f8 <__swhatbuf_r>
 800c664:	9900      	ldr	r1, [sp, #0]
 800c666:	4605      	mov	r5, r0
 800c668:	4630      	mov	r0, r6
 800c66a:	f000 f877 	bl	800c75c <_malloc_r>
 800c66e:	b948      	cbnz	r0, 800c684 <__smakebuf_r+0x44>
 800c670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c674:	059a      	lsls	r2, r3, #22
 800c676:	d4ef      	bmi.n	800c658 <__smakebuf_r+0x18>
 800c678:	f023 0303 	bic.w	r3, r3, #3
 800c67c:	f043 0302 	orr.w	r3, r3, #2
 800c680:	81a3      	strh	r3, [r4, #12]
 800c682:	e7e3      	b.n	800c64c <__smakebuf_r+0xc>
 800c684:	4b0d      	ldr	r3, [pc, #52]	; (800c6bc <__smakebuf_r+0x7c>)
 800c686:	62b3      	str	r3, [r6, #40]	; 0x28
 800c688:	89a3      	ldrh	r3, [r4, #12]
 800c68a:	6020      	str	r0, [r4, #0]
 800c68c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c690:	81a3      	strh	r3, [r4, #12]
 800c692:	9b00      	ldr	r3, [sp, #0]
 800c694:	6163      	str	r3, [r4, #20]
 800c696:	9b01      	ldr	r3, [sp, #4]
 800c698:	6120      	str	r0, [r4, #16]
 800c69a:	b15b      	cbz	r3, 800c6b4 <__smakebuf_r+0x74>
 800c69c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6a0:	4630      	mov	r0, r6
 800c6a2:	f000 fc17 	bl	800ced4 <_isatty_r>
 800c6a6:	b128      	cbz	r0, 800c6b4 <__smakebuf_r+0x74>
 800c6a8:	89a3      	ldrh	r3, [r4, #12]
 800c6aa:	f023 0303 	bic.w	r3, r3, #3
 800c6ae:	f043 0301 	orr.w	r3, r3, #1
 800c6b2:	81a3      	strh	r3, [r4, #12]
 800c6b4:	89a3      	ldrh	r3, [r4, #12]
 800c6b6:	431d      	orrs	r5, r3
 800c6b8:	81a5      	strh	r5, [r4, #12]
 800c6ba:	e7cd      	b.n	800c658 <__smakebuf_r+0x18>
 800c6bc:	0800c465 	.word	0x0800c465

0800c6c0 <_free_r>:
 800c6c0:	b538      	push	{r3, r4, r5, lr}
 800c6c2:	4605      	mov	r5, r0
 800c6c4:	2900      	cmp	r1, #0
 800c6c6:	d045      	beq.n	800c754 <_free_r+0x94>
 800c6c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6cc:	1f0c      	subs	r4, r1, #4
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	bfb8      	it	lt
 800c6d2:	18e4      	addlt	r4, r4, r3
 800c6d4:	f000 fc20 	bl	800cf18 <__malloc_lock>
 800c6d8:	4a1f      	ldr	r2, [pc, #124]	; (800c758 <_free_r+0x98>)
 800c6da:	6813      	ldr	r3, [r2, #0]
 800c6dc:	4610      	mov	r0, r2
 800c6de:	b933      	cbnz	r3, 800c6ee <_free_r+0x2e>
 800c6e0:	6063      	str	r3, [r4, #4]
 800c6e2:	6014      	str	r4, [r2, #0]
 800c6e4:	4628      	mov	r0, r5
 800c6e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6ea:	f000 bc16 	b.w	800cf1a <__malloc_unlock>
 800c6ee:	42a3      	cmp	r3, r4
 800c6f0:	d90c      	bls.n	800c70c <_free_r+0x4c>
 800c6f2:	6821      	ldr	r1, [r4, #0]
 800c6f4:	1862      	adds	r2, r4, r1
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	bf04      	itt	eq
 800c6fa:	681a      	ldreq	r2, [r3, #0]
 800c6fc:	685b      	ldreq	r3, [r3, #4]
 800c6fe:	6063      	str	r3, [r4, #4]
 800c700:	bf04      	itt	eq
 800c702:	1852      	addeq	r2, r2, r1
 800c704:	6022      	streq	r2, [r4, #0]
 800c706:	6004      	str	r4, [r0, #0]
 800c708:	e7ec      	b.n	800c6e4 <_free_r+0x24>
 800c70a:	4613      	mov	r3, r2
 800c70c:	685a      	ldr	r2, [r3, #4]
 800c70e:	b10a      	cbz	r2, 800c714 <_free_r+0x54>
 800c710:	42a2      	cmp	r2, r4
 800c712:	d9fa      	bls.n	800c70a <_free_r+0x4a>
 800c714:	6819      	ldr	r1, [r3, #0]
 800c716:	1858      	adds	r0, r3, r1
 800c718:	42a0      	cmp	r0, r4
 800c71a:	d10b      	bne.n	800c734 <_free_r+0x74>
 800c71c:	6820      	ldr	r0, [r4, #0]
 800c71e:	4401      	add	r1, r0
 800c720:	1858      	adds	r0, r3, r1
 800c722:	4282      	cmp	r2, r0
 800c724:	6019      	str	r1, [r3, #0]
 800c726:	d1dd      	bne.n	800c6e4 <_free_r+0x24>
 800c728:	6810      	ldr	r0, [r2, #0]
 800c72a:	6852      	ldr	r2, [r2, #4]
 800c72c:	605a      	str	r2, [r3, #4]
 800c72e:	4401      	add	r1, r0
 800c730:	6019      	str	r1, [r3, #0]
 800c732:	e7d7      	b.n	800c6e4 <_free_r+0x24>
 800c734:	d902      	bls.n	800c73c <_free_r+0x7c>
 800c736:	230c      	movs	r3, #12
 800c738:	602b      	str	r3, [r5, #0]
 800c73a:	e7d3      	b.n	800c6e4 <_free_r+0x24>
 800c73c:	6820      	ldr	r0, [r4, #0]
 800c73e:	1821      	adds	r1, r4, r0
 800c740:	428a      	cmp	r2, r1
 800c742:	bf04      	itt	eq
 800c744:	6811      	ldreq	r1, [r2, #0]
 800c746:	6852      	ldreq	r2, [r2, #4]
 800c748:	6062      	str	r2, [r4, #4]
 800c74a:	bf04      	itt	eq
 800c74c:	1809      	addeq	r1, r1, r0
 800c74e:	6021      	streq	r1, [r4, #0]
 800c750:	605c      	str	r4, [r3, #4]
 800c752:	e7c7      	b.n	800c6e4 <_free_r+0x24>
 800c754:	bd38      	pop	{r3, r4, r5, pc}
 800c756:	bf00      	nop
 800c758:	20004008 	.word	0x20004008

0800c75c <_malloc_r>:
 800c75c:	b570      	push	{r4, r5, r6, lr}
 800c75e:	1ccd      	adds	r5, r1, #3
 800c760:	f025 0503 	bic.w	r5, r5, #3
 800c764:	3508      	adds	r5, #8
 800c766:	2d0c      	cmp	r5, #12
 800c768:	bf38      	it	cc
 800c76a:	250c      	movcc	r5, #12
 800c76c:	2d00      	cmp	r5, #0
 800c76e:	4606      	mov	r6, r0
 800c770:	db01      	blt.n	800c776 <_malloc_r+0x1a>
 800c772:	42a9      	cmp	r1, r5
 800c774:	d903      	bls.n	800c77e <_malloc_r+0x22>
 800c776:	230c      	movs	r3, #12
 800c778:	6033      	str	r3, [r6, #0]
 800c77a:	2000      	movs	r0, #0
 800c77c:	bd70      	pop	{r4, r5, r6, pc}
 800c77e:	f000 fbcb 	bl	800cf18 <__malloc_lock>
 800c782:	4a23      	ldr	r2, [pc, #140]	; (800c810 <_malloc_r+0xb4>)
 800c784:	6814      	ldr	r4, [r2, #0]
 800c786:	4621      	mov	r1, r4
 800c788:	b991      	cbnz	r1, 800c7b0 <_malloc_r+0x54>
 800c78a:	4c22      	ldr	r4, [pc, #136]	; (800c814 <_malloc_r+0xb8>)
 800c78c:	6823      	ldr	r3, [r4, #0]
 800c78e:	b91b      	cbnz	r3, 800c798 <_malloc_r+0x3c>
 800c790:	4630      	mov	r0, r6
 800c792:	f000 fb17 	bl	800cdc4 <_sbrk_r>
 800c796:	6020      	str	r0, [r4, #0]
 800c798:	4629      	mov	r1, r5
 800c79a:	4630      	mov	r0, r6
 800c79c:	f000 fb12 	bl	800cdc4 <_sbrk_r>
 800c7a0:	1c43      	adds	r3, r0, #1
 800c7a2:	d126      	bne.n	800c7f2 <_malloc_r+0x96>
 800c7a4:	230c      	movs	r3, #12
 800c7a6:	6033      	str	r3, [r6, #0]
 800c7a8:	4630      	mov	r0, r6
 800c7aa:	f000 fbb6 	bl	800cf1a <__malloc_unlock>
 800c7ae:	e7e4      	b.n	800c77a <_malloc_r+0x1e>
 800c7b0:	680b      	ldr	r3, [r1, #0]
 800c7b2:	1b5b      	subs	r3, r3, r5
 800c7b4:	d41a      	bmi.n	800c7ec <_malloc_r+0x90>
 800c7b6:	2b0b      	cmp	r3, #11
 800c7b8:	d90f      	bls.n	800c7da <_malloc_r+0x7e>
 800c7ba:	600b      	str	r3, [r1, #0]
 800c7bc:	50cd      	str	r5, [r1, r3]
 800c7be:	18cc      	adds	r4, r1, r3
 800c7c0:	4630      	mov	r0, r6
 800c7c2:	f000 fbaa 	bl	800cf1a <__malloc_unlock>
 800c7c6:	f104 000b 	add.w	r0, r4, #11
 800c7ca:	1d23      	adds	r3, r4, #4
 800c7cc:	f020 0007 	bic.w	r0, r0, #7
 800c7d0:	1ac3      	subs	r3, r0, r3
 800c7d2:	d01b      	beq.n	800c80c <_malloc_r+0xb0>
 800c7d4:	425a      	negs	r2, r3
 800c7d6:	50e2      	str	r2, [r4, r3]
 800c7d8:	bd70      	pop	{r4, r5, r6, pc}
 800c7da:	428c      	cmp	r4, r1
 800c7dc:	bf0d      	iteet	eq
 800c7de:	6863      	ldreq	r3, [r4, #4]
 800c7e0:	684b      	ldrne	r3, [r1, #4]
 800c7e2:	6063      	strne	r3, [r4, #4]
 800c7e4:	6013      	streq	r3, [r2, #0]
 800c7e6:	bf18      	it	ne
 800c7e8:	460c      	movne	r4, r1
 800c7ea:	e7e9      	b.n	800c7c0 <_malloc_r+0x64>
 800c7ec:	460c      	mov	r4, r1
 800c7ee:	6849      	ldr	r1, [r1, #4]
 800c7f0:	e7ca      	b.n	800c788 <_malloc_r+0x2c>
 800c7f2:	1cc4      	adds	r4, r0, #3
 800c7f4:	f024 0403 	bic.w	r4, r4, #3
 800c7f8:	42a0      	cmp	r0, r4
 800c7fa:	d005      	beq.n	800c808 <_malloc_r+0xac>
 800c7fc:	1a21      	subs	r1, r4, r0
 800c7fe:	4630      	mov	r0, r6
 800c800:	f000 fae0 	bl	800cdc4 <_sbrk_r>
 800c804:	3001      	adds	r0, #1
 800c806:	d0cd      	beq.n	800c7a4 <_malloc_r+0x48>
 800c808:	6025      	str	r5, [r4, #0]
 800c80a:	e7d9      	b.n	800c7c0 <_malloc_r+0x64>
 800c80c:	bd70      	pop	{r4, r5, r6, pc}
 800c80e:	bf00      	nop
 800c810:	20004008 	.word	0x20004008
 800c814:	2000400c 	.word	0x2000400c

0800c818 <__sfputc_r>:
 800c818:	6893      	ldr	r3, [r2, #8]
 800c81a:	3b01      	subs	r3, #1
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	b410      	push	{r4}
 800c820:	6093      	str	r3, [r2, #8]
 800c822:	da09      	bge.n	800c838 <__sfputc_r+0x20>
 800c824:	6994      	ldr	r4, [r2, #24]
 800c826:	42a3      	cmp	r3, r4
 800c828:	db02      	blt.n	800c830 <__sfputc_r+0x18>
 800c82a:	b2cb      	uxtb	r3, r1
 800c82c:	2b0a      	cmp	r3, #10
 800c82e:	d103      	bne.n	800c838 <__sfputc_r+0x20>
 800c830:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c834:	f7ff bca4 	b.w	800c180 <__swbuf_r>
 800c838:	6813      	ldr	r3, [r2, #0]
 800c83a:	1c58      	adds	r0, r3, #1
 800c83c:	6010      	str	r0, [r2, #0]
 800c83e:	7019      	strb	r1, [r3, #0]
 800c840:	b2c8      	uxtb	r0, r1
 800c842:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c846:	4770      	bx	lr

0800c848 <__sfputs_r>:
 800c848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c84a:	4606      	mov	r6, r0
 800c84c:	460f      	mov	r7, r1
 800c84e:	4614      	mov	r4, r2
 800c850:	18d5      	adds	r5, r2, r3
 800c852:	42ac      	cmp	r4, r5
 800c854:	d101      	bne.n	800c85a <__sfputs_r+0x12>
 800c856:	2000      	movs	r0, #0
 800c858:	e007      	b.n	800c86a <__sfputs_r+0x22>
 800c85a:	463a      	mov	r2, r7
 800c85c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c860:	4630      	mov	r0, r6
 800c862:	f7ff ffd9 	bl	800c818 <__sfputc_r>
 800c866:	1c43      	adds	r3, r0, #1
 800c868:	d1f3      	bne.n	800c852 <__sfputs_r+0xa>
 800c86a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c86c <_vfiprintf_r>:
 800c86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c870:	b09d      	sub	sp, #116	; 0x74
 800c872:	460c      	mov	r4, r1
 800c874:	4617      	mov	r7, r2
 800c876:	9303      	str	r3, [sp, #12]
 800c878:	4606      	mov	r6, r0
 800c87a:	b118      	cbz	r0, 800c884 <_vfiprintf_r+0x18>
 800c87c:	6983      	ldr	r3, [r0, #24]
 800c87e:	b90b      	cbnz	r3, 800c884 <_vfiprintf_r+0x18>
 800c880:	f7ff fe30 	bl	800c4e4 <__sinit>
 800c884:	4b7c      	ldr	r3, [pc, #496]	; (800ca78 <_vfiprintf_r+0x20c>)
 800c886:	429c      	cmp	r4, r3
 800c888:	d157      	bne.n	800c93a <_vfiprintf_r+0xce>
 800c88a:	6874      	ldr	r4, [r6, #4]
 800c88c:	89a3      	ldrh	r3, [r4, #12]
 800c88e:	0718      	lsls	r0, r3, #28
 800c890:	d55d      	bpl.n	800c94e <_vfiprintf_r+0xe2>
 800c892:	6923      	ldr	r3, [r4, #16]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d05a      	beq.n	800c94e <_vfiprintf_r+0xe2>
 800c898:	2300      	movs	r3, #0
 800c89a:	9309      	str	r3, [sp, #36]	; 0x24
 800c89c:	2320      	movs	r3, #32
 800c89e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8a2:	2330      	movs	r3, #48	; 0x30
 800c8a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8a8:	f04f 0b01 	mov.w	fp, #1
 800c8ac:	46b8      	mov	r8, r7
 800c8ae:	4645      	mov	r5, r8
 800c8b0:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d155      	bne.n	800c964 <_vfiprintf_r+0xf8>
 800c8b8:	ebb8 0a07 	subs.w	sl, r8, r7
 800c8bc:	d00b      	beq.n	800c8d6 <_vfiprintf_r+0x6a>
 800c8be:	4653      	mov	r3, sl
 800c8c0:	463a      	mov	r2, r7
 800c8c2:	4621      	mov	r1, r4
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	f7ff ffbf 	bl	800c848 <__sfputs_r>
 800c8ca:	3001      	adds	r0, #1
 800c8cc:	f000 80c4 	beq.w	800ca58 <_vfiprintf_r+0x1ec>
 800c8d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8d2:	4453      	add	r3, sl
 800c8d4:	9309      	str	r3, [sp, #36]	; 0x24
 800c8d6:	f898 3000 	ldrb.w	r3, [r8]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	f000 80bc 	beq.w	800ca58 <_vfiprintf_r+0x1ec>
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	f04f 32ff 	mov.w	r2, #4294967295
 800c8e6:	9304      	str	r3, [sp, #16]
 800c8e8:	9307      	str	r3, [sp, #28]
 800c8ea:	9205      	str	r2, [sp, #20]
 800c8ec:	9306      	str	r3, [sp, #24]
 800c8ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8f2:	931a      	str	r3, [sp, #104]	; 0x68
 800c8f4:	2205      	movs	r2, #5
 800c8f6:	7829      	ldrb	r1, [r5, #0]
 800c8f8:	4860      	ldr	r0, [pc, #384]	; (800ca7c <_vfiprintf_r+0x210>)
 800c8fa:	f7f3 fc81 	bl	8000200 <memchr>
 800c8fe:	f105 0801 	add.w	r8, r5, #1
 800c902:	9b04      	ldr	r3, [sp, #16]
 800c904:	2800      	cmp	r0, #0
 800c906:	d131      	bne.n	800c96c <_vfiprintf_r+0x100>
 800c908:	06d9      	lsls	r1, r3, #27
 800c90a:	bf44      	itt	mi
 800c90c:	2220      	movmi	r2, #32
 800c90e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c912:	071a      	lsls	r2, r3, #28
 800c914:	bf44      	itt	mi
 800c916:	222b      	movmi	r2, #43	; 0x2b
 800c918:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c91c:	782a      	ldrb	r2, [r5, #0]
 800c91e:	2a2a      	cmp	r2, #42	; 0x2a
 800c920:	d02c      	beq.n	800c97c <_vfiprintf_r+0x110>
 800c922:	9a07      	ldr	r2, [sp, #28]
 800c924:	2100      	movs	r1, #0
 800c926:	200a      	movs	r0, #10
 800c928:	46a8      	mov	r8, r5
 800c92a:	3501      	adds	r5, #1
 800c92c:	f898 3000 	ldrb.w	r3, [r8]
 800c930:	3b30      	subs	r3, #48	; 0x30
 800c932:	2b09      	cmp	r3, #9
 800c934:	d96d      	bls.n	800ca12 <_vfiprintf_r+0x1a6>
 800c936:	b371      	cbz	r1, 800c996 <_vfiprintf_r+0x12a>
 800c938:	e026      	b.n	800c988 <_vfiprintf_r+0x11c>
 800c93a:	4b51      	ldr	r3, [pc, #324]	; (800ca80 <_vfiprintf_r+0x214>)
 800c93c:	429c      	cmp	r4, r3
 800c93e:	d101      	bne.n	800c944 <_vfiprintf_r+0xd8>
 800c940:	68b4      	ldr	r4, [r6, #8]
 800c942:	e7a3      	b.n	800c88c <_vfiprintf_r+0x20>
 800c944:	4b4f      	ldr	r3, [pc, #316]	; (800ca84 <_vfiprintf_r+0x218>)
 800c946:	429c      	cmp	r4, r3
 800c948:	bf08      	it	eq
 800c94a:	68f4      	ldreq	r4, [r6, #12]
 800c94c:	e79e      	b.n	800c88c <_vfiprintf_r+0x20>
 800c94e:	4621      	mov	r1, r4
 800c950:	4630      	mov	r0, r6
 800c952:	f7ff fc67 	bl	800c224 <__swsetup_r>
 800c956:	2800      	cmp	r0, #0
 800c958:	d09e      	beq.n	800c898 <_vfiprintf_r+0x2c>
 800c95a:	f04f 30ff 	mov.w	r0, #4294967295
 800c95e:	b01d      	add	sp, #116	; 0x74
 800c960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c964:	2b25      	cmp	r3, #37	; 0x25
 800c966:	d0a7      	beq.n	800c8b8 <_vfiprintf_r+0x4c>
 800c968:	46a8      	mov	r8, r5
 800c96a:	e7a0      	b.n	800c8ae <_vfiprintf_r+0x42>
 800c96c:	4a43      	ldr	r2, [pc, #268]	; (800ca7c <_vfiprintf_r+0x210>)
 800c96e:	1a80      	subs	r0, r0, r2
 800c970:	fa0b f000 	lsl.w	r0, fp, r0
 800c974:	4318      	orrs	r0, r3
 800c976:	9004      	str	r0, [sp, #16]
 800c978:	4645      	mov	r5, r8
 800c97a:	e7bb      	b.n	800c8f4 <_vfiprintf_r+0x88>
 800c97c:	9a03      	ldr	r2, [sp, #12]
 800c97e:	1d11      	adds	r1, r2, #4
 800c980:	6812      	ldr	r2, [r2, #0]
 800c982:	9103      	str	r1, [sp, #12]
 800c984:	2a00      	cmp	r2, #0
 800c986:	db01      	blt.n	800c98c <_vfiprintf_r+0x120>
 800c988:	9207      	str	r2, [sp, #28]
 800c98a:	e004      	b.n	800c996 <_vfiprintf_r+0x12a>
 800c98c:	4252      	negs	r2, r2
 800c98e:	f043 0302 	orr.w	r3, r3, #2
 800c992:	9207      	str	r2, [sp, #28]
 800c994:	9304      	str	r3, [sp, #16]
 800c996:	f898 3000 	ldrb.w	r3, [r8]
 800c99a:	2b2e      	cmp	r3, #46	; 0x2e
 800c99c:	d110      	bne.n	800c9c0 <_vfiprintf_r+0x154>
 800c99e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c9a2:	2b2a      	cmp	r3, #42	; 0x2a
 800c9a4:	f108 0101 	add.w	r1, r8, #1
 800c9a8:	d137      	bne.n	800ca1a <_vfiprintf_r+0x1ae>
 800c9aa:	9b03      	ldr	r3, [sp, #12]
 800c9ac:	1d1a      	adds	r2, r3, #4
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	9203      	str	r2, [sp, #12]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	bfb8      	it	lt
 800c9b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c9ba:	f108 0802 	add.w	r8, r8, #2
 800c9be:	9305      	str	r3, [sp, #20]
 800c9c0:	4d31      	ldr	r5, [pc, #196]	; (800ca88 <_vfiprintf_r+0x21c>)
 800c9c2:	f898 1000 	ldrb.w	r1, [r8]
 800c9c6:	2203      	movs	r2, #3
 800c9c8:	4628      	mov	r0, r5
 800c9ca:	f7f3 fc19 	bl	8000200 <memchr>
 800c9ce:	b140      	cbz	r0, 800c9e2 <_vfiprintf_r+0x176>
 800c9d0:	2340      	movs	r3, #64	; 0x40
 800c9d2:	1b40      	subs	r0, r0, r5
 800c9d4:	fa03 f000 	lsl.w	r0, r3, r0
 800c9d8:	9b04      	ldr	r3, [sp, #16]
 800c9da:	4303      	orrs	r3, r0
 800c9dc:	9304      	str	r3, [sp, #16]
 800c9de:	f108 0801 	add.w	r8, r8, #1
 800c9e2:	f898 1000 	ldrb.w	r1, [r8]
 800c9e6:	4829      	ldr	r0, [pc, #164]	; (800ca8c <_vfiprintf_r+0x220>)
 800c9e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9ec:	2206      	movs	r2, #6
 800c9ee:	f108 0701 	add.w	r7, r8, #1
 800c9f2:	f7f3 fc05 	bl	8000200 <memchr>
 800c9f6:	2800      	cmp	r0, #0
 800c9f8:	d034      	beq.n	800ca64 <_vfiprintf_r+0x1f8>
 800c9fa:	4b25      	ldr	r3, [pc, #148]	; (800ca90 <_vfiprintf_r+0x224>)
 800c9fc:	bb03      	cbnz	r3, 800ca40 <_vfiprintf_r+0x1d4>
 800c9fe:	9b03      	ldr	r3, [sp, #12]
 800ca00:	3307      	adds	r3, #7
 800ca02:	f023 0307 	bic.w	r3, r3, #7
 800ca06:	3308      	adds	r3, #8
 800ca08:	9303      	str	r3, [sp, #12]
 800ca0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca0c:	444b      	add	r3, r9
 800ca0e:	9309      	str	r3, [sp, #36]	; 0x24
 800ca10:	e74c      	b.n	800c8ac <_vfiprintf_r+0x40>
 800ca12:	fb00 3202 	mla	r2, r0, r2, r3
 800ca16:	2101      	movs	r1, #1
 800ca18:	e786      	b.n	800c928 <_vfiprintf_r+0xbc>
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	9305      	str	r3, [sp, #20]
 800ca1e:	4618      	mov	r0, r3
 800ca20:	250a      	movs	r5, #10
 800ca22:	4688      	mov	r8, r1
 800ca24:	3101      	adds	r1, #1
 800ca26:	f898 2000 	ldrb.w	r2, [r8]
 800ca2a:	3a30      	subs	r2, #48	; 0x30
 800ca2c:	2a09      	cmp	r2, #9
 800ca2e:	d903      	bls.n	800ca38 <_vfiprintf_r+0x1cc>
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d0c5      	beq.n	800c9c0 <_vfiprintf_r+0x154>
 800ca34:	9005      	str	r0, [sp, #20]
 800ca36:	e7c3      	b.n	800c9c0 <_vfiprintf_r+0x154>
 800ca38:	fb05 2000 	mla	r0, r5, r0, r2
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	e7f0      	b.n	800ca22 <_vfiprintf_r+0x1b6>
 800ca40:	ab03      	add	r3, sp, #12
 800ca42:	9300      	str	r3, [sp, #0]
 800ca44:	4622      	mov	r2, r4
 800ca46:	4b13      	ldr	r3, [pc, #76]	; (800ca94 <_vfiprintf_r+0x228>)
 800ca48:	a904      	add	r1, sp, #16
 800ca4a:	4630      	mov	r0, r6
 800ca4c:	f3af 8000 	nop.w
 800ca50:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ca54:	4681      	mov	r9, r0
 800ca56:	d1d8      	bne.n	800ca0a <_vfiprintf_r+0x19e>
 800ca58:	89a3      	ldrh	r3, [r4, #12]
 800ca5a:	065b      	lsls	r3, r3, #25
 800ca5c:	f53f af7d 	bmi.w	800c95a <_vfiprintf_r+0xee>
 800ca60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca62:	e77c      	b.n	800c95e <_vfiprintf_r+0xf2>
 800ca64:	ab03      	add	r3, sp, #12
 800ca66:	9300      	str	r3, [sp, #0]
 800ca68:	4622      	mov	r2, r4
 800ca6a:	4b0a      	ldr	r3, [pc, #40]	; (800ca94 <_vfiprintf_r+0x228>)
 800ca6c:	a904      	add	r1, sp, #16
 800ca6e:	4630      	mov	r0, r6
 800ca70:	f000 f888 	bl	800cb84 <_printf_i>
 800ca74:	e7ec      	b.n	800ca50 <_vfiprintf_r+0x1e4>
 800ca76:	bf00      	nop
 800ca78:	0800d9c0 	.word	0x0800d9c0
 800ca7c:	0800da00 	.word	0x0800da00
 800ca80:	0800d9e0 	.word	0x0800d9e0
 800ca84:	0800d9a0 	.word	0x0800d9a0
 800ca88:	0800da06 	.word	0x0800da06
 800ca8c:	0800da0a 	.word	0x0800da0a
 800ca90:	00000000 	.word	0x00000000
 800ca94:	0800c849 	.word	0x0800c849

0800ca98 <_printf_common>:
 800ca98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca9c:	4691      	mov	r9, r2
 800ca9e:	461f      	mov	r7, r3
 800caa0:	688a      	ldr	r2, [r1, #8]
 800caa2:	690b      	ldr	r3, [r1, #16]
 800caa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800caa8:	4293      	cmp	r3, r2
 800caaa:	bfb8      	it	lt
 800caac:	4613      	movlt	r3, r2
 800caae:	f8c9 3000 	str.w	r3, [r9]
 800cab2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cab6:	4606      	mov	r6, r0
 800cab8:	460c      	mov	r4, r1
 800caba:	b112      	cbz	r2, 800cac2 <_printf_common+0x2a>
 800cabc:	3301      	adds	r3, #1
 800cabe:	f8c9 3000 	str.w	r3, [r9]
 800cac2:	6823      	ldr	r3, [r4, #0]
 800cac4:	0699      	lsls	r1, r3, #26
 800cac6:	bf42      	ittt	mi
 800cac8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cacc:	3302      	addmi	r3, #2
 800cace:	f8c9 3000 	strmi.w	r3, [r9]
 800cad2:	6825      	ldr	r5, [r4, #0]
 800cad4:	f015 0506 	ands.w	r5, r5, #6
 800cad8:	d107      	bne.n	800caea <_printf_common+0x52>
 800cada:	f104 0a19 	add.w	sl, r4, #25
 800cade:	68e3      	ldr	r3, [r4, #12]
 800cae0:	f8d9 2000 	ldr.w	r2, [r9]
 800cae4:	1a9b      	subs	r3, r3, r2
 800cae6:	429d      	cmp	r5, r3
 800cae8:	db29      	blt.n	800cb3e <_printf_common+0xa6>
 800caea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800caee:	6822      	ldr	r2, [r4, #0]
 800caf0:	3300      	adds	r3, #0
 800caf2:	bf18      	it	ne
 800caf4:	2301      	movne	r3, #1
 800caf6:	0692      	lsls	r2, r2, #26
 800caf8:	d42e      	bmi.n	800cb58 <_printf_common+0xc0>
 800cafa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cafe:	4639      	mov	r1, r7
 800cb00:	4630      	mov	r0, r6
 800cb02:	47c0      	blx	r8
 800cb04:	3001      	adds	r0, #1
 800cb06:	d021      	beq.n	800cb4c <_printf_common+0xb4>
 800cb08:	6823      	ldr	r3, [r4, #0]
 800cb0a:	68e5      	ldr	r5, [r4, #12]
 800cb0c:	f8d9 2000 	ldr.w	r2, [r9]
 800cb10:	f003 0306 	and.w	r3, r3, #6
 800cb14:	2b04      	cmp	r3, #4
 800cb16:	bf08      	it	eq
 800cb18:	1aad      	subeq	r5, r5, r2
 800cb1a:	68a3      	ldr	r3, [r4, #8]
 800cb1c:	6922      	ldr	r2, [r4, #16]
 800cb1e:	bf0c      	ite	eq
 800cb20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb24:	2500      	movne	r5, #0
 800cb26:	4293      	cmp	r3, r2
 800cb28:	bfc4      	itt	gt
 800cb2a:	1a9b      	subgt	r3, r3, r2
 800cb2c:	18ed      	addgt	r5, r5, r3
 800cb2e:	f04f 0900 	mov.w	r9, #0
 800cb32:	341a      	adds	r4, #26
 800cb34:	454d      	cmp	r5, r9
 800cb36:	d11b      	bne.n	800cb70 <_printf_common+0xd8>
 800cb38:	2000      	movs	r0, #0
 800cb3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb3e:	2301      	movs	r3, #1
 800cb40:	4652      	mov	r2, sl
 800cb42:	4639      	mov	r1, r7
 800cb44:	4630      	mov	r0, r6
 800cb46:	47c0      	blx	r8
 800cb48:	3001      	adds	r0, #1
 800cb4a:	d103      	bne.n	800cb54 <_printf_common+0xbc>
 800cb4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb54:	3501      	adds	r5, #1
 800cb56:	e7c2      	b.n	800cade <_printf_common+0x46>
 800cb58:	18e1      	adds	r1, r4, r3
 800cb5a:	1c5a      	adds	r2, r3, #1
 800cb5c:	2030      	movs	r0, #48	; 0x30
 800cb5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cb62:	4422      	add	r2, r4
 800cb64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cb68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cb6c:	3302      	adds	r3, #2
 800cb6e:	e7c4      	b.n	800cafa <_printf_common+0x62>
 800cb70:	2301      	movs	r3, #1
 800cb72:	4622      	mov	r2, r4
 800cb74:	4639      	mov	r1, r7
 800cb76:	4630      	mov	r0, r6
 800cb78:	47c0      	blx	r8
 800cb7a:	3001      	adds	r0, #1
 800cb7c:	d0e6      	beq.n	800cb4c <_printf_common+0xb4>
 800cb7e:	f109 0901 	add.w	r9, r9, #1
 800cb82:	e7d7      	b.n	800cb34 <_printf_common+0x9c>

0800cb84 <_printf_i>:
 800cb84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb88:	4617      	mov	r7, r2
 800cb8a:	7e0a      	ldrb	r2, [r1, #24]
 800cb8c:	b085      	sub	sp, #20
 800cb8e:	2a6e      	cmp	r2, #110	; 0x6e
 800cb90:	4698      	mov	r8, r3
 800cb92:	4606      	mov	r6, r0
 800cb94:	460c      	mov	r4, r1
 800cb96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb98:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800cb9c:	f000 80bc 	beq.w	800cd18 <_printf_i+0x194>
 800cba0:	d81a      	bhi.n	800cbd8 <_printf_i+0x54>
 800cba2:	2a63      	cmp	r2, #99	; 0x63
 800cba4:	d02e      	beq.n	800cc04 <_printf_i+0x80>
 800cba6:	d80a      	bhi.n	800cbbe <_printf_i+0x3a>
 800cba8:	2a00      	cmp	r2, #0
 800cbaa:	f000 80c8 	beq.w	800cd3e <_printf_i+0x1ba>
 800cbae:	2a58      	cmp	r2, #88	; 0x58
 800cbb0:	f000 808a 	beq.w	800ccc8 <_printf_i+0x144>
 800cbb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cbb8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800cbbc:	e02a      	b.n	800cc14 <_printf_i+0x90>
 800cbbe:	2a64      	cmp	r2, #100	; 0x64
 800cbc0:	d001      	beq.n	800cbc6 <_printf_i+0x42>
 800cbc2:	2a69      	cmp	r2, #105	; 0x69
 800cbc4:	d1f6      	bne.n	800cbb4 <_printf_i+0x30>
 800cbc6:	6821      	ldr	r1, [r4, #0]
 800cbc8:	681a      	ldr	r2, [r3, #0]
 800cbca:	f011 0f80 	tst.w	r1, #128	; 0x80
 800cbce:	d023      	beq.n	800cc18 <_printf_i+0x94>
 800cbd0:	1d11      	adds	r1, r2, #4
 800cbd2:	6019      	str	r1, [r3, #0]
 800cbd4:	6813      	ldr	r3, [r2, #0]
 800cbd6:	e027      	b.n	800cc28 <_printf_i+0xa4>
 800cbd8:	2a73      	cmp	r2, #115	; 0x73
 800cbda:	f000 80b4 	beq.w	800cd46 <_printf_i+0x1c2>
 800cbde:	d808      	bhi.n	800cbf2 <_printf_i+0x6e>
 800cbe0:	2a6f      	cmp	r2, #111	; 0x6f
 800cbe2:	d02a      	beq.n	800cc3a <_printf_i+0xb6>
 800cbe4:	2a70      	cmp	r2, #112	; 0x70
 800cbe6:	d1e5      	bne.n	800cbb4 <_printf_i+0x30>
 800cbe8:	680a      	ldr	r2, [r1, #0]
 800cbea:	f042 0220 	orr.w	r2, r2, #32
 800cbee:	600a      	str	r2, [r1, #0]
 800cbf0:	e003      	b.n	800cbfa <_printf_i+0x76>
 800cbf2:	2a75      	cmp	r2, #117	; 0x75
 800cbf4:	d021      	beq.n	800cc3a <_printf_i+0xb6>
 800cbf6:	2a78      	cmp	r2, #120	; 0x78
 800cbf8:	d1dc      	bne.n	800cbb4 <_printf_i+0x30>
 800cbfa:	2278      	movs	r2, #120	; 0x78
 800cbfc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800cc00:	496e      	ldr	r1, [pc, #440]	; (800cdbc <_printf_i+0x238>)
 800cc02:	e064      	b.n	800ccce <_printf_i+0x14a>
 800cc04:	681a      	ldr	r2, [r3, #0]
 800cc06:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800cc0a:	1d11      	adds	r1, r2, #4
 800cc0c:	6019      	str	r1, [r3, #0]
 800cc0e:	6813      	ldr	r3, [r2, #0]
 800cc10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc14:	2301      	movs	r3, #1
 800cc16:	e0a3      	b.n	800cd60 <_printf_i+0x1dc>
 800cc18:	f011 0f40 	tst.w	r1, #64	; 0x40
 800cc1c:	f102 0104 	add.w	r1, r2, #4
 800cc20:	6019      	str	r1, [r3, #0]
 800cc22:	d0d7      	beq.n	800cbd4 <_printf_i+0x50>
 800cc24:	f9b2 3000 	ldrsh.w	r3, [r2]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	da03      	bge.n	800cc34 <_printf_i+0xb0>
 800cc2c:	222d      	movs	r2, #45	; 0x2d
 800cc2e:	425b      	negs	r3, r3
 800cc30:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800cc34:	4962      	ldr	r1, [pc, #392]	; (800cdc0 <_printf_i+0x23c>)
 800cc36:	220a      	movs	r2, #10
 800cc38:	e017      	b.n	800cc6a <_printf_i+0xe6>
 800cc3a:	6820      	ldr	r0, [r4, #0]
 800cc3c:	6819      	ldr	r1, [r3, #0]
 800cc3e:	f010 0f80 	tst.w	r0, #128	; 0x80
 800cc42:	d003      	beq.n	800cc4c <_printf_i+0xc8>
 800cc44:	1d08      	adds	r0, r1, #4
 800cc46:	6018      	str	r0, [r3, #0]
 800cc48:	680b      	ldr	r3, [r1, #0]
 800cc4a:	e006      	b.n	800cc5a <_printf_i+0xd6>
 800cc4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cc50:	f101 0004 	add.w	r0, r1, #4
 800cc54:	6018      	str	r0, [r3, #0]
 800cc56:	d0f7      	beq.n	800cc48 <_printf_i+0xc4>
 800cc58:	880b      	ldrh	r3, [r1, #0]
 800cc5a:	4959      	ldr	r1, [pc, #356]	; (800cdc0 <_printf_i+0x23c>)
 800cc5c:	2a6f      	cmp	r2, #111	; 0x6f
 800cc5e:	bf14      	ite	ne
 800cc60:	220a      	movne	r2, #10
 800cc62:	2208      	moveq	r2, #8
 800cc64:	2000      	movs	r0, #0
 800cc66:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800cc6a:	6865      	ldr	r5, [r4, #4]
 800cc6c:	60a5      	str	r5, [r4, #8]
 800cc6e:	2d00      	cmp	r5, #0
 800cc70:	f2c0 809c 	blt.w	800cdac <_printf_i+0x228>
 800cc74:	6820      	ldr	r0, [r4, #0]
 800cc76:	f020 0004 	bic.w	r0, r0, #4
 800cc7a:	6020      	str	r0, [r4, #0]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d13f      	bne.n	800cd00 <_printf_i+0x17c>
 800cc80:	2d00      	cmp	r5, #0
 800cc82:	f040 8095 	bne.w	800cdb0 <_printf_i+0x22c>
 800cc86:	4675      	mov	r5, lr
 800cc88:	2a08      	cmp	r2, #8
 800cc8a:	d10b      	bne.n	800cca4 <_printf_i+0x120>
 800cc8c:	6823      	ldr	r3, [r4, #0]
 800cc8e:	07da      	lsls	r2, r3, #31
 800cc90:	d508      	bpl.n	800cca4 <_printf_i+0x120>
 800cc92:	6923      	ldr	r3, [r4, #16]
 800cc94:	6862      	ldr	r2, [r4, #4]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	bfde      	ittt	le
 800cc9a:	2330      	movle	r3, #48	; 0x30
 800cc9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cca0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cca4:	ebae 0305 	sub.w	r3, lr, r5
 800cca8:	6123      	str	r3, [r4, #16]
 800ccaa:	f8cd 8000 	str.w	r8, [sp]
 800ccae:	463b      	mov	r3, r7
 800ccb0:	aa03      	add	r2, sp, #12
 800ccb2:	4621      	mov	r1, r4
 800ccb4:	4630      	mov	r0, r6
 800ccb6:	f7ff feef 	bl	800ca98 <_printf_common>
 800ccba:	3001      	adds	r0, #1
 800ccbc:	d155      	bne.n	800cd6a <_printf_i+0x1e6>
 800ccbe:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc2:	b005      	add	sp, #20
 800ccc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccc8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800cccc:	493c      	ldr	r1, [pc, #240]	; (800cdc0 <_printf_i+0x23c>)
 800ccce:	6822      	ldr	r2, [r4, #0]
 800ccd0:	6818      	ldr	r0, [r3, #0]
 800ccd2:	f012 0f80 	tst.w	r2, #128	; 0x80
 800ccd6:	f100 0504 	add.w	r5, r0, #4
 800ccda:	601d      	str	r5, [r3, #0]
 800ccdc:	d001      	beq.n	800cce2 <_printf_i+0x15e>
 800ccde:	6803      	ldr	r3, [r0, #0]
 800cce0:	e002      	b.n	800cce8 <_printf_i+0x164>
 800cce2:	0655      	lsls	r5, r2, #25
 800cce4:	d5fb      	bpl.n	800ccde <_printf_i+0x15a>
 800cce6:	8803      	ldrh	r3, [r0, #0]
 800cce8:	07d0      	lsls	r0, r2, #31
 800ccea:	bf44      	itt	mi
 800ccec:	f042 0220 	orrmi.w	r2, r2, #32
 800ccf0:	6022      	strmi	r2, [r4, #0]
 800ccf2:	b91b      	cbnz	r3, 800ccfc <_printf_i+0x178>
 800ccf4:	6822      	ldr	r2, [r4, #0]
 800ccf6:	f022 0220 	bic.w	r2, r2, #32
 800ccfa:	6022      	str	r2, [r4, #0]
 800ccfc:	2210      	movs	r2, #16
 800ccfe:	e7b1      	b.n	800cc64 <_printf_i+0xe0>
 800cd00:	4675      	mov	r5, lr
 800cd02:	fbb3 f0f2 	udiv	r0, r3, r2
 800cd06:	fb02 3310 	mls	r3, r2, r0, r3
 800cd0a:	5ccb      	ldrb	r3, [r1, r3]
 800cd0c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cd10:	4603      	mov	r3, r0
 800cd12:	2800      	cmp	r0, #0
 800cd14:	d1f5      	bne.n	800cd02 <_printf_i+0x17e>
 800cd16:	e7b7      	b.n	800cc88 <_printf_i+0x104>
 800cd18:	6808      	ldr	r0, [r1, #0]
 800cd1a:	681a      	ldr	r2, [r3, #0]
 800cd1c:	6949      	ldr	r1, [r1, #20]
 800cd1e:	f010 0f80 	tst.w	r0, #128	; 0x80
 800cd22:	d004      	beq.n	800cd2e <_printf_i+0x1aa>
 800cd24:	1d10      	adds	r0, r2, #4
 800cd26:	6018      	str	r0, [r3, #0]
 800cd28:	6813      	ldr	r3, [r2, #0]
 800cd2a:	6019      	str	r1, [r3, #0]
 800cd2c:	e007      	b.n	800cd3e <_printf_i+0x1ba>
 800cd2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cd32:	f102 0004 	add.w	r0, r2, #4
 800cd36:	6018      	str	r0, [r3, #0]
 800cd38:	6813      	ldr	r3, [r2, #0]
 800cd3a:	d0f6      	beq.n	800cd2a <_printf_i+0x1a6>
 800cd3c:	8019      	strh	r1, [r3, #0]
 800cd3e:	2300      	movs	r3, #0
 800cd40:	6123      	str	r3, [r4, #16]
 800cd42:	4675      	mov	r5, lr
 800cd44:	e7b1      	b.n	800ccaa <_printf_i+0x126>
 800cd46:	681a      	ldr	r2, [r3, #0]
 800cd48:	1d11      	adds	r1, r2, #4
 800cd4a:	6019      	str	r1, [r3, #0]
 800cd4c:	6815      	ldr	r5, [r2, #0]
 800cd4e:	6862      	ldr	r2, [r4, #4]
 800cd50:	2100      	movs	r1, #0
 800cd52:	4628      	mov	r0, r5
 800cd54:	f7f3 fa54 	bl	8000200 <memchr>
 800cd58:	b108      	cbz	r0, 800cd5e <_printf_i+0x1da>
 800cd5a:	1b40      	subs	r0, r0, r5
 800cd5c:	6060      	str	r0, [r4, #4]
 800cd5e:	6863      	ldr	r3, [r4, #4]
 800cd60:	6123      	str	r3, [r4, #16]
 800cd62:	2300      	movs	r3, #0
 800cd64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd68:	e79f      	b.n	800ccaa <_printf_i+0x126>
 800cd6a:	6923      	ldr	r3, [r4, #16]
 800cd6c:	462a      	mov	r2, r5
 800cd6e:	4639      	mov	r1, r7
 800cd70:	4630      	mov	r0, r6
 800cd72:	47c0      	blx	r8
 800cd74:	3001      	adds	r0, #1
 800cd76:	d0a2      	beq.n	800ccbe <_printf_i+0x13a>
 800cd78:	6823      	ldr	r3, [r4, #0]
 800cd7a:	079b      	lsls	r3, r3, #30
 800cd7c:	d507      	bpl.n	800cd8e <_printf_i+0x20a>
 800cd7e:	2500      	movs	r5, #0
 800cd80:	f104 0919 	add.w	r9, r4, #25
 800cd84:	68e3      	ldr	r3, [r4, #12]
 800cd86:	9a03      	ldr	r2, [sp, #12]
 800cd88:	1a9b      	subs	r3, r3, r2
 800cd8a:	429d      	cmp	r5, r3
 800cd8c:	db05      	blt.n	800cd9a <_printf_i+0x216>
 800cd8e:	68e0      	ldr	r0, [r4, #12]
 800cd90:	9b03      	ldr	r3, [sp, #12]
 800cd92:	4298      	cmp	r0, r3
 800cd94:	bfb8      	it	lt
 800cd96:	4618      	movlt	r0, r3
 800cd98:	e793      	b.n	800ccc2 <_printf_i+0x13e>
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	464a      	mov	r2, r9
 800cd9e:	4639      	mov	r1, r7
 800cda0:	4630      	mov	r0, r6
 800cda2:	47c0      	blx	r8
 800cda4:	3001      	adds	r0, #1
 800cda6:	d08a      	beq.n	800ccbe <_printf_i+0x13a>
 800cda8:	3501      	adds	r5, #1
 800cdaa:	e7eb      	b.n	800cd84 <_printf_i+0x200>
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d1a7      	bne.n	800cd00 <_printf_i+0x17c>
 800cdb0:	780b      	ldrb	r3, [r1, #0]
 800cdb2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cdb6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cdba:	e765      	b.n	800cc88 <_printf_i+0x104>
 800cdbc:	0800da22 	.word	0x0800da22
 800cdc0:	0800da11 	.word	0x0800da11

0800cdc4 <_sbrk_r>:
 800cdc4:	b538      	push	{r3, r4, r5, lr}
 800cdc6:	4c06      	ldr	r4, [pc, #24]	; (800cde0 <_sbrk_r+0x1c>)
 800cdc8:	2300      	movs	r3, #0
 800cdca:	4605      	mov	r5, r0
 800cdcc:	4608      	mov	r0, r1
 800cdce:	6023      	str	r3, [r4, #0]
 800cdd0:	f000 f8de 	bl	800cf90 <_sbrk>
 800cdd4:	1c43      	adds	r3, r0, #1
 800cdd6:	d102      	bne.n	800cdde <_sbrk_r+0x1a>
 800cdd8:	6823      	ldr	r3, [r4, #0]
 800cdda:	b103      	cbz	r3, 800cdde <_sbrk_r+0x1a>
 800cddc:	602b      	str	r3, [r5, #0]
 800cdde:	bd38      	pop	{r3, r4, r5, pc}
 800cde0:	2000adb0 	.word	0x2000adb0

0800cde4 <__sread>:
 800cde4:	b510      	push	{r4, lr}
 800cde6:	460c      	mov	r4, r1
 800cde8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdec:	f000 f896 	bl	800cf1c <_read_r>
 800cdf0:	2800      	cmp	r0, #0
 800cdf2:	bfab      	itete	ge
 800cdf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cdf6:	89a3      	ldrhlt	r3, [r4, #12]
 800cdf8:	181b      	addge	r3, r3, r0
 800cdfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cdfe:	bfac      	ite	ge
 800ce00:	6563      	strge	r3, [r4, #84]	; 0x54
 800ce02:	81a3      	strhlt	r3, [r4, #12]
 800ce04:	bd10      	pop	{r4, pc}

0800ce06 <__swrite>:
 800ce06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce0a:	461f      	mov	r7, r3
 800ce0c:	898b      	ldrh	r3, [r1, #12]
 800ce0e:	05db      	lsls	r3, r3, #23
 800ce10:	4605      	mov	r5, r0
 800ce12:	460c      	mov	r4, r1
 800ce14:	4616      	mov	r6, r2
 800ce16:	d505      	bpl.n	800ce24 <__swrite+0x1e>
 800ce18:	2302      	movs	r3, #2
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce20:	f000 f868 	bl	800cef4 <_lseek_r>
 800ce24:	89a3      	ldrh	r3, [r4, #12]
 800ce26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce2e:	81a3      	strh	r3, [r4, #12]
 800ce30:	4632      	mov	r2, r6
 800ce32:	463b      	mov	r3, r7
 800ce34:	4628      	mov	r0, r5
 800ce36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce3a:	f000 b817 	b.w	800ce6c <_write_r>

0800ce3e <__sseek>:
 800ce3e:	b510      	push	{r4, lr}
 800ce40:	460c      	mov	r4, r1
 800ce42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce46:	f000 f855 	bl	800cef4 <_lseek_r>
 800ce4a:	1c43      	adds	r3, r0, #1
 800ce4c:	89a3      	ldrh	r3, [r4, #12]
 800ce4e:	bf15      	itete	ne
 800ce50:	6560      	strne	r0, [r4, #84]	; 0x54
 800ce52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ce56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ce5a:	81a3      	strheq	r3, [r4, #12]
 800ce5c:	bf18      	it	ne
 800ce5e:	81a3      	strhne	r3, [r4, #12]
 800ce60:	bd10      	pop	{r4, pc}

0800ce62 <__sclose>:
 800ce62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce66:	f000 b813 	b.w	800ce90 <_close_r>
	...

0800ce6c <_write_r>:
 800ce6c:	b538      	push	{r3, r4, r5, lr}
 800ce6e:	4c07      	ldr	r4, [pc, #28]	; (800ce8c <_write_r+0x20>)
 800ce70:	4605      	mov	r5, r0
 800ce72:	4608      	mov	r0, r1
 800ce74:	4611      	mov	r1, r2
 800ce76:	2200      	movs	r2, #0
 800ce78:	6022      	str	r2, [r4, #0]
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	f000 f896 	bl	800cfac <_write>
 800ce80:	1c43      	adds	r3, r0, #1
 800ce82:	d102      	bne.n	800ce8a <_write_r+0x1e>
 800ce84:	6823      	ldr	r3, [r4, #0]
 800ce86:	b103      	cbz	r3, 800ce8a <_write_r+0x1e>
 800ce88:	602b      	str	r3, [r5, #0]
 800ce8a:	bd38      	pop	{r3, r4, r5, pc}
 800ce8c:	2000adb0 	.word	0x2000adb0

0800ce90 <_close_r>:
 800ce90:	b538      	push	{r3, r4, r5, lr}
 800ce92:	4c06      	ldr	r4, [pc, #24]	; (800ceac <_close_r+0x1c>)
 800ce94:	2300      	movs	r3, #0
 800ce96:	4605      	mov	r5, r0
 800ce98:	4608      	mov	r0, r1
 800ce9a:	6023      	str	r3, [r4, #0]
 800ce9c:	f000 f850 	bl	800cf40 <_close>
 800cea0:	1c43      	adds	r3, r0, #1
 800cea2:	d102      	bne.n	800ceaa <_close_r+0x1a>
 800cea4:	6823      	ldr	r3, [r4, #0]
 800cea6:	b103      	cbz	r3, 800ceaa <_close_r+0x1a>
 800cea8:	602b      	str	r3, [r5, #0]
 800ceaa:	bd38      	pop	{r3, r4, r5, pc}
 800ceac:	2000adb0 	.word	0x2000adb0

0800ceb0 <_fstat_r>:
 800ceb0:	b538      	push	{r3, r4, r5, lr}
 800ceb2:	4c07      	ldr	r4, [pc, #28]	; (800ced0 <_fstat_r+0x20>)
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	4605      	mov	r5, r0
 800ceb8:	4608      	mov	r0, r1
 800ceba:	4611      	mov	r1, r2
 800cebc:	6023      	str	r3, [r4, #0]
 800cebe:	f000 f847 	bl	800cf50 <_fstat>
 800cec2:	1c43      	adds	r3, r0, #1
 800cec4:	d102      	bne.n	800cecc <_fstat_r+0x1c>
 800cec6:	6823      	ldr	r3, [r4, #0]
 800cec8:	b103      	cbz	r3, 800cecc <_fstat_r+0x1c>
 800ceca:	602b      	str	r3, [r5, #0]
 800cecc:	bd38      	pop	{r3, r4, r5, pc}
 800cece:	bf00      	nop
 800ced0:	2000adb0 	.word	0x2000adb0

0800ced4 <_isatty_r>:
 800ced4:	b538      	push	{r3, r4, r5, lr}
 800ced6:	4c06      	ldr	r4, [pc, #24]	; (800cef0 <_isatty_r+0x1c>)
 800ced8:	2300      	movs	r3, #0
 800ceda:	4605      	mov	r5, r0
 800cedc:	4608      	mov	r0, r1
 800cede:	6023      	str	r3, [r4, #0]
 800cee0:	f000 f83e 	bl	800cf60 <_isatty>
 800cee4:	1c43      	adds	r3, r0, #1
 800cee6:	d102      	bne.n	800ceee <_isatty_r+0x1a>
 800cee8:	6823      	ldr	r3, [r4, #0]
 800ceea:	b103      	cbz	r3, 800ceee <_isatty_r+0x1a>
 800ceec:	602b      	str	r3, [r5, #0]
 800ceee:	bd38      	pop	{r3, r4, r5, pc}
 800cef0:	2000adb0 	.word	0x2000adb0

0800cef4 <_lseek_r>:
 800cef4:	b538      	push	{r3, r4, r5, lr}
 800cef6:	4c07      	ldr	r4, [pc, #28]	; (800cf14 <_lseek_r+0x20>)
 800cef8:	4605      	mov	r5, r0
 800cefa:	4608      	mov	r0, r1
 800cefc:	4611      	mov	r1, r2
 800cefe:	2200      	movs	r2, #0
 800cf00:	6022      	str	r2, [r4, #0]
 800cf02:	461a      	mov	r2, r3
 800cf04:	f000 f834 	bl	800cf70 <_lseek>
 800cf08:	1c43      	adds	r3, r0, #1
 800cf0a:	d102      	bne.n	800cf12 <_lseek_r+0x1e>
 800cf0c:	6823      	ldr	r3, [r4, #0]
 800cf0e:	b103      	cbz	r3, 800cf12 <_lseek_r+0x1e>
 800cf10:	602b      	str	r3, [r5, #0]
 800cf12:	bd38      	pop	{r3, r4, r5, pc}
 800cf14:	2000adb0 	.word	0x2000adb0

0800cf18 <__malloc_lock>:
 800cf18:	4770      	bx	lr

0800cf1a <__malloc_unlock>:
 800cf1a:	4770      	bx	lr

0800cf1c <_read_r>:
 800cf1c:	b538      	push	{r3, r4, r5, lr}
 800cf1e:	4c07      	ldr	r4, [pc, #28]	; (800cf3c <_read_r+0x20>)
 800cf20:	4605      	mov	r5, r0
 800cf22:	4608      	mov	r0, r1
 800cf24:	4611      	mov	r1, r2
 800cf26:	2200      	movs	r2, #0
 800cf28:	6022      	str	r2, [r4, #0]
 800cf2a:	461a      	mov	r2, r3
 800cf2c:	f000 f828 	bl	800cf80 <_read>
 800cf30:	1c43      	adds	r3, r0, #1
 800cf32:	d102      	bne.n	800cf3a <_read_r+0x1e>
 800cf34:	6823      	ldr	r3, [r4, #0]
 800cf36:	b103      	cbz	r3, 800cf3a <_read_r+0x1e>
 800cf38:	602b      	str	r3, [r5, #0]
 800cf3a:	bd38      	pop	{r3, r4, r5, pc}
 800cf3c:	2000adb0 	.word	0x2000adb0

0800cf40 <_close>:
 800cf40:	4b02      	ldr	r3, [pc, #8]	; (800cf4c <_close+0xc>)
 800cf42:	2258      	movs	r2, #88	; 0x58
 800cf44:	601a      	str	r2, [r3, #0]
 800cf46:	f04f 30ff 	mov.w	r0, #4294967295
 800cf4a:	4770      	bx	lr
 800cf4c:	2000adb0 	.word	0x2000adb0

0800cf50 <_fstat>:
 800cf50:	4b02      	ldr	r3, [pc, #8]	; (800cf5c <_fstat+0xc>)
 800cf52:	2258      	movs	r2, #88	; 0x58
 800cf54:	601a      	str	r2, [r3, #0]
 800cf56:	f04f 30ff 	mov.w	r0, #4294967295
 800cf5a:	4770      	bx	lr
 800cf5c:	2000adb0 	.word	0x2000adb0

0800cf60 <_isatty>:
 800cf60:	4b02      	ldr	r3, [pc, #8]	; (800cf6c <_isatty+0xc>)
 800cf62:	2258      	movs	r2, #88	; 0x58
 800cf64:	601a      	str	r2, [r3, #0]
 800cf66:	2000      	movs	r0, #0
 800cf68:	4770      	bx	lr
 800cf6a:	bf00      	nop
 800cf6c:	2000adb0 	.word	0x2000adb0

0800cf70 <_lseek>:
 800cf70:	4b02      	ldr	r3, [pc, #8]	; (800cf7c <_lseek+0xc>)
 800cf72:	2258      	movs	r2, #88	; 0x58
 800cf74:	601a      	str	r2, [r3, #0]
 800cf76:	f04f 30ff 	mov.w	r0, #4294967295
 800cf7a:	4770      	bx	lr
 800cf7c:	2000adb0 	.word	0x2000adb0

0800cf80 <_read>:
 800cf80:	4b02      	ldr	r3, [pc, #8]	; (800cf8c <_read+0xc>)
 800cf82:	2258      	movs	r2, #88	; 0x58
 800cf84:	601a      	str	r2, [r3, #0]
 800cf86:	f04f 30ff 	mov.w	r0, #4294967295
 800cf8a:	4770      	bx	lr
 800cf8c:	2000adb0 	.word	0x2000adb0

0800cf90 <_sbrk>:
 800cf90:	4b04      	ldr	r3, [pc, #16]	; (800cfa4 <_sbrk+0x14>)
 800cf92:	6819      	ldr	r1, [r3, #0]
 800cf94:	4602      	mov	r2, r0
 800cf96:	b909      	cbnz	r1, 800cf9c <_sbrk+0xc>
 800cf98:	4903      	ldr	r1, [pc, #12]	; (800cfa8 <_sbrk+0x18>)
 800cf9a:	6019      	str	r1, [r3, #0]
 800cf9c:	6818      	ldr	r0, [r3, #0]
 800cf9e:	4402      	add	r2, r0
 800cfa0:	601a      	str	r2, [r3, #0]
 800cfa2:	4770      	bx	lr
 800cfa4:	20004010 	.word	0x20004010
 800cfa8:	2000adb4 	.word	0x2000adb4

0800cfac <_write>:
 800cfac:	4b02      	ldr	r3, [pc, #8]	; (800cfb8 <_write+0xc>)
 800cfae:	2258      	movs	r2, #88	; 0x58
 800cfb0:	601a      	str	r2, [r3, #0]
 800cfb2:	f04f 30ff 	mov.w	r0, #4294967295
 800cfb6:	4770      	bx	lr
 800cfb8:	2000adb0 	.word	0x2000adb0

0800cfbc <_init>:
 800cfbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfbe:	bf00      	nop
 800cfc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfc2:	bc08      	pop	{r3}
 800cfc4:	469e      	mov	lr, r3
 800cfc6:	4770      	bx	lr

0800cfc8 <_fini>:
 800cfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfca:	bf00      	nop
 800cfcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfce:	bc08      	pop	{r3}
 800cfd0:	469e      	mov	lr, r3
 800cfd2:	4770      	bx	lr
